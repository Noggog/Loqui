/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Noggolloquy.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Noggolloquy;
using Noggog;
using Noggog.Notifying;
using Noggolloquy.Tests.Internals;
using Noggolloquy.Tests;
using System.ComponentModel;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Noggolloquy.Xml;

namespace Noggolloquy.Tests
{
    #region Class
    public partial class TestObject_HasBeenSet_RPC : ITestObject_HasBeenSet_RPC, INoggolloquyObjectSetter, INotifyPropertyChanged, IEquatable<TestObject_HasBeenSet_RPC>
    {
        INoggolloquyRegistration INoggolloquyObject.Registration => TestObject_HasBeenSet_RPC_Registration.Instance;
        public static TestObject_HasBeenSet_RPC_Registration Registration => TestObject_HasBeenSet_RPC_Registration.Instance;

        #region PropertyChangedHandler
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        public TestObject_HasBeenSet_RPC()
        {
            _BoolN = HasBeenSetItem.Factory<Boolean?>(
                onSet: (i) => this.OnPropertyChanged(nameof(BoolN)),
                markAsSet: false);
            _Bool = HasBeenSetItem.Factory<Boolean>(
                onSet: (i) => this.OnPropertyChanged(nameof(Bool)),
                markAsSet: false);
            _CharN = HasBeenSetItem.Factory<Char?>(
                onSet: (i) => this.OnPropertyChanged(nameof(CharN)),
                markAsSet: false);
            _Char = HasBeenSetItem.Factory<Char>(
                onSet: (i) => this.OnPropertyChanged(nameof(Char)),
                markAsSet: false);
            _DateTimeNull = HasBeenSetItem.Factory<DateTime?>(
                onSet: (i) => this.OnPropertyChanged(nameof(DateTimeNull)),
                markAsSet: false);
            _DateTime = HasBeenSetItem.Factory<DateTime>(
                onSet: (i) => this.OnPropertyChanged(nameof(DateTime)),
                markAsSet: false);
            _DoubleN = HasBeenSetItem.Factory<Double?>(
                onSet: (i) => this.OnPropertyChanged(nameof(DoubleN)),
                markAsSet: false);
            _DoubleN_Ranged = HasBeenSetItem.Factory<Double?>(
                onSet: (i) => this.OnPropertyChanged(nameof(DoubleN_Ranged)),
                markAsSet: false);
            _Double = HasBeenSetItem.Factory<Double>(
                onSet: (i) => this.OnPropertyChanged(nameof(Double)),
                markAsSet: false);
            _Double_Ranged = HasBeenSetItem.Factory<Double>(
                onSet: (i) => this.OnPropertyChanged(nameof(Double_Ranged)),
                markAsSet: false);
            _FloatN = HasBeenSetItem.Factory<Single?>(
                onSet: (i) => this.OnPropertyChanged(nameof(FloatN)),
                markAsSet: false);
            _FloatN_Ranged = HasBeenSetItem.Factory<Single?>(
                onSet: (i) => this.OnPropertyChanged(nameof(FloatN_Ranged)),
                markAsSet: false);
            _Float = HasBeenSetItem.Factory<Single>(
                onSet: (i) => this.OnPropertyChanged(nameof(Float)),
                markAsSet: false);
            _Float_Ranged = HasBeenSetItem.Factory<Single>(
                onSet: (i) => this.OnPropertyChanged(nameof(Float_Ranged)),
                markAsSet: false);
            _Int16N = HasBeenSetItem.Factory<Int16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int16N)),
                markAsSet: false);
            _Int16N_Ranged = HasBeenSetItem.Factory<Int16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int16N_Ranged)),
                markAsSet: false);
            _Int16 = HasBeenSetItem.Factory<Int16>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int16)),
                markAsSet: false);
            _Int16_Ranged = HasBeenSetItem.Factory<Int16>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int16_Ranged)),
                markAsSet: false);
            _Int32N = HasBeenSetItem.Factory<Int32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int32N)),
                markAsSet: false);
            _Int32N_Ranged = HasBeenSetItem.Factory<Int32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int32N_Ranged)),
                markAsSet: false);
            _Int32 = HasBeenSetItem.Factory<Int32>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int32)),
                markAsSet: false);
            _Int32_Ranged = HasBeenSetItem.Factory<Int32>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int32_Ranged)),
                markAsSet: false);
            _Int64N = HasBeenSetItem.Factory<Int64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int64N)),
                markAsSet: false);
            _Int64N_Ranged = HasBeenSetItem.Factory<Int64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int64N_Ranged)),
                markAsSet: false);
            _Int64 = HasBeenSetItem.Factory<Int64>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int64)),
                markAsSet: false);
            _Int64_Ranged = HasBeenSetItem.Factory<Int64>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int64_Ranged)),
                markAsSet: false);
            _Int8N = HasBeenSetItem.Factory<SByte?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int8N)),
                markAsSet: false);
            _Int8N_Ranged = HasBeenSetItem.Factory<SByte?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int8N_Ranged)),
                markAsSet: false);
            _Int8 = HasBeenSetItem.Factory<SByte>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int8)),
                markAsSet: false);
            _Int8_Ranged = HasBeenSetItem.Factory<SByte>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int8_Ranged)),
                markAsSet: false);
            _Unsafe = HasBeenSetItem.Factory<bool>(
                onSet: (i) => this.OnPropertyChanged(nameof(Unsafe)),
                markAsSet: false);
            _P2IntN = HasBeenSetItem.Factory<P2Int?>(
                onSet: (i) => this.OnPropertyChanged(nameof(P2IntN)),
                markAsSet: false);
            _P2Int = HasBeenSetItem.Factory<P2Int>(
                onSet: (i) => this.OnPropertyChanged(nameof(P2Int)),
                markAsSet: false);
            _P3DoubleN = HasBeenSetItem.Factory<P3Double?>(
                onSet: (i) => this.OnPropertyChanged(nameof(P3DoubleN)),
                markAsSet: false);
            _P3Double = HasBeenSetItem.Factory<P3Double>(
                onSet: (i) => this.OnPropertyChanged(nameof(P3Double)),
                markAsSet: false);
            _P3IntN = HasBeenSetItem.Factory<P3Int?>(
                onSet: (i) => this.OnPropertyChanged(nameof(P3IntN)),
                markAsSet: false);
            _P3Int = HasBeenSetItem.Factory<P3Int>(
                onSet: (i) => this.OnPropertyChanged(nameof(P3Int)),
                markAsSet: false);
            _PercentN = HasBeenSetItem.Factory<Percent?>(
                onSet: (i) => this.OnPropertyChanged(nameof(PercentN)),
                markAsSet: false);
            _Percent = HasBeenSetItem.Factory<Percent>(
                onSet: (i) => this.OnPropertyChanged(nameof(Percent)),
                markAsSet: false);
            _RangeIntN = HasBeenSetItem.Factory<RangeInt32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeIntN)),
                markAsSet: false);
            _RangeInt = HasBeenSetItem.Factory<RangeInt32>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeInt)),
                markAsSet: false);
            _String = HasBeenSetItem.Factory<String>(
                onSet: (i) => this.OnPropertyChanged(nameof(String)),
                markAsSet: false);
            _UDoubleN = HasBeenSetItem.Factory<UDouble?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UDoubleN)),
                markAsSet: false);
            _UDoubleN_Ranged = HasBeenSetItem.Factory<UDouble?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UDoubleN_Ranged)),
                markAsSet: false);
            _UDouble = HasBeenSetItem.Factory<UDouble>(
                onSet: (i) => this.OnPropertyChanged(nameof(UDouble)),
                markAsSet: false);
            _UDouble_Ranged = HasBeenSetItem.Factory<UDouble>(
                onSet: (i) => this.OnPropertyChanged(nameof(UDouble_Ranged)),
                markAsSet: false);
            _UInt16N = HasBeenSetItem.Factory<UInt16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt16N)),
                markAsSet: false);
            _UInt16N_Ranged = HasBeenSetItem.Factory<UInt16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt16N_Ranged)),
                markAsSet: false);
            _UInt16 = HasBeenSetItem.Factory<UInt16>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt16)),
                markAsSet: false);
            _UInt16_Ranged = HasBeenSetItem.Factory<UInt16>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt16_Ranged)),
                markAsSet: false);
            _UInt32N = HasBeenSetItem.Factory<UInt32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt32N)),
                markAsSet: false);
            _UInt32N_Ranged = HasBeenSetItem.Factory<UInt32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt32N_Ranged)),
                markAsSet: false);
            _UInt32 = HasBeenSetItem.Factory<UInt32>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt32)),
                markAsSet: false);
            _UInt32_Ranged = HasBeenSetItem.Factory<UInt32>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt32_Ranged)),
                markAsSet: false);
            _UInt64N = HasBeenSetItem.Factory<UInt64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt64N)),
                markAsSet: false);
            _UInt64N_Ranged = HasBeenSetItem.Factory<UInt64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt64N_Ranged)),
                markAsSet: false);
            _UInt64 = HasBeenSetItem.Factory<UInt64>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt64)),
                markAsSet: false);
            _UInt64_Ranged = HasBeenSetItem.Factory<UInt64>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt64_Ranged)),
                markAsSet: false);
            _UInt8N = HasBeenSetItem.Factory<Byte?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt8N)),
                markAsSet: false);
            _UInt8N_Ranged = HasBeenSetItem.Factory<Byte?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt8N_Ranged)),
                markAsSet: false);
            _UInt8 = HasBeenSetItem.Factory<Byte>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt8)),
                markAsSet: false);
            _UInt8_Ranged = HasBeenSetItem.Factory<Byte>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt8_Ranged)),
                markAsSet: false);
            _Enum = HasBeenSetItem.Factory<TestEnum>(
                onSet: (i) => this.OnPropertyChanged(nameof(Enum)),
                markAsSet: false);
            _WildCard = HasBeenSetItem.Factory<Object>(
                onSet: (i) => this.OnPropertyChanged(nameof(WildCard)),
                markAsSet: false);
            _Ref = HasBeenSetItem.Factory<ObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(Ref)),
                markAsSet: false);
            _Ref = HasBeenSetItem.Factory<ObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(Ref)),
                markAsSet: false);
            _Ref_NotNull = HasBeenSetItem.FactoryNoNull<ObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(Ref_NotNull)),
                markAsSet: false);
            _Ref_NotNull = HasBeenSetItem.FactoryNoNull<ObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(Ref_NotNull)),
                markAsSet: false);
            _Ref_Singleton = HasBeenSetItem.Factory<ObjectToRef>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(Ref_Singleton)),
                markAsSet: false);
            _Ref_Singleton = HasBeenSetItem.Factory<ObjectToRef>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(Ref_Singleton)),
                markAsSet: false);
            _RefGetter = HasBeenSetItem.Factory<IObjectToRefGetter>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter)),
                markAsSet: false);
            _RefGetter = HasBeenSetItem.Factory<IObjectToRefGetter>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter)),
                markAsSet: false);
            _RefGetter_NotNull = HasBeenSetItem.Factory<IObjectToRefGetter>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter_NotNull)),
                noNullFallback: () => new ObjectToRef(),
                markAsSet: false);
            _RefGetter_NotNull = HasBeenSetItem.Factory<IObjectToRefGetter>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter_NotNull)),
                noNullFallback: () => new ObjectToRef(),
                markAsSet: false);
            _RefGetter_Singleton = HasBeenSetItem.Factory<IObjectToRefGetter>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter_Singleton)),
                markAsSet: false);
            _RefGetter_Singleton = HasBeenSetItem.Factory<IObjectToRefGetter>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter_Singleton)),
                markAsSet: false);
            _RefSetter = HasBeenSetItem.Factory<IObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter)),
                markAsSet: false);
            _RefSetter = HasBeenSetItem.Factory<IObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter)),
                markAsSet: false);
            _RefSetter_NotNull = HasBeenSetItem.Factory<IObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter_NotNull)),
                noNullFallback: () => new ObjectToRef(),
                markAsSet: false);
            _RefSetter_NotNull = HasBeenSetItem.Factory<IObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter_NotNull)),
                noNullFallback: () => new ObjectToRef(),
                markAsSet: false);
            _RefSetter_Singleton = HasBeenSetItem.Factory<IObjectToRef>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter_Singleton)),
                markAsSet: false);
            _RefSetter_Singleton = HasBeenSetItem.Factory<IObjectToRef>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter_Singleton)),
                markAsSet: false);
            CustomCtor();
        }
        partial void CustomCtor();
        #region BoolN
        protected readonly IHasBeenSetItem<Boolean?> _BoolN;
        public IHasBeenSetItem<Boolean?> BoolN_Property => _BoolN;
        public Boolean? BoolN
        {
            get => this._BoolN.Item;
            set => this._BoolN.Set(value);
        }
        Boolean? ITestObject_HasBeenSet_RPCGetter.BoolN => this.BoolN;
        IHasBeenSetItemGetter<Boolean?> ITestObject_HasBeenSet_RPCGetter.BoolN_Property => this.BoolN_Property;
        #endregion
        #region Bool
        protected readonly IHasBeenSetItem<Boolean> _Bool;
        public IHasBeenSetItem<Boolean> Bool_Property => _Bool;
        public Boolean Bool
        {
            get => this._Bool.Item;
            set => this._Bool.Set(value);
        }
        Boolean ITestObject_HasBeenSet_RPCGetter.Bool => this.Bool;
        IHasBeenSetItemGetter<Boolean> ITestObject_HasBeenSet_RPCGetter.Bool_Property => this.Bool_Property;
        #endregion
        #region CharN
        protected readonly IHasBeenSetItem<Char?> _CharN;
        public IHasBeenSetItem<Char?> CharN_Property => _CharN;
        public Char? CharN
        {
            get => this._CharN.Item;
            set => this._CharN.Set(value);
        }
        Char? ITestObject_HasBeenSet_RPCGetter.CharN => this.CharN;
        IHasBeenSetItemGetter<Char?> ITestObject_HasBeenSet_RPCGetter.CharN_Property => this.CharN_Property;
        #endregion
        #region Char
        protected readonly IHasBeenSetItem<Char> _Char;
        public IHasBeenSetItem<Char> Char_Property => _Char;
        public Char Char
        {
            get => this._Char.Item;
            set => this._Char.Set(value);
        }
        Char ITestObject_HasBeenSet_RPCGetter.Char => this.Char;
        IHasBeenSetItemGetter<Char> ITestObject_HasBeenSet_RPCGetter.Char_Property => this.Char_Property;
        #endregion
        #region DateTimeNull
        protected readonly IHasBeenSetItem<DateTime?> _DateTimeNull;
        public IHasBeenSetItem<DateTime?> DateTimeNull_Property => _DateTimeNull;
        public DateTime? DateTimeNull
        {
            get => this._DateTimeNull.Item;
            set => this._DateTimeNull.Set(value);
        }
        DateTime? ITestObject_HasBeenSet_RPCGetter.DateTimeNull => this.DateTimeNull;
        IHasBeenSetItemGetter<DateTime?> ITestObject_HasBeenSet_RPCGetter.DateTimeNull_Property => this.DateTimeNull_Property;
        #endregion
        #region DateTime
        protected readonly IHasBeenSetItem<DateTime> _DateTime;
        public IHasBeenSetItem<DateTime> DateTime_Property => _DateTime;
        public DateTime DateTime
        {
            get => this._DateTime.Item;
            set => this._DateTime.Set(value);
        }
        DateTime ITestObject_HasBeenSet_RPCGetter.DateTime => this.DateTime;
        IHasBeenSetItemGetter<DateTime> ITestObject_HasBeenSet_RPCGetter.DateTime_Property => this.DateTime_Property;
        #endregion
        #region DoubleN
        protected readonly IHasBeenSetItem<Double?> _DoubleN;
        public IHasBeenSetItem<Double?> DoubleN_Property => _DoubleN;
        public Double? DoubleN
        {
            get => this._DoubleN.Item;
            set => this._DoubleN.Set(value);
        }
        Double? ITestObject_HasBeenSet_RPCGetter.DoubleN => this.DoubleN;
        IHasBeenSetItemGetter<Double?> ITestObject_HasBeenSet_RPCGetter.DoubleN_Property => this.DoubleN_Property;
        #endregion
        #region DoubleN_Ranged
        protected readonly IHasBeenSetItem<Double?> _DoubleN_Ranged;
        public IHasBeenSetItem<Double?> DoubleN_Ranged_Property => _DoubleN_Ranged;
        public Double? DoubleN_Ranged
        {
            get => this._DoubleN_Ranged.Item;
            set => this._DoubleN_Ranged.Set(value?.PutInRange(DoubleN_Ranged_Range.Min, DoubleN_Ranged_Range.Max));
        }
        Double? ITestObject_HasBeenSet_RPCGetter.DoubleN_Ranged => this.DoubleN_Ranged;
        IHasBeenSetItemGetter<Double?> ITestObject_HasBeenSet_RPCGetter.DoubleN_Ranged_Property => this.DoubleN_Ranged_Property;
        public static RangeDouble DoubleN_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region Double
        protected readonly IHasBeenSetItem<Double> _Double;
        public IHasBeenSetItem<Double> Double_Property => _Double;
        public Double Double
        {
            get => this._Double.Item;
            set => this._Double.Set(value);
        }
        Double ITestObject_HasBeenSet_RPCGetter.Double => this.Double;
        IHasBeenSetItemGetter<Double> ITestObject_HasBeenSet_RPCGetter.Double_Property => this.Double_Property;
        #endregion
        #region Double_Ranged
        protected readonly IHasBeenSetItem<Double> _Double_Ranged;
        public IHasBeenSetItem<Double> Double_Ranged_Property => _Double_Ranged;
        public Double Double_Ranged
        {
            get => this._Double_Ranged.Item;
            set => this._Double_Ranged.Set(value.PutInRange(Double_Ranged_Range.Min, Double_Ranged_Range.Max));
        }
        Double ITestObject_HasBeenSet_RPCGetter.Double_Ranged => this.Double_Ranged;
        IHasBeenSetItemGetter<Double> ITestObject_HasBeenSet_RPCGetter.Double_Ranged_Property => this.Double_Ranged_Property;
        public static RangeDouble Double_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region FloatN
        protected readonly IHasBeenSetItem<Single?> _FloatN;
        public IHasBeenSetItem<Single?> FloatN_Property => _FloatN;
        public Single? FloatN
        {
            get => this._FloatN.Item;
            set => this._FloatN.Set(value);
        }
        Single? ITestObject_HasBeenSet_RPCGetter.FloatN => this.FloatN;
        IHasBeenSetItemGetter<Single?> ITestObject_HasBeenSet_RPCGetter.FloatN_Property => this.FloatN_Property;
        #endregion
        #region FloatN_Ranged
        protected readonly IHasBeenSetItem<Single?> _FloatN_Ranged;
        public IHasBeenSetItem<Single?> FloatN_Ranged_Property => _FloatN_Ranged;
        public Single? FloatN_Ranged
        {
            get => this._FloatN_Ranged.Item;
            set => this._FloatN_Ranged.Set(value?.PutInRange(FloatN_Ranged_Range.Min, FloatN_Ranged_Range.Max));
        }
        Single? ITestObject_HasBeenSet_RPCGetter.FloatN_Ranged => this.FloatN_Ranged;
        IHasBeenSetItemGetter<Single?> ITestObject_HasBeenSet_RPCGetter.FloatN_Ranged_Property => this.FloatN_Ranged_Property;
        public static RangeFloat FloatN_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Float
        protected readonly IHasBeenSetItem<Single> _Float;
        public IHasBeenSetItem<Single> Float_Property => _Float;
        public Single Float
        {
            get => this._Float.Item;
            set => this._Float.Set(value);
        }
        Single ITestObject_HasBeenSet_RPCGetter.Float => this.Float;
        IHasBeenSetItemGetter<Single> ITestObject_HasBeenSet_RPCGetter.Float_Property => this.Float_Property;
        #endregion
        #region Float_Ranged
        protected readonly IHasBeenSetItem<Single> _Float_Ranged;
        public IHasBeenSetItem<Single> Float_Ranged_Property => _Float_Ranged;
        public Single Float_Ranged
        {
            get => this._Float_Ranged.Item;
            set => this._Float_Ranged.Set(value.PutInRange(Float_Ranged_Range.Min, Float_Ranged_Range.Max));
        }
        Single ITestObject_HasBeenSet_RPCGetter.Float_Ranged => this.Float_Ranged;
        IHasBeenSetItemGetter<Single> ITestObject_HasBeenSet_RPCGetter.Float_Ranged_Property => this.Float_Ranged_Property;
        public static RangeFloat Float_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Int16N
        protected readonly IHasBeenSetItem<Int16?> _Int16N;
        public IHasBeenSetItem<Int16?> Int16N_Property => _Int16N;
        public Int16? Int16N
        {
            get => this._Int16N.Item;
            set => this._Int16N.Set(value);
        }
        Int16? ITestObject_HasBeenSet_RPCGetter.Int16N => this.Int16N;
        IHasBeenSetItemGetter<Int16?> ITestObject_HasBeenSet_RPCGetter.Int16N_Property => this.Int16N_Property;
        #endregion
        #region Int16N_Ranged
        protected readonly IHasBeenSetItem<Int16?> _Int16N_Ranged;
        public IHasBeenSetItem<Int16?> Int16N_Ranged_Property => _Int16N_Ranged;
        public Int16? Int16N_Ranged
        {
            get => this._Int16N_Ranged.Item;
            set => this._Int16N_Ranged.Set(value?.PutInRange(Int16N_Ranged_Range.Min, Int16N_Ranged_Range.Max));
        }
        Int16? ITestObject_HasBeenSet_RPCGetter.Int16N_Ranged => this.Int16N_Ranged;
        IHasBeenSetItemGetter<Int16?> ITestObject_HasBeenSet_RPCGetter.Int16N_Ranged_Property => this.Int16N_Ranged_Property;
        public static RangeInt16 Int16N_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int16
        protected readonly IHasBeenSetItem<Int16> _Int16;
        public IHasBeenSetItem<Int16> Int16_Property => _Int16;
        public Int16 Int16
        {
            get => this._Int16.Item;
            set => this._Int16.Set(value);
        }
        Int16 ITestObject_HasBeenSet_RPCGetter.Int16 => this.Int16;
        IHasBeenSetItemGetter<Int16> ITestObject_HasBeenSet_RPCGetter.Int16_Property => this.Int16_Property;
        #endregion
        #region Int16_Ranged
        protected readonly IHasBeenSetItem<Int16> _Int16_Ranged;
        public IHasBeenSetItem<Int16> Int16_Ranged_Property => _Int16_Ranged;
        public Int16 Int16_Ranged
        {
            get => this._Int16_Ranged.Item;
            set => this._Int16_Ranged.Set(value.PutInRange(Int16_Ranged_Range.Min, Int16_Ranged_Range.Max));
        }
        Int16 ITestObject_HasBeenSet_RPCGetter.Int16_Ranged => this.Int16_Ranged;
        IHasBeenSetItemGetter<Int16> ITestObject_HasBeenSet_RPCGetter.Int16_Ranged_Property => this.Int16_Ranged_Property;
        public static RangeInt16 Int16_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int32N
        protected readonly IHasBeenSetItem<Int32?> _Int32N;
        public IHasBeenSetItem<Int32?> Int32N_Property => _Int32N;
        public Int32? Int32N
        {
            get => this._Int32N.Item;
            set => this._Int32N.Set(value);
        }
        Int32? ITestObject_HasBeenSet_RPCGetter.Int32N => this.Int32N;
        IHasBeenSetItemGetter<Int32?> ITestObject_HasBeenSet_RPCGetter.Int32N_Property => this.Int32N_Property;
        #endregion
        #region Int32N_Ranged
        protected readonly IHasBeenSetItem<Int32?> _Int32N_Ranged;
        public IHasBeenSetItem<Int32?> Int32N_Ranged_Property => _Int32N_Ranged;
        public Int32? Int32N_Ranged
        {
            get => this._Int32N_Ranged.Item;
            set => this._Int32N_Ranged.Set(value?.PutInRange(Int32N_Ranged_Range.Min, Int32N_Ranged_Range.Max));
        }
        Int32? ITestObject_HasBeenSet_RPCGetter.Int32N_Ranged => this.Int32N_Ranged;
        IHasBeenSetItemGetter<Int32?> ITestObject_HasBeenSet_RPCGetter.Int32N_Ranged_Property => this.Int32N_Ranged_Property;
        public static RangeInt32 Int32N_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int32
        protected readonly IHasBeenSetItem<Int32> _Int32;
        public IHasBeenSetItem<Int32> Int32_Property => _Int32;
        public Int32 Int32
        {
            get => this._Int32.Item;
            set => this._Int32.Set(value);
        }
        Int32 ITestObject_HasBeenSet_RPCGetter.Int32 => this.Int32;
        IHasBeenSetItemGetter<Int32> ITestObject_HasBeenSet_RPCGetter.Int32_Property => this.Int32_Property;
        #endregion
        #region Int32_Ranged
        protected readonly IHasBeenSetItem<Int32> _Int32_Ranged;
        public IHasBeenSetItem<Int32> Int32_Ranged_Property => _Int32_Ranged;
        public Int32 Int32_Ranged
        {
            get => this._Int32_Ranged.Item;
            set => this._Int32_Ranged.Set(value.PutInRange(Int32_Ranged_Range.Min, Int32_Ranged_Range.Max));
        }
        Int32 ITestObject_HasBeenSet_RPCGetter.Int32_Ranged => this.Int32_Ranged;
        IHasBeenSetItemGetter<Int32> ITestObject_HasBeenSet_RPCGetter.Int32_Ranged_Property => this.Int32_Ranged_Property;
        public static RangeInt32 Int32_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int64N
        protected readonly IHasBeenSetItem<Int64?> _Int64N;
        public IHasBeenSetItem<Int64?> Int64N_Property => _Int64N;
        public Int64? Int64N
        {
            get => this._Int64N.Item;
            set => this._Int64N.Set(value);
        }
        Int64? ITestObject_HasBeenSet_RPCGetter.Int64N => this.Int64N;
        IHasBeenSetItemGetter<Int64?> ITestObject_HasBeenSet_RPCGetter.Int64N_Property => this.Int64N_Property;
        #endregion
        #region Int64N_Ranged
        protected readonly IHasBeenSetItem<Int64?> _Int64N_Ranged;
        public IHasBeenSetItem<Int64?> Int64N_Ranged_Property => _Int64N_Ranged;
        public Int64? Int64N_Ranged
        {
            get => this._Int64N_Ranged.Item;
            set => this._Int64N_Ranged.Set(value?.PutInRange(Int64N_Ranged_Range.Min, Int64N_Ranged_Range.Max));
        }
        Int64? ITestObject_HasBeenSet_RPCGetter.Int64N_Ranged => this.Int64N_Ranged;
        IHasBeenSetItemGetter<Int64?> ITestObject_HasBeenSet_RPCGetter.Int64N_Ranged_Property => this.Int64N_Ranged_Property;
        public static RangeInt64 Int64N_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int64
        protected readonly IHasBeenSetItem<Int64> _Int64;
        public IHasBeenSetItem<Int64> Int64_Property => _Int64;
        public Int64 Int64
        {
            get => this._Int64.Item;
            set => this._Int64.Set(value);
        }
        Int64 ITestObject_HasBeenSet_RPCGetter.Int64 => this.Int64;
        IHasBeenSetItemGetter<Int64> ITestObject_HasBeenSet_RPCGetter.Int64_Property => this.Int64_Property;
        #endregion
        #region Int64_Ranged
        protected readonly IHasBeenSetItem<Int64> _Int64_Ranged;
        public IHasBeenSetItem<Int64> Int64_Ranged_Property => _Int64_Ranged;
        public Int64 Int64_Ranged
        {
            get => this._Int64_Ranged.Item;
            set => this._Int64_Ranged.Set(value.PutInRange(Int64_Ranged_Range.Min, Int64_Ranged_Range.Max));
        }
        Int64 ITestObject_HasBeenSet_RPCGetter.Int64_Ranged => this.Int64_Ranged;
        IHasBeenSetItemGetter<Int64> ITestObject_HasBeenSet_RPCGetter.Int64_Ranged_Property => this.Int64_Ranged_Property;
        public static RangeInt64 Int64_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int8N
        protected readonly IHasBeenSetItem<SByte?> _Int8N;
        public IHasBeenSetItem<SByte?> Int8N_Property => _Int8N;
        public SByte? Int8N
        {
            get => this._Int8N.Item;
            set => this._Int8N.Set(value);
        }
        SByte? ITestObject_HasBeenSet_RPCGetter.Int8N => this.Int8N;
        IHasBeenSetItemGetter<SByte?> ITestObject_HasBeenSet_RPCGetter.Int8N_Property => this.Int8N_Property;
        #endregion
        #region Int8N_Ranged
        protected readonly IHasBeenSetItem<SByte?> _Int8N_Ranged;
        public IHasBeenSetItem<SByte?> Int8N_Ranged_Property => _Int8N_Ranged;
        public SByte? Int8N_Ranged
        {
            get => this._Int8N_Ranged.Item;
            set => this._Int8N_Ranged.Set(value?.PutInRange(Int8N_Ranged_Range.Min, Int8N_Ranged_Range.Max));
        }
        SByte? ITestObject_HasBeenSet_RPCGetter.Int8N_Ranged => this.Int8N_Ranged;
        IHasBeenSetItemGetter<SByte?> ITestObject_HasBeenSet_RPCGetter.Int8N_Ranged_Property => this.Int8N_Ranged_Property;
        public static RangeInt8 Int8N_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Int8
        protected readonly IHasBeenSetItem<SByte> _Int8;
        public IHasBeenSetItem<SByte> Int8_Property => _Int8;
        public SByte Int8
        {
            get => this._Int8.Item;
            set => this._Int8.Set(value);
        }
        SByte ITestObject_HasBeenSet_RPCGetter.Int8 => this.Int8;
        IHasBeenSetItemGetter<SByte> ITestObject_HasBeenSet_RPCGetter.Int8_Property => this.Int8_Property;
        #endregion
        #region Int8_Ranged
        protected readonly IHasBeenSetItem<SByte> _Int8_Ranged;
        public IHasBeenSetItem<SByte> Int8_Ranged_Property => _Int8_Ranged;
        public SByte Int8_Ranged
        {
            get => this._Int8_Ranged.Item;
            set => this._Int8_Ranged.Set(value.PutInRange(Int8_Ranged_Range.Min, Int8_Ranged_Range.Max));
        }
        SByte ITestObject_HasBeenSet_RPCGetter.Int8_Ranged => this.Int8_Ranged;
        IHasBeenSetItemGetter<SByte> ITestObject_HasBeenSet_RPCGetter.Int8_Ranged_Property => this.Int8_Ranged_Property;
        public static RangeInt8 Int8_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Unsafe
        protected readonly IHasBeenSetItem<bool> _Unsafe;
        public IHasBeenSetItem<bool> Unsafe_Property => _Unsafe;
        public bool Unsafe
        {
            get => this._Unsafe.Item;
            set => this._Unsafe.Set(value);
        }
        bool ITestObject_HasBeenSet_RPCGetter.Unsafe => this.Unsafe;
        IHasBeenSetItemGetter<bool> ITestObject_HasBeenSet_RPCGetter.Unsafe_Property => this.Unsafe_Property;
        #endregion
        #region P2IntN
        protected readonly IHasBeenSetItem<P2Int?> _P2IntN;
        public IHasBeenSetItem<P2Int?> P2IntN_Property => _P2IntN;
        public P2Int? P2IntN
        {
            get => this._P2IntN.Item;
            set => this._P2IntN.Set(value);
        }
        P2Int? ITestObject_HasBeenSet_RPCGetter.P2IntN => this.P2IntN;
        IHasBeenSetItemGetter<P2Int?> ITestObject_HasBeenSet_RPCGetter.P2IntN_Property => this.P2IntN_Property;
        #endregion
        #region P2Int
        protected readonly IHasBeenSetItem<P2Int> _P2Int;
        public IHasBeenSetItem<P2Int> P2Int_Property => _P2Int;
        public P2Int P2Int
        {
            get => this._P2Int.Item;
            set => this._P2Int.Set(value);
        }
        P2Int ITestObject_HasBeenSet_RPCGetter.P2Int => this.P2Int;
        IHasBeenSetItemGetter<P2Int> ITestObject_HasBeenSet_RPCGetter.P2Int_Property => this.P2Int_Property;
        #endregion
        #region P3DoubleN
        protected readonly IHasBeenSetItem<P3Double?> _P3DoubleN;
        public IHasBeenSetItem<P3Double?> P3DoubleN_Property => _P3DoubleN;
        public P3Double? P3DoubleN
        {
            get => this._P3DoubleN.Item;
            set => this._P3DoubleN.Set(value);
        }
        P3Double? ITestObject_HasBeenSet_RPCGetter.P3DoubleN => this.P3DoubleN;
        IHasBeenSetItemGetter<P3Double?> ITestObject_HasBeenSet_RPCGetter.P3DoubleN_Property => this.P3DoubleN_Property;
        #endregion
        #region P3Double
        protected readonly IHasBeenSetItem<P3Double> _P3Double;
        public IHasBeenSetItem<P3Double> P3Double_Property => _P3Double;
        public P3Double P3Double
        {
            get => this._P3Double.Item;
            set => this._P3Double.Set(value);
        }
        P3Double ITestObject_HasBeenSet_RPCGetter.P3Double => this.P3Double;
        IHasBeenSetItemGetter<P3Double> ITestObject_HasBeenSet_RPCGetter.P3Double_Property => this.P3Double_Property;
        #endregion
        #region P3IntN
        protected readonly IHasBeenSetItem<P3Int?> _P3IntN;
        public IHasBeenSetItem<P3Int?> P3IntN_Property => _P3IntN;
        public P3Int? P3IntN
        {
            get => this._P3IntN.Item;
            set => this._P3IntN.Set(value);
        }
        P3Int? ITestObject_HasBeenSet_RPCGetter.P3IntN => this.P3IntN;
        IHasBeenSetItemGetter<P3Int?> ITestObject_HasBeenSet_RPCGetter.P3IntN_Property => this.P3IntN_Property;
        #endregion
        #region P3Int
        protected readonly IHasBeenSetItem<P3Int> _P3Int;
        public IHasBeenSetItem<P3Int> P3Int_Property => _P3Int;
        public P3Int P3Int
        {
            get => this._P3Int.Item;
            set => this._P3Int.Set(value);
        }
        P3Int ITestObject_HasBeenSet_RPCGetter.P3Int => this.P3Int;
        IHasBeenSetItemGetter<P3Int> ITestObject_HasBeenSet_RPCGetter.P3Int_Property => this.P3Int_Property;
        #endregion
        #region PercentN
        protected readonly IHasBeenSetItem<Percent?> _PercentN;
        public IHasBeenSetItem<Percent?> PercentN_Property => _PercentN;
        public Percent? PercentN
        {
            get => this._PercentN.Item;
            set => this._PercentN.Set(value);
        }
        Percent? ITestObject_HasBeenSet_RPCGetter.PercentN => this.PercentN;
        IHasBeenSetItemGetter<Percent?> ITestObject_HasBeenSet_RPCGetter.PercentN_Property => this.PercentN_Property;
        #endregion
        #region Percent
        protected readonly IHasBeenSetItem<Percent> _Percent;
        public IHasBeenSetItem<Percent> Percent_Property => _Percent;
        public Percent Percent
        {
            get => this._Percent.Item;
            set => this._Percent.Set(value);
        }
        Percent ITestObject_HasBeenSet_RPCGetter.Percent => this.Percent;
        IHasBeenSetItemGetter<Percent> ITestObject_HasBeenSet_RPCGetter.Percent_Property => this.Percent_Property;
        #endregion
        #region RangeIntN
        protected readonly IHasBeenSetItem<RangeInt32?> _RangeIntN;
        public IHasBeenSetItem<RangeInt32?> RangeIntN_Property => _RangeIntN;
        public RangeInt32? RangeIntN
        {
            get => this._RangeIntN.Item;
            set => this._RangeIntN.Set(value);
        }
        RangeInt32? ITestObject_HasBeenSet_RPCGetter.RangeIntN => this.RangeIntN;
        IHasBeenSetItemGetter<RangeInt32?> ITestObject_HasBeenSet_RPCGetter.RangeIntN_Property => this.RangeIntN_Property;
        #endregion
        #region RangeInt
        protected readonly IHasBeenSetItem<RangeInt32> _RangeInt;
        public IHasBeenSetItem<RangeInt32> RangeInt_Property => _RangeInt;
        public RangeInt32 RangeInt
        {
            get => this._RangeInt.Item;
            set => this._RangeInt.Set(value);
        }
        RangeInt32 ITestObject_HasBeenSet_RPCGetter.RangeInt => this.RangeInt;
        IHasBeenSetItemGetter<RangeInt32> ITestObject_HasBeenSet_RPCGetter.RangeInt_Property => this.RangeInt_Property;
        #endregion
        #region String
        protected readonly IHasBeenSetItem<String> _String;
        public IHasBeenSetItem<String> String_Property => _String;
        public String String
        {
            get => this._String.Item;
            set => this._String.Set(value);
        }
        String ITestObject_HasBeenSet_RPCGetter.String => this.String;
        IHasBeenSetItemGetter<String> ITestObject_HasBeenSet_RPCGetter.String_Property => this.String_Property;
        #endregion
        #region UDoubleN
        protected readonly IHasBeenSetItem<UDouble?> _UDoubleN;
        public IHasBeenSetItem<UDouble?> UDoubleN_Property => _UDoubleN;
        public UDouble? UDoubleN
        {
            get => this._UDoubleN.Item;
            set => this._UDoubleN.Set(value);
        }
        UDouble? ITestObject_HasBeenSet_RPCGetter.UDoubleN => this.UDoubleN;
        IHasBeenSetItemGetter<UDouble?> ITestObject_HasBeenSet_RPCGetter.UDoubleN_Property => this.UDoubleN_Property;
        #endregion
        #region UDoubleN_Ranged
        protected readonly IHasBeenSetItem<UDouble?> _UDoubleN_Ranged;
        public IHasBeenSetItem<UDouble?> UDoubleN_Ranged_Property => _UDoubleN_Ranged;
        public UDouble? UDoubleN_Ranged
        {
            get => this._UDoubleN_Ranged.Item;
            set => this._UDoubleN_Ranged.Set(value?.PutInRange(UDoubleN_Ranged_Range.Min, UDoubleN_Ranged_Range.Max));
        }
        UDouble? ITestObject_HasBeenSet_RPCGetter.UDoubleN_Ranged => this.UDoubleN_Ranged;
        IHasBeenSetItemGetter<UDouble?> ITestObject_HasBeenSet_RPCGetter.UDoubleN_Ranged_Property => this.UDoubleN_Ranged_Property;
        public static RangeUDouble UDoubleN_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UDouble
        protected readonly IHasBeenSetItem<UDouble> _UDouble;
        public IHasBeenSetItem<UDouble> UDouble_Property => _UDouble;
        public UDouble UDouble
        {
            get => this._UDouble.Item;
            set => this._UDouble.Set(value);
        }
        UDouble ITestObject_HasBeenSet_RPCGetter.UDouble => this.UDouble;
        IHasBeenSetItemGetter<UDouble> ITestObject_HasBeenSet_RPCGetter.UDouble_Property => this.UDouble_Property;
        #endregion
        #region UDouble_Ranged
        protected readonly IHasBeenSetItem<UDouble> _UDouble_Ranged;
        public IHasBeenSetItem<UDouble> UDouble_Ranged_Property => _UDouble_Ranged;
        public UDouble UDouble_Ranged
        {
            get => this._UDouble_Ranged.Item;
            set => this._UDouble_Ranged.Set(value.PutInRange(UDouble_Ranged_Range.Min, UDouble_Ranged_Range.Max));
        }
        UDouble ITestObject_HasBeenSet_RPCGetter.UDouble_Ranged => this.UDouble_Ranged;
        IHasBeenSetItemGetter<UDouble> ITestObject_HasBeenSet_RPCGetter.UDouble_Ranged_Property => this.UDouble_Ranged_Property;
        public static RangeUDouble UDouble_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UInt16N
        protected readonly IHasBeenSetItem<UInt16?> _UInt16N;
        public IHasBeenSetItem<UInt16?> UInt16N_Property => _UInt16N;
        public UInt16? UInt16N
        {
            get => this._UInt16N.Item;
            set => this._UInt16N.Set(value);
        }
        UInt16? ITestObject_HasBeenSet_RPCGetter.UInt16N => this.UInt16N;
        IHasBeenSetItemGetter<UInt16?> ITestObject_HasBeenSet_RPCGetter.UInt16N_Property => this.UInt16N_Property;
        #endregion
        #region UInt16N_Ranged
        protected readonly IHasBeenSetItem<UInt16?> _UInt16N_Ranged;
        public IHasBeenSetItem<UInt16?> UInt16N_Ranged_Property => _UInt16N_Ranged;
        public UInt16? UInt16N_Ranged
        {
            get => this._UInt16N_Ranged.Item;
            set => this._UInt16N_Ranged.Set(value?.PutInRange(UInt16N_Ranged_Range.Min, UInt16N_Ranged_Range.Max));
        }
        UInt16? ITestObject_HasBeenSet_RPCGetter.UInt16N_Ranged => this.UInt16N_Ranged;
        IHasBeenSetItemGetter<UInt16?> ITestObject_HasBeenSet_RPCGetter.UInt16N_Ranged_Property => this.UInt16N_Ranged_Property;
        public static RangeUInt16 UInt16N_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt16
        protected readonly IHasBeenSetItem<UInt16> _UInt16;
        public IHasBeenSetItem<UInt16> UInt16_Property => _UInt16;
        public UInt16 UInt16
        {
            get => this._UInt16.Item;
            set => this._UInt16.Set(value);
        }
        UInt16 ITestObject_HasBeenSet_RPCGetter.UInt16 => this.UInt16;
        IHasBeenSetItemGetter<UInt16> ITestObject_HasBeenSet_RPCGetter.UInt16_Property => this.UInt16_Property;
        #endregion
        #region UInt16_Ranged
        protected readonly IHasBeenSetItem<UInt16> _UInt16_Ranged;
        public IHasBeenSetItem<UInt16> UInt16_Ranged_Property => _UInt16_Ranged;
        public UInt16 UInt16_Ranged
        {
            get => this._UInt16_Ranged.Item;
            set => this._UInt16_Ranged.Set(value.PutInRange(UInt16_Ranged_Range.Min, UInt16_Ranged_Range.Max));
        }
        UInt16 ITestObject_HasBeenSet_RPCGetter.UInt16_Ranged => this.UInt16_Ranged;
        IHasBeenSetItemGetter<UInt16> ITestObject_HasBeenSet_RPCGetter.UInt16_Ranged_Property => this.UInt16_Ranged_Property;
        public static RangeUInt16 UInt16_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt32N
        protected readonly IHasBeenSetItem<UInt32?> _UInt32N;
        public IHasBeenSetItem<UInt32?> UInt32N_Property => _UInt32N;
        public UInt32? UInt32N
        {
            get => this._UInt32N.Item;
            set => this._UInt32N.Set(value);
        }
        UInt32? ITestObject_HasBeenSet_RPCGetter.UInt32N => this.UInt32N;
        IHasBeenSetItemGetter<UInt32?> ITestObject_HasBeenSet_RPCGetter.UInt32N_Property => this.UInt32N_Property;
        #endregion
        #region UInt32N_Ranged
        protected readonly IHasBeenSetItem<UInt32?> _UInt32N_Ranged;
        public IHasBeenSetItem<UInt32?> UInt32N_Ranged_Property => _UInt32N_Ranged;
        public UInt32? UInt32N_Ranged
        {
            get => this._UInt32N_Ranged.Item;
            set => this._UInt32N_Ranged.Set(value?.PutInRange(UInt32N_Ranged_Range.Min, UInt32N_Ranged_Range.Max));
        }
        UInt32? ITestObject_HasBeenSet_RPCGetter.UInt32N_Ranged => this.UInt32N_Ranged;
        IHasBeenSetItemGetter<UInt32?> ITestObject_HasBeenSet_RPCGetter.UInt32N_Ranged_Property => this.UInt32N_Ranged_Property;
        public static RangeUInt32 UInt32N_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt32
        protected readonly IHasBeenSetItem<UInt32> _UInt32;
        public IHasBeenSetItem<UInt32> UInt32_Property => _UInt32;
        public UInt32 UInt32
        {
            get => this._UInt32.Item;
            set => this._UInt32.Set(value);
        }
        UInt32 ITestObject_HasBeenSet_RPCGetter.UInt32 => this.UInt32;
        IHasBeenSetItemGetter<UInt32> ITestObject_HasBeenSet_RPCGetter.UInt32_Property => this.UInt32_Property;
        #endregion
        #region UInt32_Ranged
        protected readonly IHasBeenSetItem<UInt32> _UInt32_Ranged;
        public IHasBeenSetItem<UInt32> UInt32_Ranged_Property => _UInt32_Ranged;
        public UInt32 UInt32_Ranged
        {
            get => this._UInt32_Ranged.Item;
            set => this._UInt32_Ranged.Set(value.PutInRange(UInt32_Ranged_Range.Min, UInt32_Ranged_Range.Max));
        }
        UInt32 ITestObject_HasBeenSet_RPCGetter.UInt32_Ranged => this.UInt32_Ranged;
        IHasBeenSetItemGetter<UInt32> ITestObject_HasBeenSet_RPCGetter.UInt32_Ranged_Property => this.UInt32_Ranged_Property;
        public static RangeUInt32 UInt32_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt64N
        protected readonly IHasBeenSetItem<UInt64?> _UInt64N;
        public IHasBeenSetItem<UInt64?> UInt64N_Property => _UInt64N;
        public UInt64? UInt64N
        {
            get => this._UInt64N.Item;
            set => this._UInt64N.Set(value);
        }
        UInt64? ITestObject_HasBeenSet_RPCGetter.UInt64N => this.UInt64N;
        IHasBeenSetItemGetter<UInt64?> ITestObject_HasBeenSet_RPCGetter.UInt64N_Property => this.UInt64N_Property;
        #endregion
        #region UInt64N_Ranged
        protected readonly IHasBeenSetItem<UInt64?> _UInt64N_Ranged;
        public IHasBeenSetItem<UInt64?> UInt64N_Ranged_Property => _UInt64N_Ranged;
        public UInt64? UInt64N_Ranged
        {
            get => this._UInt64N_Ranged.Item;
            set => this._UInt64N_Ranged.Set(value?.PutInRange(UInt64N_Ranged_Range.Min, UInt64N_Ranged_Range.Max));
        }
        UInt64? ITestObject_HasBeenSet_RPCGetter.UInt64N_Ranged => this.UInt64N_Ranged;
        IHasBeenSetItemGetter<UInt64?> ITestObject_HasBeenSet_RPCGetter.UInt64N_Ranged_Property => this.UInt64N_Ranged_Property;
        public static RangeUInt64 UInt64N_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt64
        protected readonly IHasBeenSetItem<UInt64> _UInt64;
        public IHasBeenSetItem<UInt64> UInt64_Property => _UInt64;
        public UInt64 UInt64
        {
            get => this._UInt64.Item;
            set => this._UInt64.Set(value);
        }
        UInt64 ITestObject_HasBeenSet_RPCGetter.UInt64 => this.UInt64;
        IHasBeenSetItemGetter<UInt64> ITestObject_HasBeenSet_RPCGetter.UInt64_Property => this.UInt64_Property;
        #endregion
        #region UInt64_Ranged
        protected readonly IHasBeenSetItem<UInt64> _UInt64_Ranged;
        public IHasBeenSetItem<UInt64> UInt64_Ranged_Property => _UInt64_Ranged;
        public UInt64 UInt64_Ranged
        {
            get => this._UInt64_Ranged.Item;
            set => this._UInt64_Ranged.Set(value.PutInRange(UInt64_Ranged_Range.Min, UInt64_Ranged_Range.Max));
        }
        UInt64 ITestObject_HasBeenSet_RPCGetter.UInt64_Ranged => this.UInt64_Ranged;
        IHasBeenSetItemGetter<UInt64> ITestObject_HasBeenSet_RPCGetter.UInt64_Ranged_Property => this.UInt64_Ranged_Property;
        public static RangeUInt64 UInt64_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt8N
        protected readonly IHasBeenSetItem<Byte?> _UInt8N;
        public IHasBeenSetItem<Byte?> UInt8N_Property => _UInt8N;
        public Byte? UInt8N
        {
            get => this._UInt8N.Item;
            set => this._UInt8N.Set(value);
        }
        Byte? ITestObject_HasBeenSet_RPCGetter.UInt8N => this.UInt8N;
        IHasBeenSetItemGetter<Byte?> ITestObject_HasBeenSet_RPCGetter.UInt8N_Property => this.UInt8N_Property;
        #endregion
        #region UInt8N_Ranged
        protected readonly IHasBeenSetItem<Byte?> _UInt8N_Ranged;
        public IHasBeenSetItem<Byte?> UInt8N_Ranged_Property => _UInt8N_Ranged;
        public Byte? UInt8N_Ranged
        {
            get => this._UInt8N_Ranged.Item;
            set => this._UInt8N_Ranged.Set(value?.PutInRange(UInt8N_Ranged_Range.Min, UInt8N_Ranged_Range.Max));
        }
        Byte? ITestObject_HasBeenSet_RPCGetter.UInt8N_Ranged => this.UInt8N_Ranged;
        IHasBeenSetItemGetter<Byte?> ITestObject_HasBeenSet_RPCGetter.UInt8N_Ranged_Property => this.UInt8N_Ranged_Property;
        public static RangeUInt8 UInt8N_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region UInt8
        protected readonly IHasBeenSetItem<Byte> _UInt8;
        public IHasBeenSetItem<Byte> UInt8_Property => _UInt8;
        public Byte UInt8
        {
            get => this._UInt8.Item;
            set => this._UInt8.Set(value);
        }
        Byte ITestObject_HasBeenSet_RPCGetter.UInt8 => this.UInt8;
        IHasBeenSetItemGetter<Byte> ITestObject_HasBeenSet_RPCGetter.UInt8_Property => this.UInt8_Property;
        #endregion
        #region UInt8_Ranged
        protected readonly IHasBeenSetItem<Byte> _UInt8_Ranged;
        public IHasBeenSetItem<Byte> UInt8_Ranged_Property => _UInt8_Ranged;
        public Byte UInt8_Ranged
        {
            get => this._UInt8_Ranged.Item;
            set => this._UInt8_Ranged.Set(value.PutInRange(UInt8_Ranged_Range.Min, UInt8_Ranged_Range.Max));
        }
        Byte ITestObject_HasBeenSet_RPCGetter.UInt8_Ranged => this.UInt8_Ranged;
        IHasBeenSetItemGetter<Byte> ITestObject_HasBeenSet_RPCGetter.UInt8_Ranged_Property => this.UInt8_Ranged_Property;
        public static RangeUInt8 UInt8_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region Enum
        protected readonly IHasBeenSetItem<TestEnum> _Enum;
        public IHasBeenSetItem<TestEnum> Enum_Property => _Enum;
        public TestEnum Enum
        {
            get => this._Enum.Item;
            set => this._Enum.Set(value);
        }
        TestEnum ITestObject_HasBeenSet_RPCGetter.Enum => this.Enum;
        IHasBeenSetItemGetter<TestEnum> ITestObject_HasBeenSet_RPCGetter.Enum_Property => this.Enum_Property;
        #endregion
        #region WildCard
        protected readonly IHasBeenSetItem<Object> _WildCard;
        public IHasBeenSetItem<Object> WildCard_Property => _WildCard;
        Object ITestObject_HasBeenSet_RPCGetter.WildCard => this.WildCard;
        public Object WildCard
        {
            get => this._WildCard;
            set => this._WildCard.Item = WildcardLink.Validate(value);
        }
        IHasBeenSetItemGetter<Object> ITestObject_HasBeenSet_RPCGetter.WildCard_Property => this.WildCard_Property;
        #endregion
        #region Ref
        protected readonly IHasBeenSetItem<ObjectToRef> _Ref;
        public ObjectToRef Ref
        {
            get => this._Ref.Item;
            set => this._Ref.Item = value;
        }
        public IHasBeenSetItem<ObjectToRef> Ref_Property => _Ref;
        ObjectToRef ITestObject_HasBeenSet_RPCGetter.Ref => this._Ref.Item;
        IHasBeenSetItemGetter<ObjectToRef> ITestObject_HasBeenSet_RPCGetter.Ref_Property => this._Ref;
        #endregion
        #region Ref_NotNull
        protected readonly IHasBeenSetItem<ObjectToRef> _Ref_NotNull;
        public ObjectToRef Ref_NotNull
        {
            get => this._Ref_NotNull.Item;
            set => this._Ref_NotNull.Item = value;
        }
        public IHasBeenSetItem<ObjectToRef> Ref_NotNull_Property => _Ref_NotNull;
        ObjectToRef ITestObject_HasBeenSet_RPCGetter.Ref_NotNull => this._Ref_NotNull.Item;
        IHasBeenSetItemGetter<ObjectToRef> ITestObject_HasBeenSet_RPCGetter.Ref_NotNull_Property => this._Ref_NotNull;
        #endregion
        #region Ref_Singleton
        protected readonly IHasBeenSetItem<ObjectToRef> _Ref_Singleton;
        public ObjectToRef Ref_Singleton
        {
            get => this._Ref_Singleton.Item;
        }
        public IHasBeenSetItem<ObjectToRef> Ref_Singleton_Property => _Ref_Singleton;
        ObjectToRef ITestObject_HasBeenSet_RPCGetter.Ref_Singleton => this._Ref_Singleton.Item;
        IHasBeenSetItemGetter<ObjectToRef> ITestObject_HasBeenSet_RPCGetter.Ref_Singleton_Property => this._Ref_Singleton;
        #endregion
        #region RefGetter
        protected readonly IHasBeenSetItem<IObjectToRefGetter> _RefGetter;
        public IObjectToRefGetter RefGetter
        {
            get => this._RefGetter.Item;
            set => this._RefGetter.Item = value;
        }
        public IHasBeenSetItem<IObjectToRefGetter> RefGetter_Property => _RefGetter;
        IObjectToRefGetter ITestObject_HasBeenSet_RPCGetter.RefGetter => this._RefGetter.Item;
        IHasBeenSetItemGetter<IObjectToRefGetter> ITestObject_HasBeenSet_RPCGetter.RefGetter_Property => this._RefGetter;
        #endregion
        #region RefGetter_NotNull
        protected readonly IHasBeenSetItem<IObjectToRefGetter> _RefGetter_NotNull;
        public IObjectToRefGetter RefGetter_NotNull
        {
            get => this._RefGetter_NotNull.Item;
            set => this._RefGetter_NotNull.Item = value;
        }
        public IHasBeenSetItem<IObjectToRefGetter> RefGetter_NotNull_Property => _RefGetter_NotNull;
        IObjectToRefGetter ITestObject_HasBeenSet_RPCGetter.RefGetter_NotNull => this._RefGetter_NotNull.Item;
        IHasBeenSetItemGetter<IObjectToRefGetter> ITestObject_HasBeenSet_RPCGetter.RefGetter_NotNull_Property => this._RefGetter_NotNull;
        #endregion
        #region RefGetter_Singleton
        protected readonly IHasBeenSetItem<IObjectToRefGetter> _RefGetter_Singleton;
        public IObjectToRefGetter RefGetter_Singleton
        {
            get => this._RefGetter_Singleton.Item;
        }
        public IHasBeenSetItem<IObjectToRefGetter> RefGetter_Singleton_Property => _RefGetter_Singleton;
        IObjectToRefGetter ITestObject_HasBeenSet_RPCGetter.RefGetter_Singleton => this._RefGetter_Singleton.Item;
        IHasBeenSetItemGetter<IObjectToRefGetter> ITestObject_HasBeenSet_RPCGetter.RefGetter_Singleton_Property => this._RefGetter_Singleton;
        #endregion
        #region RefSetter
        protected readonly IHasBeenSetItem<IObjectToRef> _RefSetter;
        public IObjectToRef RefSetter
        {
            get => this._RefSetter.Item;
            set => this._RefSetter.Item = value;
        }
        public IHasBeenSetItem<IObjectToRef> RefSetter_Property => _RefSetter;
        IObjectToRef ITestObject_HasBeenSet_RPCGetter.RefSetter => this._RefSetter.Item;
        IHasBeenSetItemGetter<IObjectToRef> ITestObject_HasBeenSet_RPCGetter.RefSetter_Property => this._RefSetter;
        #endregion
        #region RefSetter_NotNull
        protected readonly IHasBeenSetItem<IObjectToRef> _RefSetter_NotNull;
        public IObjectToRef RefSetter_NotNull
        {
            get => this._RefSetter_NotNull.Item;
            set => this._RefSetter_NotNull.Item = value;
        }
        public IHasBeenSetItem<IObjectToRef> RefSetter_NotNull_Property => _RefSetter_NotNull;
        IObjectToRef ITestObject_HasBeenSet_RPCGetter.RefSetter_NotNull => this._RefSetter_NotNull.Item;
        IHasBeenSetItemGetter<IObjectToRef> ITestObject_HasBeenSet_RPCGetter.RefSetter_NotNull_Property => this._RefSetter_NotNull;
        #endregion
        #region RefSetter_Singleton
        protected readonly IHasBeenSetItem<IObjectToRef> _RefSetter_Singleton;
        public IObjectToRef RefSetter_Singleton
        {
            get => this._RefSetter_Singleton.Item;
        }
        public IHasBeenSetItem<IObjectToRef> RefSetter_Singleton_Property => _RefSetter_Singleton;
        IObjectToRef ITestObject_HasBeenSet_RPCGetter.RefSetter_Singleton => this._RefSetter_Singleton.Item;
        IHasBeenSetItemGetter<IObjectToRef> ITestObject_HasBeenSet_RPCGetter.RefSetter_Singleton_Property => this._RefSetter_Singleton;
        #endregion
        #region List
        private readonly INotifyingList<Boolean> _List = new NotifyingList<Boolean>();
        public INotifyingList<Boolean> List => _List;
        #region Interface Members
        INotifyingList<Boolean> ITestObject_HasBeenSet_RPC.List => _List;
        INotifyingListGetter<Boolean> ITestObject_HasBeenSet_RPCGetter.List => _List;
        #endregion

        #endregion
        #region RefList
        private readonly INotifyingList<ObjectToRef> _RefList = new NotifyingList<ObjectToRef>();
        public INotifyingList<ObjectToRef> RefList => _RefList;
        #region Interface Members
        INotifyingList<ObjectToRef> ITestObject_HasBeenSet_RPC.RefList => _RefList;
        INotifyingListGetter<ObjectToRef> ITestObject_HasBeenSet_RPCGetter.RefList => _RefList;
        #endregion

        #endregion
        #region Dict
        private readonly INotifyingDictionary<Boolean, String> _Dict = new NotifyingDictionary<Boolean, String>();
        public INotifyingDictionary<Boolean, String> Dict { get { return _Dict; } }
        #region Interface Members
        INotifyingDictionary<Boolean, String> ITestObject_HasBeenSet_RPC.Dict => _Dict;
        INotifyingDictionaryGetter<Boolean, String> ITestObject_HasBeenSet_RPCGetter.Dict => _Dict;
        #endregion

        #endregion
        #region RefDict
        private readonly INotifyingDictionary<ObjectToRef, ObjectToRef> _RefDict = new NotifyingDictionary<ObjectToRef, ObjectToRef>();
        public INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get { return _RefDict; } }
        #region Interface Members
        INotifyingDictionary<ObjectToRef, ObjectToRef> ITestObject_HasBeenSet_RPC.RefDict => _RefDict;
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> ITestObject_HasBeenSet_RPCGetter.RefDict => _RefDict;
        #endregion

        #endregion
        #region DictKeyedValue
        private readonly INotifyingKeyedCollection<Int32, ObjectToRef> _DictKeyedValue = new NotifyingKeyedCollection<Int32, ObjectToRef>((item) => item.KeyField);
        public INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue => _DictKeyedValue;
        #region Interface Members
        INotifyingKeyedCollection<Int32, ObjectToRef> ITestObject_HasBeenSet_RPC.DictKeyedValue => _DictKeyedValue;
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> ITestObject_HasBeenSet_RPCGetter.DictKeyedValue => _DictKeyedValue;
        #endregion

        #endregion

        #region Noggolloquy Getter Interface

        protected object GetNthObject(ushort index) => TestObject_HasBeenSet_RPCCommon.GetNthObject(index, this);
        object INoggolloquyObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestObject_HasBeenSet_RPCCommon.GetNthObjectHasBeenSet(index, this);
        bool INoggolloquyObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestObject_HasBeenSet_RPCCommon.UnsetNthObject(index, this, cmds);
        void INoggolloquyObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Noggolloquy Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestObject_HasBeenSet_RPCCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void INoggolloquyObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        public void CopyFieldsFrom(
            ITestObject_HasBeenSet_RPCGetter rhs,
            TestObject_HasBeenSet_RPC_CopyMask copyMask = null,
            ITestObject_HasBeenSet_RPCGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_HasBeenSet_RPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestObject_HasBeenSet_RPCGetter rhs,
            out TestObject_HasBeenSet_RPC_ErrorMask errorMask,
            TestObject_HasBeenSet_RPC_CopyMask copyMask = null,
            ITestObject_HasBeenSet_RPCGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_HasBeenSet_RPC_ErrorMask retErrorMask = null;
            Func<TestObject_HasBeenSet_RPC_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestObject_HasBeenSet_RPC_ErrorMask();
                }
                return retErrorMask;
            };
            TestObject_HasBeenSet_RPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return INoggolloquyObjectExt.PrintPretty(this);
        }
        #endregion


        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_HasBeenSet_RPC rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_HasBeenSet_RPC rhs)
        {
            if (!object.Equals(this.BoolN, rhs.BoolN)) return false;
            if (!object.Equals(this.Bool, rhs.Bool)) return false;
            if (!object.Equals(this.CharN, rhs.CharN)) return false;
            if (!object.Equals(this.Char, rhs.Char)) return false;
            if (!object.Equals(this.DateTimeNull, rhs.DateTimeNull)) return false;
            if (!object.Equals(this.DateTime, rhs.DateTime)) return false;
            if (!object.Equals(this.DoubleN, rhs.DoubleN)) return false;
            if (!object.Equals(this.DoubleN_Ranged, rhs.DoubleN_Ranged)) return false;
            if (!object.Equals(this.Double, rhs.Double)) return false;
            if (!object.Equals(this.Double_Ranged, rhs.Double_Ranged)) return false;
            if (!object.Equals(this.FloatN, rhs.FloatN)) return false;
            if (!object.Equals(this.FloatN_Ranged, rhs.FloatN_Ranged)) return false;
            if (!object.Equals(this.Float, rhs.Float)) return false;
            if (!object.Equals(this.Float_Ranged, rhs.Float_Ranged)) return false;
            if (!object.Equals(this.Int16N, rhs.Int16N)) return false;
            if (!object.Equals(this.Int16N_Ranged, rhs.Int16N_Ranged)) return false;
            if (!object.Equals(this.Int16, rhs.Int16)) return false;
            if (!object.Equals(this.Int16_Ranged, rhs.Int16_Ranged)) return false;
            if (!object.Equals(this.Int32N, rhs.Int32N)) return false;
            if (!object.Equals(this.Int32N_Ranged, rhs.Int32N_Ranged)) return false;
            if (!object.Equals(this.Int32, rhs.Int32)) return false;
            if (!object.Equals(this.Int32_Ranged, rhs.Int32_Ranged)) return false;
            if (!object.Equals(this.Int64N, rhs.Int64N)) return false;
            if (!object.Equals(this.Int64N_Ranged, rhs.Int64N_Ranged)) return false;
            if (!object.Equals(this.Int64, rhs.Int64)) return false;
            if (!object.Equals(this.Int64_Ranged, rhs.Int64_Ranged)) return false;
            if (!object.Equals(this.Int8N, rhs.Int8N)) return false;
            if (!object.Equals(this.Int8N_Ranged, rhs.Int8N_Ranged)) return false;
            if (!object.Equals(this.Int8, rhs.Int8)) return false;
            if (!object.Equals(this.Int8_Ranged, rhs.Int8_Ranged)) return false;
            if (!object.Equals(this.Unsafe, rhs.Unsafe)) return false;
            if (!object.Equals(this.P2IntN, rhs.P2IntN)) return false;
            if (!object.Equals(this.P2Int, rhs.P2Int)) return false;
            if (!object.Equals(this.P3DoubleN, rhs.P3DoubleN)) return false;
            if (!object.Equals(this.P3Double, rhs.P3Double)) return false;
            if (!object.Equals(this.P3IntN, rhs.P3IntN)) return false;
            if (!object.Equals(this.P3Int, rhs.P3Int)) return false;
            if (!object.Equals(this.PercentN, rhs.PercentN)) return false;
            if (!object.Equals(this.Percent, rhs.Percent)) return false;
            if (!object.Equals(this.RangeIntN, rhs.RangeIntN)) return false;
            if (!object.Equals(this.RangeInt, rhs.RangeInt)) return false;
            if (!object.Equals(this.String, rhs.String)) return false;
            if (!object.Equals(this.UDoubleN, rhs.UDoubleN)) return false;
            if (!object.Equals(this.UDoubleN_Ranged, rhs.UDoubleN_Ranged)) return false;
            if (!object.Equals(this.UDouble, rhs.UDouble)) return false;
            if (!object.Equals(this.UDouble_Ranged, rhs.UDouble_Ranged)) return false;
            if (!object.Equals(this.UInt16N, rhs.UInt16N)) return false;
            if (!object.Equals(this.UInt16N_Ranged, rhs.UInt16N_Ranged)) return false;
            if (!object.Equals(this.UInt16, rhs.UInt16)) return false;
            if (!object.Equals(this.UInt16_Ranged, rhs.UInt16_Ranged)) return false;
            if (!object.Equals(this.UInt32N, rhs.UInt32N)) return false;
            if (!object.Equals(this.UInt32N_Ranged, rhs.UInt32N_Ranged)) return false;
            if (!object.Equals(this.UInt32, rhs.UInt32)) return false;
            if (!object.Equals(this.UInt32_Ranged, rhs.UInt32_Ranged)) return false;
            if (!object.Equals(this.UInt64N, rhs.UInt64N)) return false;
            if (!object.Equals(this.UInt64N_Ranged, rhs.UInt64N_Ranged)) return false;
            if (!object.Equals(this.UInt64, rhs.UInt64)) return false;
            if (!object.Equals(this.UInt64_Ranged, rhs.UInt64_Ranged)) return false;
            if (!object.Equals(this.UInt8N, rhs.UInt8N)) return false;
            if (!object.Equals(this.UInt8N_Ranged, rhs.UInt8N_Ranged)) return false;
            if (!object.Equals(this.UInt8, rhs.UInt8)) return false;
            if (!object.Equals(this.UInt8_Ranged, rhs.UInt8_Ranged)) return false;
            if (!object.Equals(this.Enum, rhs.Enum)) return false;
            if (!object.Equals(this.WildCard, rhs.WildCard)) return false;
            if (!object.Equals(this.Ref, rhs.Ref)) return false;
            if (!object.Equals(this.Ref_NotNull, rhs.Ref_NotNull)) return false;
            if (!object.Equals(this.Ref_Singleton, rhs.Ref_Singleton)) return false;
            if (!object.Equals(this.RefGetter, rhs.RefGetter)) return false;
            if (!object.Equals(this.RefGetter_NotNull, rhs.RefGetter_NotNull)) return false;
            if (!object.Equals(this.RefGetter_Singleton, rhs.RefGetter_Singleton)) return false;
            if (!object.Equals(this.RefSetter, rhs.RefSetter)) return false;
            if (!object.Equals(this.RefSetter_NotNull, rhs.RefSetter_NotNull)) return false;
            if (!object.Equals(this.RefSetter_Singleton, rhs.RefSetter_Singleton)) return false;
            if (!object.Equals(this.List, rhs.List)) return false;
            if (!object.Equals(this.RefList, rhs.RefList)) return false;
            if (!object.Equals(this.Dict, rhs.Dict)) return false;
            if (!object.Equals(this.RefDict, rhs.RefDict)) return false;
            if (!object.Equals(this.DictKeyedValue, rhs.DictKeyedValue)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            return 
            HashHelper.GetHashCode(BoolN)
            .CombineHashCode(HashHelper.GetHashCode(Bool))
            .CombineHashCode(HashHelper.GetHashCode(CharN))
            .CombineHashCode(HashHelper.GetHashCode(Char))
            .CombineHashCode(HashHelper.GetHashCode(DateTimeNull))
            .CombineHashCode(HashHelper.GetHashCode(DateTime))
            .CombineHashCode(HashHelper.GetHashCode(DoubleN))
            .CombineHashCode(HashHelper.GetHashCode(DoubleN_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Double))
            .CombineHashCode(HashHelper.GetHashCode(Double_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(FloatN))
            .CombineHashCode(HashHelper.GetHashCode(FloatN_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Float))
            .CombineHashCode(HashHelper.GetHashCode(Float_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int16N))
            .CombineHashCode(HashHelper.GetHashCode(Int16N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int16))
            .CombineHashCode(HashHelper.GetHashCode(Int16_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int32N))
            .CombineHashCode(HashHelper.GetHashCode(Int32N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int32))
            .CombineHashCode(HashHelper.GetHashCode(Int32_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int64N))
            .CombineHashCode(HashHelper.GetHashCode(Int64N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int64))
            .CombineHashCode(HashHelper.GetHashCode(Int64_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int8N))
            .CombineHashCode(HashHelper.GetHashCode(Int8N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int8))
            .CombineHashCode(HashHelper.GetHashCode(Int8_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Unsafe))
            .CombineHashCode(HashHelper.GetHashCode(P2IntN))
            .CombineHashCode(HashHelper.GetHashCode(P2Int))
            .CombineHashCode(HashHelper.GetHashCode(P3DoubleN))
            .CombineHashCode(HashHelper.GetHashCode(P3Double))
            .CombineHashCode(HashHelper.GetHashCode(P3IntN))
            .CombineHashCode(HashHelper.GetHashCode(P3Int))
            .CombineHashCode(HashHelper.GetHashCode(PercentN))
            .CombineHashCode(HashHelper.GetHashCode(Percent))
            .CombineHashCode(HashHelper.GetHashCode(RangeIntN))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt))
            .CombineHashCode(HashHelper.GetHashCode(String))
            .CombineHashCode(HashHelper.GetHashCode(UDoubleN))
            .CombineHashCode(HashHelper.GetHashCode(UDoubleN_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UDouble))
            .CombineHashCode(HashHelper.GetHashCode(UDouble_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt16N))
            .CombineHashCode(HashHelper.GetHashCode(UInt16N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt16))
            .CombineHashCode(HashHelper.GetHashCode(UInt16_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt32N))
            .CombineHashCode(HashHelper.GetHashCode(UInt32N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt32))
            .CombineHashCode(HashHelper.GetHashCode(UInt32_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt64N))
            .CombineHashCode(HashHelper.GetHashCode(UInt64N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt64))
            .CombineHashCode(HashHelper.GetHashCode(UInt64_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt8N))
            .CombineHashCode(HashHelper.GetHashCode(UInt8N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt8))
            .CombineHashCode(HashHelper.GetHashCode(UInt8_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Enum))
            .CombineHashCode(HashHelper.GetHashCode(WildCard))
            .CombineHashCode(HashHelper.GetHashCode(Ref))
            .CombineHashCode(HashHelper.GetHashCode(Ref_NotNull))
            .CombineHashCode(HashHelper.GetHashCode(Ref_Singleton))
            .CombineHashCode(HashHelper.GetHashCode(RefGetter))
            .CombineHashCode(HashHelper.GetHashCode(RefGetter_NotNull))
            .CombineHashCode(HashHelper.GetHashCode(RefGetter_Singleton))
            .CombineHashCode(HashHelper.GetHashCode(RefSetter))
            .CombineHashCode(HashHelper.GetHashCode(RefSetter_NotNull))
            .CombineHashCode(HashHelper.GetHashCode(RefSetter_Singleton))
            .CombineHashCode(HashHelper.GetHashCode(List))
            .CombineHashCode(HashHelper.GetHashCode(RefList))
            .CombineHashCode(HashHelper.GetHashCode(Dict))
            .CombineHashCode(HashHelper.GetHashCode(RefDict))
            .CombineHashCode(HashHelper.GetHashCode(DictKeyedValue))
            ;
        }

        #endregion


        #region XML Translation
        public static TestObject_HasBeenSet_RPC Create_XML(Stream stream)
        {
            using (var reader = new StreamReader(stream))
            {
                return Create_XML(XElement.Parse(reader.ReadToEnd()));
            }
        }

        public static TestObject_HasBeenSet_RPC Create_XML(XElement root)
        {
            var ret = new TestObject_HasBeenSet_RPC();
            NoggXmlTranslation<TestObject_HasBeenSet_RPC, TestObject_HasBeenSet_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipProtected: false,
                doMasks: false,
                mask: out TestObject_HasBeenSet_RPC_ErrorMask errorMask,
                cmds: null);
            return ret;
        }

        public static TestObject_HasBeenSet_RPC Create_XML(XElement root, out TestObject_HasBeenSet_RPC_ErrorMask errorMask)
        {
            var ret = new TestObject_HasBeenSet_RPC();
            NoggXmlTranslation<TestObject_HasBeenSet_RPC, TestObject_HasBeenSet_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipProtected: false,
                doMasks: true,
                mask: out errorMask,
                cmds: null);
            return ret;
        }

        public void CopyIn_XML(XElement root, NotifyingFireParameters? cmds = null)
        {
            NoggXmlTranslation<TestObject_HasBeenSet_RPC, TestObject_HasBeenSet_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TestObject_HasBeenSet_RPC_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(XElement root, out TestObject_HasBeenSet_RPC_ErrorMask errorMask, NotifyingFireParameters? cmds = null)
        {
            NoggXmlTranslation<TestObject_HasBeenSet_RPC, TestObject_HasBeenSet_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void Write_XML(Stream stream)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(writer);
            }
        }

        public void Write_XML(Stream stream, out TestObject_HasBeenSet_RPC_ErrorMask errorMask)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(writer, out errorMask);
            }
        }

        public void Write_XML(XmlWriter writer, out TestObject_HasBeenSet_RPC_ErrorMask errorMask, string name = null)
        {
            NoggXmlTranslation<TestObject_HasBeenSet_RPC, TestObject_HasBeenSet_RPC_ErrorMask>.Instance.Write(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                mask: out errorMask);
        }

        public void Write_XML(XmlWriter writer, string name)
        {
            NoggXmlTranslation<TestObject_HasBeenSet_RPC, TestObject_HasBeenSet_RPC_ErrorMask>.Instance.Write(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                mask: out TestObject_HasBeenSet_RPC_ErrorMask errorMask);
        }

        public void Write_XML(XmlWriter writer)
        {
            NoggXmlTranslation<TestObject_HasBeenSet_RPC, TestObject_HasBeenSet_RPC_ErrorMask>.Instance.Write(
                writer: writer,
                name: null,
                item: this,
                doMasks: false,
                mask: out TestObject_HasBeenSet_RPC_ErrorMask errorMask);
        }

        #endregion

        public TestObject_HasBeenSet_RPC Copy(
            TestObject_HasBeenSet_RPC_CopyMask copyMask = null,
            ITestObject_HasBeenSet_RPCGetter def = null)
        {
            return TestObject_HasBeenSet_RPC.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestObject_HasBeenSet_RPC Copy(
            ITestObject_HasBeenSet_RPC item,
            TestObject_HasBeenSet_RPC_CopyMask copyMask = null,
            ITestObject_HasBeenSet_RPCGetter def = null)
        {
            TestObject_HasBeenSet_RPC ret;
            if (item.GetType().Equals(typeof(TestObject_HasBeenSet_RPC)))
            {
                ret = new TestObject_HasBeenSet_RPC();
            }
            else
            {
                ret = (TestObject_HasBeenSet_RPC)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType Copy<CopyType>(
            CopyType item,
            TestObject_HasBeenSet_RPC_CopyMask copyMask = null,
            ITestObject_HasBeenSet_RPCGetter def = null)
            where CopyType : class, ITestObject_HasBeenSet_RPC
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestObject_HasBeenSet_RPC)))
            {
                ret = new TestObject_HasBeenSet_RPC() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestObject_HasBeenSet_RPC Copy_ToNoggolloquy(
            ITestObject_HasBeenSet_RPCGetter item,
            TestObject_HasBeenSet_RPC_CopyMask copyMask = null,
            ITestObject_HasBeenSet_RPCGetter def = null)
        {
            var ret = new TestObject_HasBeenSet_RPC();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void INoggolloquyObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                    this._BoolN.Set((Boolean?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                    this._Bool.Set((Boolean)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                    this._CharN.Set((Char?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                    this._Char.Set((Char)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                    this._DateTimeNull.Set((DateTime?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                    this._DateTime.Set((DateTime)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                    this._DoubleN.Set((Double?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                    this._DoubleN_Ranged.Set((Double?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                    this._Double.Set((Double)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                    this._Double_Ranged.Set((Double)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                    this._FloatN.Set((Single?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                    this._FloatN_Ranged.Set((Single?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                    this._Float.Set((Single)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                    this._Float_Ranged.Set((Single)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                    this._Int16N.Set((Int16?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                    this._Int16N_Ranged.Set((Int16?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                    this._Int16.Set((Int16)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                    this._Int16_Ranged.Set((Int16)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                    this._Int32N.Set((Int32?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                    this._Int32N_Ranged.Set((Int32?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                    this._Int32.Set((Int32)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                    this._Int32_Ranged.Set((Int32)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                    this._Int64N.Set((Int64?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                    this._Int64N_Ranged.Set((Int64?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                    this._Int64.Set((Int64)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                    this._Int64_Ranged.Set((Int64)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                    this._Int8N.Set((SByte?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                    this._Int8N_Ranged.Set((SByte?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                    this._Int8.Set((SByte)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                    this._Int8_Ranged.Set((SByte)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                    this._Unsafe.Set((bool)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                    this._P2IntN.Set((P2Int?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                    this._P2Int.Set((P2Int)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                    this._P3DoubleN.Set((P3Double?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                    this._P3Double.Set((P3Double)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                    this._P3IntN.Set((P3Int?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                    this._P3Int.Set((P3Int)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                    this._PercentN.Set((Percent?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                    this._Percent.Set((Percent)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                    this._RangeIntN.Set((RangeInt32?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                    this._RangeInt.Set((RangeInt32)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                    this._String.Set((String)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                    this._UDoubleN.Set((UDouble?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                    this._UDoubleN_Ranged.Set((UDouble?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                    this._UDouble.Set((UDouble)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                    this._UDouble_Ranged.Set((UDouble)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                    this._UInt16N.Set((UInt16?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                    this._UInt16N_Ranged.Set((UInt16?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                    this._UInt16.Set((UInt16)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                    this._UInt16_Ranged.Set((UInt16)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                    this._UInt32N.Set((UInt32?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                    this._UInt32N_Ranged.Set((UInt32?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                    this._UInt32.Set((UInt32)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                    this._UInt32_Ranged.Set((UInt32)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                    this._UInt64N.Set((UInt64?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                    this._UInt64N_Ranged.Set((UInt64?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                    this._UInt64.Set((UInt64)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                    this._UInt64_Ranged.Set((UInt64)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                    this._UInt8N.Set((Byte?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                    this._UInt8N_Ranged.Set((Byte?)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                    this._UInt8.Set((Byte)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                    this._UInt8_Ranged.Set((Byte)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                    this._Enum.Set((TestEnum)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                    this._WildCard.Set((Object)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                    this._Ref.Set((ObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                    this._Ref_NotNull.Set((ObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Cannot set singleton member Ref_Singleton");
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                    this._RefGetter.Set((IObjectToRefGetter)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                    this._RefGetter_NotNull.Set((IObjectToRefGetter)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot set singleton member RefGetter_Singleton");
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                    this._RefSetter.Set((IObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                    this._RefSetter_NotNull.Set((IObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Cannot set singleton member RefSetter_Singleton");
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                    this._List.SetTo((IEnumerable<Boolean>)obj, cmds);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    this._RefList.SetTo((IEnumerable<ObjectToRef>)obj, cmds);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                    this.Dict.SetTo(
                        ((NotifyingDictionary<Boolean, String>)obj).Select(
                            (i) => new KeyValuePair<Boolean, String>(
                                i.Key,
                                i.Value)),
                        cmds);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                    this.RefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                i.Key.Copy(),
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)(NotifyingDictionary<Int32, ObjectToRef>)obj),
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestObject_HasBeenSet_RPCCommon.Clear(this, cmds);
        }

        public static TestObject_HasBeenSet_RPC Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestObject_HasBeenSet_RPC();
            INoggolloquyObjectExt.CopyFieldsIn(ret, fields, def: null, skipProtected: false, cmds: null);
            return ret;
        }

        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestObject_HasBeenSet_RPC obj)
        {
            INoggolloquyObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestObject_HasBeenSet_RPC : ITestObject_HasBeenSet_RPCGetter, INoggolloquyClass<ITestObject_HasBeenSet_RPC, ITestObject_HasBeenSet_RPCGetter>, INoggolloquyClass<TestObject_HasBeenSet_RPC, ITestObject_HasBeenSet_RPCGetter>
    {
        new Boolean? BoolN { get; set; }
        new IHasBeenSetItem<Boolean?> BoolN_Property { get; }

        new Boolean Bool { get; set; }
        new IHasBeenSetItem<Boolean> Bool_Property { get; }

        new Char? CharN { get; set; }
        new IHasBeenSetItem<Char?> CharN_Property { get; }

        new Char Char { get; set; }
        new IHasBeenSetItem<Char> Char_Property { get; }

        new DateTime? DateTimeNull { get; set; }
        new IHasBeenSetItem<DateTime?> DateTimeNull_Property { get; }

        new DateTime DateTime { get; set; }
        new IHasBeenSetItem<DateTime> DateTime_Property { get; }

        new Double? DoubleN { get; set; }
        new IHasBeenSetItem<Double?> DoubleN_Property { get; }

        new Double? DoubleN_Ranged { get; set; }
        new IHasBeenSetItem<Double?> DoubleN_Ranged_Property { get; }

        new Double Double { get; set; }
        new IHasBeenSetItem<Double> Double_Property { get; }

        new Double Double_Ranged { get; set; }
        new IHasBeenSetItem<Double> Double_Ranged_Property { get; }

        new Single? FloatN { get; set; }
        new IHasBeenSetItem<Single?> FloatN_Property { get; }

        new Single? FloatN_Ranged { get; set; }
        new IHasBeenSetItem<Single?> FloatN_Ranged_Property { get; }

        new Single Float { get; set; }
        new IHasBeenSetItem<Single> Float_Property { get; }

        new Single Float_Ranged { get; set; }
        new IHasBeenSetItem<Single> Float_Ranged_Property { get; }

        new Int16? Int16N { get; set; }
        new IHasBeenSetItem<Int16?> Int16N_Property { get; }

        new Int16? Int16N_Ranged { get; set; }
        new IHasBeenSetItem<Int16?> Int16N_Ranged_Property { get; }

        new Int16 Int16 { get; set; }
        new IHasBeenSetItem<Int16> Int16_Property { get; }

        new Int16 Int16_Ranged { get; set; }
        new IHasBeenSetItem<Int16> Int16_Ranged_Property { get; }

        new Int32? Int32N { get; set; }
        new IHasBeenSetItem<Int32?> Int32N_Property { get; }

        new Int32? Int32N_Ranged { get; set; }
        new IHasBeenSetItem<Int32?> Int32N_Ranged_Property { get; }

        new Int32 Int32 { get; set; }
        new IHasBeenSetItem<Int32> Int32_Property { get; }

        new Int32 Int32_Ranged { get; set; }
        new IHasBeenSetItem<Int32> Int32_Ranged_Property { get; }

        new Int64? Int64N { get; set; }
        new IHasBeenSetItem<Int64?> Int64N_Property { get; }

        new Int64? Int64N_Ranged { get; set; }
        new IHasBeenSetItem<Int64?> Int64N_Ranged_Property { get; }

        new Int64 Int64 { get; set; }
        new IHasBeenSetItem<Int64> Int64_Property { get; }

        new Int64 Int64_Ranged { get; set; }
        new IHasBeenSetItem<Int64> Int64_Ranged_Property { get; }

        new SByte? Int8N { get; set; }
        new IHasBeenSetItem<SByte?> Int8N_Property { get; }

        new SByte? Int8N_Ranged { get; set; }
        new IHasBeenSetItem<SByte?> Int8N_Ranged_Property { get; }

        new SByte Int8 { get; set; }
        new IHasBeenSetItem<SByte> Int8_Property { get; }

        new SByte Int8_Ranged { get; set; }
        new IHasBeenSetItem<SByte> Int8_Ranged_Property { get; }

        new bool Unsafe { get; set; }
        new IHasBeenSetItem<bool> Unsafe_Property { get; }

        new P2Int? P2IntN { get; set; }
        new IHasBeenSetItem<P2Int?> P2IntN_Property { get; }

        new P2Int P2Int { get; set; }
        new IHasBeenSetItem<P2Int> P2Int_Property { get; }

        new P3Double? P3DoubleN { get; set; }
        new IHasBeenSetItem<P3Double?> P3DoubleN_Property { get; }

        new P3Double P3Double { get; set; }
        new IHasBeenSetItem<P3Double> P3Double_Property { get; }

        new P3Int? P3IntN { get; set; }
        new IHasBeenSetItem<P3Int?> P3IntN_Property { get; }

        new P3Int P3Int { get; set; }
        new IHasBeenSetItem<P3Int> P3Int_Property { get; }

        new Percent? PercentN { get; set; }
        new IHasBeenSetItem<Percent?> PercentN_Property { get; }

        new Percent Percent { get; set; }
        new IHasBeenSetItem<Percent> Percent_Property { get; }

        new RangeInt32? RangeIntN { get; set; }
        new IHasBeenSetItem<RangeInt32?> RangeIntN_Property { get; }

        new RangeInt32 RangeInt { get; set; }
        new IHasBeenSetItem<RangeInt32> RangeInt_Property { get; }

        new String String { get; set; }
        new IHasBeenSetItem<String> String_Property { get; }

        new UDouble? UDoubleN { get; set; }
        new IHasBeenSetItem<UDouble?> UDoubleN_Property { get; }

        new UDouble? UDoubleN_Ranged { get; set; }
        new IHasBeenSetItem<UDouble?> UDoubleN_Ranged_Property { get; }

        new UDouble UDouble { get; set; }
        new IHasBeenSetItem<UDouble> UDouble_Property { get; }

        new UDouble UDouble_Ranged { get; set; }
        new IHasBeenSetItem<UDouble> UDouble_Ranged_Property { get; }

        new UInt16? UInt16N { get; set; }
        new IHasBeenSetItem<UInt16?> UInt16N_Property { get; }

        new UInt16? UInt16N_Ranged { get; set; }
        new IHasBeenSetItem<UInt16?> UInt16N_Ranged_Property { get; }

        new UInt16 UInt16 { get; set; }
        new IHasBeenSetItem<UInt16> UInt16_Property { get; }

        new UInt16 UInt16_Ranged { get; set; }
        new IHasBeenSetItem<UInt16> UInt16_Ranged_Property { get; }

        new UInt32? UInt32N { get; set; }
        new IHasBeenSetItem<UInt32?> UInt32N_Property { get; }

        new UInt32? UInt32N_Ranged { get; set; }
        new IHasBeenSetItem<UInt32?> UInt32N_Ranged_Property { get; }

        new UInt32 UInt32 { get; set; }
        new IHasBeenSetItem<UInt32> UInt32_Property { get; }

        new UInt32 UInt32_Ranged { get; set; }
        new IHasBeenSetItem<UInt32> UInt32_Ranged_Property { get; }

        new UInt64? UInt64N { get; set; }
        new IHasBeenSetItem<UInt64?> UInt64N_Property { get; }

        new UInt64? UInt64N_Ranged { get; set; }
        new IHasBeenSetItem<UInt64?> UInt64N_Ranged_Property { get; }

        new UInt64 UInt64 { get; set; }
        new IHasBeenSetItem<UInt64> UInt64_Property { get; }

        new UInt64 UInt64_Ranged { get; set; }
        new IHasBeenSetItem<UInt64> UInt64_Ranged_Property { get; }

        new Byte? UInt8N { get; set; }
        new IHasBeenSetItem<Byte?> UInt8N_Property { get; }

        new Byte? UInt8N_Ranged { get; set; }
        new IHasBeenSetItem<Byte?> UInt8N_Ranged_Property { get; }

        new Byte UInt8 { get; set; }
        new IHasBeenSetItem<Byte> UInt8_Property { get; }

        new Byte UInt8_Ranged { get; set; }
        new IHasBeenSetItem<Byte> UInt8_Ranged_Property { get; }

        new TestEnum Enum { get; set; }
        new IHasBeenSetItem<TestEnum> Enum_Property { get; }

        new Object WildCard { get; set; }
        new IHasBeenSetItem<Object> WildCard_Property { get; }

        new ObjectToRef Ref { get; set; }
        new IHasBeenSetItem<ObjectToRef> Ref_Property { get; }

        new ObjectToRef Ref_NotNull { get; set; }
        new IHasBeenSetItem<ObjectToRef> Ref_NotNull_Property { get; }

        new IObjectToRefGetter RefGetter { get; set; }
        new IHasBeenSetItem<IObjectToRefGetter> RefGetter_Property { get; }

        new IObjectToRefGetter RefGetter_NotNull { get; set; }
        new IHasBeenSetItem<IObjectToRefGetter> RefGetter_NotNull_Property { get; }

        new IObjectToRef RefSetter { get; set; }
        new IHasBeenSetItem<IObjectToRef> RefSetter_Property { get; }

        new IObjectToRef RefSetter_NotNull { get; set; }
        new IHasBeenSetItem<IObjectToRef> RefSetter_NotNull_Property { get; }

        new INotifyingList<Boolean> List { get; }
        new INotifyingList<ObjectToRef> RefList { get; }
        new INotifyingDictionary<Boolean, String> Dict { get; }
        new INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get; }
        new INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue { get; }
    }

    public interface ITestObject_HasBeenSet_RPCGetter : INoggolloquyObject
    {
        #region BoolN
        Boolean? BoolN { get; }
        IHasBeenSetItemGetter<Boolean?> BoolN_Property { get; }

        #endregion
        #region Bool
        Boolean Bool { get; }
        IHasBeenSetItemGetter<Boolean> Bool_Property { get; }

        #endregion
        #region CharN
        Char? CharN { get; }
        IHasBeenSetItemGetter<Char?> CharN_Property { get; }

        #endregion
        #region Char
        Char Char { get; }
        IHasBeenSetItemGetter<Char> Char_Property { get; }

        #endregion
        #region DateTimeNull
        DateTime? DateTimeNull { get; }
        IHasBeenSetItemGetter<DateTime?> DateTimeNull_Property { get; }

        #endregion
        #region DateTime
        DateTime DateTime { get; }
        IHasBeenSetItemGetter<DateTime> DateTime_Property { get; }

        #endregion
        #region DoubleN
        Double? DoubleN { get; }
        IHasBeenSetItemGetter<Double?> DoubleN_Property { get; }

        #endregion
        #region DoubleN_Ranged
        Double? DoubleN_Ranged { get; }
        IHasBeenSetItemGetter<Double?> DoubleN_Ranged_Property { get; }

        #endregion
        #region Double
        Double Double { get; }
        IHasBeenSetItemGetter<Double> Double_Property { get; }

        #endregion
        #region Double_Ranged
        Double Double_Ranged { get; }
        IHasBeenSetItemGetter<Double> Double_Ranged_Property { get; }

        #endregion
        #region FloatN
        Single? FloatN { get; }
        IHasBeenSetItemGetter<Single?> FloatN_Property { get; }

        #endregion
        #region FloatN_Ranged
        Single? FloatN_Ranged { get; }
        IHasBeenSetItemGetter<Single?> FloatN_Ranged_Property { get; }

        #endregion
        #region Float
        Single Float { get; }
        IHasBeenSetItemGetter<Single> Float_Property { get; }

        #endregion
        #region Float_Ranged
        Single Float_Ranged { get; }
        IHasBeenSetItemGetter<Single> Float_Ranged_Property { get; }

        #endregion
        #region Int16N
        Int16? Int16N { get; }
        IHasBeenSetItemGetter<Int16?> Int16N_Property { get; }

        #endregion
        #region Int16N_Ranged
        Int16? Int16N_Ranged { get; }
        IHasBeenSetItemGetter<Int16?> Int16N_Ranged_Property { get; }

        #endregion
        #region Int16
        Int16 Int16 { get; }
        IHasBeenSetItemGetter<Int16> Int16_Property { get; }

        #endregion
        #region Int16_Ranged
        Int16 Int16_Ranged { get; }
        IHasBeenSetItemGetter<Int16> Int16_Ranged_Property { get; }

        #endregion
        #region Int32N
        Int32? Int32N { get; }
        IHasBeenSetItemGetter<Int32?> Int32N_Property { get; }

        #endregion
        #region Int32N_Ranged
        Int32? Int32N_Ranged { get; }
        IHasBeenSetItemGetter<Int32?> Int32N_Ranged_Property { get; }

        #endregion
        #region Int32
        Int32 Int32 { get; }
        IHasBeenSetItemGetter<Int32> Int32_Property { get; }

        #endregion
        #region Int32_Ranged
        Int32 Int32_Ranged { get; }
        IHasBeenSetItemGetter<Int32> Int32_Ranged_Property { get; }

        #endregion
        #region Int64N
        Int64? Int64N { get; }
        IHasBeenSetItemGetter<Int64?> Int64N_Property { get; }

        #endregion
        #region Int64N_Ranged
        Int64? Int64N_Ranged { get; }
        IHasBeenSetItemGetter<Int64?> Int64N_Ranged_Property { get; }

        #endregion
        #region Int64
        Int64 Int64 { get; }
        IHasBeenSetItemGetter<Int64> Int64_Property { get; }

        #endregion
        #region Int64_Ranged
        Int64 Int64_Ranged { get; }
        IHasBeenSetItemGetter<Int64> Int64_Ranged_Property { get; }

        #endregion
        #region Int8N
        SByte? Int8N { get; }
        IHasBeenSetItemGetter<SByte?> Int8N_Property { get; }

        #endregion
        #region Int8N_Ranged
        SByte? Int8N_Ranged { get; }
        IHasBeenSetItemGetter<SByte?> Int8N_Ranged_Property { get; }

        #endregion
        #region Int8
        SByte Int8 { get; }
        IHasBeenSetItemGetter<SByte> Int8_Property { get; }

        #endregion
        #region Int8_Ranged
        SByte Int8_Ranged { get; }
        IHasBeenSetItemGetter<SByte> Int8_Ranged_Property { get; }

        #endregion
        #region Unsafe
        bool Unsafe { get; }
        IHasBeenSetItemGetter<bool> Unsafe_Property { get; }

        #endregion
        #region P2IntN
        P2Int? P2IntN { get; }
        IHasBeenSetItemGetter<P2Int?> P2IntN_Property { get; }

        #endregion
        #region P2Int
        P2Int P2Int { get; }
        IHasBeenSetItemGetter<P2Int> P2Int_Property { get; }

        #endregion
        #region P3DoubleN
        P3Double? P3DoubleN { get; }
        IHasBeenSetItemGetter<P3Double?> P3DoubleN_Property { get; }

        #endregion
        #region P3Double
        P3Double P3Double { get; }
        IHasBeenSetItemGetter<P3Double> P3Double_Property { get; }

        #endregion
        #region P3IntN
        P3Int? P3IntN { get; }
        IHasBeenSetItemGetter<P3Int?> P3IntN_Property { get; }

        #endregion
        #region P3Int
        P3Int P3Int { get; }
        IHasBeenSetItemGetter<P3Int> P3Int_Property { get; }

        #endregion
        #region PercentN
        Percent? PercentN { get; }
        IHasBeenSetItemGetter<Percent?> PercentN_Property { get; }

        #endregion
        #region Percent
        Percent Percent { get; }
        IHasBeenSetItemGetter<Percent> Percent_Property { get; }

        #endregion
        #region RangeIntN
        RangeInt32? RangeIntN { get; }
        IHasBeenSetItemGetter<RangeInt32?> RangeIntN_Property { get; }

        #endregion
        #region RangeInt
        RangeInt32 RangeInt { get; }
        IHasBeenSetItemGetter<RangeInt32> RangeInt_Property { get; }

        #endregion
        #region String
        String String { get; }
        IHasBeenSetItemGetter<String> String_Property { get; }

        #endregion
        #region UDoubleN
        UDouble? UDoubleN { get; }
        IHasBeenSetItemGetter<UDouble?> UDoubleN_Property { get; }

        #endregion
        #region UDoubleN_Ranged
        UDouble? UDoubleN_Ranged { get; }
        IHasBeenSetItemGetter<UDouble?> UDoubleN_Ranged_Property { get; }

        #endregion
        #region UDouble
        UDouble UDouble { get; }
        IHasBeenSetItemGetter<UDouble> UDouble_Property { get; }

        #endregion
        #region UDouble_Ranged
        UDouble UDouble_Ranged { get; }
        IHasBeenSetItemGetter<UDouble> UDouble_Ranged_Property { get; }

        #endregion
        #region UInt16N
        UInt16? UInt16N { get; }
        IHasBeenSetItemGetter<UInt16?> UInt16N_Property { get; }

        #endregion
        #region UInt16N_Ranged
        UInt16? UInt16N_Ranged { get; }
        IHasBeenSetItemGetter<UInt16?> UInt16N_Ranged_Property { get; }

        #endregion
        #region UInt16
        UInt16 UInt16 { get; }
        IHasBeenSetItemGetter<UInt16> UInt16_Property { get; }

        #endregion
        #region UInt16_Ranged
        UInt16 UInt16_Ranged { get; }
        IHasBeenSetItemGetter<UInt16> UInt16_Ranged_Property { get; }

        #endregion
        #region UInt32N
        UInt32? UInt32N { get; }
        IHasBeenSetItemGetter<UInt32?> UInt32N_Property { get; }

        #endregion
        #region UInt32N_Ranged
        UInt32? UInt32N_Ranged { get; }
        IHasBeenSetItemGetter<UInt32?> UInt32N_Ranged_Property { get; }

        #endregion
        #region UInt32
        UInt32 UInt32 { get; }
        IHasBeenSetItemGetter<UInt32> UInt32_Property { get; }

        #endregion
        #region UInt32_Ranged
        UInt32 UInt32_Ranged { get; }
        IHasBeenSetItemGetter<UInt32> UInt32_Ranged_Property { get; }

        #endregion
        #region UInt64N
        UInt64? UInt64N { get; }
        IHasBeenSetItemGetter<UInt64?> UInt64N_Property { get; }

        #endregion
        #region UInt64N_Ranged
        UInt64? UInt64N_Ranged { get; }
        IHasBeenSetItemGetter<UInt64?> UInt64N_Ranged_Property { get; }

        #endregion
        #region UInt64
        UInt64 UInt64 { get; }
        IHasBeenSetItemGetter<UInt64> UInt64_Property { get; }

        #endregion
        #region UInt64_Ranged
        UInt64 UInt64_Ranged { get; }
        IHasBeenSetItemGetter<UInt64> UInt64_Ranged_Property { get; }

        #endregion
        #region UInt8N
        Byte? UInt8N { get; }
        IHasBeenSetItemGetter<Byte?> UInt8N_Property { get; }

        #endregion
        #region UInt8N_Ranged
        Byte? UInt8N_Ranged { get; }
        IHasBeenSetItemGetter<Byte?> UInt8N_Ranged_Property { get; }

        #endregion
        #region UInt8
        Byte UInt8 { get; }
        IHasBeenSetItemGetter<Byte> UInt8_Property { get; }

        #endregion
        #region UInt8_Ranged
        Byte UInt8_Ranged { get; }
        IHasBeenSetItemGetter<Byte> UInt8_Ranged_Property { get; }

        #endregion
        #region Enum
        TestEnum Enum { get; }
        IHasBeenSetItemGetter<TestEnum> Enum_Property { get; }

        #endregion
        #region WildCard
        Object WildCard { get; }
        IHasBeenSetItemGetter<Object> WildCard_Property { get; }

        #endregion
        #region Ref
        ObjectToRef Ref { get; }
        IHasBeenSetItemGetter<ObjectToRef> Ref_Property { get; }

        #endregion
        #region Ref_NotNull
        ObjectToRef Ref_NotNull { get; }
        IHasBeenSetItemGetter<ObjectToRef> Ref_NotNull_Property { get; }

        #endregion
        #region Ref_Singleton
        ObjectToRef Ref_Singleton { get; }
        IHasBeenSetItemGetter<ObjectToRef> Ref_Singleton_Property { get; }

        #endregion
        #region RefGetter
        IObjectToRefGetter RefGetter { get; }
        IHasBeenSetItemGetter<IObjectToRefGetter> RefGetter_Property { get; }

        #endregion
        #region RefGetter_NotNull
        IObjectToRefGetter RefGetter_NotNull { get; }
        IHasBeenSetItemGetter<IObjectToRefGetter> RefGetter_NotNull_Property { get; }

        #endregion
        #region RefGetter_Singleton
        IObjectToRefGetter RefGetter_Singleton { get; }
        IHasBeenSetItemGetter<IObjectToRefGetter> RefGetter_Singleton_Property { get; }

        #endregion
        #region RefSetter
        IObjectToRef RefSetter { get; }
        IHasBeenSetItemGetter<IObjectToRef> RefSetter_Property { get; }

        #endregion
        #region RefSetter_NotNull
        IObjectToRef RefSetter_NotNull { get; }
        IHasBeenSetItemGetter<IObjectToRef> RefSetter_NotNull_Property { get; }

        #endregion
        #region RefSetter_Singleton
        IObjectToRef RefSetter_Singleton { get; }
        IHasBeenSetItemGetter<IObjectToRef> RefSetter_Singleton_Property { get; }

        #endregion
        #region List
        INotifyingListGetter<Boolean> List { get; }
        #endregion
        #region RefList
        INotifyingListGetter<ObjectToRef> RefList { get; }
        #endregion
        #region Dict
        INotifyingDictionaryGetter<Boolean, String> Dict { get; }
        #endregion
        #region RefDict
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> RefDict { get; }
        #endregion
        #region DictKeyedValue
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> DictKeyedValue { get; }
        #endregion

    }

    #endregion

}

namespace Noggolloquy.Tests.Internals
{
    #region Field Index
    public enum TestObject_HasBeenSet_RPC_FieldIndex
    {
        BoolN = 0,
        Bool = 1,
        CharN = 2,
        Char = 3,
        DateTimeNull = 4,
        DateTime = 5,
        DoubleN = 6,
        DoubleN_Ranged = 7,
        Double = 8,
        Double_Ranged = 9,
        FloatN = 10,
        FloatN_Ranged = 11,
        Float = 12,
        Float_Ranged = 13,
        Int16N = 14,
        Int16N_Ranged = 15,
        Int16 = 16,
        Int16_Ranged = 17,
        Int32N = 18,
        Int32N_Ranged = 19,
        Int32 = 20,
        Int32_Ranged = 21,
        Int64N = 22,
        Int64N_Ranged = 23,
        Int64 = 24,
        Int64_Ranged = 25,
        Int8N = 26,
        Int8N_Ranged = 27,
        Int8 = 28,
        Int8_Ranged = 29,
        Unsafe = 30,
        P2IntN = 31,
        P2Int = 32,
        P3DoubleN = 33,
        P3Double = 34,
        P3IntN = 35,
        P3Int = 36,
        PercentN = 37,
        Percent = 38,
        RangeIntN = 39,
        RangeInt = 40,
        String = 41,
        UDoubleN = 42,
        UDoubleN_Ranged = 43,
        UDouble = 44,
        UDouble_Ranged = 45,
        UInt16N = 46,
        UInt16N_Ranged = 47,
        UInt16 = 48,
        UInt16_Ranged = 49,
        UInt32N = 50,
        UInt32N_Ranged = 51,
        UInt32 = 52,
        UInt32_Ranged = 53,
        UInt64N = 54,
        UInt64N_Ranged = 55,
        UInt64 = 56,
        UInt64_Ranged = 57,
        UInt8N = 58,
        UInt8N_Ranged = 59,
        UInt8 = 60,
        UInt8_Ranged = 61,
        Enum = 62,
        WildCard = 63,
        Ref = 64,
        Ref_NotNull = 65,
        Ref_Singleton = 66,
        RefGetter = 67,
        RefGetter_NotNull = 68,
        RefGetter_Singleton = 69,
        RefSetter = 70,
        RefSetter_NotNull = 71,
        RefSetter_Singleton = 72,
        List = 73,
        RefList = 74,
        Dict = 75,
        RefDict = 76,
        DictKeyedValue = 77,
    }
    #endregion

    #region Registration
    public class TestObject_HasBeenSet_RPC_Registration : INoggolloquyRegistration
    {
        public static readonly TestObject_HasBeenSet_RPC_Registration Instance = new TestObject_HasBeenSet_RPC_Registration();

        public static ProtocolDefinition ProtocolDefinition => ProtocolDefinition_NoggolloquyTests.Definition;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_NoggolloquyTests.ProtocolKey,
            msgID: 20,
            version: 0);

        public const string GUID = "7c899f8d-5f87-43fb-9629-ef919c2425c6";

        public const ushort FieldCount = 78;

        public static readonly Type MaskType = typeof(TestObject_HasBeenSet_RPC_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestObject_HasBeenSet_RPC_ErrorMask);

        public static readonly Type ClassType = typeof(TestObject_HasBeenSet_RPC);

        public const string FullName = "Noggolloquy.Tests.TestObject_HasBeenSet_RPC";

        public const string Name = "TestObject_HasBeenSet_RPC";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BOOLN":
                    return 0;
                case "BOOL":
                    return 1;
                case "CHARN":
                    return 2;
                case "CHAR":
                    return 3;
                case "DATETIMENULL":
                    return 4;
                case "DATETIME":
                    return 5;
                case "DOUBLEN":
                    return 6;
                case "DOUBLEN_RANGED":
                    return 7;
                case "DOUBLE":
                    return 8;
                case "DOUBLE_RANGED":
                    return 9;
                case "FLOATN":
                    return 10;
                case "FLOATN_RANGED":
                    return 11;
                case "FLOAT":
                    return 12;
                case "FLOAT_RANGED":
                    return 13;
                case "INT16N":
                    return 14;
                case "INT16N_RANGED":
                    return 15;
                case "INT16":
                    return 16;
                case "INT16_RANGED":
                    return 17;
                case "INT32N":
                    return 18;
                case "INT32N_RANGED":
                    return 19;
                case "INT32":
                    return 20;
                case "INT32_RANGED":
                    return 21;
                case "INT64N":
                    return 22;
                case "INT64N_RANGED":
                    return 23;
                case "INT64":
                    return 24;
                case "INT64_RANGED":
                    return 25;
                case "INT8N":
                    return 26;
                case "INT8N_RANGED":
                    return 27;
                case "INT8":
                    return 28;
                case "INT8_RANGED":
                    return 29;
                case "UNSAFE":
                    return 30;
                case "P2INTN":
                    return 31;
                case "P2INT":
                    return 32;
                case "P3DOUBLEN":
                    return 33;
                case "P3DOUBLE":
                    return 34;
                case "P3INTN":
                    return 35;
                case "P3INT":
                    return 36;
                case "PERCENTN":
                    return 37;
                case "PERCENT":
                    return 38;
                case "RANGEINTN":
                    return 39;
                case "RANGEINT":
                    return 40;
                case "STRING":
                    return 41;
                case "UDOUBLEN":
                    return 42;
                case "UDOUBLEN_RANGED":
                    return 43;
                case "UDOUBLE":
                    return 44;
                case "UDOUBLE_RANGED":
                    return 45;
                case "UINT16N":
                    return 46;
                case "UINT16N_RANGED":
                    return 47;
                case "UINT16":
                    return 48;
                case "UINT16_RANGED":
                    return 49;
                case "UINT32N":
                    return 50;
                case "UINT32N_RANGED":
                    return 51;
                case "UINT32":
                    return 52;
                case "UINT32_RANGED":
                    return 53;
                case "UINT64N":
                    return 54;
                case "UINT64N_RANGED":
                    return 55;
                case "UINT64":
                    return 56;
                case "UINT64_RANGED":
                    return 57;
                case "UINT8N":
                    return 58;
                case "UINT8N_RANGED":
                    return 59;
                case "UINT8":
                    return 60;
                case "UINT8_RANGED":
                    return 61;
                case "ENUM":
                    return 62;
                case "WILDCARD":
                    return 63;
                case "REF":
                    return 64;
                case "REF_NOTNULL":
                    return 65;
                case "REF_SINGLETON":
                    return 66;
                case "REFGETTER":
                    return 67;
                case "REFGETTER_NOTNULL":
                    return 68;
                case "REFGETTER_SINGLETON":
                    return 69;
                case "REFSETTER":
                    return 70;
                case "REFSETTER_NOTNULL":
                    return 71;
                case "REFSETTER_SINGLETON":
                    return 72;
                case "LIST":
                    return 73;
                case "REFLIST":
                    return 74;
                case "DICT":
                    return 75;
                case "REFDICT":
                    return 76;
                case "DICTKEYEDVALUE":
                    return 77;
                default:
                    throw new ArgumentException($"Queried unknown field: {str}");
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    return true;
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsNoggolloquy(ushort index)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    return true;
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    return true;
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                    return "BoolN";
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                    return "Bool";
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                    return "CharN";
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                    return "Char";
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                    return "DateTimeNull";
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                    return "DateTime";
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                    return "DoubleN";
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                    return "DoubleN_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                    return "Double";
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                    return "Double_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                    return "FloatN";
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                    return "FloatN_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                    return "Float";
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                    return "Float_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                    return "Int16N";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                    return "Int16N_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                    return "Int16";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                    return "Int16_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                    return "Int32N";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                    return "Int32N_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                    return "Int32";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                    return "Int32_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                    return "Int64N";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                    return "Int64N_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                    return "Int64";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                    return "Int64_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                    return "Int8N";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                    return "Int8N_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                    return "Int8";
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                    return "Int8_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                    return "Unsafe";
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                    return "P2IntN";
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                    return "P2Int";
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                    return "P3DoubleN";
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                    return "P3Double";
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                    return "P3IntN";
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                    return "P3Int";
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                    return "PercentN";
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                    return "Percent";
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                    return "RangeIntN";
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                    return "RangeInt";
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                    return "String";
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                    return "UDoubleN";
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                    return "UDoubleN_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                    return "UDouble";
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                    return "UDouble_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                    return "UInt16N";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                    return "UInt16N_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                    return "UInt16";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                    return "UInt16_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                    return "UInt32N";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                    return "UInt32N_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                    return "UInt32";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                    return "UInt32_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                    return "UInt64N";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                    return "UInt64N_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                    return "UInt64";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                    return "UInt64_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                    return "UInt8N";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                    return "UInt8N_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                    return "UInt8";
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                    return "UInt8_Ranged";
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                    return "Enum";
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                    return "WildCard";
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                    return "Ref";
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                    return "Ref_NotNull";
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                    return "Ref_Singleton";
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                    return "RefGetter";
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                    return "RefGetter_NotNull";
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                    return "RefGetter_Singleton";
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                    return "RefSetter";
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                    return "RefSetter_NotNull";
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    return "RefSetter_Singleton";
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                    return "List";
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    return "RefList";
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                    return "Dict";
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                    return "RefDict";
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    return "DictKeyedValue";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                    return typeof(Boolean?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                    return typeof(Boolean);
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                    return typeof(Char?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                    return typeof(Char);
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                    return typeof(DateTime?);
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                    return typeof(DateTime);
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                    return typeof(Double?);
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                    return typeof(Double?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                    return typeof(Double);
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                    return typeof(Double);
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                    return typeof(Single?);
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                    return typeof(Single?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                    return typeof(Single);
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                    return typeof(Single);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                    return typeof(Int16?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                    return typeof(Int16?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                    return typeof(Int16);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                    return typeof(Int16);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                    return typeof(Int32?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                    return typeof(Int32?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                    return typeof(Int32);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                    return typeof(Int32);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                    return typeof(Int64?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                    return typeof(Int64?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                    return typeof(Int64);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                    return typeof(Int64);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                    return typeof(SByte?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                    return typeof(SByte?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                    return typeof(SByte);
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                    return typeof(SByte);
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                    return typeof(bool);
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                    return typeof(P2Int?);
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                    return typeof(P2Int);
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                    return typeof(P3Double?);
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                    return typeof(P3Double);
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                    return typeof(P3Int?);
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                    return typeof(P3Int);
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                    return typeof(Percent?);
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                    return typeof(Percent);
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                    return typeof(RangeInt32?);
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                    return typeof(RangeInt32);
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                    return typeof(String);
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                    return typeof(UDouble?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                    return typeof(UDouble?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                    return typeof(UDouble);
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                    return typeof(UDouble);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                    return typeof(UInt16?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                    return typeof(UInt16?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                    return typeof(UInt16);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                    return typeof(UInt16);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                    return typeof(UInt32?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                    return typeof(UInt32?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                    return typeof(UInt32);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                    return typeof(UInt32);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                    return typeof(UInt64?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                    return typeof(UInt64?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                    return typeof(UInt64);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                    return typeof(UInt64);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                    return typeof(Byte?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                    return typeof(Byte?);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                    return typeof(Byte);
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                    return typeof(Byte);
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                    return typeof(TestEnum);
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                    return typeof(Object);
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                    return typeof(ObjectToRef);
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                    return typeof(ObjectToRef);
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                    return typeof(ObjectToRef);
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                    return typeof(IObjectToRefGetter);
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                    return typeof(IObjectToRefGetter);
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                    return typeof(IObjectToRefGetter);
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                    return typeof(IObjectToRef);
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                    return typeof(IObjectToRef);
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    return typeof(IObjectToRef);
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                    return typeof(NotifyingList<Boolean>);
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    return typeof(NotifyingList<ObjectToRef>);
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                    return typeof(NotifyingDictionary<Boolean, String>);
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, ObjectToRef>);
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    return typeof(NotifyingDictionary<Int32, ObjectToRef>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolDefinition INoggolloquyRegistration.ProtocolDefinition => ProtocolDefinition;
        ObjectKey INoggolloquyRegistration.ObjectKey => ObjectKey;
        string INoggolloquyRegistration.GUID => GUID;
        int INoggolloquyRegistration.FieldCount => FieldCount;
        Type INoggolloquyRegistration.MaskType => MaskType;
        Type INoggolloquyRegistration.ErrorMaskType => ErrorMaskType;
        Type INoggolloquyRegistration.ClassType => ClassType;
        string INoggolloquyRegistration.FullName => FullName;
        string INoggolloquyRegistration.Name => Name;
        byte INoggolloquyRegistration.GenericCount => GenericCount;
        Type INoggolloquyRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? INoggolloquyRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool INoggolloquyRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool INoggolloquyRegistration.GetNthIsNoggolloquy(ushort index) => GetNthIsNoggolloquy(index);
        bool INoggolloquyRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string INoggolloquyRegistration.GetNthName(ushort index) => GetNthName(index);
        bool INoggolloquyRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool INoggolloquyRegistration.IsProtected(ushort index) => IsProtected(index);
        Type INoggolloquyRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class TestObject_HasBeenSet_RPCCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITestObject_HasBeenSet_RPC item,
            ITestObject_HasBeenSet_RPCGetter rhs,
            ITestObject_HasBeenSet_RPCGetter def,
            bool doErrorMask,
            Func<TestObject_HasBeenSet_RPC_ErrorMask> errorMask,
            TestObject_HasBeenSet_RPC_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.BoolN ?? true)
            {
                item.BoolN_Property.SetToWithDefault(
                    rhs.BoolN_Property,
                    def?.BoolN_Property);
            }
            if (copyMask?.Bool ?? true)
            {
                item.Bool_Property.SetToWithDefault(
                    rhs.Bool_Property,
                    def?.Bool_Property);
            }
            if (copyMask?.CharN ?? true)
            {
                item.CharN_Property.SetToWithDefault(
                    rhs.CharN_Property,
                    def?.CharN_Property);
            }
            if (copyMask?.Char ?? true)
            {
                item.Char_Property.SetToWithDefault(
                    rhs.Char_Property,
                    def?.Char_Property);
            }
            if (copyMask?.DateTimeNull ?? true)
            {
                item.DateTimeNull_Property.SetToWithDefault(
                    rhs.DateTimeNull_Property,
                    def?.DateTimeNull_Property);
            }
            if (copyMask?.DateTime ?? true)
            {
                item.DateTime_Property.SetToWithDefault(
                    rhs.DateTime_Property,
                    def?.DateTime_Property);
            }
            if (copyMask?.DoubleN ?? true)
            {
                item.DoubleN_Property.SetToWithDefault(
                    rhs.DoubleN_Property,
                    def?.DoubleN_Property);
            }
            if (copyMask?.DoubleN_Ranged ?? true)
            {
                item.DoubleN_Ranged_Property.SetToWithDefault(
                    rhs.DoubleN_Ranged_Property,
                    def?.DoubleN_Ranged_Property);
            }
            if (copyMask?.Double ?? true)
            {
                item.Double_Property.SetToWithDefault(
                    rhs.Double_Property,
                    def?.Double_Property);
            }
            if (copyMask?.Double_Ranged ?? true)
            {
                item.Double_Ranged_Property.SetToWithDefault(
                    rhs.Double_Ranged_Property,
                    def?.Double_Ranged_Property);
            }
            if (copyMask?.FloatN ?? true)
            {
                item.FloatN_Property.SetToWithDefault(
                    rhs.FloatN_Property,
                    def?.FloatN_Property);
            }
            if (copyMask?.FloatN_Ranged ?? true)
            {
                item.FloatN_Ranged_Property.SetToWithDefault(
                    rhs.FloatN_Ranged_Property,
                    def?.FloatN_Ranged_Property);
            }
            if (copyMask?.Float ?? true)
            {
                item.Float_Property.SetToWithDefault(
                    rhs.Float_Property,
                    def?.Float_Property);
            }
            if (copyMask?.Float_Ranged ?? true)
            {
                item.Float_Ranged_Property.SetToWithDefault(
                    rhs.Float_Ranged_Property,
                    def?.Float_Ranged_Property);
            }
            if (copyMask?.Int16N ?? true)
            {
                item.Int16N_Property.SetToWithDefault(
                    rhs.Int16N_Property,
                    def?.Int16N_Property);
            }
            if (copyMask?.Int16N_Ranged ?? true)
            {
                item.Int16N_Ranged_Property.SetToWithDefault(
                    rhs.Int16N_Ranged_Property,
                    def?.Int16N_Ranged_Property);
            }
            if (copyMask?.Int16 ?? true)
            {
                item.Int16_Property.SetToWithDefault(
                    rhs.Int16_Property,
                    def?.Int16_Property);
            }
            if (copyMask?.Int16_Ranged ?? true)
            {
                item.Int16_Ranged_Property.SetToWithDefault(
                    rhs.Int16_Ranged_Property,
                    def?.Int16_Ranged_Property);
            }
            if (copyMask?.Int32N ?? true)
            {
                item.Int32N_Property.SetToWithDefault(
                    rhs.Int32N_Property,
                    def?.Int32N_Property);
            }
            if (copyMask?.Int32N_Ranged ?? true)
            {
                item.Int32N_Ranged_Property.SetToWithDefault(
                    rhs.Int32N_Ranged_Property,
                    def?.Int32N_Ranged_Property);
            }
            if (copyMask?.Int32 ?? true)
            {
                item.Int32_Property.SetToWithDefault(
                    rhs.Int32_Property,
                    def?.Int32_Property);
            }
            if (copyMask?.Int32_Ranged ?? true)
            {
                item.Int32_Ranged_Property.SetToWithDefault(
                    rhs.Int32_Ranged_Property,
                    def?.Int32_Ranged_Property);
            }
            if (copyMask?.Int64N ?? true)
            {
                item.Int64N_Property.SetToWithDefault(
                    rhs.Int64N_Property,
                    def?.Int64N_Property);
            }
            if (copyMask?.Int64N_Ranged ?? true)
            {
                item.Int64N_Ranged_Property.SetToWithDefault(
                    rhs.Int64N_Ranged_Property,
                    def?.Int64N_Ranged_Property);
            }
            if (copyMask?.Int64 ?? true)
            {
                item.Int64_Property.SetToWithDefault(
                    rhs.Int64_Property,
                    def?.Int64_Property);
            }
            if (copyMask?.Int64_Ranged ?? true)
            {
                item.Int64_Ranged_Property.SetToWithDefault(
                    rhs.Int64_Ranged_Property,
                    def?.Int64_Ranged_Property);
            }
            if (copyMask?.Int8N ?? true)
            {
                item.Int8N_Property.SetToWithDefault(
                    rhs.Int8N_Property,
                    def?.Int8N_Property);
            }
            if (copyMask?.Int8N_Ranged ?? true)
            {
                item.Int8N_Ranged_Property.SetToWithDefault(
                    rhs.Int8N_Ranged_Property,
                    def?.Int8N_Ranged_Property);
            }
            if (copyMask?.Int8 ?? true)
            {
                item.Int8_Property.SetToWithDefault(
                    rhs.Int8_Property,
                    def?.Int8_Property);
            }
            if (copyMask?.Int8_Ranged ?? true)
            {
                item.Int8_Ranged_Property.SetToWithDefault(
                    rhs.Int8_Ranged_Property,
                    def?.Int8_Ranged_Property);
            }
            if (copyMask?.Unsafe ?? true)
            {
                item.Unsafe_Property.SetToWithDefault(
                    rhs.Unsafe_Property,
                    def?.Unsafe_Property);
            }
            if (copyMask?.P2IntN ?? true)
            {
                item.P2IntN_Property.SetToWithDefault(
                    rhs.P2IntN_Property,
                    def?.P2IntN_Property);
            }
            if (copyMask?.P2Int ?? true)
            {
                item.P2Int_Property.SetToWithDefault(
                    rhs.P2Int_Property,
                    def?.P2Int_Property);
            }
            if (copyMask?.P3DoubleN ?? true)
            {
                item.P3DoubleN_Property.SetToWithDefault(
                    rhs.P3DoubleN_Property,
                    def?.P3DoubleN_Property);
            }
            if (copyMask?.P3Double ?? true)
            {
                item.P3Double_Property.SetToWithDefault(
                    rhs.P3Double_Property,
                    def?.P3Double_Property);
            }
            if (copyMask?.P3IntN ?? true)
            {
                item.P3IntN_Property.SetToWithDefault(
                    rhs.P3IntN_Property,
                    def?.P3IntN_Property);
            }
            if (copyMask?.P3Int ?? true)
            {
                item.P3Int_Property.SetToWithDefault(
                    rhs.P3Int_Property,
                    def?.P3Int_Property);
            }
            if (copyMask?.PercentN ?? true)
            {
                item.PercentN_Property.SetToWithDefault(
                    rhs.PercentN_Property,
                    def?.PercentN_Property);
            }
            if (copyMask?.Percent ?? true)
            {
                item.Percent_Property.SetToWithDefault(
                    rhs.Percent_Property,
                    def?.Percent_Property);
            }
            if (copyMask?.RangeIntN ?? true)
            {
                item.RangeIntN_Property.SetToWithDefault(
                    rhs.RangeIntN_Property,
                    def?.RangeIntN_Property);
            }
            if (copyMask?.RangeInt ?? true)
            {
                item.RangeInt_Property.SetToWithDefault(
                    rhs.RangeInt_Property,
                    def?.RangeInt_Property);
            }
            if (copyMask?.String ?? true)
            {
                item.String_Property.SetToWithDefault(
                    rhs.String_Property,
                    def?.String_Property);
            }
            if (copyMask?.UDoubleN ?? true)
            {
                item.UDoubleN_Property.SetToWithDefault(
                    rhs.UDoubleN_Property,
                    def?.UDoubleN_Property);
            }
            if (copyMask?.UDoubleN_Ranged ?? true)
            {
                item.UDoubleN_Ranged_Property.SetToWithDefault(
                    rhs.UDoubleN_Ranged_Property,
                    def?.UDoubleN_Ranged_Property);
            }
            if (copyMask?.UDouble ?? true)
            {
                item.UDouble_Property.SetToWithDefault(
                    rhs.UDouble_Property,
                    def?.UDouble_Property);
            }
            if (copyMask?.UDouble_Ranged ?? true)
            {
                item.UDouble_Ranged_Property.SetToWithDefault(
                    rhs.UDouble_Ranged_Property,
                    def?.UDouble_Ranged_Property);
            }
            if (copyMask?.UInt16N ?? true)
            {
                item.UInt16N_Property.SetToWithDefault(
                    rhs.UInt16N_Property,
                    def?.UInt16N_Property);
            }
            if (copyMask?.UInt16N_Ranged ?? true)
            {
                item.UInt16N_Ranged_Property.SetToWithDefault(
                    rhs.UInt16N_Ranged_Property,
                    def?.UInt16N_Ranged_Property);
            }
            if (copyMask?.UInt16 ?? true)
            {
                item.UInt16_Property.SetToWithDefault(
                    rhs.UInt16_Property,
                    def?.UInt16_Property);
            }
            if (copyMask?.UInt16_Ranged ?? true)
            {
                item.UInt16_Ranged_Property.SetToWithDefault(
                    rhs.UInt16_Ranged_Property,
                    def?.UInt16_Ranged_Property);
            }
            if (copyMask?.UInt32N ?? true)
            {
                item.UInt32N_Property.SetToWithDefault(
                    rhs.UInt32N_Property,
                    def?.UInt32N_Property);
            }
            if (copyMask?.UInt32N_Ranged ?? true)
            {
                item.UInt32N_Ranged_Property.SetToWithDefault(
                    rhs.UInt32N_Ranged_Property,
                    def?.UInt32N_Ranged_Property);
            }
            if (copyMask?.UInt32 ?? true)
            {
                item.UInt32_Property.SetToWithDefault(
                    rhs.UInt32_Property,
                    def?.UInt32_Property);
            }
            if (copyMask?.UInt32_Ranged ?? true)
            {
                item.UInt32_Ranged_Property.SetToWithDefault(
                    rhs.UInt32_Ranged_Property,
                    def?.UInt32_Ranged_Property);
            }
            if (copyMask?.UInt64N ?? true)
            {
                item.UInt64N_Property.SetToWithDefault(
                    rhs.UInt64N_Property,
                    def?.UInt64N_Property);
            }
            if (copyMask?.UInt64N_Ranged ?? true)
            {
                item.UInt64N_Ranged_Property.SetToWithDefault(
                    rhs.UInt64N_Ranged_Property,
                    def?.UInt64N_Ranged_Property);
            }
            if (copyMask?.UInt64 ?? true)
            {
                item.UInt64_Property.SetToWithDefault(
                    rhs.UInt64_Property,
                    def?.UInt64_Property);
            }
            if (copyMask?.UInt64_Ranged ?? true)
            {
                item.UInt64_Ranged_Property.SetToWithDefault(
                    rhs.UInt64_Ranged_Property,
                    def?.UInt64_Ranged_Property);
            }
            if (copyMask?.UInt8N ?? true)
            {
                item.UInt8N_Property.SetToWithDefault(
                    rhs.UInt8N_Property,
                    def?.UInt8N_Property);
            }
            if (copyMask?.UInt8N_Ranged ?? true)
            {
                item.UInt8N_Ranged_Property.SetToWithDefault(
                    rhs.UInt8N_Ranged_Property,
                    def?.UInt8N_Ranged_Property);
            }
            if (copyMask?.UInt8 ?? true)
            {
                item.UInt8_Property.SetToWithDefault(
                    rhs.UInt8_Property,
                    def?.UInt8_Property);
            }
            if (copyMask?.UInt8_Ranged ?? true)
            {
                item.UInt8_Ranged_Property.SetToWithDefault(
                    rhs.UInt8_Ranged_Property,
                    def?.UInt8_Ranged_Property);
            }
            if (copyMask?.Enum ?? true)
            {
                item.Enum_Property.SetToWithDefault(
                    rhs.Enum_Property,
                    def?.Enum_Property);
            }
            if (copyMask?.WildCard ?? true)
            {
                item.WildCard_Property.SetToWithDefault(
                    rhs.WildCard_Property,
                    def?.WildCard_Property);
            }
            if (copyMask?.Ref.Overall != CopyType.Skip)
            {
                try
                {
                    item.Ref_Property.SetToWithDefault(
                        rhs.Ref_Property,
                        def?.Ref_Property,
                        (r, d) =>
                        {
                            switch (copyMask?.Ref.Overall ?? CopyType.Reference)
                            {
                                case CopyType.Reference:
                                    return r;
                                case CopyType.CopyIn:
                                    ObjectToRefCommon.CopyFieldsFrom(
                                        item: item.Ref,
                                        rhs: rhs.Ref,
                                        def: def?.Ref,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Ref.Specific == null)
                                            {
                                                baseMask.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                            }
                                            return baseMask.Ref.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Ref.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyType.MakeCopy:
                                    if (r == null) return null;
                                    return ObjectToRef.Copy(
                                        r,
                                        copyMask?.Ref.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyType {copyMask?.Ref.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.Ref, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.Ref_NotNull.Overall != CopyType.Skip)
            {
                try
                {
                    item.Ref_NotNull_Property.SetToWithDefault(
                        rhs.Ref_NotNull_Property,
                        def?.Ref_NotNull_Property,
                        (r, d) =>
                        {
                            switch (copyMask?.Ref_NotNull.Overall ?? CopyType.Reference)
                            {
                                case CopyType.Reference:
                                    return r;
                                case CopyType.CopyIn:
                                    ObjectToRefCommon.CopyFieldsFrom(
                                        item: item.Ref_NotNull,
                                        rhs: rhs.Ref_NotNull,
                                        def: def?.Ref_NotNull,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Ref_NotNull.Specific == null)
                                            {
                                                baseMask.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                            }
                                            return baseMask.Ref_NotNull.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Ref_NotNull.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyType.MakeCopy:
                                    if (r == null) return null;
                                    return ObjectToRef.Copy(
                                        r,
                                        copyMask?.Ref_NotNull.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyType {copyMask?.Ref_NotNull.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.Ref_Singleton.Overall ?? true)
            {
                try
                {
                    ObjectToRefCommon.CopyFieldsFrom(
                        item: item.Ref_Singleton,
                        rhs: rhs.Ref_Singleton,
                        def: def?.Ref_Singleton,
                        doErrorMask: doErrorMask,
                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Ref_Singleton.Specific == null)
                            {
                                baseMask.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                            }
                            return baseMask.Ref_Singleton.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Ref_Singleton.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.RefGetter.Overall != CopyType.Skip)
            {
                try
                {
                    item.RefGetter_Property.SetToWithDefault(
                        rhs.RefGetter_Property,
                        def?.RefGetter_Property,
                        (r, d) =>
                        {
                            switch (copyMask?.RefGetter.Overall ?? CopyType.Reference)
                            {
                                case CopyType.Reference:
                                    return r;
                                case CopyType.CopyIn:
                                case CopyType.MakeCopy:
                                    if (r == null) return null;
                                    return ObjectToRef.Copy_ToNoggolloquy(
                                        r,
                                        copyMask?.RefGetter.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyType {copyMask?.RefGetter.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.RefGetter, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.RefGetter_NotNull.Overall != CopyType.Skip)
            {
                try
                {
                    item.RefGetter_NotNull_Property.SetToWithDefault(
                        rhs.RefGetter_NotNull_Property,
                        def?.RefGetter_NotNull_Property,
                        (r, d) =>
                        {
                            switch (copyMask?.RefGetter_NotNull.Overall ?? CopyType.Reference)
                            {
                                case CopyType.Reference:
                                    return r;
                                case CopyType.CopyIn:
                                case CopyType.MakeCopy:
                                    if (r == null) return null;
                                    return ObjectToRef.Copy_ToNoggolloquy(
                                        r,
                                        copyMask?.RefGetter_NotNull.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyType {copyMask?.RefGetter_NotNull.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.RefSetter.Overall != CopyType.Skip)
            {
                try
                {
                    item.RefSetter_Property.SetToWithDefault(
                        rhs.RefSetter_Property,
                        def?.RefSetter_Property,
                        (r, d) =>
                        {
                            switch (copyMask?.RefSetter.Overall ?? CopyType.Reference)
                            {
                                case CopyType.Reference:
                                    return r;
                                case CopyType.CopyIn:
                                    ObjectToRefCommon.CopyFieldsFrom(
                                        item: item.RefSetter,
                                        rhs: rhs.RefSetter,
                                        def: def?.RefSetter,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.RefSetter.Specific == null)
                                            {
                                                baseMask.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                            }
                                            return baseMask.RefSetter.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.RefSetter.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyType.MakeCopy:
                                    if (r == null) return null;
                                    return ObjectToRef.Copy(
                                        r,
                                        copyMask?.RefSetter.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyType {copyMask?.RefSetter.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.RefSetter, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.RefSetter_NotNull.Overall != CopyType.Skip)
            {
                try
                {
                    item.RefSetter_NotNull_Property.SetToWithDefault(
                        rhs.RefSetter_NotNull_Property,
                        def?.RefSetter_NotNull_Property,
                        (r, d) =>
                        {
                            switch (copyMask?.RefSetter_NotNull.Overall ?? CopyType.Reference)
                            {
                                case CopyType.Reference:
                                    return r;
                                case CopyType.CopyIn:
                                    ObjectToRefCommon.CopyFieldsFrom(
                                        item: item.RefSetter_NotNull,
                                        rhs: rhs.RefSetter_NotNull,
                                        def: def?.RefSetter_NotNull,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.RefSetter_NotNull.Specific == null)
                                            {
                                                baseMask.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                            }
                                            return baseMask.RefSetter_NotNull.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.RefSetter_NotNull.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyType.MakeCopy:
                                    if (r == null) return null;
                                    return ObjectToRef.Copy(
                                        r,
                                        copyMask?.RefSetter_NotNull.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyType {copyMask?.RefSetter_NotNull.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.RefSetter_Singleton.Overall ?? true)
            {
                try
                {
                    ObjectToRefCommon.CopyFieldsFrom(
                        item: item.RefSetter_Singleton,
                        rhs: rhs.RefSetter_Singleton,
                        def: def?.RefSetter_Singleton,
                        doErrorMask: doErrorMask,
                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.RefSetter_Singleton.Specific == null)
                            {
                                baseMask.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                            }
                            return baseMask.RefSetter_Singleton.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.RefSetter_Singleton.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.List != CopyType.Skip)
            {
                try
                {
                    item.List.SetToWithDefault(
                        rhs.List,
                        def?.List,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.List, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.RefList.Overall != CopyType.Skip)
            {
                try
                {
                    item.RefList.SetToWithDefault(
                        rhs.RefList,
                        def?.RefList,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RefList.Overall ?? CopyType.Reference)
                            {
                                case CopyType.Reference:
                                    return r;
                                case CopyType.MakeCopy:
                                    return r.Copy(copyMask?.RefList.Specific, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyType {copyMask?.RefList.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.RefList, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.Dict ?? true)
            {
                try
                {
                    item.Dict.SetToWithDefault(
                        rhs.Dict,
                        def?.Dict,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.Dict, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.RefDict.Overall ?? true)
            {
                try
                {
                    item.RefDict.SetToWithDefault(
                        rhs.RefDict,
                        def?.RefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef key;
                            switch (copyMask?.RefDict.Specific.Key.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    key = k;
                                    break;
                                case RefCopyType.Deep:
                                    key = k.Copy(copyMask: copyMask?.RefDict.Specific.Key.Mask);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.RefDict.Overall}. Cannot execute copy.");
                            }
                            ObjectToRef val;
                            switch (copyMask?.RefDict.Specific.Value.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    val = v;
                                    break;
                                case RefCopyType.Deep:
                                    val = v.Copy(copyMask?.RefDict.Specific.Value.Mask, d);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.RefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<ObjectToRef, ObjectToRef>(key, val);
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.RefDict, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            if (copyMask?.DictKeyedValue.Overall != CopyType.Skip)
            {
                try
                {
                    item.DictKeyedValue.SetToWithDefault(
                        rhs.DictKeyedValue,
                        def?.DictKeyedValue,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.DictKeyedValue.Overall ?? CopyType.Reference)
                            {
                                case CopyType.Reference:
                                    return r;
                                case CopyType.MakeCopy:
                                    return r.Copy(copyMask?.DictKeyedValue.Specific, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyType {copyMask?.DictKeyedValue.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask)
                    {
                        errorMask().SetNthException((ushort)TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue, ex);
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestObject_HasBeenSet_RPC obj,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                    obj.BoolN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                    obj.Bool_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                    obj.CharN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                    obj.Char_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                    obj.DateTimeNull_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                    obj.DateTime_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                    obj.DoubleN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                    obj.DoubleN_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                    obj.Double_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                    obj.Double_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                    obj.FloatN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                    obj.FloatN_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                    obj.Float_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                    obj.Float_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                    obj.Int16N_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                    obj.Int16N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                    obj.Int16_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                    obj.Int16_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                    obj.Int32N_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                    obj.Int32N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                    obj.Int32_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                    obj.Int32_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                    obj.Int64N_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                    obj.Int64N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                    obj.Int64_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                    obj.Int64_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                    obj.Int8N_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                    obj.Int8N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                    obj.Int8_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                    obj.Int8_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                    obj.Unsafe_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                    obj.P2IntN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                    obj.P2Int_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                    obj.P3DoubleN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                    obj.P3Double_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                    obj.P3IntN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                    obj.P3Int_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                    obj.PercentN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                    obj.Percent_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                    obj.RangeIntN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                    obj.RangeInt_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                    obj.String_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                    obj.UDoubleN_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                    obj.UDoubleN_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                    obj.UDouble_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                    obj.UDouble_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                    obj.UInt16N_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                    obj.UInt16N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                    obj.UInt16_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                    obj.UInt16_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                    obj.UInt32N_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                    obj.UInt32N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                    obj.UInt32_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                    obj.UInt32_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                    obj.UInt64N_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                    obj.UInt64N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                    obj.UInt64_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                    obj.UInt64_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                    obj.UInt8N_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                    obj.UInt8N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                    obj.UInt8_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                    obj.UInt8_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                    obj.Enum_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                    obj.WildCard_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                    obj.Ref_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                    obj.Ref_NotNull_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Cannot mark set status of a singleton: Ref_Singleton");
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                    obj.RefGetter_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                    obj.RefGetter_NotNull_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot mark set status of a singleton: RefGetter_Singleton");
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                    obj.RefSetter_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                    obj.RefSetter_NotNull_Property.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Cannot mark set status of a singleton: RefSetter_Singleton");
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                    obj.List.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    obj.RefList.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                    obj.Dict.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                    obj.RefDict.HasBeenSet = on;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestObject_HasBeenSet_RPC obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                    obj.BoolN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                    obj.Bool_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                    obj.CharN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                    obj.Char_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                    obj.DateTimeNull_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                    obj.DateTime_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                    obj.DoubleN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                    obj.DoubleN_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                    obj.Double_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                    obj.Double_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                    obj.FloatN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                    obj.FloatN_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                    obj.Float_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                    obj.Float_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                    obj.Int16N_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                    obj.Int16N_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                    obj.Int16_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                    obj.Int16_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                    obj.Int32N_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                    obj.Int32N_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                    obj.Int32_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                    obj.Int32_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                    obj.Int64N_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                    obj.Int64N_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                    obj.Int64_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                    obj.Int64_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                    obj.Int8N_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                    obj.Int8N_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                    obj.Int8_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                    obj.Int8_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                    obj.Unsafe_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                    obj.P2IntN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                    obj.P2Int_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                    obj.P3DoubleN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                    obj.P3Double_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                    obj.P3IntN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                    obj.P3Int_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                    obj.PercentN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                    obj.Percent_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                    obj.RangeIntN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                    obj.RangeInt_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                    obj.String_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                    obj.UDoubleN_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                    obj.UDoubleN_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                    obj.UDouble_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                    obj.UDouble_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                    obj.UInt16N_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                    obj.UInt16N_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                    obj.UInt16_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                    obj.UInt16_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                    obj.UInt32N_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                    obj.UInt32N_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                    obj.UInt32_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                    obj.UInt32_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                    obj.UInt64N_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                    obj.UInt64N_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                    obj.UInt64_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                    obj.UInt64_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                    obj.UInt8N_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                    obj.UInt8N_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                    obj.UInt8_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                    obj.UInt8_Ranged_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                    obj.Enum_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                    obj.WildCard_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                    obj.Ref_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                    obj.Ref_NotNull_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                    ObjectToRefCommon.Clear(obj.Ref_Singleton, cmds.ToUnsetParams());
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                    obj.RefGetter_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                    obj.RefGetter_NotNull_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot unset a get only singleton: RefGetter_Singleton");
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                    obj.RefSetter_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                    obj.RefSetter_NotNull_Property.Unset();
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    ObjectToRefCommon.Clear(obj.RefSetter_Singleton, cmds.ToUnsetParams());
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                    obj.List.Unset(cmds);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    obj.RefList.Unset(cmds);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                    obj.Dict.Unset(cmds);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                    obj.RefDict.Unset(cmds);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestObject_HasBeenSet_RPC obj)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                    return obj.BoolN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                    return obj.Bool_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                    return obj.CharN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                    return obj.Char_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                    return obj.DateTimeNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                    return obj.DateTime_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                    return obj.DoubleN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                    return obj.DoubleN_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                    return obj.Double_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                    return obj.Double_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                    return obj.FloatN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                    return obj.FloatN_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                    return obj.Float_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                    return obj.Float_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                    return obj.Int16N_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                    return obj.Int16N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                    return obj.Int16_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                    return obj.Int16_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                    return obj.Int32N_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                    return obj.Int32N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                    return obj.Int32_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                    return obj.Int32_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                    return obj.Int64N_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                    return obj.Int64N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                    return obj.Int64_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                    return obj.Int64_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                    return obj.Int8N_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                    return obj.Int8N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                    return obj.Int8_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                    return obj.Int8_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                    return obj.Unsafe_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                    return obj.P2IntN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                    return obj.P2Int_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                    return obj.P3Double_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                    return obj.P3IntN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                    return obj.P3Int_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                    return obj.PercentN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                    return obj.Percent_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                    return obj.RangeIntN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                    return obj.RangeInt_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                    return obj.String_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                    return obj.UDoubleN_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                    return obj.UDoubleN_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                    return obj.UDouble_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                    return obj.UDouble_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                    return obj.UInt16N_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                    return obj.UInt16N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                    return obj.UInt16_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                    return obj.UInt16_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                    return obj.UInt32N_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                    return obj.UInt32N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                    return obj.UInt32_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                    return obj.UInt32_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                    return obj.UInt64N_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                    return obj.UInt64N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                    return obj.UInt64_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                    return obj.UInt64_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                    return obj.UInt8N_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                    return obj.UInt8N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                    return obj.UInt8_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                    return obj.UInt8_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                    return obj.Enum_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                    return obj.WildCard_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                    return obj.Ref_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                    return obj.Ref_NotNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                    return obj.Ref_Singleton_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                    return obj.RefGetter_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                    return obj.RefGetter_NotNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                    return obj.RefGetter_Singleton_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                    return obj.RefSetter_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                    return obj.RefSetter_NotNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    return obj.RefSetter_Singleton_Property.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                    return obj.List.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    return obj.RefList.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                    return obj.Dict.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                    return obj.RefDict.HasBeenSet;
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestObject_HasBeenSet_RPCGetter obj)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                    return obj.BoolN;
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                    return obj.Bool;
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                    return obj.CharN;
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                    return obj.Char;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                    return obj.DateTimeNull;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                    return obj.DateTime;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                    return obj.DoubleN;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                    return obj.DoubleN_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                    return obj.Double;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                    return obj.Double_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                    return obj.FloatN;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                    return obj.FloatN_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                    return obj.Float;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                    return obj.Float_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                    return obj.Int16N;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                    return obj.Int16N_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                    return obj.Int16;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                    return obj.Int16_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                    return obj.Int32N;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                    return obj.Int32N_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                    return obj.Int32;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                    return obj.Int32_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                    return obj.Int64N;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                    return obj.Int64N_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                    return obj.Int64;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                    return obj.Int64_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                    return obj.Int8N;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                    return obj.Int8N_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                    return obj.Int8;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                    return obj.Int8_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                    return obj.Unsafe;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                    return obj.P2IntN;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                    return obj.P2Int;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                    return obj.P3Double;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                    return obj.P3IntN;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                    return obj.P3Int;
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                    return obj.PercentN;
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                    return obj.Percent;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                    return obj.RangeIntN;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                    return obj.RangeInt;
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                    return obj.String;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                    return obj.UDoubleN;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                    return obj.UDoubleN_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                    return obj.UDouble;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                    return obj.UDouble_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                    return obj.UInt16N;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                    return obj.UInt16N_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                    return obj.UInt16;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                    return obj.UInt16_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                    return obj.UInt32N;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                    return obj.UInt32N_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                    return obj.UInt32;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                    return obj.UInt32_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                    return obj.UInt64N;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                    return obj.UInt64N_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                    return obj.UInt64;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                    return obj.UInt64_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                    return obj.UInt8N;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                    return obj.UInt8N_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                    return obj.UInt8;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                    return obj.UInt8_Ranged;
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                    return obj.Enum;
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                    return obj.WildCard;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                    return obj.Ref;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                    return obj.Ref_NotNull;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                    return obj.Ref_Singleton;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                    return obj.RefGetter;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                    return obj.RefGetter_NotNull;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                    return obj.RefGetter_Singleton;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                    return obj.RefSetter;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                    return obj.RefSetter_NotNull;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    return obj.RefSetter_Singleton;
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                    return obj.List;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    return obj.RefList;
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                    return obj.Dict;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                    return obj.RefDict;
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITestObject_HasBeenSet_RPC item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.BoolN = default(Boolean?);
            item.Bool = default(Boolean);
            item.CharN = default(Char?);
            item.Char = default(Char);
            item.DateTimeNull = default(DateTime?);
            item.DateTime = default(DateTime);
            item.DoubleN = default(Double?);
            item.DoubleN_Ranged = default(Double?);
            item.Double = default(Double);
            item.Double_Ranged = default(Double);
            item.FloatN = default(Single?);
            item.FloatN_Ranged = default(Single?);
            item.Float = default(Single);
            item.Float_Ranged = default(Single);
            item.Int16N = default(Int16?);
            item.Int16N_Ranged = default(Int16?);
            item.Int16 = default(Int16);
            item.Int16_Ranged = default(Int16);
            item.Int32N = default(Int32?);
            item.Int32N_Ranged = default(Int32?);
            item.Int32 = default(Int32);
            item.Int32_Ranged = default(Int32);
            item.Int64N = default(Int64?);
            item.Int64N_Ranged = default(Int64?);
            item.Int64 = default(Int64);
            item.Int64_Ranged = default(Int64);
            item.Int8N = default(SByte?);
            item.Int8N_Ranged = default(SByte?);
            item.Int8 = default(SByte);
            item.Int8_Ranged = default(SByte);
            item.Unsafe = default(bool);
            item.P2IntN = default(P2Int?);
            item.P2Int = default(P2Int);
            item.P3DoubleN = default(P3Double?);
            item.P3Double = default(P3Double);
            item.P3IntN = default(P3Int?);
            item.P3Int = default(P3Int);
            item.PercentN = default(Percent?);
            item.Percent = default(Percent);
            item.RangeIntN = default(RangeInt32?);
            item.RangeInt = default(RangeInt32);
            item.String = default(String);
            item.UDoubleN = default(UDouble?);
            item.UDoubleN_Ranged = default(UDouble?);
            item.UDouble = default(UDouble);
            item.UDouble_Ranged = default(UDouble);
            item.UInt16N = default(UInt16?);
            item.UInt16N_Ranged = default(UInt16?);
            item.UInt16 = default(UInt16);
            item.UInt16_Ranged = default(UInt16);
            item.UInt32N = default(UInt32?);
            item.UInt32N_Ranged = default(UInt32?);
            item.UInt32 = default(UInt32);
            item.UInt32_Ranged = default(UInt32);
            item.UInt64N = default(UInt64?);
            item.UInt64N_Ranged = default(UInt64?);
            item.UInt64 = default(UInt64);
            item.UInt64_Ranged = default(UInt64);
            item.UInt8N = default(Byte?);
            item.UInt8N_Ranged = default(Byte?);
            item.UInt8 = default(Byte);
            item.UInt8_Ranged = default(Byte);
            item.Enum = default(TestEnum);
            item.WildCard = default(Object);
            item.Ref = default(ObjectToRef);
            item.Ref_NotNull = default(ObjectToRef);
            item.RefGetter = default(IObjectToRefGetter);
            item.RefGetter_NotNull = default(IObjectToRefGetter);
            item.RefSetter = default(IObjectToRef);
            item.RefSetter_NotNull = default(IObjectToRef);
            item.List.Unset(cmds.ToUnsetParams());
            item.RefList.Unset(cmds.ToUnsetParams());
            item.Dict.Unset(cmds.ToUnsetParams());
            item.RefDict.Unset(cmds.ToUnsetParams());
            item.DictKeyedValue.Unset(cmds.ToUnsetParams());
        }
    }
    #endregion

    #region Modules

    #region Mask
    public class TestObject_HasBeenSet_RPC_Mask<T> 
    {
        public T BoolN;
        public T Bool;
        public T CharN;
        public T Char;
        public T DateTimeNull;
        public T DateTime;
        public T DoubleN;
        public T DoubleN_Ranged;
        public T Double;
        public T Double_Ranged;
        public T FloatN;
        public T FloatN_Ranged;
        public T Float;
        public T Float_Ranged;
        public T Int16N;
        public T Int16N_Ranged;
        public T Int16;
        public T Int16_Ranged;
        public T Int32N;
        public T Int32N_Ranged;
        public T Int32;
        public T Int32_Ranged;
        public T Int64N;
        public T Int64N_Ranged;
        public T Int64;
        public T Int64_Ranged;
        public T Int8N;
        public T Int8N_Ranged;
        public T Int8;
        public T Int8_Ranged;
        public T Unsafe;
        public T P2IntN;
        public T P2Int;
        public T P3DoubleN;
        public T P3Double;
        public T P3IntN;
        public T P3Int;
        public T PercentN;
        public T Percent;
        public T RangeIntN;
        public T RangeInt;
        public T String;
        public T UDoubleN;
        public T UDoubleN_Ranged;
        public T UDouble;
        public T UDouble_Ranged;
        public T UInt16N;
        public T UInt16N_Ranged;
        public T UInt16;
        public T UInt16_Ranged;
        public T UInt32N;
        public T UInt32N_Ranged;
        public T UInt32;
        public T UInt32_Ranged;
        public T UInt64N;
        public T UInt64N_Ranged;
        public T UInt64;
        public T UInt64_Ranged;
        public T UInt8N;
        public T UInt8N_Ranged;
        public T UInt8;
        public T UInt8_Ranged;
        public T Enum;
        public T WildCard;
        public MaskItem<T, ObjectToRef_Mask<T>> Ref { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_Singleton { get; set; }
        public MaskItem<T, IEnumerable<T>> List;
        public MaskItem<T, IEnumerable<ObjectToRef_ErrorMask>> RefList;
        public MaskItem<T, IEnumerable<KeyValuePair<T, T>>> Dict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>> RefDict;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> DictKeyedValue;
    }

    public class TestObject_HasBeenSet_RPC_ErrorMask : IErrorMask
    {
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception BoolN;
        public Exception Bool;
        public Exception CharN;
        public Exception Char;
        public Exception DateTimeNull;
        public Exception DateTime;
        public Exception DoubleN;
        public Exception DoubleN_Ranged;
        public Exception Double;
        public Exception Double_Ranged;
        public Exception FloatN;
        public Exception FloatN_Ranged;
        public Exception Float;
        public Exception Float_Ranged;
        public Exception Int16N;
        public Exception Int16N_Ranged;
        public Exception Int16;
        public Exception Int16_Ranged;
        public Exception Int32N;
        public Exception Int32N_Ranged;
        public Exception Int32;
        public Exception Int32_Ranged;
        public Exception Int64N;
        public Exception Int64N_Ranged;
        public Exception Int64;
        public Exception Int64_Ranged;
        public Exception Int8N;
        public Exception Int8N_Ranged;
        public Exception Int8;
        public Exception Int8_Ranged;
        public Exception Unsafe;
        public Exception P2IntN;
        public Exception P2Int;
        public Exception P3DoubleN;
        public Exception P3Double;
        public Exception P3IntN;
        public Exception P3Int;
        public Exception PercentN;
        public Exception Percent;
        public Exception RangeIntN;
        public Exception RangeInt;
        public Exception String;
        public Exception UDoubleN;
        public Exception UDoubleN_Ranged;
        public Exception UDouble;
        public Exception UDouble_Ranged;
        public Exception UInt16N;
        public Exception UInt16N_Ranged;
        public Exception UInt16;
        public Exception UInt16_Ranged;
        public Exception UInt32N;
        public Exception UInt32N_Ranged;
        public Exception UInt32;
        public Exception UInt32_Ranged;
        public Exception UInt64N;
        public Exception UInt64N_Ranged;
        public Exception UInt64;
        public Exception UInt64_Ranged;
        public Exception UInt8N;
        public Exception UInt8N_Ranged;
        public Exception UInt8;
        public Exception UInt8_Ranged;
        public Exception Enum;
        public Exception WildCard;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_Singleton;
        public MaskItem<Exception, IEnumerable<Exception>> List;
        public MaskItem<Exception, IEnumerable<ObjectToRef_ErrorMask>> RefList;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> Dict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_Mask<Exception>>, MaskItem<Exception, ObjectToRef_Mask<Exception>>>>> RefDict;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_Mask<Exception>>>> DictKeyedValue;

        public void SetNthException(ushort index, Exception ex)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                    this.BoolN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                    this.Bool = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                    this.CharN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                    this.Char = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                    this.DateTimeNull = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                    this.DateTime = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                    this.DoubleN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                    this.Double = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                    this.Double_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                    this.FloatN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                    this.Float = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                    this.Float_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                    this.Int16N = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                    this.Int16 = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                    this.Int32N = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                    this.Int32 = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                    this.Int64N = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                    this.Int64 = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                    this.Int8N = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                    this.Int8 = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                    this.Unsafe = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                    this.P2IntN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                    this.P2Int = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                    this.P3DoubleN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                    this.P3Double = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                    this.P3IntN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                    this.P3Int = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                    this.PercentN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                    this.Percent = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                    this.RangeIntN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                    this.RangeInt = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                    this.String = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                    this.UDoubleN = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                    this.UDouble = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                    this.UInt16N = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                    this.UInt16 = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                    this.UInt32N = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                    this.UInt32 = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                    this.UInt64N = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                    this.UInt64 = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                    this.UInt8N = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                    this.UInt8 = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                    this.Enum = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                    this.WildCard = ex;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                    this.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                    this.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                    this.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                    this.List = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    this.RefList = new MaskItem<Exception, IEnumerable<ObjectToRef_ErrorMask>>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                    this.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                    this.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_Mask<Exception>>, MaskItem<Exception, ObjectToRef_Mask<Exception>>>>>(ex, null);
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_Mask<Exception>>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            TestObject_HasBeenSet_RPC_FieldIndex enu = (TestObject_HasBeenSet_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_RPC_FieldIndex.BoolN:
                    this.BoolN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Bool:
                    this.Bool = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.CharN:
                    this.CharN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Char:
                    this.Char = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTimeNull:
                    this.DateTimeNull = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DateTime:
                    this.DateTime = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN:
                    this.DoubleN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double:
                    this.Double = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Double_Ranged:
                    this.Double_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN:
                    this.FloatN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float:
                    this.Float = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Float_Ranged:
                    this.Float_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N:
                    this.Int16N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16:
                    this.Int16 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N:
                    this.Int32N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32:
                    this.Int32 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N:
                    this.Int64N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64:
                    this.Int64 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N:
                    this.Int8N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8:
                    this.Int8 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Unsafe:
                    this.Unsafe = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2IntN:
                    this.P2IntN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P2Int:
                    this.P2Int = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3DoubleN:
                    this.P3DoubleN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Double:
                    this.P3Double = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3IntN:
                    this.P3IntN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.P3Int:
                    this.P3Int = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.PercentN:
                    this.PercentN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Percent:
                    this.Percent = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeIntN:
                    this.RangeIntN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RangeInt:
                    this.RangeInt = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.String:
                    this.String = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN:
                    this.UDoubleN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble:
                    this.UDouble = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N:
                    this.UInt16N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16:
                    this.UInt16 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N:
                    this.UInt32N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32:
                    this.UInt32 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N:
                    this.UInt64N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64:
                    this.UInt64 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N:
                    this.UInt8N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8:
                    this.UInt8 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Enum:
                    this.Enum = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.WildCard:
                    this.WildCard = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref:
                    this.Ref = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter:
                    this.RefGetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter:
                    this.RefSetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.List:
                    this.List = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefList:
                    this.RefList = (MaskItem<Exception, IEnumerable<ObjectToRef_ErrorMask>>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.Dict:
                    this.Dict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.RefDict:
                    this.RefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_Mask<Exception>>, MaskItem<Exception, ObjectToRef_Mask<Exception>>>>>)obj;
                    break;
                case TestObject_HasBeenSet_RPC_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_Mask<Exception>>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    public class TestObject_HasBeenSet_RPC_CopyMask
    {
        public bool BoolN;
        public bool Bool;
        public bool CharN;
        public bool Char;
        public bool DateTimeNull;
        public bool DateTime;
        public bool DoubleN;
        public bool DoubleN_Ranged;
        public bool Double;
        public bool Double_Ranged;
        public bool FloatN;
        public bool FloatN_Ranged;
        public bool Float;
        public bool Float_Ranged;
        public bool Int16N;
        public bool Int16N_Ranged;
        public bool Int16;
        public bool Int16_Ranged;
        public bool Int32N;
        public bool Int32N_Ranged;
        public bool Int32;
        public bool Int32_Ranged;
        public bool Int64N;
        public bool Int64N_Ranged;
        public bool Int64;
        public bool Int64_Ranged;
        public bool Int8N;
        public bool Int8N_Ranged;
        public bool Int8;
        public bool Int8_Ranged;
        public bool Unsafe;
        public bool P2IntN;
        public bool P2Int;
        public bool P3DoubleN;
        public bool P3Double;
        public bool P3IntN;
        public bool P3Int;
        public bool PercentN;
        public bool Percent;
        public bool RangeIntN;
        public bool RangeInt;
        public bool String;
        public bool UDoubleN;
        public bool UDoubleN_Ranged;
        public bool UDouble;
        public bool UDouble_Ranged;
        public bool UInt16N;
        public bool UInt16N_Ranged;
        public bool UInt16;
        public bool UInt16_Ranged;
        public bool UInt32N;
        public bool UInt32N_Ranged;
        public bool UInt32;
        public bool UInt32_Ranged;
        public bool UInt64N;
        public bool UInt64N_Ranged;
        public bool UInt64;
        public bool UInt64_Ranged;
        public bool UInt8N;
        public bool UInt8N_Ranged;
        public bool UInt8;
        public bool UInt8_Ranged;
        public bool Enum;
        public bool WildCard;
        public MaskItem<CopyType, ObjectToRef_CopyMask> Ref;
        public MaskItem<CopyType, ObjectToRef_CopyMask> Ref_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> Ref_Singleton;
        public MaskItem<CopyType, ObjectToRef_CopyMask> RefGetter;
        public MaskItem<CopyType, ObjectToRef_CopyMask> RefGetter_NotNull;
        public MaskItem<CopyType, ObjectToRef_CopyMask> RefSetter;
        public MaskItem<CopyType, ObjectToRef_CopyMask> RefSetter_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> RefSetter_Singleton;
        public CopyType List;
        public MaskItem<CopyType, ObjectToRef_CopyMask> RefList;
        public bool Dict;
        public MaskItem<bool, KeyValuePair<(RefCopyType Type, ObjectToRef_CopyMask Mask), (RefCopyType Type, ObjectToRef_CopyMask Mask)>> RefDict;
        public MaskItem<CopyType, ObjectToRef_CopyMask> DictKeyedValue;

    }
    #endregion


    #endregion

}
