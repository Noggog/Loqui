/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Noggolloquy.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Noggolloquy;
using Noggog;
using Noggog.Notifying;
using Noggolloquy.Tests.Internals;
using Noggolloquy.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Noggolloquy.Xml;

namespace Noggolloquy.Tests
{
    #region Class
    public partial class TestObject_Notifying_ReadOnly : ITestObject_Notifying_ReadOnly, INoggolloquyObjectSetter, IEquatable<TestObject_Notifying_ReadOnly>
    {
        INoggolloquyRegistration INoggolloquyObject.Registration => TestObject_Notifying_ReadOnly_Registration.Instance;
        public static TestObject_Notifying_ReadOnly_Registration Registration => TestObject_Notifying_ReadOnly_Registration.Instance;

        public TestObject_Notifying_ReadOnly()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #region BoolN
        protected readonly INotifyingItem<Boolean?> _BoolN = new NotifyingItem<Boolean?>(
            default(Boolean?),
            markAsSet: false);
        public INotifyingItemGetter<Boolean?> BoolN_Property => _BoolN;
        public Boolean? BoolN
        {
            get => this._BoolN.Value;
            protected set => this._BoolN.Set(value);
        }
        INotifyingItemGetter<Boolean?> ITestObject_Notifying_ReadOnlyGetter.BoolN_Property => this.BoolN_Property;
        #endregion
        #region Bool
        protected readonly INotifyingItem<Boolean> _Bool = new NotifyingItem<Boolean>(
            default(Boolean),
            markAsSet: false);
        public INotifyingItemGetter<Boolean> Bool_Property => _Bool;
        public Boolean Bool
        {
            get => this._Bool.Value;
            protected set => this._Bool.Set(value);
        }
        INotifyingItemGetter<Boolean> ITestObject_Notifying_ReadOnlyGetter.Bool_Property => this.Bool_Property;
        #endregion
        #region CharN
        protected readonly INotifyingItem<Char?> _CharN = new NotifyingItem<Char?>(
            default(Char?),
            markAsSet: false);
        public INotifyingItemGetter<Char?> CharN_Property => _CharN;
        public Char? CharN
        {
            get => this._CharN.Value;
            protected set => this._CharN.Set(value);
        }
        INotifyingItemGetter<Char?> ITestObject_Notifying_ReadOnlyGetter.CharN_Property => this.CharN_Property;
        #endregion
        #region Char
        protected readonly INotifyingItem<Char> _Char = new NotifyingItem<Char>(
            default(Char),
            markAsSet: false);
        public INotifyingItemGetter<Char> Char_Property => _Char;
        public Char Char
        {
            get => this._Char.Value;
            protected set => this._Char.Set(value);
        }
        INotifyingItemGetter<Char> ITestObject_Notifying_ReadOnlyGetter.Char_Property => this.Char_Property;
        #endregion
        #region DoubleN
        protected readonly INotifyingItem<Double?> _DoubleN = new NotifyingItem<Double?>(
            default(Double?),
            markAsSet: false);
        public INotifyingItemGetter<Double?> DoubleN_Property => _DoubleN;
        public Double? DoubleN
        {
            get => this._DoubleN.Value;
            protected set => this._DoubleN.Set(value);
        }
        INotifyingItemGetter<Double?> ITestObject_Notifying_ReadOnlyGetter.DoubleN_Property => this.DoubleN_Property;
        #endregion
        #region Double
        protected readonly INotifyingItem<Double> _Double = new NotifyingItem<Double>(
            default(Double),
            markAsSet: false);
        public INotifyingItemGetter<Double> Double_Property => _Double;
        public Double Double
        {
            get => this._Double.Value;
            protected set => this._Double.Set(value);
        }
        INotifyingItemGetter<Double> ITestObject_Notifying_ReadOnlyGetter.Double_Property => this.Double_Property;
        #endregion
        #region FloatN
        protected readonly INotifyingItem<Single?> _FloatN = new NotifyingItem<Single?>(
            default(Single?),
            markAsSet: false);
        public INotifyingItemGetter<Single?> FloatN_Property => _FloatN;
        public Single? FloatN
        {
            get => this._FloatN.Value;
            protected set => this._FloatN.Set(value);
        }
        INotifyingItemGetter<Single?> ITestObject_Notifying_ReadOnlyGetter.FloatN_Property => this.FloatN_Property;
        #endregion
        #region Float
        protected readonly INotifyingItem<Single> _Float = new NotifyingItem<Single>(
            default(Single),
            markAsSet: false);
        public INotifyingItemGetter<Single> Float_Property => _Float;
        public Single Float
        {
            get => this._Float.Value;
            protected set => this._Float.Set(value);
        }
        INotifyingItemGetter<Single> ITestObject_Notifying_ReadOnlyGetter.Float_Property => this.Float_Property;
        #endregion
        #region Int16N
        protected readonly INotifyingItem<Int16?> _Int16N = new NotifyingItem<Int16?>(
            default(Int16?),
            markAsSet: false);
        public INotifyingItemGetter<Int16?> Int16N_Property => _Int16N;
        public Int16? Int16N
        {
            get => this._Int16N.Value;
            protected set => this._Int16N.Set(value);
        }
        INotifyingItemGetter<Int16?> ITestObject_Notifying_ReadOnlyGetter.Int16N_Property => this.Int16N_Property;
        #endregion
        #region Int16
        protected readonly INotifyingItem<Int16> _Int16 = new NotifyingItem<Int16>(
            default(Int16),
            markAsSet: false);
        public INotifyingItemGetter<Int16> Int16_Property => _Int16;
        public Int16 Int16
        {
            get => this._Int16.Value;
            protected set => this._Int16.Set(value);
        }
        INotifyingItemGetter<Int16> ITestObject_Notifying_ReadOnlyGetter.Int16_Property => this.Int16_Property;
        #endregion
        #region Int32N
        protected readonly INotifyingItem<Int32?> _Int32N = new NotifyingItem<Int32?>(
            default(Int32?),
            markAsSet: false);
        public INotifyingItemGetter<Int32?> Int32N_Property => _Int32N;
        public Int32? Int32N
        {
            get => this._Int32N.Value;
            protected set => this._Int32N.Set(value);
        }
        INotifyingItemGetter<Int32?> ITestObject_Notifying_ReadOnlyGetter.Int32N_Property => this.Int32N_Property;
        #endregion
        #region Int32
        protected readonly INotifyingItem<Int32> _Int32 = new NotifyingItem<Int32>(
            default(Int32),
            markAsSet: false);
        public INotifyingItemGetter<Int32> Int32_Property => _Int32;
        public Int32 Int32
        {
            get => this._Int32.Value;
            protected set => this._Int32.Set(value);
        }
        INotifyingItemGetter<Int32> ITestObject_Notifying_ReadOnlyGetter.Int32_Property => this.Int32_Property;
        #endregion
        #region Int64N
        protected readonly INotifyingItem<Int64?> _Int64N = new NotifyingItem<Int64?>(
            default(Int64?),
            markAsSet: false);
        public INotifyingItemGetter<Int64?> Int64N_Property => _Int64N;
        public Int64? Int64N
        {
            get => this._Int64N.Value;
            protected set => this._Int64N.Set(value);
        }
        INotifyingItemGetter<Int64?> ITestObject_Notifying_ReadOnlyGetter.Int64N_Property => this.Int64N_Property;
        #endregion
        #region Int64
        protected readonly INotifyingItem<Int64> _Int64 = new NotifyingItem<Int64>(
            default(Int64),
            markAsSet: false);
        public INotifyingItemGetter<Int64> Int64_Property => _Int64;
        public Int64 Int64
        {
            get => this._Int64.Value;
            protected set => this._Int64.Set(value);
        }
        INotifyingItemGetter<Int64> ITestObject_Notifying_ReadOnlyGetter.Int64_Property => this.Int64_Property;
        #endregion
        #region Int8N
        protected readonly INotifyingItem<SByte?> _Int8N = new NotifyingItem<SByte?>(
            default(SByte?),
            markAsSet: false);
        public INotifyingItemGetter<SByte?> Int8N_Property => _Int8N;
        public SByte? Int8N
        {
            get => this._Int8N.Value;
            protected set => this._Int8N.Set(value);
        }
        INotifyingItemGetter<SByte?> ITestObject_Notifying_ReadOnlyGetter.Int8N_Property => this.Int8N_Property;
        #endregion
        #region Int8
        protected readonly INotifyingItem<SByte> _Int8 = new NotifyingItem<SByte>(
            default(SByte),
            markAsSet: false);
        public INotifyingItemGetter<SByte> Int8_Property => _Int8;
        public SByte Int8
        {
            get => this._Int8.Value;
            protected set => this._Int8.Set(value);
        }
        INotifyingItemGetter<SByte> ITestObject_Notifying_ReadOnlyGetter.Int8_Property => this.Int8_Property;
        #endregion
        #region Unsafe
        protected readonly INotifyingItem<bool> _Unsafe = new NotifyingItem<bool>(
            default(bool),
            markAsSet: false);
        public INotifyingItemGetter<bool> Unsafe_Property => _Unsafe;
        public bool Unsafe
        {
            get => this._Unsafe.Value;
            protected set => this._Unsafe.Set(value);
        }
        INotifyingItemGetter<bool> ITestObject_Notifying_ReadOnlyGetter.Unsafe_Property => this.Unsafe_Property;
        #endregion
        #region P2IntN
        protected readonly INotifyingItem<P2Int?> _P2IntN = new NotifyingItem<P2Int?>(
            default(P2Int?),
            markAsSet: false);
        public INotifyingItemGetter<P2Int?> P2IntN_Property => _P2IntN;
        public P2Int? P2IntN
        {
            get => this._P2IntN.Value;
            protected set => this._P2IntN.Set(value);
        }
        INotifyingItemGetter<P2Int?> ITestObject_Notifying_ReadOnlyGetter.P2IntN_Property => this.P2IntN_Property;
        #endregion
        #region P2Int
        protected readonly INotifyingItem<P2Int> _P2Int = new NotifyingItem<P2Int>(
            default(P2Int),
            markAsSet: false);
        public INotifyingItemGetter<P2Int> P2Int_Property => _P2Int;
        public P2Int P2Int
        {
            get => this._P2Int.Value;
            protected set => this._P2Int.Set(value);
        }
        INotifyingItemGetter<P2Int> ITestObject_Notifying_ReadOnlyGetter.P2Int_Property => this.P2Int_Property;
        #endregion
        #region P3DoubleN
        protected readonly INotifyingItem<P3Double?> _P3DoubleN = new NotifyingItem<P3Double?>(
            default(P3Double?),
            markAsSet: false);
        public INotifyingItemGetter<P3Double?> P3DoubleN_Property => _P3DoubleN;
        public P3Double? P3DoubleN
        {
            get => this._P3DoubleN.Value;
            protected set => this._P3DoubleN.Set(value);
        }
        INotifyingItemGetter<P3Double?> ITestObject_Notifying_ReadOnlyGetter.P3DoubleN_Property => this.P3DoubleN_Property;
        #endregion
        #region P3Double
        protected readonly INotifyingItem<P3Double> _P3Double = new NotifyingItem<P3Double>(
            default(P3Double),
            markAsSet: false);
        public INotifyingItemGetter<P3Double> P3Double_Property => _P3Double;
        public P3Double P3Double
        {
            get => this._P3Double.Value;
            protected set => this._P3Double.Set(value);
        }
        INotifyingItemGetter<P3Double> ITestObject_Notifying_ReadOnlyGetter.P3Double_Property => this.P3Double_Property;
        #endregion
        #region P3IntN
        protected readonly INotifyingItem<P3Int?> _P3IntN = new NotifyingItem<P3Int?>(
            default(P3Int?),
            markAsSet: false);
        public INotifyingItemGetter<P3Int?> P3IntN_Property => _P3IntN;
        public P3Int? P3IntN
        {
            get => this._P3IntN.Value;
            protected set => this._P3IntN.Set(value);
        }
        INotifyingItemGetter<P3Int?> ITestObject_Notifying_ReadOnlyGetter.P3IntN_Property => this.P3IntN_Property;
        #endregion
        #region P3Int
        protected readonly INotifyingItem<P3Int> _P3Int = new NotifyingItem<P3Int>(
            default(P3Int),
            markAsSet: false);
        public INotifyingItemGetter<P3Int> P3Int_Property => _P3Int;
        public P3Int P3Int
        {
            get => this._P3Int.Value;
            protected set => this._P3Int.Set(value);
        }
        INotifyingItemGetter<P3Int> ITestObject_Notifying_ReadOnlyGetter.P3Int_Property => this.P3Int_Property;
        #endregion
        #region PercentN
        protected readonly INotifyingItem<Percent?> _PercentN = new NotifyingItem<Percent?>(
            default(Percent?),
            markAsSet: false);
        public INotifyingItemGetter<Percent?> PercentN_Property => _PercentN;
        public Percent? PercentN
        {
            get => this._PercentN.Value;
            protected set => this._PercentN.Set(value);
        }
        INotifyingItemGetter<Percent?> ITestObject_Notifying_ReadOnlyGetter.PercentN_Property => this.PercentN_Property;
        #endregion
        #region Percent
        protected readonly INotifyingItem<Percent> _Percent = new NotifyingItem<Percent>(
            default(Percent),
            markAsSet: false);
        public INotifyingItemGetter<Percent> Percent_Property => _Percent;
        public Percent Percent
        {
            get => this._Percent.Value;
            protected set => this._Percent.Set(value);
        }
        INotifyingItemGetter<Percent> ITestObject_Notifying_ReadOnlyGetter.Percent_Property => this.Percent_Property;
        #endregion
        #region RangeIntN
        protected readonly INotifyingItem<RangeInt?> _RangeIntN = new NotifyingItem<RangeInt?>(
            default(RangeInt?),
            markAsSet: false);
        public INotifyingItemGetter<RangeInt?> RangeIntN_Property => _RangeIntN;
        public RangeInt? RangeIntN
        {
            get => this._RangeIntN.Value;
            protected set => this._RangeIntN.Set(value);
        }
        INotifyingItemGetter<RangeInt?> ITestObject_Notifying_ReadOnlyGetter.RangeIntN_Property => this.RangeIntN_Property;
        #endregion
        #region RangeInt
        protected readonly INotifyingItem<RangeInt> _RangeInt = new NotifyingItem<RangeInt>(
            default(RangeInt),
            markAsSet: false);
        public INotifyingItemGetter<RangeInt> RangeInt_Property => _RangeInt;
        public RangeInt RangeInt
        {
            get => this._RangeInt.Value;
            protected set => this._RangeInt.Set(value);
        }
        INotifyingItemGetter<RangeInt> ITestObject_Notifying_ReadOnlyGetter.RangeInt_Property => this.RangeInt_Property;
        #endregion
        #region String
        protected readonly INotifyingItem<String> _String = new NotifyingItem<String>(
            default(String),
            markAsSet: false);
        public INotifyingItemGetter<String> String_Property => _String;
        public String String
        {
            get => this._String.Value;
            protected set => this._String.Set(value);
        }
        INotifyingItemGetter<String> ITestObject_Notifying_ReadOnlyGetter.String_Property => this.String_Property;
        #endregion
        #region UDoubleN
        protected readonly INotifyingItem<UDouble?> _UDoubleN = new NotifyingItem<UDouble?>(
            default(UDouble?),
            markAsSet: false);
        public INotifyingItemGetter<UDouble?> UDoubleN_Property => _UDoubleN;
        public UDouble? UDoubleN
        {
            get => this._UDoubleN.Value;
            protected set => this._UDoubleN.Set(value);
        }
        INotifyingItemGetter<UDouble?> ITestObject_Notifying_ReadOnlyGetter.UDoubleN_Property => this.UDoubleN_Property;
        #endregion
        #region UDouble
        protected readonly INotifyingItem<UDouble> _UDouble = new NotifyingItem<UDouble>(
            default(UDouble),
            markAsSet: false);
        public INotifyingItemGetter<UDouble> UDouble_Property => _UDouble;
        public UDouble UDouble
        {
            get => this._UDouble.Value;
            protected set => this._UDouble.Set(value);
        }
        INotifyingItemGetter<UDouble> ITestObject_Notifying_ReadOnlyGetter.UDouble_Property => this.UDouble_Property;
        #endregion
        #region UInt16N
        protected readonly INotifyingItem<UInt16?> _UInt16N = new NotifyingItem<UInt16?>(
            default(UInt16?),
            markAsSet: false);
        public INotifyingItemGetter<UInt16?> UInt16N_Property => _UInt16N;
        public UInt16? UInt16N
        {
            get => this._UInt16N.Value;
            protected set => this._UInt16N.Set(value);
        }
        INotifyingItemGetter<UInt16?> ITestObject_Notifying_ReadOnlyGetter.UInt16N_Property => this.UInt16N_Property;
        #endregion
        #region UInt16
        protected readonly INotifyingItem<UInt16> _UInt16 = new NotifyingItem<UInt16>(
            default(UInt16),
            markAsSet: false);
        public INotifyingItemGetter<UInt16> UInt16_Property => _UInt16;
        public UInt16 UInt16
        {
            get => this._UInt16.Value;
            protected set => this._UInt16.Set(value);
        }
        INotifyingItemGetter<UInt16> ITestObject_Notifying_ReadOnlyGetter.UInt16_Property => this.UInt16_Property;
        #endregion
        #region UInt32N
        protected readonly INotifyingItem<UInt32?> _UInt32N = new NotifyingItem<UInt32?>(
            default(UInt32?),
            markAsSet: false);
        public INotifyingItemGetter<UInt32?> UInt32N_Property => _UInt32N;
        public UInt32? UInt32N
        {
            get => this._UInt32N.Value;
            protected set => this._UInt32N.Set(value);
        }
        INotifyingItemGetter<UInt32?> ITestObject_Notifying_ReadOnlyGetter.UInt32N_Property => this.UInt32N_Property;
        #endregion
        #region UInt32
        protected readonly INotifyingItem<UInt32> _UInt32 = new NotifyingItem<UInt32>(
            default(UInt32),
            markAsSet: false);
        public INotifyingItemGetter<UInt32> UInt32_Property => _UInt32;
        public UInt32 UInt32
        {
            get => this._UInt32.Value;
            protected set => this._UInt32.Set(value);
        }
        INotifyingItemGetter<UInt32> ITestObject_Notifying_ReadOnlyGetter.UInt32_Property => this.UInt32_Property;
        #endregion
        #region UInt64N
        protected readonly INotifyingItem<UInt64?> _UInt64N = new NotifyingItem<UInt64?>(
            default(UInt64?),
            markAsSet: false);
        public INotifyingItemGetter<UInt64?> UInt64N_Property => _UInt64N;
        public UInt64? UInt64N
        {
            get => this._UInt64N.Value;
            protected set => this._UInt64N.Set(value);
        }
        INotifyingItemGetter<UInt64?> ITestObject_Notifying_ReadOnlyGetter.UInt64N_Property => this.UInt64N_Property;
        #endregion
        #region UInt64
        protected readonly INotifyingItem<UInt64> _UInt64 = new NotifyingItem<UInt64>(
            default(UInt64),
            markAsSet: false);
        public INotifyingItemGetter<UInt64> UInt64_Property => _UInt64;
        public UInt64 UInt64
        {
            get => this._UInt64.Value;
            protected set => this._UInt64.Set(value);
        }
        INotifyingItemGetter<UInt64> ITestObject_Notifying_ReadOnlyGetter.UInt64_Property => this.UInt64_Property;
        #endregion
        #region UInt8N
        protected readonly INotifyingItem<Byte?> _UInt8N = new NotifyingItem<Byte?>(
            default(Byte?),
            markAsSet: false);
        public INotifyingItemGetter<Byte?> UInt8N_Property => _UInt8N;
        public Byte? UInt8N
        {
            get => this._UInt8N.Value;
            protected set => this._UInt8N.Set(value);
        }
        INotifyingItemGetter<Byte?> ITestObject_Notifying_ReadOnlyGetter.UInt8N_Property => this.UInt8N_Property;
        #endregion
        #region UInt8
        protected readonly INotifyingItem<Byte> _UInt8 = new NotifyingItem<Byte>(
            default(Byte),
            markAsSet: false);
        public INotifyingItemGetter<Byte> UInt8_Property => _UInt8;
        public Byte UInt8
        {
            get => this._UInt8.Value;
            protected set => this._UInt8.Set(value);
        }
        INotifyingItemGetter<Byte> ITestObject_Notifying_ReadOnlyGetter.UInt8_Property => this.UInt8_Property;
        #endregion
        #region Enum
        protected readonly INotifyingItem<TestEnum> _Enum = new NotifyingItem<TestEnum>(
        );
        public INotifyingItemGetter<TestEnum> Enum_Property => _Enum;
        public TestEnum Enum
        {
            get => this._Enum.Value;
            protected set => this._Enum.Set(value);
        }
        INotifyingItemGetter<TestEnum> ITestObject_Notifying_ReadOnlyGetter.Enum_Property => this.Enum_Property;
        #endregion
        #region WildCard
        protected readonly INotifyingItem<Object> _WildCard = new NotifyingItemConvertWrapper<Object>(
            (change) => TryGet<Object>.Succeed(WildcardLink.Validate(change.New)),
            default(Object),
            markAsSet: false
        );
        public INotifyingItemGetter<Object> WildCard_Property => _WildCard;
        public Object WildCard { get { return _WildCard.Value; } protected set { _WildCard.Value = value; } }
        INotifyingItemGetter<Object> ITestObject_Notifying_ReadOnlyGetter.WildCard_Property => this.WildCard_Property;
        #endregion
        #region Ref
        private readonly INotifyingItem<ObjectToRef> _Ref = new NotifyingItem<ObjectToRef>();
        public INotifyingItemGetter<ObjectToRef> Ref_Property => this._Ref;
        ObjectToRef ITestObject_Notifying_ReadOnlyGetter.Ref => this.Ref;
        public ObjectToRef Ref { get { return _Ref.Value; } }
        INotifyingItemGetter<ObjectToRef> ITestObject_Notifying_ReadOnlyGetter.Ref_Property => this.Ref_Property;
        #endregion
        #region RefGetter
        private readonly INotifyingItem<IObjectToRefGetter> _RefGetter = new NotifyingItem<IObjectToRefGetter>();
        public INotifyingItemGetter<IObjectToRefGetter> RefGetter_Property => this._RefGetter;
        IObjectToRefGetter ITestObject_Notifying_ReadOnlyGetter.RefGetter => this.RefGetter;
        public IObjectToRefGetter RefGetter { get { return _RefGetter.Value; } }
        INotifyingItemGetter<IObjectToRefGetter> ITestObject_Notifying_ReadOnlyGetter.RefGetter_Property => this.RefGetter_Property;
        #endregion
        #region RefSetter
        private readonly INotifyingItem<IObjectToRef> _RefSetter = new NotifyingItem<IObjectToRef>();
        public INotifyingItemGetter<IObjectToRef> RefSetter_Property => this._RefSetter;
        IObjectToRef ITestObject_Notifying_ReadOnlyGetter.RefSetter => this.RefSetter;
        public IObjectToRef RefSetter { get { return _RefSetter.Value; } }
        INotifyingItemGetter<IObjectToRef> ITestObject_Notifying_ReadOnlyGetter.RefSetter_Property => this.RefSetter_Property;
        #endregion
        #region List
        private readonly INotifyingList<Boolean> _List = new NotifyingList<Boolean>();
        public INotifyingListGetter<Boolean> List => _List;
        #region Interface Members
        INotifyingListGetter<Boolean> ITestObject_Notifying_ReadOnlyGetter.List => _List;
        #endregion

        #endregion
        #region RefList
        private readonly INotifyingList<ObjectToRef> _RefList = new NotifyingList<ObjectToRef>();
        public INotifyingListGetter<ObjectToRef> RefList => _RefList;
        #region Interface Members
        INotifyingListGetter<ObjectToRef> ITestObject_Notifying_ReadOnlyGetter.RefList => _RefList;
        #endregion

        #endregion
        #region Dict
        private readonly INotifyingDictionary<Boolean, String> _Dict = new NotifyingDictionary<Boolean, String>();
        public INotifyingDictionary<Boolean, String> Dict { get { return _Dict; } }
        #region Interface Members
        INotifyingDictionaryGetter<Boolean, String> ITestObject_Notifying_ReadOnlyGetter.Dict => _Dict;
        #endregion

        #endregion
        #region RefDict
        private readonly INotifyingDictionary<ObjectToRef, ObjectToRef> _RefDict = new NotifyingDictionary<ObjectToRef, ObjectToRef>();
        public INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get { return _RefDict; } }
        #region Interface Members
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> ITestObject_Notifying_ReadOnlyGetter.RefDict => _RefDict;
        #endregion

        #endregion
        #region DictKeyedValue
        private readonly INotifyingKeyedCollection<Int32, ObjectToRef> _DictKeyedValue = new NotifyingKeyedCollection<Int32, ObjectToRef>((item) => item.KeyField);
        public INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue => _DictKeyedValue;
        #region Interface Members
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> ITestObject_Notifying_ReadOnlyGetter.DictKeyedValue => _DictKeyedValue;
        #endregion

        #endregion

        #region Noggolloquy Getter Interface

        protected object GetNthObject(ushort index) => TestObject_Notifying_ReadOnlyCommon.GetNthObject(index, this);
        object INoggolloquyObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestObject_Notifying_ReadOnlyCommon.GetNthObjectHasBeenSet(index, this);
        bool INoggolloquyObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestObject_Notifying_ReadOnlyCommon.UnsetNthObject(index, this, cmds);
        void INoggolloquyObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Noggolloquy Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestObject_Notifying_ReadOnlyCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void INoggolloquyObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        public void CopyFieldsFrom(
            ITestObject_Notifying_ReadOnlyGetter rhs,
            TestObject_Notifying_ReadOnly_CopyMask copyMask = null,
            ITestObject_Notifying_ReadOnlyGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_Notifying_ReadOnlyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestObject_Notifying_ReadOnlyGetter rhs,
            out TestObject_Notifying_ReadOnly_ErrorMask errorMask,
            TestObject_Notifying_ReadOnly_CopyMask copyMask = null,
            ITestObject_Notifying_ReadOnlyGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_Notifying_ReadOnly_ErrorMask retErrorMask = null;
            Func<TestObject_Notifying_ReadOnly_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestObject_Notifying_ReadOnly_ErrorMask();
                }
                return retErrorMask;
            };
            TestObject_Notifying_ReadOnlyCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return INoggolloquyObjectExt.PrintPretty(this);
        }
        #endregion


        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_Notifying_ReadOnly rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_Notifying_ReadOnly rhs)
        {
            if (!object.Equals(this.BoolN, rhs.BoolN)) return false;
            if (!object.Equals(this.Bool, rhs.Bool)) return false;
            if (!object.Equals(this.CharN, rhs.CharN)) return false;
            if (!object.Equals(this.Char, rhs.Char)) return false;
            if (!object.Equals(this.DoubleN, rhs.DoubleN)) return false;
            if (!object.Equals(this.Double, rhs.Double)) return false;
            if (!object.Equals(this.FloatN, rhs.FloatN)) return false;
            if (!object.Equals(this.Float, rhs.Float)) return false;
            if (!object.Equals(this.Int16N, rhs.Int16N)) return false;
            if (!object.Equals(this.Int16, rhs.Int16)) return false;
            if (!object.Equals(this.Int32N, rhs.Int32N)) return false;
            if (!object.Equals(this.Int32, rhs.Int32)) return false;
            if (!object.Equals(this.Int64N, rhs.Int64N)) return false;
            if (!object.Equals(this.Int64, rhs.Int64)) return false;
            if (!object.Equals(this.Int8N, rhs.Int8N)) return false;
            if (!object.Equals(this.Int8, rhs.Int8)) return false;
            if (!object.Equals(this.Unsafe, rhs.Unsafe)) return false;
            if (!object.Equals(this.P2IntN, rhs.P2IntN)) return false;
            if (!object.Equals(this.P2Int, rhs.P2Int)) return false;
            if (!object.Equals(this.P3DoubleN, rhs.P3DoubleN)) return false;
            if (!object.Equals(this.P3Double, rhs.P3Double)) return false;
            if (!object.Equals(this.P3IntN, rhs.P3IntN)) return false;
            if (!object.Equals(this.P3Int, rhs.P3Int)) return false;
            if (!object.Equals(this.PercentN, rhs.PercentN)) return false;
            if (!object.Equals(this.Percent, rhs.Percent)) return false;
            if (!object.Equals(this.RangeIntN, rhs.RangeIntN)) return false;
            if (!object.Equals(this.RangeInt, rhs.RangeInt)) return false;
            if (!object.Equals(this.String, rhs.String)) return false;
            if (!object.Equals(this.UDoubleN, rhs.UDoubleN)) return false;
            if (!object.Equals(this.UDouble, rhs.UDouble)) return false;
            if (!object.Equals(this.UInt16N, rhs.UInt16N)) return false;
            if (!object.Equals(this.UInt16, rhs.UInt16)) return false;
            if (!object.Equals(this.UInt32N, rhs.UInt32N)) return false;
            if (!object.Equals(this.UInt32, rhs.UInt32)) return false;
            if (!object.Equals(this.UInt64N, rhs.UInt64N)) return false;
            if (!object.Equals(this.UInt64, rhs.UInt64)) return false;
            if (!object.Equals(this.UInt8N, rhs.UInt8N)) return false;
            if (!object.Equals(this.UInt8, rhs.UInt8)) return false;
            if (!object.Equals(this.Enum, rhs.Enum)) return false;
            if (!object.Equals(this.WildCard, rhs.WildCard)) return false;
            if (!object.Equals(this.Ref, rhs.Ref)) return false;
            if (!object.Equals(this.RefGetter, rhs.RefGetter)) return false;
            if (!object.Equals(this.RefSetter, rhs.RefSetter)) return false;
            if (!object.Equals(this.List, rhs.List)) return false;
            if (!object.Equals(this.RefList, rhs.RefList)) return false;
            if (!object.Equals(this.Dict, rhs.Dict)) return false;
            if (!object.Equals(this.RefDict, rhs.RefDict)) return false;
            if (!object.Equals(this.DictKeyedValue, rhs.DictKeyedValue)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            return 
            HashHelper.GetHashCode(BoolN)
            .CombineHashCode(HashHelper.GetHashCode(Bool))
            .CombineHashCode(HashHelper.GetHashCode(CharN))
            .CombineHashCode(HashHelper.GetHashCode(Char))
            .CombineHashCode(HashHelper.GetHashCode(DoubleN))
            .CombineHashCode(HashHelper.GetHashCode(Double))
            .CombineHashCode(HashHelper.GetHashCode(FloatN))
            .CombineHashCode(HashHelper.GetHashCode(Float))
            .CombineHashCode(HashHelper.GetHashCode(Int16N))
            .CombineHashCode(HashHelper.GetHashCode(Int16))
            .CombineHashCode(HashHelper.GetHashCode(Int32N))
            .CombineHashCode(HashHelper.GetHashCode(Int32))
            .CombineHashCode(HashHelper.GetHashCode(Int64N))
            .CombineHashCode(HashHelper.GetHashCode(Int64))
            .CombineHashCode(HashHelper.GetHashCode(Int8N))
            .CombineHashCode(HashHelper.GetHashCode(Int8))
            .CombineHashCode(HashHelper.GetHashCode(Unsafe))
            .CombineHashCode(HashHelper.GetHashCode(P2IntN))
            .CombineHashCode(HashHelper.GetHashCode(P2Int))
            .CombineHashCode(HashHelper.GetHashCode(P3DoubleN))
            .CombineHashCode(HashHelper.GetHashCode(P3Double))
            .CombineHashCode(HashHelper.GetHashCode(P3IntN))
            .CombineHashCode(HashHelper.GetHashCode(P3Int))
            .CombineHashCode(HashHelper.GetHashCode(PercentN))
            .CombineHashCode(HashHelper.GetHashCode(Percent))
            .CombineHashCode(HashHelper.GetHashCode(RangeIntN))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt))
            .CombineHashCode(HashHelper.GetHashCode(String))
            .CombineHashCode(HashHelper.GetHashCode(UDoubleN))
            .CombineHashCode(HashHelper.GetHashCode(UDouble))
            .CombineHashCode(HashHelper.GetHashCode(UInt16N))
            .CombineHashCode(HashHelper.GetHashCode(UInt16))
            .CombineHashCode(HashHelper.GetHashCode(UInt32N))
            .CombineHashCode(HashHelper.GetHashCode(UInt32))
            .CombineHashCode(HashHelper.GetHashCode(UInt64N))
            .CombineHashCode(HashHelper.GetHashCode(UInt64))
            .CombineHashCode(HashHelper.GetHashCode(UInt8N))
            .CombineHashCode(HashHelper.GetHashCode(UInt8))
            .CombineHashCode(HashHelper.GetHashCode(Enum))
            .CombineHashCode(HashHelper.GetHashCode(WildCard))
            .CombineHashCode(HashHelper.GetHashCode(Ref))
            .CombineHashCode(HashHelper.GetHashCode(RefGetter))
            .CombineHashCode(HashHelper.GetHashCode(RefSetter))
            .CombineHashCode(HashHelper.GetHashCode(List))
            .CombineHashCode(HashHelper.GetHashCode(RefList))
            .CombineHashCode(HashHelper.GetHashCode(Dict))
            .CombineHashCode(HashHelper.GetHashCode(RefDict))
            .CombineHashCode(HashHelper.GetHashCode(DictKeyedValue))
            ;
        }

        #endregion


        #region XML Translation
        public static TestObject_Notifying_ReadOnly Create_XML(XElement root)
        {
            var ret = new TestObject_Notifying_ReadOnly();
            NoggXmlTranslation<TestObject_Notifying_ReadOnly, TestObject_Notifying_ReadOnly_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipReadonly: false,
                doMasks: false,
                mask: out TestObject_Notifying_ReadOnly_ErrorMask errorMask,
                cmds: null);
            return ret;
        }

        public static TestObject_Notifying_ReadOnly Create_XML(XElement root, out TestObject_Notifying_ReadOnly_ErrorMask errorMask)
        {
            var ret = new TestObject_Notifying_ReadOnly();
            NoggXmlTranslation<TestObject_Notifying_ReadOnly, TestObject_Notifying_ReadOnly_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipReadonly: false,
                doMasks: true,
                mask: out errorMask,
                cmds: null);
            return ret;
        }

        public void CopyIn_XML(XElement root, NotifyingFireParameters? cmds = null)
        {
            NoggXmlTranslation<TestObject_Notifying_ReadOnly, TestObject_Notifying_ReadOnly_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipReadonly: true,
                doMasks: false,
                mask: out TestObject_Notifying_ReadOnly_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(XElement root, out TestObject_Notifying_ReadOnly_ErrorMask errorMask, NotifyingFireParameters? cmds = null)
        {
            NoggXmlTranslation<TestObject_Notifying_ReadOnly, TestObject_Notifying_ReadOnly_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipReadonly: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void Write_XML(Stream stream)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(writer);
            }
        }

        public void Write_XML(Stream stream, out TestObject_Notifying_ReadOnly_ErrorMask errorMask)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(writer, out errorMask);
            }
        }

        public void Write_XML(XmlWriter writer, out TestObject_Notifying_ReadOnly_ErrorMask errorMask, string name = null)
        {
            NoggXmlTranslation<TestObject_Notifying_ReadOnly, TestObject_Notifying_ReadOnly_ErrorMask>.Instance.Write(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                mask: out errorMask);
        }

        public void Write_XML(XmlWriter writer, string name)
        {
            NoggXmlTranslation<TestObject_Notifying_ReadOnly, TestObject_Notifying_ReadOnly_ErrorMask>.Instance.Write(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                mask: out TestObject_Notifying_ReadOnly_ErrorMask errorMask);
        }

        public void Write_XML(XmlWriter writer)
        {
            NoggXmlTranslation<TestObject_Notifying_ReadOnly, TestObject_Notifying_ReadOnly_ErrorMask>.Instance.Write(
                writer: writer,
                name: null,
                item: this,
                doMasks: false,
                mask: out TestObject_Notifying_ReadOnly_ErrorMask errorMask);
        }

        #endregion

        public TestObject_Notifying_ReadOnly Copy(
            TestObject_Notifying_ReadOnly_CopyMask copyMask = null,
            ITestObject_Notifying_ReadOnlyGetter def = null)
        {
            return TestObject_Notifying_ReadOnly.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestObject_Notifying_ReadOnly Copy(
            ITestObject_Notifying_ReadOnly item,
            TestObject_Notifying_ReadOnly_CopyMask copyMask = null,
            ITestObject_Notifying_ReadOnlyGetter def = null)
        {
            TestObject_Notifying_ReadOnly ret;
            if (item.GetType().Equals(typeof(TestObject_Notifying_ReadOnly)))
            {
                ret = new TestObject_Notifying_ReadOnly();
            }
            else
            {
                ret = (TestObject_Notifying_ReadOnly)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType Copy<CopyType>(
            CopyType item,
            TestObject_Notifying_ReadOnly_CopyMask copyMask = null,
            ITestObject_Notifying_ReadOnlyGetter def = null)
            where CopyType : class, ITestObject_Notifying_ReadOnly
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestObject_Notifying_ReadOnly)))
            {
                ret = new TestObject_Notifying_ReadOnly() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestObject_Notifying_ReadOnly Copy_ToNoggolloquy(
            ITestObject_Notifying_ReadOnlyGetter item,
            TestObject_Notifying_ReadOnly_CopyMask copyMask = null,
            ITestObject_Notifying_ReadOnlyGetter def = null)
        {
            var ret = new TestObject_Notifying_ReadOnly();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void INoggolloquyObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                    this._BoolN.Set(
                        (Boolean?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                    this._Bool.Set(
                        (Boolean)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                    this._CharN.Set(
                        (Char?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                    this._Char.Set(
                        (Char)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                    this._DoubleN.Set(
                        (Double?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                    this._Double.Set(
                        (Double)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                    this._FloatN.Set(
                        (Single?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                    this._Float.Set(
                        (Single)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                    this._Int16N.Set(
                        (Int16?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                    this._Int16.Set(
                        (Int16)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                    this._Int32N.Set(
                        (Int32?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                    this._Int32.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                    this._Int64N.Set(
                        (Int64?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                    this._Int64.Set(
                        (Int64)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                    this._Int8N.Set(
                        (SByte?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                    this._Int8.Set(
                        (SByte)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                    this._Unsafe.Set(
                        (bool)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                    this._P2IntN.Set(
                        (P2Int?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                    this._P2Int.Set(
                        (P2Int)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                    this._P3DoubleN.Set(
                        (P3Double?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                    this._P3Double.Set(
                        (P3Double)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                    this._P3IntN.Set(
                        (P3Int?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                    this._P3Int.Set(
                        (P3Int)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                    this._PercentN.Set(
                        (Percent?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                    this._Percent.Set(
                        (Percent)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                    this._RangeIntN.Set(
                        (RangeInt?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                    this._RangeInt.Set(
                        (RangeInt)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                    this._String.Set(
                        (String)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                    this._UDoubleN.Set(
                        (UDouble?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                    this._UDouble.Set(
                        (UDouble)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                    this._UInt16N.Set(
                        (UInt16?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                    this._UInt16.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                    this._UInt32N.Set(
                        (UInt32?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                    this._UInt32.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                    this._UInt64N.Set(
                        (UInt64?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                    this._UInt64.Set(
                        (UInt64)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                    this._UInt8N.Set(
                        (Byte?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                    this._UInt8.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                    this._Enum.Set(
                        (TestEnum)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                    this._WildCard.Set(
                        (Object)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                    this._Ref.Set(
                        (ObjectToRef)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                    this._RefGetter.Set(
                        (IObjectToRefGetter)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                    this._RefSetter.Set(
                        (IObjectToRef)obj,
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                    this._List.SetTo((IEnumerable<Boolean>)obj, cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    this._RefList.SetTo((IEnumerable<ObjectToRef>)obj, cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                    this.Dict.SetTo(
                        ((NotifyingDictionary<Boolean, String>)obj).Select(
                            (i) => new KeyValuePair<Boolean, String>(
                                i.Key,
                                i.Value)),
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                    this.RefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                i.Key.Copy(),
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)(NotifyingDictionary<Int32, ObjectToRef>)obj),
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestObject_Notifying_ReadOnlyCommon.Clear(this, cmds);
        }

        public static TestObject_Notifying_ReadOnly Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestObject_Notifying_ReadOnly();
            INoggolloquyObjectExt.CopyFieldsIn(ret, fields, def: null, skipReadonly: false, cmds: null);
            return ret;
        }

        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestObject_Notifying_ReadOnly obj)
        {
            INoggolloquyObjectExt.CopyFieldsIn(obj, fields, def: null, skipReadonly: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestObject_Notifying_ReadOnly : ITestObject_Notifying_ReadOnlyGetter, INoggolloquyClass<ITestObject_Notifying_ReadOnly, ITestObject_Notifying_ReadOnlyGetter>, INoggolloquyClass<TestObject_Notifying_ReadOnly, ITestObject_Notifying_ReadOnlyGetter>
    {
    }

    public interface ITestObject_Notifying_ReadOnlyGetter : INoggolloquyObject
    {
        #region BoolN
        Boolean? BoolN { get; }
        INotifyingItemGetter<Boolean?> BoolN_Property { get; }

        #endregion
        #region Bool
        Boolean Bool { get; }
        INotifyingItemGetter<Boolean> Bool_Property { get; }

        #endregion
        #region CharN
        Char? CharN { get; }
        INotifyingItemGetter<Char?> CharN_Property { get; }

        #endregion
        #region Char
        Char Char { get; }
        INotifyingItemGetter<Char> Char_Property { get; }

        #endregion
        #region DoubleN
        Double? DoubleN { get; }
        INotifyingItemGetter<Double?> DoubleN_Property { get; }

        #endregion
        #region Double
        Double Double { get; }
        INotifyingItemGetter<Double> Double_Property { get; }

        #endregion
        #region FloatN
        Single? FloatN { get; }
        INotifyingItemGetter<Single?> FloatN_Property { get; }

        #endregion
        #region Float
        Single Float { get; }
        INotifyingItemGetter<Single> Float_Property { get; }

        #endregion
        #region Int16N
        Int16? Int16N { get; }
        INotifyingItemGetter<Int16?> Int16N_Property { get; }

        #endregion
        #region Int16
        Int16 Int16 { get; }
        INotifyingItemGetter<Int16> Int16_Property { get; }

        #endregion
        #region Int32N
        Int32? Int32N { get; }
        INotifyingItemGetter<Int32?> Int32N_Property { get; }

        #endregion
        #region Int32
        Int32 Int32 { get; }
        INotifyingItemGetter<Int32> Int32_Property { get; }

        #endregion
        #region Int64N
        Int64? Int64N { get; }
        INotifyingItemGetter<Int64?> Int64N_Property { get; }

        #endregion
        #region Int64
        Int64 Int64 { get; }
        INotifyingItemGetter<Int64> Int64_Property { get; }

        #endregion
        #region Int8N
        SByte? Int8N { get; }
        INotifyingItemGetter<SByte?> Int8N_Property { get; }

        #endregion
        #region Int8
        SByte Int8 { get; }
        INotifyingItemGetter<SByte> Int8_Property { get; }

        #endregion
        #region Unsafe
        bool Unsafe { get; }
        INotifyingItemGetter<bool> Unsafe_Property { get; }

        #endregion
        #region P2IntN
        P2Int? P2IntN { get; }
        INotifyingItemGetter<P2Int?> P2IntN_Property { get; }

        #endregion
        #region P2Int
        P2Int P2Int { get; }
        INotifyingItemGetter<P2Int> P2Int_Property { get; }

        #endregion
        #region P3DoubleN
        P3Double? P3DoubleN { get; }
        INotifyingItemGetter<P3Double?> P3DoubleN_Property { get; }

        #endregion
        #region P3Double
        P3Double P3Double { get; }
        INotifyingItemGetter<P3Double> P3Double_Property { get; }

        #endregion
        #region P3IntN
        P3Int? P3IntN { get; }
        INotifyingItemGetter<P3Int?> P3IntN_Property { get; }

        #endregion
        #region P3Int
        P3Int P3Int { get; }
        INotifyingItemGetter<P3Int> P3Int_Property { get; }

        #endregion
        #region PercentN
        Percent? PercentN { get; }
        INotifyingItemGetter<Percent?> PercentN_Property { get; }

        #endregion
        #region Percent
        Percent Percent { get; }
        INotifyingItemGetter<Percent> Percent_Property { get; }

        #endregion
        #region RangeIntN
        RangeInt? RangeIntN { get; }
        INotifyingItemGetter<RangeInt?> RangeIntN_Property { get; }

        #endregion
        #region RangeInt
        RangeInt RangeInt { get; }
        INotifyingItemGetter<RangeInt> RangeInt_Property { get; }

        #endregion
        #region String
        String String { get; }
        INotifyingItemGetter<String> String_Property { get; }

        #endregion
        #region UDoubleN
        UDouble? UDoubleN { get; }
        INotifyingItemGetter<UDouble?> UDoubleN_Property { get; }

        #endregion
        #region UDouble
        UDouble UDouble { get; }
        INotifyingItemGetter<UDouble> UDouble_Property { get; }

        #endregion
        #region UInt16N
        UInt16? UInt16N { get; }
        INotifyingItemGetter<UInt16?> UInt16N_Property { get; }

        #endregion
        #region UInt16
        UInt16 UInt16 { get; }
        INotifyingItemGetter<UInt16> UInt16_Property { get; }

        #endregion
        #region UInt32N
        UInt32? UInt32N { get; }
        INotifyingItemGetter<UInt32?> UInt32N_Property { get; }

        #endregion
        #region UInt32
        UInt32 UInt32 { get; }
        INotifyingItemGetter<UInt32> UInt32_Property { get; }

        #endregion
        #region UInt64N
        UInt64? UInt64N { get; }
        INotifyingItemGetter<UInt64?> UInt64N_Property { get; }

        #endregion
        #region UInt64
        UInt64 UInt64 { get; }
        INotifyingItemGetter<UInt64> UInt64_Property { get; }

        #endregion
        #region UInt8N
        Byte? UInt8N { get; }
        INotifyingItemGetter<Byte?> UInt8N_Property { get; }

        #endregion
        #region UInt8
        Byte UInt8 { get; }
        INotifyingItemGetter<Byte> UInt8_Property { get; }

        #endregion
        #region Enum
        TestEnum Enum { get; }
        INotifyingItemGetter<TestEnum> Enum_Property { get; }

        #endregion
        #region WildCard
        Object WildCard { get; }
        INotifyingItemGetter<Object> WildCard_Property { get; }

        #endregion
        #region Ref
        ObjectToRef Ref { get; }
        INotifyingItemGetter<ObjectToRef> Ref_Property { get; }

        #endregion
        #region RefGetter
        IObjectToRefGetter RefGetter { get; }
        INotifyingItemGetter<IObjectToRefGetter> RefGetter_Property { get; }

        #endregion
        #region RefSetter
        IObjectToRef RefSetter { get; }
        INotifyingItemGetter<IObjectToRef> RefSetter_Property { get; }

        #endregion
        #region List
        INotifyingListGetter<Boolean> List { get; }
        #endregion
        #region RefList
        INotifyingListGetter<ObjectToRef> RefList { get; }
        #endregion
        #region Dict
        INotifyingDictionaryGetter<Boolean, String> Dict { get; }
        #endregion
        #region RefDict
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> RefDict { get; }
        #endregion
        #region DictKeyedValue
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> DictKeyedValue { get; }
        #endregion

    }

    #endregion

}

namespace Noggolloquy.Tests.Internals
{
    #region Field Index
    public enum TestObject_Notifying_ReadOnly_FieldIndex
    {
        BoolN = 0,
        Bool = 1,
        CharN = 2,
        Char = 3,
        DoubleN = 4,
        Double = 5,
        FloatN = 6,
        Float = 7,
        Int16N = 8,
        Int16 = 9,
        Int32N = 10,
        Int32 = 11,
        Int64N = 12,
        Int64 = 13,
        Int8N = 14,
        Int8 = 15,
        Unsafe = 16,
        P2IntN = 17,
        P2Int = 18,
        P3DoubleN = 19,
        P3Double = 20,
        P3IntN = 21,
        P3Int = 22,
        PercentN = 23,
        Percent = 24,
        RangeIntN = 25,
        RangeInt = 26,
        String = 27,
        UDoubleN = 28,
        UDouble = 29,
        UInt16N = 30,
        UInt16 = 31,
        UInt32N = 32,
        UInt32 = 33,
        UInt64N = 34,
        UInt64 = 35,
        UInt8N = 36,
        UInt8 = 37,
        Enum = 38,
        WildCard = 39,
        Ref = 40,
        RefGetter = 41,
        RefSetter = 42,
        List = 43,
        RefList = 44,
        Dict = 45,
        RefDict = 46,
        DictKeyedValue = 47,
    }
    #endregion

    #region Registration
    public class TestObject_Notifying_ReadOnly_Registration : INoggolloquyRegistration
    {
        public static readonly TestObject_Notifying_ReadOnly_Registration Instance = new TestObject_Notifying_ReadOnly_Registration();

        public static ProtocolDefinition ProtocolDefinition => ProtocolDefinition_NoggolloquyTests.Definition;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_NoggolloquyTests.ProtocolKey,
            msgID: 10,
            version: 0);

        public const string GUID = "788f2672-47d2-47d0-a157-c7426032ad72";

        public const ushort FieldCount = 48;

        public static readonly Type MaskType = typeof(TestObject_Notifying_ReadOnly_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestObject_Notifying_ReadOnly_ErrorMask);

        public static readonly Type ClassType = typeof(TestObject_Notifying_ReadOnly);

        public const string FullName = "Noggolloquy.Tests.TestObject_Notifying_ReadOnly";

        public const string Name = "TestObject_Notifying_ReadOnly";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BOOLN":
                    return 0;
                case "BOOL":
                    return 1;
                case "CHARN":
                    return 2;
                case "CHAR":
                    return 3;
                case "DOUBLEN":
                    return 4;
                case "DOUBLE":
                    return 5;
                case "FLOATN":
                    return 6;
                case "FLOAT":
                    return 7;
                case "INT16N":
                    return 8;
                case "INT16":
                    return 9;
                case "INT32N":
                    return 10;
                case "INT32":
                    return 11;
                case "INT64N":
                    return 12;
                case "INT64":
                    return 13;
                case "INT8N":
                    return 14;
                case "INT8":
                    return 15;
                case "UNSAFE":
                    return 16;
                case "P2INTN":
                    return 17;
                case "P2INT":
                    return 18;
                case "P3DOUBLEN":
                    return 19;
                case "P3DOUBLE":
                    return 20;
                case "P3INTN":
                    return 21;
                case "P3INT":
                    return 22;
                case "PERCENTN":
                    return 23;
                case "PERCENT":
                    return 24;
                case "RANGEINTN":
                    return 25;
                case "RANGEINT":
                    return 26;
                case "STRING":
                    return 27;
                case "UDOUBLEN":
                    return 28;
                case "UDOUBLE":
                    return 29;
                case "UINT16N":
                    return 30;
                case "UINT16":
                    return 31;
                case "UINT32N":
                    return 32;
                case "UINT32":
                    return 33;
                case "UINT64N":
                    return 34;
                case "UINT64":
                    return 35;
                case "UINT8N":
                    return 36;
                case "UINT8":
                    return 37;
                case "ENUM":
                    return 38;
                case "WILDCARD":
                    return 39;
                case "REF":
                    return 40;
                case "REFGETTER":
                    return 41;
                case "REFSETTER":
                    return 42;
                case "LIST":
                    return 43;
                case "REFLIST":
                    return 44;
                case "DICT":
                    return 45;
                case "REFDICT":
                    return 46;
                case "DICTKEYEDVALUE":
                    return 47;
                default:
                    throw new ArgumentException($"Queried unknown field: {str}");
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    return true;
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsNoggolloquy(ushort index)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    return true;
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                    return "BoolN";
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                    return "Bool";
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                    return "CharN";
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                    return "Char";
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                    return "DoubleN";
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                    return "Double";
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                    return "FloatN";
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                    return "Float";
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                    return "Int16N";
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                    return "Int16";
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                    return "Int32N";
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                    return "Int32";
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                    return "Int64N";
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                    return "Int64";
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                    return "Int8N";
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                    return "Int8";
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                    return "Unsafe";
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                    return "P2IntN";
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                    return "P2Int";
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                    return "P3DoubleN";
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                    return "P3Double";
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                    return "P3IntN";
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                    return "P3Int";
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                    return "PercentN";
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                    return "Percent";
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                    return "RangeIntN";
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                    return "RangeInt";
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                    return "String";
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                    return "UDoubleN";
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                    return "UDouble";
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                    return "UInt16N";
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                    return "UInt16";
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                    return "UInt32N";
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                    return "UInt32";
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                    return "UInt64N";
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                    return "UInt64";
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                    return "UInt8N";
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                    return "UInt8";
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                    return "Enum";
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                    return "WildCard";
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                    return "Ref";
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                    return "RefGetter";
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                    return "RefSetter";
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                    return "List";
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    return "RefList";
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                    return "Dict";
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                    return "RefDict";
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    return "DictKeyedValue";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsReadOnly(ushort index)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                    return typeof(Boolean?);
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                    return typeof(Boolean);
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                    return typeof(Char?);
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                    return typeof(Char);
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                    return typeof(Double?);
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                    return typeof(Double);
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                    return typeof(Single?);
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                    return typeof(Single);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                    return typeof(Int16?);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                    return typeof(Int16);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                    return typeof(Int32?);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                    return typeof(Int32);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                    return typeof(Int64?);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                    return typeof(Int64);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                    return typeof(SByte?);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                    return typeof(SByte);
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                    return typeof(bool);
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                    return typeof(P2Int?);
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                    return typeof(P2Int);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                    return typeof(P3Double?);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                    return typeof(P3Double);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                    return typeof(P3Int?);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                    return typeof(P3Int);
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                    return typeof(Percent?);
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                    return typeof(Percent);
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                    return typeof(RangeInt?);
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                    return typeof(RangeInt);
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                    return typeof(String);
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                    return typeof(UDouble?);
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                    return typeof(UDouble);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                    return typeof(UInt16?);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                    return typeof(UInt16);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                    return typeof(UInt32?);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                    return typeof(UInt32);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                    return typeof(UInt64?);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                    return typeof(UInt64);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                    return typeof(Byte?);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                    return typeof(Byte);
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                    return typeof(TestEnum);
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                    return typeof(Object);
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                    return typeof(ObjectToRef);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                    return typeof(IObjectToRefGetter);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                    return typeof(IObjectToRef);
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                    return typeof(NotifyingList<Boolean>);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    return typeof(NotifyingList<ObjectToRef>);
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                    return typeof(NotifyingDictionary<Boolean, String>);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, ObjectToRef>);
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    return typeof(NotifyingDictionary<Int32, ObjectToRef>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolDefinition INoggolloquyRegistration.ProtocolDefinition => ProtocolDefinition;
        ObjectKey INoggolloquyRegistration.ObjectKey => ObjectKey;
        string INoggolloquyRegistration.GUID => GUID;
        int INoggolloquyRegistration.FieldCount => FieldCount;
        Type INoggolloquyRegistration.MaskType => MaskType;
        Type INoggolloquyRegistration.ErrorMaskType => ErrorMaskType;
        Type INoggolloquyRegistration.ClassType => ClassType;
        string INoggolloquyRegistration.FullName => FullName;
        string INoggolloquyRegistration.Name => Name;
        byte INoggolloquyRegistration.GenericCount => GenericCount;
        Type INoggolloquyRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? INoggolloquyRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool INoggolloquyRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool INoggolloquyRegistration.GetNthIsNoggolloquy(ushort index) => GetNthIsNoggolloquy(index);
        bool INoggolloquyRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string INoggolloquyRegistration.GetNthName(ushort index) => GetNthName(index);
        bool INoggolloquyRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool INoggolloquyRegistration.IsReadOnly(ushort index) => IsReadOnly(index);
        Type INoggolloquyRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class TestObject_Notifying_ReadOnlyCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITestObject_Notifying_ReadOnly item,
            ITestObject_Notifying_ReadOnlyGetter rhs,
            ITestObject_Notifying_ReadOnlyGetter def,
            bool doErrorMask,
            Func<TestObject_Notifying_ReadOnly_ErrorMask> errorMask,
            TestObject_Notifying_ReadOnly_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestObject_Notifying_ReadOnly obj,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestObject_Notifying_ReadOnly obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestObject_Notifying_ReadOnly obj)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                    return obj.BoolN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                    return obj.Bool_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                    return obj.CharN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                    return obj.Char_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                    return obj.DoubleN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                    return obj.Double_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                    return obj.FloatN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                    return obj.Float_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                    return obj.Int16N_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                    return obj.Int16_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                    return obj.Int32N_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                    return obj.Int32_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                    return obj.Int64N_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                    return obj.Int64_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                    return obj.Int8N_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                    return obj.Int8_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                    return obj.Unsafe_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                    return obj.P2IntN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                    return obj.P2Int_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                    return obj.P3Double_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                    return obj.P3IntN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                    return obj.P3Int_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                    return obj.PercentN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                    return obj.Percent_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                    return obj.RangeIntN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                    return obj.RangeInt_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                    return obj.String_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                    return obj.UDoubleN_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                    return obj.UDouble_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                    return obj.UInt16N_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                    return obj.UInt16_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                    return obj.UInt32N_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                    return obj.UInt32_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                    return obj.UInt64N_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                    return obj.UInt64_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                    return obj.UInt8N_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                    return obj.UInt8_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                    return obj.Enum_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                    return obj.WildCard_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                    return obj.Ref_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                    return obj.RefGetter_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                    return obj.RefSetter_Property.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                    return obj.List.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    return obj.RefList.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                    return obj.Dict.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                    return obj.RefDict.HasBeenSet;
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestObject_Notifying_ReadOnlyGetter obj)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                    return obj.BoolN;
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                    return obj.Bool;
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                    return obj.CharN;
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                    return obj.Char;
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                    return obj.DoubleN;
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                    return obj.Double;
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                    return obj.FloatN;
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                    return obj.Float;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                    return obj.Int16N;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                    return obj.Int16;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                    return obj.Int32N;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                    return obj.Int32;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                    return obj.Int64N;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                    return obj.Int64;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                    return obj.Int8N;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                    return obj.Int8;
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                    return obj.Unsafe;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                    return obj.P2IntN;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                    return obj.P2Int;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                    return obj.P3Double;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                    return obj.P3IntN;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                    return obj.P3Int;
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                    return obj.PercentN;
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                    return obj.Percent;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                    return obj.RangeIntN;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                    return obj.RangeInt;
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                    return obj.String;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                    return obj.UDoubleN;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                    return obj.UDouble;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                    return obj.UInt16N;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                    return obj.UInt16;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                    return obj.UInt32N;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                    return obj.UInt32;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                    return obj.UInt64N;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                    return obj.UInt64;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                    return obj.UInt8N;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                    return obj.UInt8;
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                    return obj.Enum;
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                    return obj.WildCard;
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                    return obj.Ref;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                    return obj.RefGetter;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                    return obj.RefSetter;
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                    return obj.List;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    return obj.RefList;
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                    return obj.Dict;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                    return obj.RefDict;
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITestObject_Notifying_ReadOnly item,
            NotifyingUnsetParameters? cmds = null)
        {
        }
    }
    #endregion

    #region Modules

    #region Mask
    public class TestObject_Notifying_ReadOnly_Mask<T> 
    {
        public T BoolN;
        public T Bool;
        public T CharN;
        public T Char;
        public T DoubleN;
        public T Double;
        public T FloatN;
        public T Float;
        public T Int16N;
        public T Int16;
        public T Int32N;
        public T Int32;
        public T Int64N;
        public T Int64;
        public T Int8N;
        public T Int8;
        public T Unsafe;
        public T P2IntN;
        public T P2Int;
        public T P3DoubleN;
        public T P3Double;
        public T P3IntN;
        public T P3Int;
        public T PercentN;
        public T Percent;
        public T RangeIntN;
        public T RangeInt;
        public T String;
        public T UDoubleN;
        public T UDouble;
        public T UInt16N;
        public T UInt16;
        public T UInt32N;
        public T UInt32;
        public T UInt64N;
        public T UInt64;
        public T UInt8N;
        public T UInt8;
        public T Enum;
        public T WildCard;
        public MaskItem<T, ObjectToRef_Mask<T>> Ref { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter { get; set; }
        public MaskItem<T, IEnumerable<T>> List;
        public MaskItem<T, IEnumerable<ObjectToRef_ErrorMask>> RefList;
        public MaskItem<T, IEnumerable<KeyValuePair<T, T>>> Dict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>> RefDict;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> DictKeyedValue;
    }

    public class TestObject_Notifying_ReadOnly_ErrorMask : IErrorMask
    {
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception BoolN;
        public Exception Bool;
        public Exception CharN;
        public Exception Char;
        public Exception DoubleN;
        public Exception Double;
        public Exception FloatN;
        public Exception Float;
        public Exception Int16N;
        public Exception Int16;
        public Exception Int32N;
        public Exception Int32;
        public Exception Int64N;
        public Exception Int64;
        public Exception Int8N;
        public Exception Int8;
        public Exception Unsafe;
        public Exception P2IntN;
        public Exception P2Int;
        public Exception P3DoubleN;
        public Exception P3Double;
        public Exception P3IntN;
        public Exception P3Int;
        public Exception PercentN;
        public Exception Percent;
        public Exception RangeIntN;
        public Exception RangeInt;
        public Exception String;
        public Exception UDoubleN;
        public Exception UDouble;
        public Exception UInt16N;
        public Exception UInt16;
        public Exception UInt32N;
        public Exception UInt32;
        public Exception UInt64N;
        public Exception UInt64;
        public Exception UInt8N;
        public Exception UInt8;
        public Exception Enum;
        public Exception WildCard;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter;
        public MaskItem<Exception, IEnumerable<Exception>> List;
        public MaskItem<Exception, IEnumerable<ObjectToRef_ErrorMask>> RefList;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> Dict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_Mask<Exception>>, MaskItem<Exception, ObjectToRef_Mask<Exception>>>>> RefDict;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_Mask<Exception>>>> DictKeyedValue;

        public void SetNthException(ushort index, Exception ex)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                    this.BoolN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                    this.Bool = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                    this.CharN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                    this.Char = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                    this.DoubleN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                    this.Double = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                    this.FloatN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                    this.Float = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                    this.Int16N = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                    this.Int16 = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                    this.Int32N = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                    this.Int32 = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                    this.Int64N = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                    this.Int64 = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                    this.Int8N = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                    this.Int8 = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                    this.Unsafe = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                    this.P2IntN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                    this.P2Int = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                    this.P3DoubleN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                    this.P3Double = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                    this.P3IntN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                    this.P3Int = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                    this.PercentN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                    this.Percent = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                    this.RangeIntN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                    this.RangeInt = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                    this.String = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                    this.UDoubleN = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                    this.UDouble = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                    this.UInt16N = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                    this.UInt16 = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                    this.UInt32N = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                    this.UInt32 = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                    this.UInt64N = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                    this.UInt64 = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                    this.UInt8N = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                    this.UInt8 = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                    this.Enum = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                    this.WildCard = ex;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                    this.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                    this.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                    this.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                    this.List = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    this.RefList = new MaskItem<Exception, IEnumerable<ObjectToRef_ErrorMask>>(ex, null);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                    this.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(ex, null);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                    this.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_Mask<Exception>>, MaskItem<Exception, ObjectToRef_Mask<Exception>>>>>(ex, null);
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_Mask<Exception>>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            TestObject_Notifying_ReadOnly_FieldIndex enu = (TestObject_Notifying_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_ReadOnly_FieldIndex.BoolN:
                    this.BoolN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Bool:
                    this.Bool = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.CharN:
                    this.CharN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Char:
                    this.Char = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.DoubleN:
                    this.DoubleN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Double:
                    this.Double = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.FloatN:
                    this.FloatN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Float:
                    this.Float = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16N:
                    this.Int16N = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int16:
                    this.Int16 = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32N:
                    this.Int32N = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int32:
                    this.Int32 = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64N:
                    this.Int64N = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int64:
                    this.Int64 = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8N:
                    this.Int8N = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Int8:
                    this.Int8 = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Unsafe:
                    this.Unsafe = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2IntN:
                    this.P2IntN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P2Int:
                    this.P2Int = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3DoubleN:
                    this.P3DoubleN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Double:
                    this.P3Double = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3IntN:
                    this.P3IntN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.P3Int:
                    this.P3Int = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.PercentN:
                    this.PercentN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Percent:
                    this.Percent = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeIntN:
                    this.RangeIntN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RangeInt:
                    this.RangeInt = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.String:
                    this.String = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDoubleN:
                    this.UDoubleN = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UDouble:
                    this.UDouble = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16N:
                    this.UInt16N = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt16:
                    this.UInt16 = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32N:
                    this.UInt32N = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt32:
                    this.UInt32 = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64N:
                    this.UInt64N = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt64:
                    this.UInt64 = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8N:
                    this.UInt8N = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.UInt8:
                    this.UInt8 = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Enum:
                    this.Enum = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.WildCard:
                    this.WildCard = (Exception)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Ref:
                    this.Ref = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefGetter:
                    this.RefGetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefSetter:
                    this.RefSetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.List:
                    this.List = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefList:
                    this.RefList = (MaskItem<Exception, IEnumerable<ObjectToRef_ErrorMask>>)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.Dict:
                    this.Dict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.RefDict:
                    this.RefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_Mask<Exception>>, MaskItem<Exception, ObjectToRef_Mask<Exception>>>>>)obj;
                    break;
                case TestObject_Notifying_ReadOnly_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_Mask<Exception>>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    public class TestObject_Notifying_ReadOnly_CopyMask
    {
        public bool BoolN;
        public bool Bool;
        public bool CharN;
        public bool Char;
        public bool DoubleN;
        public bool Double;
        public bool FloatN;
        public bool Float;
        public bool Int16N;
        public bool Int16;
        public bool Int32N;
        public bool Int32;
        public bool Int64N;
        public bool Int64;
        public bool Int8N;
        public bool Int8;
        public bool Unsafe;
        public bool P2IntN;
        public bool P2Int;
        public bool P3DoubleN;
        public bool P3Double;
        public bool P3IntN;
        public bool P3Int;
        public bool PercentN;
        public bool Percent;
        public bool RangeIntN;
        public bool RangeInt;
        public bool String;
        public bool UDoubleN;
        public bool UDouble;
        public bool UInt16N;
        public bool UInt16;
        public bool UInt32N;
        public bool UInt32;
        public bool UInt64N;
        public bool UInt64;
        public bool UInt8N;
        public bool UInt8;
        public bool Enum;
        public bool WildCard;
        public MaskItem<CopyType, ObjectToRef_CopyMask> Ref;
        public MaskItem<CopyType, ObjectToRef_CopyMask> RefGetter;
        public MaskItem<CopyType, ObjectToRef_CopyMask> RefSetter;
        public CopyType List;
        public MaskItem<CopyType, ObjectToRef_CopyMask> RefList;
        public bool Dict;
        public MaskItem<bool, KeyValuePair<(RefCopyType Type, ObjectToRef_CopyMask Mask), (RefCopyType Type, ObjectToRef_CopyMask Mask)>> RefDict;
        public MaskItem<CopyType, ObjectToRef_CopyMask> DictKeyedValue;

    }
    #endregion


    #endregion

}
