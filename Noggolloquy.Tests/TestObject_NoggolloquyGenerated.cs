/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Noggolloquy.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Noggolloquy;
using Noggog;
using Noggog.Notifying;
using Noggolloquy.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Noggolloquy.Xml;

namespace Noggolloquy.Tests
{
    #region Class
    public partial class TestObject : ITestObject, INoggolloquyObjectSetter, IEquatable<TestObject>
    {
        INoggolloquyRegistration INoggolloquyObject.Registration => TestObject_Registration.Instance;
        public static TestObject_Registration Registration => TestObject_Registration.Instance;

        public TestObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #region BoolN
        protected readonly INotifyingItem<Boolean?> _BoolN = new NotifyingItem<Boolean?>(
            default(Boolean?),
            markAsSet: false
        );
        public INotifyingItem<Boolean?> BoolN_Property => _BoolN;
        public Boolean? BoolN { get { return _BoolN.Value; } set { _BoolN.Value = value; } }
        INotifyingItem<Boolean?> ITestObject.BoolN_Property => this.BoolN_Property;
        INotifyingItemGetter<Boolean?> ITestObjectGetter.BoolN_Property => this.BoolN_Property;
        #endregion

        #region Bool
        protected readonly INotifyingItem<Boolean> _Bool = new NotifyingItem<Boolean>(
            default(Boolean),
            markAsSet: false
        );
        public INotifyingItem<Boolean> Bool_Property => _Bool;
        public Boolean Bool { get { return _Bool.Value; } set { _Bool.Value = value; } }
        INotifyingItem<Boolean> ITestObject.Bool_Property => this.Bool_Property;
        INotifyingItemGetter<Boolean> ITestObjectGetter.Bool_Property => this.Bool_Property;
        #endregion

        #region CharN
        protected readonly INotifyingItem<Char?> _CharN = new NotifyingItem<Char?>(
            default(Char?),
            markAsSet: false
        );
        public INotifyingItem<Char?> CharN_Property => _CharN;
        public Char? CharN { get { return _CharN.Value; } set { _CharN.Value = value; } }
        INotifyingItem<Char?> ITestObject.CharN_Property => this.CharN_Property;
        INotifyingItemGetter<Char?> ITestObjectGetter.CharN_Property => this.CharN_Property;
        #endregion

        #region Char
        protected readonly INotifyingItem<Char> _Char = new NotifyingItem<Char>(
            default(Char),
            markAsSet: false
        );
        public INotifyingItem<Char> Char_Property => _Char;
        public Char Char { get { return _Char.Value; } set { _Char.Value = value; } }
        INotifyingItem<Char> ITestObject.Char_Property => this.Char_Property;
        INotifyingItemGetter<Char> ITestObjectGetter.Char_Property => this.Char_Property;
        #endregion

        #region DoubleN
        protected readonly INotifyingItem<Double?> _DoubleN = new NotifyingItem<Double?>(
            default(Double?),
            markAsSet: false
        );
        public INotifyingItem<Double?> DoubleN_Property => _DoubleN;
        public Double? DoubleN { get { return _DoubleN.Value; } set { _DoubleN.Value = value; } }
        INotifyingItem<Double?> ITestObject.DoubleN_Property => this.DoubleN_Property;
        INotifyingItemGetter<Double?> ITestObjectGetter.DoubleN_Property => this.DoubleN_Property;
        #endregion

        #region Double
        protected readonly INotifyingItem<Double> _Double = new NotifyingItem<Double>(
            default(Double),
            markAsSet: false
        );
        public INotifyingItem<Double> Double_Property => _Double;
        public Double Double { get { return _Double.Value; } set { _Double.Value = value; } }
        INotifyingItem<Double> ITestObject.Double_Property => this.Double_Property;
        INotifyingItemGetter<Double> ITestObjectGetter.Double_Property => this.Double_Property;
        #endregion

        #region FloatN
        protected readonly INotifyingItem<Single?> _FloatN = new NotifyingItem<Single?>(
            default(Single?),
            markAsSet: false
        );
        public INotifyingItem<Single?> FloatN_Property => _FloatN;
        public Single? FloatN { get { return _FloatN.Value; } set { _FloatN.Value = value; } }
        INotifyingItem<Single?> ITestObject.FloatN_Property => this.FloatN_Property;
        INotifyingItemGetter<Single?> ITestObjectGetter.FloatN_Property => this.FloatN_Property;
        #endregion

        #region Float
        protected readonly INotifyingItem<Single> _Float = new NotifyingItem<Single>(
            default(Single),
            markAsSet: false
        );
        public INotifyingItem<Single> Float_Property => _Float;
        public Single Float { get { return _Float.Value; } set { _Float.Value = value; } }
        INotifyingItem<Single> ITestObject.Float_Property => this.Float_Property;
        INotifyingItemGetter<Single> ITestObjectGetter.Float_Property => this.Float_Property;
        #endregion

        #region Int16N
        protected readonly INotifyingItem<Int16?> _Int16N = new NotifyingItem<Int16?>(
            default(Int16?),
            markAsSet: false
        );
        public INotifyingItem<Int16?> Int16N_Property => _Int16N;
        public Int16? Int16N { get { return _Int16N.Value; } set { _Int16N.Value = value; } }
        INotifyingItem<Int16?> ITestObject.Int16N_Property => this.Int16N_Property;
        INotifyingItemGetter<Int16?> ITestObjectGetter.Int16N_Property => this.Int16N_Property;
        #endregion

        #region Int16
        protected readonly INotifyingItem<Int16> _Int16 = new NotifyingItem<Int16>(
            default(Int16),
            markAsSet: false
        );
        public INotifyingItem<Int16> Int16_Property => _Int16;
        public Int16 Int16 { get { return _Int16.Value; } set { _Int16.Value = value; } }
        INotifyingItem<Int16> ITestObject.Int16_Property => this.Int16_Property;
        INotifyingItemGetter<Int16> ITestObjectGetter.Int16_Property => this.Int16_Property;
        #endregion

        #region Int32N
        protected readonly INotifyingItem<Int32?> _Int32N = new NotifyingItem<Int32?>(
            default(Int32?),
            markAsSet: false
        );
        public INotifyingItem<Int32?> Int32N_Property => _Int32N;
        public Int32? Int32N { get { return _Int32N.Value; } set { _Int32N.Value = value; } }
        INotifyingItem<Int32?> ITestObject.Int32N_Property => this.Int32N_Property;
        INotifyingItemGetter<Int32?> ITestObjectGetter.Int32N_Property => this.Int32N_Property;
        #endregion

        #region Int32
        protected readonly INotifyingItem<Int32> _Int32 = new NotifyingItem<Int32>(
            default(Int32),
            markAsSet: false
        );
        public INotifyingItem<Int32> Int32_Property => _Int32;
        public Int32 Int32 { get { return _Int32.Value; } set { _Int32.Value = value; } }
        INotifyingItem<Int32> ITestObject.Int32_Property => this.Int32_Property;
        INotifyingItemGetter<Int32> ITestObjectGetter.Int32_Property => this.Int32_Property;
        #endregion

        #region Int64N
        protected readonly INotifyingItem<Int64?> _Int64N = new NotifyingItem<Int64?>(
            default(Int64?),
            markAsSet: false
        );
        public INotifyingItem<Int64?> Int64N_Property => _Int64N;
        public Int64? Int64N { get { return _Int64N.Value; } set { _Int64N.Value = value; } }
        INotifyingItem<Int64?> ITestObject.Int64N_Property => this.Int64N_Property;
        INotifyingItemGetter<Int64?> ITestObjectGetter.Int64N_Property => this.Int64N_Property;
        #endregion

        #region Int64
        protected readonly INotifyingItem<Int64> _Int64 = new NotifyingItem<Int64>(
            default(Int64),
            markAsSet: false
        );
        public INotifyingItem<Int64> Int64_Property => _Int64;
        public Int64 Int64 { get { return _Int64.Value; } set { _Int64.Value = value; } }
        INotifyingItem<Int64> ITestObject.Int64_Property => this.Int64_Property;
        INotifyingItemGetter<Int64> ITestObjectGetter.Int64_Property => this.Int64_Property;
        #endregion

        #region Int8N
        protected readonly INotifyingItem<SByte?> _Int8N = new NotifyingItem<SByte?>(
            default(SByte?),
            markAsSet: false
        );
        public INotifyingItem<SByte?> Int8N_Property => _Int8N;
        public SByte? Int8N { get { return _Int8N.Value; } set { _Int8N.Value = value; } }
        INotifyingItem<SByte?> ITestObject.Int8N_Property => this.Int8N_Property;
        INotifyingItemGetter<SByte?> ITestObjectGetter.Int8N_Property => this.Int8N_Property;
        #endregion

        #region Int8
        protected readonly INotifyingItem<SByte> _Int8 = new NotifyingItem<SByte>(
            default(SByte),
            markAsSet: false
        );
        public INotifyingItem<SByte> Int8_Property => _Int8;
        public SByte Int8 { get { return _Int8.Value; } set { _Int8.Value = value; } }
        INotifyingItem<SByte> ITestObject.Int8_Property => this.Int8_Property;
        INotifyingItemGetter<SByte> ITestObjectGetter.Int8_Property => this.Int8_Property;
        #endregion

        #region Unsafe
        protected readonly INotifyingItem<bool> _Unsafe = new NotifyingItem<bool>(
            default(bool),
            markAsSet: false
        );
        public INotifyingItem<bool> Unsafe_Property => _Unsafe;
        public bool Unsafe { get { return _Unsafe.Value; } set { _Unsafe.Value = value; } }
        INotifyingItem<bool> ITestObject.Unsafe_Property => this.Unsafe_Property;
        INotifyingItemGetter<bool> ITestObjectGetter.Unsafe_Property => this.Unsafe_Property;
        #endregion

        #region P2IntN
        protected readonly INotifyingItem<P2Int?> _P2IntN = new NotifyingItem<P2Int?>(
            default(P2Int?),
            markAsSet: false
        );
        public INotifyingItem<P2Int?> P2IntN_Property => _P2IntN;
        public P2Int? P2IntN { get { return _P2IntN.Value; } set { _P2IntN.Value = value; } }
        INotifyingItem<P2Int?> ITestObject.P2IntN_Property => this.P2IntN_Property;
        INotifyingItemGetter<P2Int?> ITestObjectGetter.P2IntN_Property => this.P2IntN_Property;
        #endregion

        #region P2Int
        protected readonly INotifyingItem<P2Int> _P2Int = new NotifyingItem<P2Int>(
            default(P2Int),
            markAsSet: false
        );
        public INotifyingItem<P2Int> P2Int_Property => _P2Int;
        public P2Int P2Int { get { return _P2Int.Value; } set { _P2Int.Value = value; } }
        INotifyingItem<P2Int> ITestObject.P2Int_Property => this.P2Int_Property;
        INotifyingItemGetter<P2Int> ITestObjectGetter.P2Int_Property => this.P2Int_Property;
        #endregion

        #region P3DoubleN
        protected readonly INotifyingItem<P3Double?> _P3DoubleN = new NotifyingItem<P3Double?>(
            default(P3Double?),
            markAsSet: false
        );
        public INotifyingItem<P3Double?> P3DoubleN_Property => _P3DoubleN;
        public P3Double? P3DoubleN { get { return _P3DoubleN.Value; } set { _P3DoubleN.Value = value; } }
        INotifyingItem<P3Double?> ITestObject.P3DoubleN_Property => this.P3DoubleN_Property;
        INotifyingItemGetter<P3Double?> ITestObjectGetter.P3DoubleN_Property => this.P3DoubleN_Property;
        #endregion

        #region P3Double
        protected readonly INotifyingItem<P3Double> _P3Double = new NotifyingItem<P3Double>(
            default(P3Double),
            markAsSet: false
        );
        public INotifyingItem<P3Double> P3Double_Property => _P3Double;
        public P3Double P3Double { get { return _P3Double.Value; } set { _P3Double.Value = value; } }
        INotifyingItem<P3Double> ITestObject.P3Double_Property => this.P3Double_Property;
        INotifyingItemGetter<P3Double> ITestObjectGetter.P3Double_Property => this.P3Double_Property;
        #endregion

        #region P3IntN
        protected readonly INotifyingItem<P3Int?> _P3IntN = new NotifyingItem<P3Int?>(
            default(P3Int?),
            markAsSet: false
        );
        public INotifyingItem<P3Int?> P3IntN_Property => _P3IntN;
        public P3Int? P3IntN { get { return _P3IntN.Value; } set { _P3IntN.Value = value; } }
        INotifyingItem<P3Int?> ITestObject.P3IntN_Property => this.P3IntN_Property;
        INotifyingItemGetter<P3Int?> ITestObjectGetter.P3IntN_Property => this.P3IntN_Property;
        #endregion

        #region P3Int
        protected readonly INotifyingItem<P3Int> _P3Int = new NotifyingItem<P3Int>(
            default(P3Int),
            markAsSet: false
        );
        public INotifyingItem<P3Int> P3Int_Property => _P3Int;
        public P3Int P3Int { get { return _P3Int.Value; } set { _P3Int.Value = value; } }
        INotifyingItem<P3Int> ITestObject.P3Int_Property => this.P3Int_Property;
        INotifyingItemGetter<P3Int> ITestObjectGetter.P3Int_Property => this.P3Int_Property;
        #endregion

        #region PercentN
        protected readonly INotifyingItem<Percent?> _PercentN = new NotifyingItem<Percent?>(
            default(Percent?),
            markAsSet: false
        );
        public INotifyingItem<Percent?> PercentN_Property => _PercentN;
        public Percent? PercentN { get { return _PercentN.Value; } set { _PercentN.Value = value; } }
        INotifyingItem<Percent?> ITestObject.PercentN_Property => this.PercentN_Property;
        INotifyingItemGetter<Percent?> ITestObjectGetter.PercentN_Property => this.PercentN_Property;
        #endregion

        #region Percent
        protected readonly INotifyingItem<Percent> _Percent = new NotifyingItem<Percent>(
            default(Percent),
            markAsSet: false
        );
        public INotifyingItem<Percent> Percent_Property => _Percent;
        public Percent Percent { get { return _Percent.Value; } set { _Percent.Value = value; } }
        INotifyingItem<Percent> ITestObject.Percent_Property => this.Percent_Property;
        INotifyingItemGetter<Percent> ITestObjectGetter.Percent_Property => this.Percent_Property;
        #endregion

        #region RangeIntN
        protected readonly INotifyingItem<RangeInt?> _RangeIntN = new NotifyingItem<RangeInt?>(
            default(RangeInt?),
            markAsSet: false
        );
        public INotifyingItem<RangeInt?> RangeIntN_Property => _RangeIntN;
        public RangeInt? RangeIntN { get { return _RangeIntN.Value; } set { _RangeIntN.Value = value; } }
        INotifyingItem<RangeInt?> ITestObject.RangeIntN_Property => this.RangeIntN_Property;
        INotifyingItemGetter<RangeInt?> ITestObjectGetter.RangeIntN_Property => this.RangeIntN_Property;
        #endregion

        #region RangeInt
        protected readonly INotifyingItem<RangeInt> _RangeInt = new NotifyingItem<RangeInt>(
            default(RangeInt),
            markAsSet: false
        );
        public INotifyingItem<RangeInt> RangeInt_Property => _RangeInt;
        public RangeInt RangeInt { get { return _RangeInt.Value; } set { _RangeInt.Value = value; } }
        INotifyingItem<RangeInt> ITestObject.RangeInt_Property => this.RangeInt_Property;
        INotifyingItemGetter<RangeInt> ITestObjectGetter.RangeInt_Property => this.RangeInt_Property;
        #endregion

        #region String
        protected readonly INotifyingItem<String> _String = new NotifyingItem<String>(
            default(String),
            markAsSet: false
        );
        public INotifyingItem<String> String_Property => _String;
        public String String { get { return _String.Value; } set { _String.Value = value; } }
        INotifyingItem<String> ITestObject.String_Property => this.String_Property;
        INotifyingItemGetter<String> ITestObjectGetter.String_Property => this.String_Property;
        #endregion

        #region UDoubleN
        protected readonly INotifyingItem<UDouble?> _UDoubleN = new NotifyingItem<UDouble?>(
            default(UDouble?),
            markAsSet: false
        );
        public INotifyingItem<UDouble?> UDoubleN_Property => _UDoubleN;
        public UDouble? UDoubleN { get { return _UDoubleN.Value; } set { _UDoubleN.Value = value; } }
        INotifyingItem<UDouble?> ITestObject.UDoubleN_Property => this.UDoubleN_Property;
        INotifyingItemGetter<UDouble?> ITestObjectGetter.UDoubleN_Property => this.UDoubleN_Property;
        #endregion

        #region UDouble
        protected readonly INotifyingItem<UDouble> _UDouble = new NotifyingItem<UDouble>(
            default(UDouble),
            markAsSet: false
        );
        public INotifyingItem<UDouble> UDouble_Property => _UDouble;
        public UDouble UDouble { get { return _UDouble.Value; } set { _UDouble.Value = value; } }
        INotifyingItem<UDouble> ITestObject.UDouble_Property => this.UDouble_Property;
        INotifyingItemGetter<UDouble> ITestObjectGetter.UDouble_Property => this.UDouble_Property;
        #endregion

        #region UInt16N
        protected readonly INotifyingItem<UInt16?> _UInt16N = new NotifyingItem<UInt16?>(
            default(UInt16?),
            markAsSet: false
        );
        public INotifyingItem<UInt16?> UInt16N_Property => _UInt16N;
        public UInt16? UInt16N { get { return _UInt16N.Value; } set { _UInt16N.Value = value; } }
        INotifyingItem<UInt16?> ITestObject.UInt16N_Property => this.UInt16N_Property;
        INotifyingItemGetter<UInt16?> ITestObjectGetter.UInt16N_Property => this.UInt16N_Property;
        #endregion

        #region UInt16
        protected readonly INotifyingItem<UInt16> _UInt16 = new NotifyingItem<UInt16>(
            default(UInt16),
            markAsSet: false
        );
        public INotifyingItem<UInt16> UInt16_Property => _UInt16;
        public UInt16 UInt16 { get { return _UInt16.Value; } set { _UInt16.Value = value; } }
        INotifyingItem<UInt16> ITestObject.UInt16_Property => this.UInt16_Property;
        INotifyingItemGetter<UInt16> ITestObjectGetter.UInt16_Property => this.UInt16_Property;
        #endregion

        #region UInt32N
        protected readonly INotifyingItem<UInt32?> _UInt32N = new NotifyingItem<UInt32?>(
            default(UInt32?),
            markAsSet: false
        );
        public INotifyingItem<UInt32?> UInt32N_Property => _UInt32N;
        public UInt32? UInt32N { get { return _UInt32N.Value; } set { _UInt32N.Value = value; } }
        INotifyingItem<UInt32?> ITestObject.UInt32N_Property => this.UInt32N_Property;
        INotifyingItemGetter<UInt32?> ITestObjectGetter.UInt32N_Property => this.UInt32N_Property;
        #endregion

        #region UInt32
        protected readonly INotifyingItem<UInt32> _UInt32 = new NotifyingItem<UInt32>(
            default(UInt32),
            markAsSet: false
        );
        public INotifyingItem<UInt32> UInt32_Property => _UInt32;
        public UInt32 UInt32 { get { return _UInt32.Value; } set { _UInt32.Value = value; } }
        INotifyingItem<UInt32> ITestObject.UInt32_Property => this.UInt32_Property;
        INotifyingItemGetter<UInt32> ITestObjectGetter.UInt32_Property => this.UInt32_Property;
        #endregion

        #region UInt64N
        protected readonly INotifyingItem<UInt64?> _UInt64N = new NotifyingItem<UInt64?>(
            default(UInt64?),
            markAsSet: false
        );
        public INotifyingItem<UInt64?> UInt64N_Property => _UInt64N;
        public UInt64? UInt64N { get { return _UInt64N.Value; } set { _UInt64N.Value = value; } }
        INotifyingItem<UInt64?> ITestObject.UInt64N_Property => this.UInt64N_Property;
        INotifyingItemGetter<UInt64?> ITestObjectGetter.UInt64N_Property => this.UInt64N_Property;
        #endregion

        #region UInt64
        protected readonly INotifyingItem<UInt64> _UInt64 = new NotifyingItem<UInt64>(
            default(UInt64),
            markAsSet: false
        );
        public INotifyingItem<UInt64> UInt64_Property => _UInt64;
        public UInt64 UInt64 { get { return _UInt64.Value; } set { _UInt64.Value = value; } }
        INotifyingItem<UInt64> ITestObject.UInt64_Property => this.UInt64_Property;
        INotifyingItemGetter<UInt64> ITestObjectGetter.UInt64_Property => this.UInt64_Property;
        #endregion

        #region UInt8N
        protected readonly INotifyingItem<Byte?> _UInt8N = new NotifyingItem<Byte?>(
            default(Byte?),
            markAsSet: false
        );
        public INotifyingItem<Byte?> UInt8N_Property => _UInt8N;
        public Byte? UInt8N { get { return _UInt8N.Value; } set { _UInt8N.Value = value; } }
        INotifyingItem<Byte?> ITestObject.UInt8N_Property => this.UInt8N_Property;
        INotifyingItemGetter<Byte?> ITestObjectGetter.UInt8N_Property => this.UInt8N_Property;
        #endregion

        #region UInt8
        protected readonly INotifyingItem<Byte> _UInt8 = new NotifyingItem<Byte>(
            default(Byte),
            markAsSet: false
        );
        public INotifyingItem<Byte> UInt8_Property => _UInt8;
        public Byte UInt8 { get { return _UInt8.Value; } set { _UInt8.Value = value; } }
        INotifyingItem<Byte> ITestObject.UInt8_Property => this.UInt8_Property;
        INotifyingItemGetter<Byte> ITestObjectGetter.UInt8_Property => this.UInt8_Property;
        #endregion

        #region Enum
        protected readonly INotifyingItem<TestEnum> _Enum = new NotifyingItem<TestEnum>(
        );
        public INotifyingItem<TestEnum> Enum_Property => _Enum;
        public TestEnum Enum { get { return _Enum.Value; } set { _Enum.Value = value; } }
        INotifyingItem<TestEnum> ITestObject.Enum_Property => this.Enum_Property;
        INotifyingItemGetter<TestEnum> ITestObjectGetter.Enum_Property => this.Enum_Property;
        #endregion

        #region WildCard
        protected readonly INotifyingItem<Object> _WildCard = new NotifyingItemConvertWrapper<Object>(
            (change) => TryGet<Object>.Succeed(WildcardLink.Validate(change.New)),
            default(Object),
            markAsSet: false
        );
        public INotifyingItem<Object> WildCard_Property => _WildCard;
        public Object WildCard { get { return _WildCard.Value; } set { _WildCard.Value = value; } }
        INotifyingItem<Object> ITestObject.WildCard_Property => this.WildCard_Property;
        INotifyingItemGetter<Object> ITestObjectGetter.WildCard_Property => this.WildCard_Property;
        #endregion

        #region Ref
        private readonly INotifyingItem<ObjectToRef> _Ref = new NotifyingItem<ObjectToRef>();
        public INotifyingItem<ObjectToRef> Ref_Property => this._Ref;
        IObjectToRefGetter ITestObjectGetter.Ref => this.Ref;
        public ObjectToRef Ref { get { return _Ref.Value; } set { _Ref.Value = value; } }
        INotifyingItem<ObjectToRef> ITestObject.Ref_Property => this.Ref_Property;
        INotifyingItemGetter<ObjectToRef> ITestObjectGetter.Ref_Property => this.Ref_Property;
        #endregion

        #region List
        private readonly INotifyingList<Boolean> _List = new NotifyingList<Boolean>();
        public INotifyingList<Boolean> List => _List;
        #region Interface Members
        public Boolean GetNthList(int index)
        {
            return _List[index];
        }
        INotifyingList<Boolean> ITestObject.List => _List;
        INotifyingListGetter<Boolean> ITestObjectGetter.List => _List;
        #endregion
        #endregion

        #region RefList
        private readonly INotifyingList<ObjectToRef> _RefList = new NotifyingList<ObjectToRef>();
        public INotifyingList<ObjectToRef> RefList => _RefList;
        #region Interface Members
        public ObjectToRef GetNthRefList(int index)
        {
            return _RefList[index];
        }
        IObjectToRefGetter ITestObjectGetter.GetNthRefList(int index)
        {
            return _RefList[index];
        }
        INotifyingList<ObjectToRef> ITestObject.RefList => _RefList;
        INotifyingListGetter<ObjectToRef> ITestObjectGetter.RefList => _RefList;
        #endregion
        #endregion

        #region Dict
        private readonly INotifyingDictionary<Boolean, String> _Dict = new NotifyingDictionary<Boolean, String>();
        public INotifyingDictionary<Boolean, String> Dict { get { return _Dict; } }
        #region Interface Members
        INotifyingDictionary<Boolean, String> ITestObject.Dict => _Dict;
        INotifyingDictionaryGetter<Boolean, String> ITestObjectGetter.Dict => _Dict;
        #endregion
        #endregion

        #region RefDict
        private readonly INotifyingDictionary<ObjectToRef, ObjectToRef> _RefDict = new NotifyingDictionary<ObjectToRef, ObjectToRef>();
        public INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get { return _RefDict; } }
        #region Interface Members
        INotifyingDictionary<ObjectToRef, ObjectToRef> ITestObject.RefDict => _RefDict;
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> ITestObjectGetter.RefDict => _RefDict;
        #endregion
        #endregion

        #region DictKeyedValue
        private readonly INotifyingKeyedCollection<Int32, ObjectToRef> _DictKeyedValue = new NotifyingKeyedCollection<Int32, ObjectToRef>((item) => item.KeyField);
        public INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue => _DictKeyedValue;
        #region Interface Members
        INotifyingKeyedCollection<Int32, ObjectToRef> ITestObject.DictKeyedValue => _DictKeyedValue;
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> ITestObjectGetter.DictKeyedValue => _DictKeyedValue;
        #endregion
        #endregion


        #region Noggolloquy Getter Interface

        public object GetNthObject(ushort index) => TestObjectCommon.GetNthObject(index, this);

        public bool GetNthObjectHasBeenSet(ushort index) => TestObjectCommon.GetNthObjectHasBeenSet(index, this);

        public void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => TestObjectCommon.SetNthObject(this, index, obj, cmds);

        public void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestObjectCommon.UnsetNthObject(this, index, cmds);

        #endregion

        #region Noggolloquy Interface
        public void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestObjectCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        public void CopyFieldsFrom(ITestObjectGetter rhs, ITestObjectGetter def = null, NotifyingFireParameters? cmds = null)
        {
            TestObjectCommon.CopyFieldsFrom(this, rhs, def, null, cmds);
        }

        public void CopyFieldsFrom(ITestObjectGetter rhs, out TestObject_ErrorMask errorMask, ITestObjectGetter def = null, NotifyingFireParameters? cmds = null)
        {
            var retErrorMask = new TestObject_ErrorMask();
            errorMask = retErrorMask;
            TestObjectCommon.CopyFieldsFrom(this, rhs, def, retErrorMask, cmds);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return this.PrintPretty();
        }
        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            TestObject rhs = obj as TestObject;
            if (rhs == null) return false;
            return Equals(obj);
        }

        public bool Equals(TestObject rhs)
        {
            if (!object.Equals(this.BoolN, rhs.BoolN)) return false;
            if (!object.Equals(this.Bool, rhs.Bool)) return false;
            if (!object.Equals(this.CharN, rhs.CharN)) return false;
            if (!object.Equals(this.Char, rhs.Char)) return false;
            if (!object.Equals(this.DoubleN, rhs.DoubleN)) return false;
            if (!object.Equals(this.Double, rhs.Double)) return false;
            if (!object.Equals(this.FloatN, rhs.FloatN)) return false;
            if (!object.Equals(this.Float, rhs.Float)) return false;
            if (!object.Equals(this.Int16N, rhs.Int16N)) return false;
            if (!object.Equals(this.Int16, rhs.Int16)) return false;
            if (!object.Equals(this.Int32N, rhs.Int32N)) return false;
            if (!object.Equals(this.Int32, rhs.Int32)) return false;
            if (!object.Equals(this.Int64N, rhs.Int64N)) return false;
            if (!object.Equals(this.Int64, rhs.Int64)) return false;
            if (!object.Equals(this.Int8N, rhs.Int8N)) return false;
            if (!object.Equals(this.Int8, rhs.Int8)) return false;
            if (!object.Equals(this.Unsafe, rhs.Unsafe)) return false;
            if (!object.Equals(this.P2IntN, rhs.P2IntN)) return false;
            if (!object.Equals(this.P2Int, rhs.P2Int)) return false;
            if (!object.Equals(this.P3DoubleN, rhs.P3DoubleN)) return false;
            if (!object.Equals(this.P3Double, rhs.P3Double)) return false;
            if (!object.Equals(this.P3IntN, rhs.P3IntN)) return false;
            if (!object.Equals(this.P3Int, rhs.P3Int)) return false;
            if (!object.Equals(this.PercentN, rhs.PercentN)) return false;
            if (!object.Equals(this.Percent, rhs.Percent)) return false;
            if (!object.Equals(this.RangeIntN, rhs.RangeIntN)) return false;
            if (!object.Equals(this.RangeInt, rhs.RangeInt)) return false;
            if (!object.Equals(this.String, rhs.String)) return false;
            if (!object.Equals(this.UDoubleN, rhs.UDoubleN)) return false;
            if (!object.Equals(this.UDouble, rhs.UDouble)) return false;
            if (!object.Equals(this.UInt16N, rhs.UInt16N)) return false;
            if (!object.Equals(this.UInt16, rhs.UInt16)) return false;
            if (!object.Equals(this.UInt32N, rhs.UInt32N)) return false;
            if (!object.Equals(this.UInt32, rhs.UInt32)) return false;
            if (!object.Equals(this.UInt64N, rhs.UInt64N)) return false;
            if (!object.Equals(this.UInt64, rhs.UInt64)) return false;
            if (!object.Equals(this.UInt8N, rhs.UInt8N)) return false;
            if (!object.Equals(this.UInt8, rhs.UInt8)) return false;
            if (!object.Equals(this.Enum, rhs.Enum)) return false;
            if (!object.Equals(this.WildCard, rhs.WildCard)) return false;
            if (!object.Equals(this.Ref, rhs.Ref)) return false;
            if (!object.Equals(this.List, rhs.List)) return false;
            if (!object.Equals(this.RefList, rhs.RefList)) return false;
            if (!object.Equals(this.Dict, rhs.Dict)) return false;
            if (!object.Equals(this.RefDict, rhs.RefDict)) return false;
            if (!object.Equals(this.DictKeyedValue, rhs.DictKeyedValue)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            return 
            HashHelper.GetHashCode(BoolN)
            .CombineHashCode(HashHelper.GetHashCode(Bool))
            .CombineHashCode(HashHelper.GetHashCode(CharN))
            .CombineHashCode(HashHelper.GetHashCode(Char))
            .CombineHashCode(HashHelper.GetHashCode(DoubleN))
            .CombineHashCode(HashHelper.GetHashCode(Double))
            .CombineHashCode(HashHelper.GetHashCode(FloatN))
            .CombineHashCode(HashHelper.GetHashCode(Float))
            .CombineHashCode(HashHelper.GetHashCode(Int16N))
            .CombineHashCode(HashHelper.GetHashCode(Int16))
            .CombineHashCode(HashHelper.GetHashCode(Int32N))
            .CombineHashCode(HashHelper.GetHashCode(Int32))
            .CombineHashCode(HashHelper.GetHashCode(Int64N))
            .CombineHashCode(HashHelper.GetHashCode(Int64))
            .CombineHashCode(HashHelper.GetHashCode(Int8N))
            .CombineHashCode(HashHelper.GetHashCode(Int8))
            .CombineHashCode(HashHelper.GetHashCode(Unsafe))
            .CombineHashCode(HashHelper.GetHashCode(P2IntN))
            .CombineHashCode(HashHelper.GetHashCode(P2Int))
            .CombineHashCode(HashHelper.GetHashCode(P3DoubleN))
            .CombineHashCode(HashHelper.GetHashCode(P3Double))
            .CombineHashCode(HashHelper.GetHashCode(P3IntN))
            .CombineHashCode(HashHelper.GetHashCode(P3Int))
            .CombineHashCode(HashHelper.GetHashCode(PercentN))
            .CombineHashCode(HashHelper.GetHashCode(Percent))
            .CombineHashCode(HashHelper.GetHashCode(RangeIntN))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt))
            .CombineHashCode(HashHelper.GetHashCode(String))
            .CombineHashCode(HashHelper.GetHashCode(UDoubleN))
            .CombineHashCode(HashHelper.GetHashCode(UDouble))
            .CombineHashCode(HashHelper.GetHashCode(UInt16N))
            .CombineHashCode(HashHelper.GetHashCode(UInt16))
            .CombineHashCode(HashHelper.GetHashCode(UInt32N))
            .CombineHashCode(HashHelper.GetHashCode(UInt32))
            .CombineHashCode(HashHelper.GetHashCode(UInt64N))
            .CombineHashCode(HashHelper.GetHashCode(UInt64))
            .CombineHashCode(HashHelper.GetHashCode(UInt8N))
            .CombineHashCode(HashHelper.GetHashCode(UInt8))
            .CombineHashCode(HashHelper.GetHashCode(Enum))
            .CombineHashCode(HashHelper.GetHashCode(WildCard))
            .CombineHashCode(HashHelper.GetHashCode(Ref))
            .CombineHashCode(HashHelper.GetHashCode(List))
            .CombineHashCode(HashHelper.GetHashCode(RefList))
            .CombineHashCode(HashHelper.GetHashCode(Dict))
            .CombineHashCode(HashHelper.GetHashCode(RefDict))
            .CombineHashCode(HashHelper.GetHashCode(DictKeyedValue))
            ;
        }

        #endregion

        #region Set To
        public void SetTo(TestObject rhs, ITestObject def = null, NotifyingFireParameters? cmds = null)
        {
            SetTo_Internal(rhs, def, null, cmds);
        }

        public void SetTo(TestObject rhs, ITestObject def, out TestObject_ErrorMask errorMask, NotifyingFireParameters? cmds = null)
        {
            var retErrorMask = new TestObject_ErrorMask();
            errorMask = retErrorMask;
            SetTo_Internal(rhs, def, retErrorMask, cmds);
        }

        private void SetTo_Internal(TestObject rhs, ITestObject def, TestObject_ErrorMask errorMask, NotifyingFireParameters? cmds)
        {
            try
            {
                if (rhs.BoolN_Property.HasBeenSet)
                {
                    this.BoolN_Property.Set(
                        rhs.BoolN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.BoolN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.BoolN_Property.Set(
                            def.BoolN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(0, ex);
                }
            }
            try
            {
                if (rhs.Bool_Property.HasBeenSet)
                {
                    this.Bool_Property.Set(
                        rhs.Bool,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Bool_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Bool_Property.Set(
                            def.Bool,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(1, ex);
                }
            }
            try
            {
                if (rhs.CharN_Property.HasBeenSet)
                {
                    this.CharN_Property.Set(
                        rhs.CharN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.CharN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.CharN_Property.Set(
                            def.CharN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(2, ex);
                }
            }
            try
            {
                if (rhs.Char_Property.HasBeenSet)
                {
                    this.Char_Property.Set(
                        rhs.Char,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Char_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Char_Property.Set(
                            def.Char,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(3, ex);
                }
            }
            try
            {
                if (rhs.DoubleN_Property.HasBeenSet)
                {
                    this.DoubleN_Property.Set(
                        rhs.DoubleN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.DoubleN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.DoubleN_Property.Set(
                            def.DoubleN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(4, ex);
                }
            }
            try
            {
                if (rhs.Double_Property.HasBeenSet)
                {
                    this.Double_Property.Set(
                        rhs.Double,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Double_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Double_Property.Set(
                            def.Double,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(5, ex);
                }
            }
            try
            {
                if (rhs.FloatN_Property.HasBeenSet)
                {
                    this.FloatN_Property.Set(
                        rhs.FloatN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.FloatN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.FloatN_Property.Set(
                            def.FloatN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(6, ex);
                }
            }
            try
            {
                if (rhs.Float_Property.HasBeenSet)
                {
                    this.Float_Property.Set(
                        rhs.Float,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Float_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Float_Property.Set(
                            def.Float,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(7, ex);
                }
            }
            try
            {
                if (rhs.Int16N_Property.HasBeenSet)
                {
                    this.Int16N_Property.Set(
                        rhs.Int16N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Int16N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Int16N_Property.Set(
                            def.Int16N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(8, ex);
                }
            }
            try
            {
                if (rhs.Int16_Property.HasBeenSet)
                {
                    this.Int16_Property.Set(
                        rhs.Int16,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Int16_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Int16_Property.Set(
                            def.Int16,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(9, ex);
                }
            }
            try
            {
                if (rhs.Int32N_Property.HasBeenSet)
                {
                    this.Int32N_Property.Set(
                        rhs.Int32N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Int32N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Int32N_Property.Set(
                            def.Int32N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(10, ex);
                }
            }
            try
            {
                if (rhs.Int32_Property.HasBeenSet)
                {
                    this.Int32_Property.Set(
                        rhs.Int32,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Int32_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Int32_Property.Set(
                            def.Int32,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(11, ex);
                }
            }
            try
            {
                if (rhs.Int64N_Property.HasBeenSet)
                {
                    this.Int64N_Property.Set(
                        rhs.Int64N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Int64N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Int64N_Property.Set(
                            def.Int64N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(12, ex);
                }
            }
            try
            {
                if (rhs.Int64_Property.HasBeenSet)
                {
                    this.Int64_Property.Set(
                        rhs.Int64,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Int64_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Int64_Property.Set(
                            def.Int64,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(13, ex);
                }
            }
            try
            {
                if (rhs.Int8N_Property.HasBeenSet)
                {
                    this.Int8N_Property.Set(
                        rhs.Int8N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Int8N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Int8N_Property.Set(
                            def.Int8N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(14, ex);
                }
            }
            try
            {
                if (rhs.Int8_Property.HasBeenSet)
                {
                    this.Int8_Property.Set(
                        rhs.Int8,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Int8_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Int8_Property.Set(
                            def.Int8,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(15, ex);
                }
            }
            try
            {
                if (rhs.Unsafe_Property.HasBeenSet)
                {
                    this.Unsafe_Property.Set(
                        rhs.Unsafe,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Unsafe_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Unsafe_Property.Set(
                            def.Unsafe,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(16, ex);
                }
            }
            try
            {
                if (rhs.P2IntN_Property.HasBeenSet)
                {
                    this.P2IntN_Property.Set(
                        rhs.P2IntN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.P2IntN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.P2IntN_Property.Set(
                            def.P2IntN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(17, ex);
                }
            }
            try
            {
                if (rhs.P2Int_Property.HasBeenSet)
                {
                    this.P2Int_Property.Set(
                        rhs.P2Int,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.P2Int_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.P2Int_Property.Set(
                            def.P2Int,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(18, ex);
                }
            }
            try
            {
                if (rhs.P3DoubleN_Property.HasBeenSet)
                {
                    this.P3DoubleN_Property.Set(
                        rhs.P3DoubleN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.P3DoubleN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.P3DoubleN_Property.Set(
                            def.P3DoubleN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(19, ex);
                }
            }
            try
            {
                if (rhs.P3Double_Property.HasBeenSet)
                {
                    this.P3Double_Property.Set(
                        rhs.P3Double,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.P3Double_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.P3Double_Property.Set(
                            def.P3Double,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(20, ex);
                }
            }
            try
            {
                if (rhs.P3IntN_Property.HasBeenSet)
                {
                    this.P3IntN_Property.Set(
                        rhs.P3IntN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.P3IntN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.P3IntN_Property.Set(
                            def.P3IntN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(21, ex);
                }
            }
            try
            {
                if (rhs.P3Int_Property.HasBeenSet)
                {
                    this.P3Int_Property.Set(
                        rhs.P3Int,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.P3Int_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.P3Int_Property.Set(
                            def.P3Int,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(22, ex);
                }
            }
            try
            {
                if (rhs.PercentN_Property.HasBeenSet)
                {
                    this.PercentN_Property.Set(
                        rhs.PercentN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.PercentN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.PercentN_Property.Set(
                            def.PercentN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(23, ex);
                }
            }
            try
            {
                if (rhs.Percent_Property.HasBeenSet)
                {
                    this.Percent_Property.Set(
                        rhs.Percent,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Percent_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Percent_Property.Set(
                            def.Percent,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(24, ex);
                }
            }
            try
            {
                if (rhs.RangeIntN_Property.HasBeenSet)
                {
                    this.RangeIntN_Property.Set(
                        rhs.RangeIntN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.RangeIntN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.RangeIntN_Property.Set(
                            def.RangeIntN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(25, ex);
                }
            }
            try
            {
                if (rhs.RangeInt_Property.HasBeenSet)
                {
                    this.RangeInt_Property.Set(
                        rhs.RangeInt,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.RangeInt_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.RangeInt_Property.Set(
                            def.RangeInt,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(26, ex);
                }
            }
            try
            {
                if (rhs.String_Property.HasBeenSet)
                {
                    this.String_Property.Set(
                        rhs.String,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.String_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.String_Property.Set(
                            def.String,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(27, ex);
                }
            }
            try
            {
                if (rhs.UDoubleN_Property.HasBeenSet)
                {
                    this.UDoubleN_Property.Set(
                        rhs.UDoubleN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UDoubleN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UDoubleN_Property.Set(
                            def.UDoubleN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(28, ex);
                }
            }
            try
            {
                if (rhs.UDouble_Property.HasBeenSet)
                {
                    this.UDouble_Property.Set(
                        rhs.UDouble,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UDouble_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UDouble_Property.Set(
                            def.UDouble,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(29, ex);
                }
            }
            try
            {
                if (rhs.UInt16N_Property.HasBeenSet)
                {
                    this.UInt16N_Property.Set(
                        rhs.UInt16N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UInt16N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UInt16N_Property.Set(
                            def.UInt16N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(30, ex);
                }
            }
            try
            {
                if (rhs.UInt16_Property.HasBeenSet)
                {
                    this.UInt16_Property.Set(
                        rhs.UInt16,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UInt16_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UInt16_Property.Set(
                            def.UInt16,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(31, ex);
                }
            }
            try
            {
                if (rhs.UInt32N_Property.HasBeenSet)
                {
                    this.UInt32N_Property.Set(
                        rhs.UInt32N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UInt32N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UInt32N_Property.Set(
                            def.UInt32N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(32, ex);
                }
            }
            try
            {
                if (rhs.UInt32_Property.HasBeenSet)
                {
                    this.UInt32_Property.Set(
                        rhs.UInt32,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UInt32_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UInt32_Property.Set(
                            def.UInt32,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(33, ex);
                }
            }
            try
            {
                if (rhs.UInt64N_Property.HasBeenSet)
                {
                    this.UInt64N_Property.Set(
                        rhs.UInt64N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UInt64N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UInt64N_Property.Set(
                            def.UInt64N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(34, ex);
                }
            }
            try
            {
                if (rhs.UInt64_Property.HasBeenSet)
                {
                    this.UInt64_Property.Set(
                        rhs.UInt64,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UInt64_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UInt64_Property.Set(
                            def.UInt64,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(35, ex);
                }
            }
            try
            {
                if (rhs.UInt8N_Property.HasBeenSet)
                {
                    this.UInt8N_Property.Set(
                        rhs.UInt8N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UInt8N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UInt8N_Property.Set(
                            def.UInt8N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(36, ex);
                }
            }
            try
            {
                if (rhs.UInt8_Property.HasBeenSet)
                {
                    this.UInt8_Property.Set(
                        rhs.UInt8,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.UInt8_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.UInt8_Property.Set(
                            def.UInt8,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(37, ex);
                }
            }
            try
            {
                if (rhs.Enum_Property.HasBeenSet)
                {
                    this.Enum_Property.Set(
                        rhs.Enum,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Enum_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Enum_Property.Set(
                            def.Enum,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(38, ex);
                }
            }
            try
            {
                if (rhs.WildCard_Property.HasBeenSet)
                {
                    this.WildCard_Property.Set(
                        rhs.WildCard,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.WildCard_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.WildCard_Property.Set(
                            def.WildCard,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(39, ex);
                }
            }
            try
            {
                if (rhs.Ref_Property.HasBeenSet)
                {
                    this.Ref_Property.Set(
                        rhs.Ref,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Ref_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Ref_Property.Set(
                            def.Ref,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(40, ex);
                }
            }
            try
            {
                if (rhs.List.HasBeenSet)
                {
                    this.List.SetTo(rhs.List, cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.List.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.List.SetTo(def.List, cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(41, ex);
                }
            }
            try
            {
                if (rhs.RefList.HasBeenSet)
                {
                    int i = 0;
                    List<ObjectToRef> defList = def?.RefList.ToList();
                    this.RefList.SetTo(
                        rhs.RefList.Select((s) =>
                        {
                            return s.Copy(defList?[i++]);
                        }
                    ), cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.RefList.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.RefList.SetTo(def.RefList.Select((s) => s.Copy()), cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(42, ex);
                }
            }
            try
            {
                if (rhs.Dict.HasBeenSet)
                {
                    this.Dict.SetTo(
                        rhs.Dict.Select(
                            (i) => new KeyValuePair<Boolean, String>(
                                i.Key,
                                i.Value)),
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.Dict.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.Dict.SetTo(
                            def.Dict.Select(
                                (i) => new KeyValuePair<Boolean, String>(
                                    i.Key,
                                    i.Value)),
                            cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(43, ex);
                }
            }
            try
            {
                if (rhs.RefDict.HasBeenSet)
                {
                    int i = 0;
                    List<KeyValuePair<ObjectToRef, ObjectToRef>> defList = def?.RefDict.ToList();
                    this.RefDict.SetTo(
                        rhs.RefDict.Select((s) =>
                        {
                            var key = new ObjectToRef();
                            if (defList != null && defList.InRange(i))
                            {
                                key.CopyFieldsFrom(s.Key, defList[i++].Key);
                            }
                            else
                            {
                                key.CopyFieldsFrom(s.Key);
                            }
                            var value = new ObjectToRef();
                            if (defList != null && defList.InRange(i))
                            {
                                value.CopyFieldsFrom(s.Value, defList[i++].Value);
                            }
                            else
                            {
                                value.CopyFieldsFrom(s.Value);
                            }
                            return new KeyValuePair<ObjectToRef, ObjectToRef>(key, value);
                        }
                    ), cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.RefDict.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.RefDict.SetTo(
                            def.RefDict.Select(
                                (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                    i.Key.Copy(),
                                    i.Value.Copy())),
                            cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(44, ex);
                }
            }
            try
            {
                if (rhs.DictKeyedValue.HasBeenSet)
                {
                    this.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)rhs.DictKeyedValue).Select((i) => i.Copy()),
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        this.DictKeyedValue.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        this.DictKeyedValue.SetTo(
                            ((IEnumerable<ObjectToRef>)def.DictKeyedValue).Select((i) => i.Copy()),
                            cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(45, ex);
                }
            }
        }
        #endregion
        #region XML Translation
        public static TestObject CreateFromXML(XElement root)
        {
            var ret = new TestObject();
            NoggXmlTranslation<TestObject, TestObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipReadonly: false,
                doMasks: false,
                mask: out TestObject_ErrorMask errorMask,
                cmds: null);
            return ret;
        }

        public static TestObject CreateFromXML(XElement root, out TestObject_ErrorMask errorMask)
        {
            var ret = new TestObject();
            NoggXmlTranslation<TestObject, TestObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipReadonly: false,
                doMasks: true,
                mask: out errorMask,
                cmds: null);
            return ret;
        }

        public void CopyInFromXML(XElement root, NotifyingFireParameters? cmds = null)
        {
            NoggXmlTranslation<TestObject, TestObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipReadonly: true,
                doMasks: false,
                mask: out TestObject_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyInFromXML(XElement root, out TestObject_ErrorMask errorMask, NotifyingFireParameters? cmds = null)
        {
            NoggXmlTranslation<TestObject, TestObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipReadonly: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void WriteXMLToStream(Stream stream)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                WriteXML(writer);
            }
        }

        public void WriteXML(XmlWriter writer, out TestObject_ErrorMask errorMask, string name = null)
        {
            NoggXmlTranslation<TestObject, TestObject_ErrorMask>.Instance.Write(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                mask: out errorMask);
        }

        public void WriteXML(XmlWriter writer, string name)
        {
            NoggXmlTranslation<TestObject, TestObject_ErrorMask>.Instance.Write(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                mask: out TestObject_ErrorMask errorMask);
        }

        public void WriteXML(XmlWriter writer)
        {
            NoggXmlTranslation<TestObject, TestObject_ErrorMask>.Instance.Write(
                writer: writer,
                name: null,
                item: this,
                doMasks: false,
                mask: out TestObject_ErrorMask errorMask);
        }

        #endregion
        #region Mask
        #endregion
        void ICopyInAble.CopyFieldsFrom(object rhs, object def, NotifyingFireParameters? cmds)
        {
            this.CopyFieldsFrom_Generic(rhs, def, cmds);
        }

        protected void CopyFieldsFrom_Generic(object rhs, object def, NotifyingFireParameters? cmds)
        {
            if (rhs is TestObject rhsCast)
            {
                this.CopyFieldsFrom(rhsCast, def as TestObject, cmds);
            }
        }

        public TestObject Copy(ITestObjectGetter def = null)
        {
            return Copy(this, def: def);
        }

        public static TestObject Copy(ITestObjectGetter item, ITestObjectGetter def = null)
        {
            var ret = new TestObject();
            ret.CopyFieldsFrom(item, def);
            return ret;
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            ClearPartial(cmds);
            this.BoolN_Property.Unset(cmds.ToUnsetParams());
            this.Bool_Property.Unset(cmds.ToUnsetParams());
            this.CharN_Property.Unset(cmds.ToUnsetParams());
            this.Char_Property.Unset(cmds.ToUnsetParams());
            this.DoubleN_Property.Unset(cmds.ToUnsetParams());
            this.Double_Property.Unset(cmds.ToUnsetParams());
            this.FloatN_Property.Unset(cmds.ToUnsetParams());
            this.Float_Property.Unset(cmds.ToUnsetParams());
            this.Int16N_Property.Unset(cmds.ToUnsetParams());
            this.Int16_Property.Unset(cmds.ToUnsetParams());
            this.Int32N_Property.Unset(cmds.ToUnsetParams());
            this.Int32_Property.Unset(cmds.ToUnsetParams());
            this.Int64N_Property.Unset(cmds.ToUnsetParams());
            this.Int64_Property.Unset(cmds.ToUnsetParams());
            this.Int8N_Property.Unset(cmds.ToUnsetParams());
            this.Int8_Property.Unset(cmds.ToUnsetParams());
            this.Unsafe_Property.Unset(cmds.ToUnsetParams());
            this.P2IntN_Property.Unset(cmds.ToUnsetParams());
            this.P2Int_Property.Unset(cmds.ToUnsetParams());
            this.P3DoubleN_Property.Unset(cmds.ToUnsetParams());
            this.P3Double_Property.Unset(cmds.ToUnsetParams());
            this.P3IntN_Property.Unset(cmds.ToUnsetParams());
            this.P3Int_Property.Unset(cmds.ToUnsetParams());
            this.PercentN_Property.Unset(cmds.ToUnsetParams());
            this.Percent_Property.Unset(cmds.ToUnsetParams());
            this.RangeIntN_Property.Unset(cmds.ToUnsetParams());
            this.RangeInt_Property.Unset(cmds.ToUnsetParams());
            this.String_Property.Unset(cmds.ToUnsetParams());
            this.UDoubleN_Property.Unset(cmds.ToUnsetParams());
            this.UDouble_Property.Unset(cmds.ToUnsetParams());
            this.UInt16N_Property.Unset(cmds.ToUnsetParams());
            this.UInt16_Property.Unset(cmds.ToUnsetParams());
            this.UInt32N_Property.Unset(cmds.ToUnsetParams());
            this.UInt32_Property.Unset(cmds.ToUnsetParams());
            this.UInt64N_Property.Unset(cmds.ToUnsetParams());
            this.UInt64_Property.Unset(cmds.ToUnsetParams());
            this.UInt8N_Property.Unset(cmds.ToUnsetParams());
            this.UInt8_Property.Unset(cmds.ToUnsetParams());
            this.Enum_Property.Unset(cmds.ToUnsetParams());
            this.WildCard_Property.Unset(cmds.ToUnsetParams());
            this.Ref_Property.Unset(cmds.ToUnsetParams());
            this.List.Unset(cmds.ToUnsetParams());
            this.RefList.Unset(cmds.ToUnsetParams());
            this.Dict.Unset(cmds.ToUnsetParams());
            this.RefDict.Unset(cmds.ToUnsetParams());
            this.DictKeyedValue.Unset(cmds.ToUnsetParams());
        }

        public static TestObject Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestObject();
            INoggolloquyObjectExt.CopyFieldsIn(ret, fields, def: null, skipReadonly: false, cmds: null);
            return ret;
        }

        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestObject obj)
        {
            INoggolloquyObjectExt.CopyFieldsIn(obj, fields, def: null, skipReadonly: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestObject : ITestObjectGetter, INoggolloquyClass<ITestObject, ITestObjectGetter>, INoggolloquyClass<TestObject, ITestObjectGetter>
    {
        new Boolean? BoolN { get; set; }
        new INotifyingItem<Boolean?> BoolN_Property { get; }

        new Boolean Bool { get; set; }
        new INotifyingItem<Boolean> Bool_Property { get; }

        new Char? CharN { get; set; }
        new INotifyingItem<Char?> CharN_Property { get; }

        new Char Char { get; set; }
        new INotifyingItem<Char> Char_Property { get; }

        new Double? DoubleN { get; set; }
        new INotifyingItem<Double?> DoubleN_Property { get; }

        new Double Double { get; set; }
        new INotifyingItem<Double> Double_Property { get; }

        new Single? FloatN { get; set; }
        new INotifyingItem<Single?> FloatN_Property { get; }

        new Single Float { get; set; }
        new INotifyingItem<Single> Float_Property { get; }

        new Int16? Int16N { get; set; }
        new INotifyingItem<Int16?> Int16N_Property { get; }

        new Int16 Int16 { get; set; }
        new INotifyingItem<Int16> Int16_Property { get; }

        new Int32? Int32N { get; set; }
        new INotifyingItem<Int32?> Int32N_Property { get; }

        new Int32 Int32 { get; set; }
        new INotifyingItem<Int32> Int32_Property { get; }

        new Int64? Int64N { get; set; }
        new INotifyingItem<Int64?> Int64N_Property { get; }

        new Int64 Int64 { get; set; }
        new INotifyingItem<Int64> Int64_Property { get; }

        new SByte? Int8N { get; set; }
        new INotifyingItem<SByte?> Int8N_Property { get; }

        new SByte Int8 { get; set; }
        new INotifyingItem<SByte> Int8_Property { get; }

        new bool Unsafe { get; set; }
        new INotifyingItem<bool> Unsafe_Property { get; }

        new P2Int? P2IntN { get; set; }
        new INotifyingItem<P2Int?> P2IntN_Property { get; }

        new P2Int P2Int { get; set; }
        new INotifyingItem<P2Int> P2Int_Property { get; }

        new P3Double? P3DoubleN { get; set; }
        new INotifyingItem<P3Double?> P3DoubleN_Property { get; }

        new P3Double P3Double { get; set; }
        new INotifyingItem<P3Double> P3Double_Property { get; }

        new P3Int? P3IntN { get; set; }
        new INotifyingItem<P3Int?> P3IntN_Property { get; }

        new P3Int P3Int { get; set; }
        new INotifyingItem<P3Int> P3Int_Property { get; }

        new Percent? PercentN { get; set; }
        new INotifyingItem<Percent?> PercentN_Property { get; }

        new Percent Percent { get; set; }
        new INotifyingItem<Percent> Percent_Property { get; }

        new RangeInt? RangeIntN { get; set; }
        new INotifyingItem<RangeInt?> RangeIntN_Property { get; }

        new RangeInt RangeInt { get; set; }
        new INotifyingItem<RangeInt> RangeInt_Property { get; }

        new String String { get; set; }
        new INotifyingItem<String> String_Property { get; }

        new UDouble? UDoubleN { get; set; }
        new INotifyingItem<UDouble?> UDoubleN_Property { get; }

        new UDouble UDouble { get; set; }
        new INotifyingItem<UDouble> UDouble_Property { get; }

        new UInt16? UInt16N { get; set; }
        new INotifyingItem<UInt16?> UInt16N_Property { get; }

        new UInt16 UInt16 { get; set; }
        new INotifyingItem<UInt16> UInt16_Property { get; }

        new UInt32? UInt32N { get; set; }
        new INotifyingItem<UInt32?> UInt32N_Property { get; }

        new UInt32 UInt32 { get; set; }
        new INotifyingItem<UInt32> UInt32_Property { get; }

        new UInt64? UInt64N { get; set; }
        new INotifyingItem<UInt64?> UInt64N_Property { get; }

        new UInt64 UInt64 { get; set; }
        new INotifyingItem<UInt64> UInt64_Property { get; }

        new Byte? UInt8N { get; set; }
        new INotifyingItem<Byte?> UInt8N_Property { get; }

        new Byte UInt8 { get; set; }
        new INotifyingItem<Byte> UInt8_Property { get; }

        new TestEnum Enum { get; set; }
        new INotifyingItem<TestEnum> Enum_Property { get; }

        new Object WildCard { get; set; }
        new INotifyingItem<Object> WildCard_Property { get; }

        new ObjectToRef Ref { get; set; }
        new INotifyingItem<ObjectToRef> Ref_Property { get; }

        new INotifyingList<Boolean> List { get; }
        new ObjectToRef GetNthRefList(int index);
        new INotifyingList<ObjectToRef> RefList { get; }
        new INotifyingDictionary<Boolean, String> Dict { get; }
        new INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get; }
        new INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue { get; }
    }

    public interface ITestObjectGetter : INoggolloquyObject
    {
        #region BoolN
        Boolean? BoolN { get; }
        INotifyingItemGetter<Boolean?> BoolN_Property { get; }

        #endregion

        #region Bool
        Boolean Bool { get; }
        INotifyingItemGetter<Boolean> Bool_Property { get; }

        #endregion

        #region CharN
        Char? CharN { get; }
        INotifyingItemGetter<Char?> CharN_Property { get; }

        #endregion

        #region Char
        Char Char { get; }
        INotifyingItemGetter<Char> Char_Property { get; }

        #endregion

        #region DoubleN
        Double? DoubleN { get; }
        INotifyingItemGetter<Double?> DoubleN_Property { get; }

        #endregion

        #region Double
        Double Double { get; }
        INotifyingItemGetter<Double> Double_Property { get; }

        #endregion

        #region FloatN
        Single? FloatN { get; }
        INotifyingItemGetter<Single?> FloatN_Property { get; }

        #endregion

        #region Float
        Single Float { get; }
        INotifyingItemGetter<Single> Float_Property { get; }

        #endregion

        #region Int16N
        Int16? Int16N { get; }
        INotifyingItemGetter<Int16?> Int16N_Property { get; }

        #endregion

        #region Int16
        Int16 Int16 { get; }
        INotifyingItemGetter<Int16> Int16_Property { get; }

        #endregion

        #region Int32N
        Int32? Int32N { get; }
        INotifyingItemGetter<Int32?> Int32N_Property { get; }

        #endregion

        #region Int32
        Int32 Int32 { get; }
        INotifyingItemGetter<Int32> Int32_Property { get; }

        #endregion

        #region Int64N
        Int64? Int64N { get; }
        INotifyingItemGetter<Int64?> Int64N_Property { get; }

        #endregion

        #region Int64
        Int64 Int64 { get; }
        INotifyingItemGetter<Int64> Int64_Property { get; }

        #endregion

        #region Int8N
        SByte? Int8N { get; }
        INotifyingItemGetter<SByte?> Int8N_Property { get; }

        #endregion

        #region Int8
        SByte Int8 { get; }
        INotifyingItemGetter<SByte> Int8_Property { get; }

        #endregion

        #region Unsafe
        bool Unsafe { get; }
        INotifyingItemGetter<bool> Unsafe_Property { get; }

        #endregion

        #region P2IntN
        P2Int? P2IntN { get; }
        INotifyingItemGetter<P2Int?> P2IntN_Property { get; }

        #endregion

        #region P2Int
        P2Int P2Int { get; }
        INotifyingItemGetter<P2Int> P2Int_Property { get; }

        #endregion

        #region P3DoubleN
        P3Double? P3DoubleN { get; }
        INotifyingItemGetter<P3Double?> P3DoubleN_Property { get; }

        #endregion

        #region P3Double
        P3Double P3Double { get; }
        INotifyingItemGetter<P3Double> P3Double_Property { get; }

        #endregion

        #region P3IntN
        P3Int? P3IntN { get; }
        INotifyingItemGetter<P3Int?> P3IntN_Property { get; }

        #endregion

        #region P3Int
        P3Int P3Int { get; }
        INotifyingItemGetter<P3Int> P3Int_Property { get; }

        #endregion

        #region PercentN
        Percent? PercentN { get; }
        INotifyingItemGetter<Percent?> PercentN_Property { get; }

        #endregion

        #region Percent
        Percent Percent { get; }
        INotifyingItemGetter<Percent> Percent_Property { get; }

        #endregion

        #region RangeIntN
        RangeInt? RangeIntN { get; }
        INotifyingItemGetter<RangeInt?> RangeIntN_Property { get; }

        #endregion

        #region RangeInt
        RangeInt RangeInt { get; }
        INotifyingItemGetter<RangeInt> RangeInt_Property { get; }

        #endregion

        #region String
        String String { get; }
        INotifyingItemGetter<String> String_Property { get; }

        #endregion

        #region UDoubleN
        UDouble? UDoubleN { get; }
        INotifyingItemGetter<UDouble?> UDoubleN_Property { get; }

        #endregion

        #region UDouble
        UDouble UDouble { get; }
        INotifyingItemGetter<UDouble> UDouble_Property { get; }

        #endregion

        #region UInt16N
        UInt16? UInt16N { get; }
        INotifyingItemGetter<UInt16?> UInt16N_Property { get; }

        #endregion

        #region UInt16
        UInt16 UInt16 { get; }
        INotifyingItemGetter<UInt16> UInt16_Property { get; }

        #endregion

        #region UInt32N
        UInt32? UInt32N { get; }
        INotifyingItemGetter<UInt32?> UInt32N_Property { get; }

        #endregion

        #region UInt32
        UInt32 UInt32 { get; }
        INotifyingItemGetter<UInt32> UInt32_Property { get; }

        #endregion

        #region UInt64N
        UInt64? UInt64N { get; }
        INotifyingItemGetter<UInt64?> UInt64N_Property { get; }

        #endregion

        #region UInt64
        UInt64 UInt64 { get; }
        INotifyingItemGetter<UInt64> UInt64_Property { get; }

        #endregion

        #region UInt8N
        Byte? UInt8N { get; }
        INotifyingItemGetter<Byte?> UInt8N_Property { get; }

        #endregion

        #region UInt8
        Byte UInt8 { get; }
        INotifyingItemGetter<Byte> UInt8_Property { get; }

        #endregion

        #region Enum
        TestEnum Enum { get; }
        INotifyingItemGetter<TestEnum> Enum_Property { get; }

        #endregion

        #region WildCard
        Object WildCard { get; }
        INotifyingItemGetter<Object> WildCard_Property { get; }

        #endregion

        #region Ref
        IObjectToRefGetter Ref { get; }
        INotifyingItemGetter<ObjectToRef> Ref_Property { get; }

        #endregion

        #region List
        Boolean GetNthList(int index);
        INotifyingListGetter<Boolean> List { get; }
        #endregion

        #region RefList
        IObjectToRefGetter GetNthRefList(int index);
        INotifyingListGetter<ObjectToRef> RefList { get; }
        #endregion

        #region Dict
        INotifyingDictionaryGetter<Boolean, String> Dict { get; }
        #endregion

        #region RefDict
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> RefDict { get; }
        #endregion

        #region DictKeyedValue
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> DictKeyedValue { get; }
        #endregion


        #region XML Translation
        #endregion
        #region Mask
        #endregion
    }

    #endregion

    #region Registration
    public class TestObject_Registration : INoggolloquyRegistration
    {
        public static readonly TestObject_Registration Instance = new TestObject_Registration();

        public static ProtocolDefinition ProtocolDefinition => ProtocolDefinition_NoggolloquyTests.Definition;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_NoggolloquyTests.ProtocolKey,
            msgID: 2,
            version: 0);

        public const string GUID = "8b849143-0fd6-4a70-b8ce-2e1e0be2e32f";

        public const ushort FieldCount = 46;

        public static readonly Type MaskType = typeof(TestObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestObject_ErrorMask);

        public static readonly Type ClassType = typeof(TestObject);

        public const string FullName = "Noggolloquy.Tests.TestObject";

        public const string Name = "TestObject";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BOOLN":
                    return 0;
                case "BOOL":
                    return 1;
                case "CHARN":
                    return 2;
                case "CHAR":
                    return 3;
                case "DOUBLEN":
                    return 4;
                case "DOUBLE":
                    return 5;
                case "FLOATN":
                    return 6;
                case "FLOAT":
                    return 7;
                case "INT16N":
                    return 8;
                case "INT16":
                    return 9;
                case "INT32N":
                    return 10;
                case "INT32":
                    return 11;
                case "INT64N":
                    return 12;
                case "INT64":
                    return 13;
                case "INT8N":
                    return 14;
                case "INT8":
                    return 15;
                case "UNSAFE":
                    return 16;
                case "P2INTN":
                    return 17;
                case "P2INT":
                    return 18;
                case "P3DOUBLEN":
                    return 19;
                case "P3DOUBLE":
                    return 20;
                case "P3INTN":
                    return 21;
                case "P3INT":
                    return 22;
                case "PERCENTN":
                    return 23;
                case "PERCENT":
                    return 24;
                case "RANGEINTN":
                    return 25;
                case "RANGEINT":
                    return 26;
                case "STRING":
                    return 27;
                case "UDOUBLEN":
                    return 28;
                case "UDOUBLE":
                    return 29;
                case "UINT16N":
                    return 30;
                case "UINT16":
                    return 31;
                case "UINT32N":
                    return 32;
                case "UINT32":
                    return 33;
                case "UINT64N":
                    return 34;
                case "UINT64":
                    return 35;
                case "UINT8N":
                    return 36;
                case "UINT8":
                    return 37;
                case "ENUM":
                    return 38;
                case "WILDCARD":
                    return 39;
                case "REF":
                    return 40;
                case "LIST":
                    return 41;
                case "REFLIST":
                    return 42;
                case "DICT":
                    return 43;
                case "REFDICT":
                    return 44;
                case "DICTKEYEDVALUE":
                    return 45;
                default:
                    throw new ArgumentException($"Queried unknown field: {str}");
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            switch (index)
            {
                case 41:
                case 42:
                    return true;
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 43:
                case 44:
                case 45:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsNoggolloquy(ushort index)
        {
            switch (index)
            {
                case 40:
                case 42:
                    return true;
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 41:
                case 43:
                case 44:
                case 45:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            switch (index)
            {
                case 40:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            switch (index)
            {
                case 0:
                    return "BoolN";
                case 1:
                    return "Bool";
                case 2:
                    return "CharN";
                case 3:
                    return "Char";
                case 4:
                    return "DoubleN";
                case 5:
                    return "Double";
                case 6:
                    return "FloatN";
                case 7:
                    return "Float";
                case 8:
                    return "Int16N";
                case 9:
                    return "Int16";
                case 10:
                    return "Int32N";
                case 11:
                    return "Int32";
                case 12:
                    return "Int64N";
                case 13:
                    return "Int64";
                case 14:
                    return "Int8N";
                case 15:
                    return "Int8";
                case 16:
                    return "Unsafe";
                case 17:
                    return "P2IntN";
                case 18:
                    return "P2Int";
                case 19:
                    return "P3DoubleN";
                case 20:
                    return "P3Double";
                case 21:
                    return "P3IntN";
                case 22:
                    return "P3Int";
                case 23:
                    return "PercentN";
                case 24:
                    return "Percent";
                case 25:
                    return "RangeIntN";
                case 26:
                    return "RangeInt";
                case 27:
                    return "String";
                case 28:
                    return "UDoubleN";
                case 29:
                    return "UDouble";
                case 30:
                    return "UInt16N";
                case 31:
                    return "UInt16";
                case 32:
                    return "UInt32N";
                case 33:
                    return "UInt32";
                case 34:
                    return "UInt64N";
                case 35:
                    return "UInt64";
                case 36:
                    return "UInt8N";
                case 37:
                    return "UInt8";
                case 38:
                    return "Enum";
                case 39:
                    return "WildCard";
                case 40:
                    return "Ref";
                case 41:
                    return "List";
                case 42:
                    return "RefList";
                case 43:
                    return "Dict";
                case 44:
                    return "RefDict";
                case 45:
                    return "DictKeyedValue";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            switch (index)
            {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsReadOnly(ushort index)
        {
            switch (index)
            {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            switch (index)
            {
                case 0:
                    return typeof(Boolean?);
                case 1:
                    return typeof(Boolean);
                case 2:
                    return typeof(Char?);
                case 3:
                    return typeof(Char);
                case 4:
                    return typeof(Double?);
                case 5:
                    return typeof(Double);
                case 6:
                    return typeof(Single?);
                case 7:
                    return typeof(Single);
                case 8:
                    return typeof(Int16?);
                case 9:
                    return typeof(Int16);
                case 10:
                    return typeof(Int32?);
                case 11:
                    return typeof(Int32);
                case 12:
                    return typeof(Int64?);
                case 13:
                    return typeof(Int64);
                case 14:
                    return typeof(SByte?);
                case 15:
                    return typeof(SByte);
                case 16:
                    return typeof(bool);
                case 17:
                    return typeof(P2Int?);
                case 18:
                    return typeof(P2Int);
                case 19:
                    return typeof(P3Double?);
                case 20:
                    return typeof(P3Double);
                case 21:
                    return typeof(P3Int?);
                case 22:
                    return typeof(P3Int);
                case 23:
                    return typeof(Percent?);
                case 24:
                    return typeof(Percent);
                case 25:
                    return typeof(RangeInt?);
                case 26:
                    return typeof(RangeInt);
                case 27:
                    return typeof(String);
                case 28:
                    return typeof(UDouble?);
                case 29:
                    return typeof(UDouble);
                case 30:
                    return typeof(UInt16?);
                case 31:
                    return typeof(UInt16);
                case 32:
                    return typeof(UInt32?);
                case 33:
                    return typeof(UInt32);
                case 34:
                    return typeof(UInt64?);
                case 35:
                    return typeof(UInt64);
                case 36:
                    return typeof(Byte?);
                case 37:
                    return typeof(Byte);
                case 38:
                    return typeof(TestEnum);
                case 39:
                    return typeof(Object);
                case 40:
                    return typeof(ObjectToRef);
                case 41:
                    return typeof(NotifyingList<Boolean>);
                case 42:
                    return typeof(NotifyingList<ObjectToRef>);
                case 43:
                    return typeof(NotifyingDictionary<Boolean, String>);
                case 44:
                    return typeof(NotifyingDictionary<ObjectToRef, ObjectToRef>);
                case 45:
                    return typeof(NotifyingDictionary<Int32, ObjectToRef>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolDefinition INoggolloquyRegistration.ProtocolDefinition => ProtocolDefinition;
        ObjectKey INoggolloquyRegistration.ObjectKey => ObjectKey;
        string INoggolloquyRegistration.GUID => GUID;
        int INoggolloquyRegistration.FieldCount => FieldCount;
        Type INoggolloquyRegistration.MaskType => MaskType;
        Type INoggolloquyRegistration.ErrorMaskType => ErrorMaskType;
        Type INoggolloquyRegistration.ClassType => ClassType;
        string INoggolloquyRegistration.FullName => FullName;
        string INoggolloquyRegistration.Name => Name;
        byte INoggolloquyRegistration.GenericCount => GenericCount;
        Type INoggolloquyRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? INoggolloquyRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool INoggolloquyRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool INoggolloquyRegistration.GetNthIsNoggolloquy(ushort index) => GetNthIsNoggolloquy(index);
        bool INoggolloquyRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string INoggolloquyRegistration.GetNthName(ushort index) => GetNthName(index);
        bool INoggolloquyRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool INoggolloquyRegistration.IsReadOnly(ushort index) => IsReadOnly(index);
        Type INoggolloquyRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion
    }
    #endregion
    #region Extensions
    public static class TestObjectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(ITestObject item, ITestObjectGetter rhs, ITestObjectGetter def, TestObject_ErrorMask errorMask, NotifyingFireParameters? cmds)
        {
            try
            {
                if (rhs.BoolN_Property.HasBeenSet)
                {
                    item.BoolN_Property.Set(
                        rhs.BoolN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.BoolN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.BoolN_Property.Set(
                            def.BoolN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(0, ex);
                }
            }
            try
            {
                if (rhs.Bool_Property.HasBeenSet)
                {
                    item.Bool_Property.Set(
                        rhs.Bool,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Bool_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Bool_Property.Set(
                            def.Bool,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(1, ex);
                }
            }
            try
            {
                if (rhs.CharN_Property.HasBeenSet)
                {
                    item.CharN_Property.Set(
                        rhs.CharN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.CharN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.CharN_Property.Set(
                            def.CharN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(2, ex);
                }
            }
            try
            {
                if (rhs.Char_Property.HasBeenSet)
                {
                    item.Char_Property.Set(
                        rhs.Char,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Char_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Char_Property.Set(
                            def.Char,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(3, ex);
                }
            }
            try
            {
                if (rhs.DoubleN_Property.HasBeenSet)
                {
                    item.DoubleN_Property.Set(
                        rhs.DoubleN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.DoubleN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.DoubleN_Property.Set(
                            def.DoubleN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(4, ex);
                }
            }
            try
            {
                if (rhs.Double_Property.HasBeenSet)
                {
                    item.Double_Property.Set(
                        rhs.Double,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Double_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Double_Property.Set(
                            def.Double,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(5, ex);
                }
            }
            try
            {
                if (rhs.FloatN_Property.HasBeenSet)
                {
                    item.FloatN_Property.Set(
                        rhs.FloatN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.FloatN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.FloatN_Property.Set(
                            def.FloatN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(6, ex);
                }
            }
            try
            {
                if (rhs.Float_Property.HasBeenSet)
                {
                    item.Float_Property.Set(
                        rhs.Float,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Float_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Float_Property.Set(
                            def.Float,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(7, ex);
                }
            }
            try
            {
                if (rhs.Int16N_Property.HasBeenSet)
                {
                    item.Int16N_Property.Set(
                        rhs.Int16N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Int16N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Int16N_Property.Set(
                            def.Int16N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(8, ex);
                }
            }
            try
            {
                if (rhs.Int16_Property.HasBeenSet)
                {
                    item.Int16_Property.Set(
                        rhs.Int16,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Int16_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Int16_Property.Set(
                            def.Int16,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(9, ex);
                }
            }
            try
            {
                if (rhs.Int32N_Property.HasBeenSet)
                {
                    item.Int32N_Property.Set(
                        rhs.Int32N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Int32N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Int32N_Property.Set(
                            def.Int32N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(10, ex);
                }
            }
            try
            {
                if (rhs.Int32_Property.HasBeenSet)
                {
                    item.Int32_Property.Set(
                        rhs.Int32,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Int32_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Int32_Property.Set(
                            def.Int32,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(11, ex);
                }
            }
            try
            {
                if (rhs.Int64N_Property.HasBeenSet)
                {
                    item.Int64N_Property.Set(
                        rhs.Int64N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Int64N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Int64N_Property.Set(
                            def.Int64N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(12, ex);
                }
            }
            try
            {
                if (rhs.Int64_Property.HasBeenSet)
                {
                    item.Int64_Property.Set(
                        rhs.Int64,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Int64_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Int64_Property.Set(
                            def.Int64,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(13, ex);
                }
            }
            try
            {
                if (rhs.Int8N_Property.HasBeenSet)
                {
                    item.Int8N_Property.Set(
                        rhs.Int8N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Int8N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Int8N_Property.Set(
                            def.Int8N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(14, ex);
                }
            }
            try
            {
                if (rhs.Int8_Property.HasBeenSet)
                {
                    item.Int8_Property.Set(
                        rhs.Int8,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Int8_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Int8_Property.Set(
                            def.Int8,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(15, ex);
                }
            }
            try
            {
                if (rhs.Unsafe_Property.HasBeenSet)
                {
                    item.Unsafe_Property.Set(
                        rhs.Unsafe,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Unsafe_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Unsafe_Property.Set(
                            def.Unsafe,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(16, ex);
                }
            }
            try
            {
                if (rhs.P2IntN_Property.HasBeenSet)
                {
                    item.P2IntN_Property.Set(
                        rhs.P2IntN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.P2IntN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.P2IntN_Property.Set(
                            def.P2IntN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(17, ex);
                }
            }
            try
            {
                if (rhs.P2Int_Property.HasBeenSet)
                {
                    item.P2Int_Property.Set(
                        rhs.P2Int,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.P2Int_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.P2Int_Property.Set(
                            def.P2Int,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(18, ex);
                }
            }
            try
            {
                if (rhs.P3DoubleN_Property.HasBeenSet)
                {
                    item.P3DoubleN_Property.Set(
                        rhs.P3DoubleN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.P3DoubleN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.P3DoubleN_Property.Set(
                            def.P3DoubleN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(19, ex);
                }
            }
            try
            {
                if (rhs.P3Double_Property.HasBeenSet)
                {
                    item.P3Double_Property.Set(
                        rhs.P3Double,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.P3Double_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.P3Double_Property.Set(
                            def.P3Double,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(20, ex);
                }
            }
            try
            {
                if (rhs.P3IntN_Property.HasBeenSet)
                {
                    item.P3IntN_Property.Set(
                        rhs.P3IntN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.P3IntN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.P3IntN_Property.Set(
                            def.P3IntN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(21, ex);
                }
            }
            try
            {
                if (rhs.P3Int_Property.HasBeenSet)
                {
                    item.P3Int_Property.Set(
                        rhs.P3Int,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.P3Int_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.P3Int_Property.Set(
                            def.P3Int,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(22, ex);
                }
            }
            try
            {
                if (rhs.PercentN_Property.HasBeenSet)
                {
                    item.PercentN_Property.Set(
                        rhs.PercentN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.PercentN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.PercentN_Property.Set(
                            def.PercentN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(23, ex);
                }
            }
            try
            {
                if (rhs.Percent_Property.HasBeenSet)
                {
                    item.Percent_Property.Set(
                        rhs.Percent,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Percent_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Percent_Property.Set(
                            def.Percent,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(24, ex);
                }
            }
            try
            {
                if (rhs.RangeIntN_Property.HasBeenSet)
                {
                    item.RangeIntN_Property.Set(
                        rhs.RangeIntN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.RangeIntN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.RangeIntN_Property.Set(
                            def.RangeIntN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(25, ex);
                }
            }
            try
            {
                if (rhs.RangeInt_Property.HasBeenSet)
                {
                    item.RangeInt_Property.Set(
                        rhs.RangeInt,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.RangeInt_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.RangeInt_Property.Set(
                            def.RangeInt,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(26, ex);
                }
            }
            try
            {
                if (rhs.String_Property.HasBeenSet)
                {
                    item.String_Property.Set(
                        rhs.String,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.String_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.String_Property.Set(
                            def.String,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(27, ex);
                }
            }
            try
            {
                if (rhs.UDoubleN_Property.HasBeenSet)
                {
                    item.UDoubleN_Property.Set(
                        rhs.UDoubleN,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UDoubleN_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UDoubleN_Property.Set(
                            def.UDoubleN,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(28, ex);
                }
            }
            try
            {
                if (rhs.UDouble_Property.HasBeenSet)
                {
                    item.UDouble_Property.Set(
                        rhs.UDouble,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UDouble_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UDouble_Property.Set(
                            def.UDouble,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(29, ex);
                }
            }
            try
            {
                if (rhs.UInt16N_Property.HasBeenSet)
                {
                    item.UInt16N_Property.Set(
                        rhs.UInt16N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UInt16N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UInt16N_Property.Set(
                            def.UInt16N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(30, ex);
                }
            }
            try
            {
                if (rhs.UInt16_Property.HasBeenSet)
                {
                    item.UInt16_Property.Set(
                        rhs.UInt16,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UInt16_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UInt16_Property.Set(
                            def.UInt16,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(31, ex);
                }
            }
            try
            {
                if (rhs.UInt32N_Property.HasBeenSet)
                {
                    item.UInt32N_Property.Set(
                        rhs.UInt32N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UInt32N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UInt32N_Property.Set(
                            def.UInt32N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(32, ex);
                }
            }
            try
            {
                if (rhs.UInt32_Property.HasBeenSet)
                {
                    item.UInt32_Property.Set(
                        rhs.UInt32,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UInt32_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UInt32_Property.Set(
                            def.UInt32,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(33, ex);
                }
            }
            try
            {
                if (rhs.UInt64N_Property.HasBeenSet)
                {
                    item.UInt64N_Property.Set(
                        rhs.UInt64N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UInt64N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UInt64N_Property.Set(
                            def.UInt64N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(34, ex);
                }
            }
            try
            {
                if (rhs.UInt64_Property.HasBeenSet)
                {
                    item.UInt64_Property.Set(
                        rhs.UInt64,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UInt64_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UInt64_Property.Set(
                            def.UInt64,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(35, ex);
                }
            }
            try
            {
                if (rhs.UInt8N_Property.HasBeenSet)
                {
                    item.UInt8N_Property.Set(
                        rhs.UInt8N,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UInt8N_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UInt8N_Property.Set(
                            def.UInt8N,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(36, ex);
                }
            }
            try
            {
                if (rhs.UInt8_Property.HasBeenSet)
                {
                    item.UInt8_Property.Set(
                        rhs.UInt8,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.UInt8_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.UInt8_Property.Set(
                            def.UInt8,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(37, ex);
                }
            }
            try
            {
                if (rhs.Enum_Property.HasBeenSet)
                {
                    item.Enum_Property.Set(
                        rhs.Enum,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Enum_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Enum_Property.Set(
                            def.Enum,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(38, ex);
                }
            }
            try
            {
                if (rhs.WildCard_Property.HasBeenSet)
                {
                    item.WildCard_Property.Set(
                        rhs.WildCard,
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.WildCard_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.WildCard_Property.Set(
                            def.WildCard,
                            cmds);
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(39, ex);
                }
            }
            try
            {
                if (rhs.Ref_Property.HasBeenSet)
                {
                    if (rhs.Ref == null)
                    {
                        item.Ref = null;
                    }
                    else
                    {
                        if (item.Ref == null)
                        {
                            item.Ref = (ObjectToRef)INoggolloquyObjectExt.Copy(rhs.Ref);
                        }
                        else
                        {
                            item.Ref.CopyFieldsFrom(rhs.Ref, def: def?.Ref, cmds: cmds);
                        }
                    }
                }
                else
                {
                    if (def == null)
                    {
                        item.Ref_Property.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        if (rhs.Ref == null)
                        {
                            item.Ref = null;
                        }
                        else
                        {
                            if (item.Ref == null)
                            {
                                item.Ref = (ObjectToRef)INoggolloquyObjectExt.Copy(def.Ref);
                            }
                            else
                            {
                                item.Ref.CopyFieldsFrom(def.Ref, null, cmds: cmds);
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(40, ex);
                }
            }
            try
            {
                if (rhs.List.HasBeenSet)
                {
                    item.List.SetTo(rhs.List, cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.List.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.List.SetTo(def.List, cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(41, ex);
                }
            }
            try
            {
                if (rhs.RefList.HasBeenSet)
                {
                    int i = 0;
                    List<ObjectToRef> defList = def?.RefList.ToList();
                    item.RefList.SetTo(
                        rhs.RefList.Select((s) =>
                        {
                            return s.Copy(defList?[i++]);
                        }
                    ), cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.RefList.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.RefList.SetTo(def.RefList.Select((s) => s.Copy()), cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(42, ex);
                }
            }
            try
            {
                if (rhs.Dict.HasBeenSet)
                {
                    item.Dict.SetTo(
                        rhs.Dict.Select(
                            (i) => new KeyValuePair<Boolean, String>(
                                i.Key,
                                i.Value)),
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.Dict.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.Dict.SetTo(
                            def.Dict.Select(
                                (i) => new KeyValuePair<Boolean, String>(
                                    i.Key,
                                    i.Value)),
                            cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(43, ex);
                }
            }
            try
            {
                if (rhs.RefDict.HasBeenSet)
                {
                    int i = 0;
                    List<KeyValuePair<ObjectToRef, ObjectToRef>> defList = def?.RefDict.ToList();
                    item.RefDict.SetTo(
                        rhs.RefDict.Select((s) =>
                        {
                            var key = new ObjectToRef();
                            if (defList != null && defList.InRange(i))
                            {
                                key.CopyFieldsFrom(s.Key, defList[i++].Key);
                            }
                            else
                            {
                                key.CopyFieldsFrom(s.Key);
                            }
                            var value = new ObjectToRef();
                            if (defList != null && defList.InRange(i))
                            {
                                value.CopyFieldsFrom(s.Value, defList[i++].Value);
                            }
                            else
                            {
                                value.CopyFieldsFrom(s.Value);
                            }
                            return new KeyValuePair<ObjectToRef, ObjectToRef>(key, value);
                        }
                    ), cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.RefDict.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.RefDict.SetTo(
                            def.RefDict.Select(
                                (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                    i.Key.Copy(),
                                    i.Value.Copy())),
                            cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(44, ex);
                }
            }
            try
            {
                if (rhs.DictKeyedValue.HasBeenSet)
                {
                    item.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)rhs.DictKeyedValue).Select((i) => i.Copy()),
                        cmds);
                }
                else
                {
                    if (def == null)
                    {
                        item.DictKeyedValue.Unset(cmds.ToUnsetParams());
                    }
                    else
                    {
                        item.DictKeyedValue.SetTo(
                            ((IEnumerable<ObjectToRef>)def.DictKeyedValue).Select((i) => i.Copy()),
                            cmds);
                    }
                }
            }
            catch (Exception ex)
            {
                if (errorMask != null)
                {
                    errorMask.SetNthException(45, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(ushort index, bool on, ITestObject obj, NotifyingFireParameters? cmds = null)
        {
            switch (index)
            {
                case 0:
                    obj.BoolN_Property.HasBeenSet = on;
                    break;
                case 1:
                    obj.Bool_Property.HasBeenSet = on;
                    break;
                case 2:
                    obj.CharN_Property.HasBeenSet = on;
                    break;
                case 3:
                    obj.Char_Property.HasBeenSet = on;
                    break;
                case 4:
                    obj.DoubleN_Property.HasBeenSet = on;
                    break;
                case 5:
                    obj.Double_Property.HasBeenSet = on;
                    break;
                case 6:
                    obj.FloatN_Property.HasBeenSet = on;
                    break;
                case 7:
                    obj.Float_Property.HasBeenSet = on;
                    break;
                case 8:
                    obj.Int16N_Property.HasBeenSet = on;
                    break;
                case 9:
                    obj.Int16_Property.HasBeenSet = on;
                    break;
                case 10:
                    obj.Int32N_Property.HasBeenSet = on;
                    break;
                case 11:
                    obj.Int32_Property.HasBeenSet = on;
                    break;
                case 12:
                    obj.Int64N_Property.HasBeenSet = on;
                    break;
                case 13:
                    obj.Int64_Property.HasBeenSet = on;
                    break;
                case 14:
                    obj.Int8N_Property.HasBeenSet = on;
                    break;
                case 15:
                    obj.Int8_Property.HasBeenSet = on;
                    break;
                case 16:
                    obj.Unsafe_Property.HasBeenSet = on;
                    break;
                case 17:
                    obj.P2IntN_Property.HasBeenSet = on;
                    break;
                case 18:
                    obj.P2Int_Property.HasBeenSet = on;
                    break;
                case 19:
                    obj.P3DoubleN_Property.HasBeenSet = on;
                    break;
                case 20:
                    obj.P3Double_Property.HasBeenSet = on;
                    break;
                case 21:
                    obj.P3IntN_Property.HasBeenSet = on;
                    break;
                case 22:
                    obj.P3Int_Property.HasBeenSet = on;
                    break;
                case 23:
                    obj.PercentN_Property.HasBeenSet = on;
                    break;
                case 24:
                    obj.Percent_Property.HasBeenSet = on;
                    break;
                case 25:
                    obj.RangeIntN_Property.HasBeenSet = on;
                    break;
                case 26:
                    obj.RangeInt_Property.HasBeenSet = on;
                    break;
                case 27:
                    obj.String_Property.HasBeenSet = on;
                    break;
                case 28:
                    obj.UDoubleN_Property.HasBeenSet = on;
                    break;
                case 29:
                    obj.UDouble_Property.HasBeenSet = on;
                    break;
                case 30:
                    obj.UInt16N_Property.HasBeenSet = on;
                    break;
                case 31:
                    obj.UInt16_Property.HasBeenSet = on;
                    break;
                case 32:
                    obj.UInt32N_Property.HasBeenSet = on;
                    break;
                case 33:
                    obj.UInt32_Property.HasBeenSet = on;
                    break;
                case 34:
                    obj.UInt64N_Property.HasBeenSet = on;
                    break;
                case 35:
                    obj.UInt64_Property.HasBeenSet = on;
                    break;
                case 36:
                    obj.UInt8N_Property.HasBeenSet = on;
                    break;
                case 37:
                    obj.UInt8_Property.HasBeenSet = on;
                    break;
                case 38:
                    obj.Enum_Property.HasBeenSet = on;
                    break;
                case 39:
                    obj.WildCard_Property.HasBeenSet = on;
                    break;
                case 40:
                    obj.Ref_Property.HasBeenSet = on;
                    break;
                case 41:
                    obj.List.HasBeenSet = on;
                    break;
                case 42:
                    obj.RefList.HasBeenSet = on;
                    break;
                case 43:
                    obj.Dict.HasBeenSet = on;
                    break;
                case 44:
                    obj.RefDict.HasBeenSet = on;
                    break;
                case 45:
                    obj.DictKeyedValue.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(ITestObject obj, ushort index, NotifyingUnsetParameters? cmds = null)
        {
            switch (index)
            {
                case 0:
                    obj.BoolN_Property.Unset(cmds);
                    break;
                case 1:
                    obj.Bool_Property.Unset(cmds);
                    break;
                case 2:
                    obj.CharN_Property.Unset(cmds);
                    break;
                case 3:
                    obj.Char_Property.Unset(cmds);
                    break;
                case 4:
                    obj.DoubleN_Property.Unset(cmds);
                    break;
                case 5:
                    obj.Double_Property.Unset(cmds);
                    break;
                case 6:
                    obj.FloatN_Property.Unset(cmds);
                    break;
                case 7:
                    obj.Float_Property.Unset(cmds);
                    break;
                case 8:
                    obj.Int16N_Property.Unset(cmds);
                    break;
                case 9:
                    obj.Int16_Property.Unset(cmds);
                    break;
                case 10:
                    obj.Int32N_Property.Unset(cmds);
                    break;
                case 11:
                    obj.Int32_Property.Unset(cmds);
                    break;
                case 12:
                    obj.Int64N_Property.Unset(cmds);
                    break;
                case 13:
                    obj.Int64_Property.Unset(cmds);
                    break;
                case 14:
                    obj.Int8N_Property.Unset(cmds);
                    break;
                case 15:
                    obj.Int8_Property.Unset(cmds);
                    break;
                case 16:
                    obj.Unsafe_Property.Unset(cmds);
                    break;
                case 17:
                    obj.P2IntN_Property.Unset(cmds);
                    break;
                case 18:
                    obj.P2Int_Property.Unset(cmds);
                    break;
                case 19:
                    obj.P3DoubleN_Property.Unset(cmds);
                    break;
                case 20:
                    obj.P3Double_Property.Unset(cmds);
                    break;
                case 21:
                    obj.P3IntN_Property.Unset(cmds);
                    break;
                case 22:
                    obj.P3Int_Property.Unset(cmds);
                    break;
                case 23:
                    obj.PercentN_Property.Unset(cmds);
                    break;
                case 24:
                    obj.Percent_Property.Unset(cmds);
                    break;
                case 25:
                    obj.RangeIntN_Property.Unset(cmds);
                    break;
                case 26:
                    obj.RangeInt_Property.Unset(cmds);
                    break;
                case 27:
                    obj.String_Property.Unset(cmds);
                    break;
                case 28:
                    obj.UDoubleN_Property.Unset(cmds);
                    break;
                case 29:
                    obj.UDouble_Property.Unset(cmds);
                    break;
                case 30:
                    obj.UInt16N_Property.Unset(cmds);
                    break;
                case 31:
                    obj.UInt16_Property.Unset(cmds);
                    break;
                case 32:
                    obj.UInt32N_Property.Unset(cmds);
                    break;
                case 33:
                    obj.UInt32_Property.Unset(cmds);
                    break;
                case 34:
                    obj.UInt64N_Property.Unset(cmds);
                    break;
                case 35:
                    obj.UInt64_Property.Unset(cmds);
                    break;
                case 36:
                    obj.UInt8N_Property.Unset(cmds);
                    break;
                case 37:
                    obj.UInt8_Property.Unset(cmds);
                    break;
                case 38:
                    obj.Enum_Property.Unset(cmds);
                    break;
                case 39:
                    obj.WildCard_Property.Unset(cmds);
                    break;
                case 40:
                    obj.Ref_Property.Unset(cmds);
                    break;
                case 41:
                    obj.List.Unset(cmds);
                    break;
                case 42:
                    obj.RefList.Unset(cmds);
                    break;
                case 43:
                    obj.Dict.Unset(cmds);
                    break;
                case 44:
                    obj.RefDict.Unset(cmds);
                    break;
                case 45:
                    obj.DictKeyedValue.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(ushort index, ITestObject obj)
        {
            switch (index)
            {
                case 0:
                    return obj.BoolN_Property.HasBeenSet;
                case 1:
                    return obj.Bool_Property.HasBeenSet;
                case 2:
                    return obj.CharN_Property.HasBeenSet;
                case 3:
                    return obj.Char_Property.HasBeenSet;
                case 4:
                    return obj.DoubleN_Property.HasBeenSet;
                case 5:
                    return obj.Double_Property.HasBeenSet;
                case 6:
                    return obj.FloatN_Property.HasBeenSet;
                case 7:
                    return obj.Float_Property.HasBeenSet;
                case 8:
                    return obj.Int16N_Property.HasBeenSet;
                case 9:
                    return obj.Int16_Property.HasBeenSet;
                case 10:
                    return obj.Int32N_Property.HasBeenSet;
                case 11:
                    return obj.Int32_Property.HasBeenSet;
                case 12:
                    return obj.Int64N_Property.HasBeenSet;
                case 13:
                    return obj.Int64_Property.HasBeenSet;
                case 14:
                    return obj.Int8N_Property.HasBeenSet;
                case 15:
                    return obj.Int8_Property.HasBeenSet;
                case 16:
                    return obj.Unsafe_Property.HasBeenSet;
                case 17:
                    return obj.P2IntN_Property.HasBeenSet;
                case 18:
                    return obj.P2Int_Property.HasBeenSet;
                case 19:
                    return obj.P3DoubleN_Property.HasBeenSet;
                case 20:
                    return obj.P3Double_Property.HasBeenSet;
                case 21:
                    return obj.P3IntN_Property.HasBeenSet;
                case 22:
                    return obj.P3Int_Property.HasBeenSet;
                case 23:
                    return obj.PercentN_Property.HasBeenSet;
                case 24:
                    return obj.Percent_Property.HasBeenSet;
                case 25:
                    return obj.RangeIntN_Property.HasBeenSet;
                case 26:
                    return obj.RangeInt_Property.HasBeenSet;
                case 27:
                    return obj.String_Property.HasBeenSet;
                case 28:
                    return obj.UDoubleN_Property.HasBeenSet;
                case 29:
                    return obj.UDouble_Property.HasBeenSet;
                case 30:
                    return obj.UInt16N_Property.HasBeenSet;
                case 31:
                    return obj.UInt16_Property.HasBeenSet;
                case 32:
                    return obj.UInt32N_Property.HasBeenSet;
                case 33:
                    return obj.UInt32_Property.HasBeenSet;
                case 34:
                    return obj.UInt64N_Property.HasBeenSet;
                case 35:
                    return obj.UInt64_Property.HasBeenSet;
                case 36:
                    return obj.UInt8N_Property.HasBeenSet;
                case 37:
                    return obj.UInt8_Property.HasBeenSet;
                case 38:
                    return obj.Enum_Property.HasBeenSet;
                case 39:
                    return obj.WildCard_Property.HasBeenSet;
                case 40:
                    return obj.Ref_Property.HasBeenSet;
                case 41:
                    return obj.List.HasBeenSet;
                case 42:
                    return obj.RefList.HasBeenSet;
                case 43:
                    return obj.Dict.HasBeenSet;
                case 44:
                    return obj.RefDict.HasBeenSet;
                case 45:
                    return obj.DictKeyedValue.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(ushort index, ITestObjectGetter obj)
        {
            switch (index)
            {
                case 0:
                    return obj.BoolN;
                case 1:
                    return obj.Bool;
                case 2:
                    return obj.CharN;
                case 3:
                    return obj.Char;
                case 4:
                    return obj.DoubleN;
                case 5:
                    return obj.Double;
                case 6:
                    return obj.FloatN;
                case 7:
                    return obj.Float;
                case 8:
                    return obj.Int16N;
                case 9:
                    return obj.Int16;
                case 10:
                    return obj.Int32N;
                case 11:
                    return obj.Int32;
                case 12:
                    return obj.Int64N;
                case 13:
                    return obj.Int64;
                case 14:
                    return obj.Int8N;
                case 15:
                    return obj.Int8;
                case 16:
                    return obj.Unsafe;
                case 17:
                    return obj.P2IntN;
                case 18:
                    return obj.P2Int;
                case 19:
                    return obj.P3DoubleN;
                case 20:
                    return obj.P3Double;
                case 21:
                    return obj.P3IntN;
                case 22:
                    return obj.P3Int;
                case 23:
                    return obj.PercentN;
                case 24:
                    return obj.Percent;
                case 25:
                    return obj.RangeIntN;
                case 26:
                    return obj.RangeInt;
                case 27:
                    return obj.String;
                case 28:
                    return obj.UDoubleN;
                case 29:
                    return obj.UDouble;
                case 30:
                    return obj.UInt16N;
                case 31:
                    return obj.UInt16;
                case 32:
                    return obj.UInt32N;
                case 33:
                    return obj.UInt32;
                case 34:
                    return obj.UInt64N;
                case 35:
                    return obj.UInt64;
                case 36:
                    return obj.UInt8N;
                case 37:
                    return obj.UInt8;
                case 38:
                    return obj.Enum;
                case 39:
                    return obj.WildCard;
                case 40:
                    return obj.Ref;
                case 41:
                    return obj.List;
                case 42:
                    return obj.RefList;
                case 43:
                    return obj.Dict;
                case 44:
                    return obj.RefDict;
                case 45:
                    return obj.DictKeyedValue;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void SetNthObject(ITestObject nog, ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            switch (index)
            {
                case 0:
                    nog.BoolN_Property.Set(
                        ((Boolean?)obj),
                        cmds);
                    break;
                case 1:
                    nog.Bool_Property.Set(
                        ((Boolean)obj),
                        cmds);
                    break;
                case 2:
                    nog.CharN_Property.Set(
                        ((Char?)obj),
                        cmds);
                    break;
                case 3:
                    nog.Char_Property.Set(
                        ((Char)obj),
                        cmds);
                    break;
                case 4:
                    nog.DoubleN_Property.Set(
                        ((Double?)obj),
                        cmds);
                    break;
                case 5:
                    nog.Double_Property.Set(
                        ((Double)obj),
                        cmds);
                    break;
                case 6:
                    nog.FloatN_Property.Set(
                        ((Single?)obj),
                        cmds);
                    break;
                case 7:
                    nog.Float_Property.Set(
                        ((Single)obj),
                        cmds);
                    break;
                case 8:
                    nog.Int16N_Property.Set(
                        ((Int16?)obj),
                        cmds);
                    break;
                case 9:
                    nog.Int16_Property.Set(
                        ((Int16)obj),
                        cmds);
                    break;
                case 10:
                    nog.Int32N_Property.Set(
                        ((Int32?)obj),
                        cmds);
                    break;
                case 11:
                    nog.Int32_Property.Set(
                        ((Int32)obj),
                        cmds);
                    break;
                case 12:
                    nog.Int64N_Property.Set(
                        ((Int64?)obj),
                        cmds);
                    break;
                case 13:
                    nog.Int64_Property.Set(
                        ((Int64)obj),
                        cmds);
                    break;
                case 14:
                    nog.Int8N_Property.Set(
                        ((SByte?)obj),
                        cmds);
                    break;
                case 15:
                    nog.Int8_Property.Set(
                        ((SByte)obj),
                        cmds);
                    break;
                case 16:
                    nog.Unsafe_Property.Set(
                        ((bool)obj),
                        cmds);
                    break;
                case 17:
                    nog.P2IntN_Property.Set(
                        ((P2Int?)obj),
                        cmds);
                    break;
                case 18:
                    nog.P2Int_Property.Set(
                        ((P2Int)obj),
                        cmds);
                    break;
                case 19:
                    nog.P3DoubleN_Property.Set(
                        ((P3Double?)obj),
                        cmds);
                    break;
                case 20:
                    nog.P3Double_Property.Set(
                        ((P3Double)obj),
                        cmds);
                    break;
                case 21:
                    nog.P3IntN_Property.Set(
                        ((P3Int?)obj),
                        cmds);
                    break;
                case 22:
                    nog.P3Int_Property.Set(
                        ((P3Int)obj),
                        cmds);
                    break;
                case 23:
                    nog.PercentN_Property.Set(
                        ((Percent?)obj),
                        cmds);
                    break;
                case 24:
                    nog.Percent_Property.Set(
                        ((Percent)obj),
                        cmds);
                    break;
                case 25:
                    nog.RangeIntN_Property.Set(
                        ((RangeInt?)obj),
                        cmds);
                    break;
                case 26:
                    nog.RangeInt_Property.Set(
                        ((RangeInt)obj),
                        cmds);
                    break;
                case 27:
                    nog.String_Property.Set(
                        ((String)obj),
                        cmds);
                    break;
                case 28:
                    nog.UDoubleN_Property.Set(
                        ((UDouble?)obj),
                        cmds);
                    break;
                case 29:
                    nog.UDouble_Property.Set(
                        ((UDouble)obj),
                        cmds);
                    break;
                case 30:
                    nog.UInt16N_Property.Set(
                        ((UInt16?)obj),
                        cmds);
                    break;
                case 31:
                    nog.UInt16_Property.Set(
                        ((UInt16)obj),
                        cmds);
                    break;
                case 32:
                    nog.UInt32N_Property.Set(
                        ((UInt32?)obj),
                        cmds);
                    break;
                case 33:
                    nog.UInt32_Property.Set(
                        ((UInt32)obj),
                        cmds);
                    break;
                case 34:
                    nog.UInt64N_Property.Set(
                        ((UInt64?)obj),
                        cmds);
                    break;
                case 35:
                    nog.UInt64_Property.Set(
                        ((UInt64)obj),
                        cmds);
                    break;
                case 36:
                    nog.UInt8N_Property.Set(
                        ((Byte?)obj),
                        cmds);
                    break;
                case 37:
                    nog.UInt8_Property.Set(
                        ((Byte)obj),
                        cmds);
                    break;
                case 38:
                    nog.Enum_Property.Set(
                        ((TestEnum)obj),
                        cmds);
                    break;
                case 39:
                    nog.WildCard_Property.Set(
                        ((Object)obj),
                        cmds);
                    break;
                case 40:
                    nog.Ref_Property.Set(
                        ((ObjectToRef)obj),
                        cmds);
                    break;
                case 41:
                    nog.List.SetTo((((NotifyingList<Boolean>)obj)), cmds);
                    break;
                case 42:
                    nog.RefList.SetTo((((NotifyingList<ObjectToRef>)obj)).Select((s) => s.Copy()), cmds);
                    break;
                case 43:
                    nog.Dict.SetTo(
                        ((NotifyingDictionary<Boolean, String>)obj).Select(
                            (i) => new KeyValuePair<Boolean, String>(
                                i.Key,
                                i.Value)),
                        cmds);
                    break;
                case 44:
                    nog.RefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                i.Key.Copy(),
                                i.Value.Copy())),
                        cmds);
                    break;
                case 45:
                    nog.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)((NotifyingDictionary<Int32, ObjectToRef>)obj)).Select((i) => i.Copy()),
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    public static class TestObjectExt
    {
        public static TestObject Copy_ToNoggolloquy(this ITestObjectGetter item)
        {
            return TestObject.Copy(item, def: null);
        }

    }
    #endregion

    #region Modules
    #region XML Translation
    #endregion

    #region Mask
    public class TestObject_Mask<T> 
    {
        public T BoolN;
        public T Bool;
        public T CharN;
        public T Char;
        public T DoubleN;
        public T Double;
        public T FloatN;
        public T Float;
        public T Int16N;
        public T Int16;
        public T Int32N;
        public T Int32;
        public T Int64N;
        public T Int64;
        public T Int8N;
        public T Int8;
        public T Unsafe;
        public T P2IntN;
        public T P2Int;
        public T P3DoubleN;
        public T P3Double;
        public T P3IntN;
        public T P3Int;
        public T PercentN;
        public T Percent;
        public T RangeIntN;
        public T RangeInt;
        public T String;
        public T UDoubleN;
        public T UDouble;
        public T UInt16N;
        public T UInt16;
        public T UInt32N;
        public T UInt32;
        public T UInt64N;
        public T UInt64;
        public T UInt8N;
        public T UInt8;
        public T Enum;
        public T WildCard;
        public MaskItem<T, ObjectToRef_Mask<T>> Ref { get; set; }
        public MaskItem<T, IEnumerable<T>> List;
        public MaskItem<T, IEnumerable<ObjectToRef_ErrorMask>> RefList;
        public MaskItem<T, IEnumerable<KeyValuePair<T, T>>> Dict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>> RefDict;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> DictKeyedValue;
    }

    public class TestObject_ErrorMask : IErrorMask
    {
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception BoolN;
        public Exception Bool;
        public Exception CharN;
        public Exception Char;
        public Exception DoubleN;
        public Exception Double;
        public Exception FloatN;
        public Exception Float;
        public Exception Int16N;
        public Exception Int16;
        public Exception Int32N;
        public Exception Int32;
        public Exception Int64N;
        public Exception Int64;
        public Exception Int8N;
        public Exception Int8;
        public Exception Unsafe;
        public Exception P2IntN;
        public Exception P2Int;
        public Exception P3DoubleN;
        public Exception P3Double;
        public Exception P3IntN;
        public Exception P3Int;
        public Exception PercentN;
        public Exception Percent;
        public Exception RangeIntN;
        public Exception RangeInt;
        public Exception String;
        public Exception UDoubleN;
        public Exception UDouble;
        public Exception UInt16N;
        public Exception UInt16;
        public Exception UInt32N;
        public Exception UInt32;
        public Exception UInt64N;
        public Exception UInt64;
        public Exception UInt8N;
        public Exception UInt8;
        public Exception Enum;
        public Exception WildCard;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref;
        public MaskItem<Exception, IEnumerable<Exception>> List;
        public MaskItem<Exception, IEnumerable<ObjectToRef_ErrorMask>> RefList;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> Dict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_Mask<Exception>>, MaskItem<Exception, ObjectToRef_Mask<Exception>>>>> RefDict;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_Mask<Exception>>>> DictKeyedValue;

        public void SetNthException(ushort index, Exception ex)
        {
            switch (index)
            {
                case 0:
                    this.BoolN = ex;
                    break;
                case 1:
                    this.Bool = ex;
                    break;
                case 2:
                    this.CharN = ex;
                    break;
                case 3:
                    this.Char = ex;
                    break;
                case 4:
                    this.DoubleN = ex;
                    break;
                case 5:
                    this.Double = ex;
                    break;
                case 6:
                    this.FloatN = ex;
                    break;
                case 7:
                    this.Float = ex;
                    break;
                case 8:
                    this.Int16N = ex;
                    break;
                case 9:
                    this.Int16 = ex;
                    break;
                case 10:
                    this.Int32N = ex;
                    break;
                case 11:
                    this.Int32 = ex;
                    break;
                case 12:
                    this.Int64N = ex;
                    break;
                case 13:
                    this.Int64 = ex;
                    break;
                case 14:
                    this.Int8N = ex;
                    break;
                case 15:
                    this.Int8 = ex;
                    break;
                case 16:
                    this.Unsafe = ex;
                    break;
                case 17:
                    this.P2IntN = ex;
                    break;
                case 18:
                    this.P2Int = ex;
                    break;
                case 19:
                    this.P3DoubleN = ex;
                    break;
                case 20:
                    this.P3Double = ex;
                    break;
                case 21:
                    this.P3IntN = ex;
                    break;
                case 22:
                    this.P3Int = ex;
                    break;
                case 23:
                    this.PercentN = ex;
                    break;
                case 24:
                    this.Percent = ex;
                    break;
                case 25:
                    this.RangeIntN = ex;
                    break;
                case 26:
                    this.RangeInt = ex;
                    break;
                case 27:
                    this.String = ex;
                    break;
                case 28:
                    this.UDoubleN = ex;
                    break;
                case 29:
                    this.UDouble = ex;
                    break;
                case 30:
                    this.UInt16N = ex;
                    break;
                case 31:
                    this.UInt16 = ex;
                    break;
                case 32:
                    this.UInt32N = ex;
                    break;
                case 33:
                    this.UInt32 = ex;
                    break;
                case 34:
                    this.UInt64N = ex;
                    break;
                case 35:
                    this.UInt64 = ex;
                    break;
                case 36:
                    this.UInt8N = ex;
                    break;
                case 37:
                    this.UInt8 = ex;
                    break;
                case 38:
                    this.Enum = ex;
                    break;
                case 39:
                    this.WildCard = ex;
                    break;
                case 40:
                    this.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case 41:
                    this.List = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case 42:
                    this.RefList = new MaskItem<Exception, IEnumerable<ObjectToRef_ErrorMask>>(ex, null);
                    break;
                case 43:
                    this.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(ex, null);
                    break;
                case 44:
                    this.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_Mask<Exception>>, MaskItem<Exception, ObjectToRef_Mask<Exception>>>>>(ex, null);
                    break;
                case 45:
                    this.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_Mask<Exception>>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            switch (index)
            {
                case 0:
                    this.BoolN = (Exception)obj;
                    break;
                case 1:
                    this.Bool = (Exception)obj;
                    break;
                case 2:
                    this.CharN = (Exception)obj;
                    break;
                case 3:
                    this.Char = (Exception)obj;
                    break;
                case 4:
                    this.DoubleN = (Exception)obj;
                    break;
                case 5:
                    this.Double = (Exception)obj;
                    break;
                case 6:
                    this.FloatN = (Exception)obj;
                    break;
                case 7:
                    this.Float = (Exception)obj;
                    break;
                case 8:
                    this.Int16N = (Exception)obj;
                    break;
                case 9:
                    this.Int16 = (Exception)obj;
                    break;
                case 10:
                    this.Int32N = (Exception)obj;
                    break;
                case 11:
                    this.Int32 = (Exception)obj;
                    break;
                case 12:
                    this.Int64N = (Exception)obj;
                    break;
                case 13:
                    this.Int64 = (Exception)obj;
                    break;
                case 14:
                    this.Int8N = (Exception)obj;
                    break;
                case 15:
                    this.Int8 = (Exception)obj;
                    break;
                case 16:
                    this.Unsafe = (Exception)obj;
                    break;
                case 17:
                    this.P2IntN = (Exception)obj;
                    break;
                case 18:
                    this.P2Int = (Exception)obj;
                    break;
                case 19:
                    this.P3DoubleN = (Exception)obj;
                    break;
                case 20:
                    this.P3Double = (Exception)obj;
                    break;
                case 21:
                    this.P3IntN = (Exception)obj;
                    break;
                case 22:
                    this.P3Int = (Exception)obj;
                    break;
                case 23:
                    this.PercentN = (Exception)obj;
                    break;
                case 24:
                    this.Percent = (Exception)obj;
                    break;
                case 25:
                    this.RangeIntN = (Exception)obj;
                    break;
                case 26:
                    this.RangeInt = (Exception)obj;
                    break;
                case 27:
                    this.String = (Exception)obj;
                    break;
                case 28:
                    this.UDoubleN = (Exception)obj;
                    break;
                case 29:
                    this.UDouble = (Exception)obj;
                    break;
                case 30:
                    this.UInt16N = (Exception)obj;
                    break;
                case 31:
                    this.UInt16 = (Exception)obj;
                    break;
                case 32:
                    this.UInt32N = (Exception)obj;
                    break;
                case 33:
                    this.UInt32 = (Exception)obj;
                    break;
                case 34:
                    this.UInt64N = (Exception)obj;
                    break;
                case 35:
                    this.UInt64 = (Exception)obj;
                    break;
                case 36:
                    this.UInt8N = (Exception)obj;
                    break;
                case 37:
                    this.UInt8 = (Exception)obj;
                    break;
                case 38:
                    this.Enum = (Exception)obj;
                    break;
                case 39:
                    this.WildCard = (Exception)obj;
                    break;
                case 40:
                    this.Ref = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case 41:
                    this.List = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case 42:
                    this.RefList = (MaskItem<Exception, IEnumerable<ObjectToRef_ErrorMask>>)obj;
                    break;
                case 43:
                    this.Dict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>)obj;
                    break;
                case 44:
                    this.RefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_Mask<Exception>>, MaskItem<Exception, ObjectToRef_Mask<Exception>>>>>)obj;
                    break;
                case 45:
                    this.DictKeyedValue = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_Mask<Exception>>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
    }
    #endregion

    #endregion

    #region Noggolloquy Interfaces
    #endregion

}
