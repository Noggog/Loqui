<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="LoquiSource"
    targetNamespace="http://tempuri.org/LoquiSource.xsd"
    elementFormDefault="qualified"
    xmlns="http://tempuri.org/LoquiSource.xsd"
    xmlns:mstns="http://tempuri.org/LoquiSource.xsd"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:complexType name="ProtocolType" >
    <xs:attribute name="Namespace" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation> 
          The unique namespace of the protocol
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:element name="Loqui" type="LoquiType" />

  <xs:complexType name="LoquiType">
    <xs:annotation>
      <xs:documentation>
        The root node of a Loqui source document.
      </xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:choice minOccurs="1" maxOccurs="1">
        <xs:element name="Protocol" type="ProtocolType" minOccurs="1" maxOccurs="1" >
          <xs:annotation>
            <xs:documentation>
              Used to define which protocol set this object is a part of.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="1" maxOccurs="1">
        <xs:element name="UniqueNamespace" type="xs:string" minOccurs="1" maxOccurs="1" >
          <xs:annotation>
            <xs:documentation>
              Unique namespace to define this object in.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Namespace" type="xs:string" minOccurs="1" maxOccurs="1" >
          <xs:annotation>
            <xs:documentation>
              Namespace to define this object in. Prefixed by default project namespace.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Object" type="ObjectType" minOccurs="0" maxOccurs="unbounded" >
          <xs:annotation>
            <xs:documentation>
              Define a new class object.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Struct" type="StructType" minOccurs="0" maxOccurs="unbounded" >
          <xs:annotation>
            <xs:documentation>
              Define a new struct object.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="FieldBatch" type="FieldBatch" minOccurs="0" maxOccurs="unbounded" >
          <xs:annotation>
            <xs:documentation>
              Define a new field batch object to contain reusable field chunks.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:choice>
  </xs:complexType>

  <xs:simpleType name="NotifyingOption" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="NotifyingItem" />
      <xs:enumeration value="ObjectCentralized" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="CopyOption" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="DeepCopyOnly" />
      <xs:enumeration value="All" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="RxBaseOption" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="LoquiNotifyingObject" />
      <xs:enumeration value="ViewModel" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="NullableOption" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="False" />
      <xs:enumeration value="True" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="LoquiInterfaceType" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="Direct" />
      <xs:enumeration value="IGetter" />
      <xs:enumeration value="ISetter" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="LoquiInterfaceDefinitionType" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="Direct" />
      <xs:enumeration value="IGetter" />
      <xs:enumeration value="ISetter" />
      <xs:enumeration value="Dual" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="Variance" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="In" />
      <xs:enumeration value="Out" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="DisabledLevel" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="Enabled" />
      <xs:enumeration value="SkipGeneration" />
      <xs:enumeration value="OmitEntirely" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="PermissionLevel" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="Public" />
      <xs:enumeration value="Private" />
      <xs:enumeration value="Protected" />
      <xs:enumeration value="Internal" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="CtorPermissionLevel" final="restriction" >
    <xs:restriction base="xs:string">
      <xs:enumeration value="Public" />
      <xs:enumeration value="Private" />
      <xs:enumeration value="Protected" />
      <xs:enumeration value="Internal" />
    </xs:restriction>
  </xs:simpleType>

  <xs:group name="FieldOptions">
    <xs:choice>
      <xs:element name="FieldBatch" type="FieldBatchPointer" />
      <xs:element name="ByteArray" type="ByteArray" />
      <xs:element name="UInt8" type="RangedUInt8" />
      <xs:element name="UInt16" type="RangedUInt16" />
      <xs:element name="UInt32" type="RangedUInt32" />
      <xs:element name="UInt64" type="RangedUInt64" />
      <xs:element name="Int8" type="RangedInt8" />
      <xs:element name="Int16" type="RangedInt16" />
      <xs:element name="Int32" type="RangedInt32" />
      <xs:element name="Int64" type="RangedInt64" />
      <xs:element name="P2Int32" type="P2" />
      <xs:element name="P2Int16" type="P2" />
      <xs:element name="P2Float" type="P2" />
      <xs:element name="P3Float" type="String" />
      <xs:element name="P3Int16" type="String" />
      <xs:element name="P3Int32" type="String" />
      <xs:element name="P3UInt8" type="String" />
      <xs:element name="P3UInt16" type="String" />
      <xs:element name="P3Double" type="String" />
      <xs:element name="Bool" type="Bool" />
      <xs:element name="Char" type="Char" />
      <xs:element name="RangeInt8" type="RangedUInt8" />
      <xs:element name="RangeInt16" type="RangedUInt16" />
      <xs:element name="RangeInt32" type="RangedUInt32" />
      <xs:element name="RangeInt64" type="RangedUInt64" />
      <xs:element name="RangeUInt8" type="RangedUInt8" />
      <xs:element name="RangeUInt16" type="RangedUInt16" />
      <xs:element name="RangeUInt32" type="RangedUInt32" />
      <xs:element name="RangeUInt64" type="RangedUInt64" />
      <xs:element name="RangeDouble" type="RangedFloat" />
      <xs:element name="Percent" type="Percent" />
      <xs:element name="Float" type="RangedFloat" />
      <xs:element name="UDouble" type="RangedFloat" />
      <xs:element name="Double" type="RangedFloat" />
      <xs:element name="DateTime" type="DateTime" />
      <xs:element name="TimeOnly" type="TimeOnly" />
      <xs:element name="DateOnly" type="DateOnly" />
      <xs:element name="Ref" type="Ref" />
      <xs:element name="RefDirect" type="RefDirectField" />
      <xs:element name="RefList" type="RefListField" />
      <xs:element name="List" type="List" />
      <xs:element name="Dict" type="Dict" />
      <xs:element name="Array" type="Array" />
      <xs:element name="Array2D" type="List" />
      <xs:element name="Enum" type="Enum" />
      <xs:element name="String" type="String" />
      <xs:element name="FilePath" type="String" />
      <xs:element name="DirectoryPath" type="String" />
      <xs:element name="Nothing" type="Nothing" />
      <xs:element name="MarkerSet" type="MarkerSet" />
      <xs:element name="Color" type="Color" />
      <xs:element name="UnsafeObject" type="Object" >
        <xs:annotation>
          <xs:documentation>
            For if you want to generate a member of a type that is not supported by Loqui.  Not all features are ensured to work as intended.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Wildcard" type="Field" >
        <xs:annotation>
          <xs:documentation>
            Will accept any object, but will throw an exception if it's not Loqui friendly.  Friendly objects are generally any fields you can define as a member in a Loqui object.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:group>

  <xs:group name="NamedFieldOptions">
    <xs:choice>
      <xs:element name="FieldBatch" type="FieldBatchPointer" />
      <xs:element name="ByteArray" type="NByteArray" />
      <xs:element name="UInt8" type="NRangedUInt8" />
      <xs:element name="UInt16" type="NRangedUInt16" />
      <xs:element name="UInt32" type="NRangedUInt32" />
      <xs:element name="UInt64" type="NRangedUInt64" />
      <xs:element name="Int8" type="NRangedInt8" />
      <xs:element name="Int16" type="NRangedInt16" />
      <xs:element name="Int32" type="NRangedInt32" />
      <xs:element name="Int64" type="NRangedInt64" />
      <xs:element name="P2Int32" type="NP2" />
      <xs:element name="P2Int16" type="NP2" />
      <xs:element name="P3Int16" type="NString" />
      <xs:element name="P3Int32" type="NString" />
      <xs:element name="P3UInt8" type="NString" />
      <xs:element name="P3UInt16" type="NString" />
      <xs:element name="P2Float" type="NP2" />
      <xs:element name="P3Float" type="NString" />
      <xs:element name="P3Double" type="NString" />
      <xs:element name="P4Double" type="NString" />
      <xs:element name="Dimension2D" type="NString" />
      <xs:element name="Bounding2D" type="NString" />
      <xs:element name="Bool" type="NBool" />
      <xs:element name="Char" type="NChar" />
      <xs:element name="Random" type="NField" />
      <xs:element name="RangeInt8" type="NRangedUInt8" />
      <xs:element name="RangeInt16" type="NRangedUInt16" />
      <xs:element name="RangeInt32" type="NRangedUInt32" />
      <xs:element name="RangeInt64" type="NRangedUInt64" />
      <xs:element name="RangeUInt8" type="NRangedUInt8" />
      <xs:element name="RangeUInt16" type="NRangedUInt16" />
      <xs:element name="RangeUInt32" type="NRangedUInt32" />
      <xs:element name="RangeUInt64" type="NRangedUInt64" />
      <xs:element name="RangeDouble" type="NRangedFloat" />
      <xs:element name="Percent" type="NPercent" />
      <xs:element name="Float" type="NRangedFloat" />
      <xs:element name="UDouble" type="NRangedFloat" />
      <xs:element name="Double" type="NRangedFloat" />
      <xs:element name="DateTime" type="NDateTime" />
      <xs:element name="TimeOnly" type="NTimeOnly" />
      <xs:element name="DateOnly" type="NDateOnly" />
      <xs:element name="Ref" type="NRef" />
      <xs:element name="RefDirect" type="NRefDirectField" />
      <xs:element name="RefList" type="NRefListField" />
      <xs:element name="List" type="NList" />
      <xs:element name="Dict" type="NDict" />
      <xs:element name="Array" type="NArray" />
      <xs:element name="Array2D" type="NList" />
      <xs:element name="Enum" type="NEnum" />
      <xs:element name="String" type="NString" />
      <xs:element name="FilePath" type="NString" />
      <xs:element name="DirectoryPath" type="NString" />
      <xs:element name="Nothing" type="NNothing" />
      <xs:element name="MarkerSet" type="MarkerSet" />
      <xs:element name="Color" type="NColor" />
      <xs:element name="UnsafeObject" type="Object" >
        <xs:annotation>
          <xs:documentation>
            For if you want to generate a member of a type that is not supported by Loqui.  Not all features are ensured to work as intended.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Wildcard" type="NField" >
        <xs:annotation>
          <xs:documentation>
            Will accept any object, but will throw an exception if it's not Loqui friendly.  Friendly objects are generally any fields you can define as a member in a Loqui object.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:group>

  <xs:complexType name="FieldBatch">
    <xs:choice minOccurs="0" maxOccurs="unbounded" >
      <xs:element name="Fields" type="FieldsType" minOccurs="0" maxOccurs="1" />
      <xs:element name="Generic" type="Generic" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            The generic symbols to define in the object.  These can be used/referenced by fields.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation>
          The name this object should have.  This needs to be unique per protocol.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="StructType">
    <xs:choice minOccurs="0" maxOccurs="unbounded" >
      <xs:element name="Interface" type="xs:string" minOccurs="0" maxOccurs="1" >
        <xs:annotation>
          <xs:documentation>
            Define an interface this object should have.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Fields" type="FieldsType" minOccurs="0" maxOccurs="1" />
      <xs:element name="Namespaces" type="Namespaces" minOccurs="0" maxOccurs="1" />
      <xs:element name="Generic" type="Generic" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            The generic symbols to define in the object.  These can be used/referenced by fields.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation>
          The name this object should have.  This needs to be unique per protocol.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ctorPermission" type="CtorPermissionLevel" >
      <xs:annotation>
        <xs:documentation>
          Whether to expose the basic ctor to the public.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateToString" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to generate the ToString method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateEquals" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to generate the equals/hashcode content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="version" type="xs:unsignedShort">
      <xs:annotation>
        <xs:documentation>
          The version this message is.  Increment to define a new version old ones can upgrade to.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disable" type="DisabledLevel">
      <xs:annotation>
        <xs:documentation>
          Whether to skip this object while generating
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceInternalInterface" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether to generate the internal interface, even if no fields make use of it
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ObjectType">
    <xs:choice minOccurs="0" maxOccurs="unbounded" >
      <xs:element name="Interface" type="InterfaceType" minOccurs="0" maxOccurs="1" />
      <xs:element name="Fields" type="FieldsType" minOccurs="0" maxOccurs="1" />
      <xs:element name="Namespaces" type="Namespaces" minOccurs="0" maxOccurs="1" />
      <xs:element name="Generic" type="Generic" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            The generic symbols to define in the object.  These can be used/referenced by fields.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BaseGeneric" type="DefinedBaseGeneric" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            Define a generic symbol from the base class.  To be used when base class has generics.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation>
          The name this object should have.  This needs to be unique per protocol.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseClass" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          Loqui name of the class to inherit from.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="abstract" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to mark object as abstract
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateToString" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to generate the ToString method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateEquals" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to generate the equals/hashcode content.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ctorPermission" type="CtorPermissionLevel" >
      <xs:annotation>
        <xs:documentation>
          Whether to expose the basic ctor to the public.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="setBaseClass" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to automatically set base class to LoquiNotifyingObject if no Loqui base class specified.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notifyingDefault" type="NotifyingOption" >
      <xs:annotation>
        <xs:documentation>
          Sets the default value of the "Notifying" property on all of this objects contained fields.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullableDefault" type="NullableOption" >
      <xs:annotation>
        <xs:documentation>
          Sets the default value of the "nullable" property on all of this objects contained fields.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="raisePropertyChangedDefault" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Sets the default value of the "Raise Property Changed" property on all of this objects contained fields.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="interfaceTypeDefault" type="LoquiInterfaceDefinitionType" >
      <xs:annotation>
        <xs:documentation>
          Sets the default value of the Interface Type property on all of this objects contained fields.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="setPermissionDefault" type="PermissionLevel" >
      <xs:annotation>
        <xs:documentation>
          Sets the default value of the setPermission property on all of this objects contained fields.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="derivativeDefault" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Sets the default value of the derivative property on all of this objects contained fields.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rxBase" type="RxBaseOption" >
      <xs:annotation>
        <xs:documentation>
          If object has any Rx-based fields, what base class to derive from
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:attribute name="allowBaseRecords" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>
        Whether to generate base record systems.  Defaults to true
      </xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:complexType name="UniqueNamespaces">
    <xs:annotation>
      <xs:documentation>
        Collection of extra namespaces to import.
      </xs:documentation>
    </xs:annotation>
    <xs:choice >
      <xs:element name="Namespace" type="xs:string" minOccurs="0" maxOccurs="1" >
        <xs:annotation>
          <xs:documentation>
            Extra namespace to import. Fully qualified.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="allowBaseRecords" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether to generate base record systems.  Defaults to true
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="version" type="xs:unsignedShort">
      <xs:annotation>
        <xs:documentation>
          The version this message is.  Increment to define a new version old ones can upgrade to.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="disable" type="DisabledLevel">
      <xs:annotation>
        <xs:documentation>
          Whether to skip this object while generating
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="forceInternalInterface" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether to generate the internal interface, even if no fields make use of it
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="InterfaceType">
    <xs:annotation>
      <xs:documentation>
        Define an interface this object should have.
      </xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="type" type="LoquiInterfaceDefinitionType">
          <xs:annotation>
            <xs:documentation>
              Where to place the interface
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="Namespaces">
    <xs:annotation>
      <xs:documentation>
        Collection of extra namespaces to import.
      </xs:documentation>
    </xs:annotation>
    <xs:choice >
      <xs:element name="Namespace" type="xs:string" minOccurs="0" maxOccurs="1" >
        <xs:annotation>
          <xs:documentation>
            Extra namespace to import. Prefixed by project namespace.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="Generic">
    <xs:annotation>
      <xs:documentation>
        A definition of a generic symbol.
      </xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="1">
      <xs:element name="Where" type="xs:string" minOccurs="1" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            Any extra "where" definitions that the generic needs to follow
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation>
          Generic symbol to use.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isLoqui" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to require object to be a Loqui generated type
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isClass" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to require object to be a class
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="getterVariance" type="Variance" >
      <xs:annotation>
        <xs:documentation>
          Variance on the getter interface
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="setterVariance" type="Variance" >
      <xs:annotation>
        <xs:documentation>
          Variance on the setter interface
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="override" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether this type definition is an override of a base class generic
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="DefinedBaseGeneric">
    <xs:annotation>
      <xs:documentation>
        A definition of a generic symbol.
      </xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="1">
      <xs:element name="Where" type="xs:string" minOccurs="1" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            Any extra "where" definitions that the generic needs to follow
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Defined" type="xs:string" minOccurs="1" maxOccurs="1" />
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation>
          Generic symbol to use.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="Generics">
    <xs:choice minOccurs="0" maxOccurs="unbounded" >
      <xs:element name="Generic" type="Generic" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="FieldsType" >
    <xs:annotation>
      <xs:documentation>
        Node which all field definitions will reside.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:group ref="NamedFieldOptions" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="SingleFieldOption" >
    <xs:sequence>
      <xs:group ref="FieldOptions" minOccurs="1" maxOccurs="1" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="KeyedValue" >
    <xs:sequence>
      <xs:element name="Ref" type="Ref" />
    </xs:sequence>
    <xs:attribute name="keyAccessor" use="required" />
    <xs:attribute name="keyType" type="xs:string" />
  </xs:complexType>

  <xs:complexType name="Field" >
    <xs:attribute name="comment" >
      <xs:annotation>
        <xs:documentation>
          Comment text to add to the defined field member.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyField" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Determines whether it is a key field which will be included in the equals/hash.  If no fields are marked as key, then all are.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="derivative" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Marks the field as read-only from the public.  It can only be set from inside the class.

          This field is different from being marked protected Set because it will NOT be exported.  It only exists in the class definition, never on-disk.

          If a field is marked derivative, it is implicitly marked protected Set as well.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="setPermission" type="PermissionLevel" >
      <xs:annotation>
        <xs:documentation>
          Determines the permissions for setting the field.
            Public:  Anyone can set
            Private:  Only the actual class can set
            Protected:  Any inheriting classes can set
            Internal:  An internal interface will be generated which can set

          Setting fields not not public via this method is different from being marked derivative because it WILL be exported.  It exists in the class definition, AND on-disk.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="copy" type="CopyOption" >
      <xs:annotation>
        <xs:documentation>
          Whether to copy the field in the generated copy function.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="alwaysCopy" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to disregard translation masks and always be marked for copy 
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notifying" type="NotifyingOption" >
      <xs:annotation>
        <xs:documentation>
          Whether the field should be Notifying and can be subscribed to.  By default this is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="nullable" type="NullableOption" >
      <xs:annotation>
        <xs:documentation>
          Whether the field should keep track of whether it was set or unset.  By default this is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="raisePropertyChanged" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether the field should utilize RaisePropertyChanged interface.  By default this is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateClassMembers" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          If false, the actual class member will be left up to the user to implement.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateInterfaceMembers" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          If false, the interface members will be left up to the user to implement.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hidden" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to generate field as part as the loqui systems.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internalSetInterface" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Puts the field set accessor on the internal interface, rather than the public one.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internalGetInterface" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Puts the field get accessor on the internal interface, rather than the public one.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="customClear" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to generate clear code
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="override" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to mark this field as an override
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="NField" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ClassField" >
    <xs:complexContent>
      <xs:extension base="Field">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NClassField" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="String" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="maxLength" type="xs:unsignedShort" >
          <xs:annotation>
            <xs:documentation>
              Max length of the string
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NString" >
    <xs:complexContent>
      <xs:extension base="String">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Color" >
    <xs:complexContent>
      <xs:extension base="Field">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NColor" >
    <xs:complexContent>
      <xs:extension base="Color">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Nothing" >
    <xs:complexContent>
      <xs:extension base="Field">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NNothing" >
    <xs:complexContent>
      <xs:extension base="Nothing">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="FieldBatchPointer" >
    <xs:attribute name="name" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation>
          Name of the field batch object to reference.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="protocolID" type="xs:unsignedShort" >
      <xs:annotation>
        <xs:documentation>
          Protocol of the field batch object to reference.  Omittion assumes the same protocol as the current object.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ByteArray" >
    <xs:complexContent>
      <xs:extension base="ClassField">
        <xs:attribute name="byteLength" type="xs:integer" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NByteArray" >
    <xs:complexContent>
      <xs:extension base="ByteArray">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RangedInt8" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="min" type="xs:short" />
        <xs:attribute name="max" type="xs:short" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRangedInt8" >
    <xs:complexContent>
      <xs:extension base="RangedInt8">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RangedInt16" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="min" type="xs:short" />
        <xs:attribute name="max" type="xs:short" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRangedInt16" >
    <xs:complexContent>
      <xs:extension base="RangedInt16">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RangedInt32" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="min" type="xs:int" />
        <xs:attribute name="max" type="xs:int" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRangedInt32" >
    <xs:complexContent>
      <xs:extension base="RangedInt32">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RangedInt64" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="min" type="xs:long" />
        <xs:attribute name="max" type="xs:long" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRangedInt64" >
    <xs:complexContent>
      <xs:extension base="RangedInt64">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RangedUInt8" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="min" type="xs:byte" />
        <xs:attribute name="max" type="xs:byte" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRangedUInt8" >
    <xs:complexContent>
      <xs:extension base="RangedUInt8">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RangedUInt16" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="min" type="xs:unsignedShort" />
        <xs:attribute name="max" type="xs:unsignedShort" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRangedUInt16" >
    <xs:complexContent>
      <xs:extension base="RangedUInt16">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RangedUInt32" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="min" type="xs:unsignedInt" />
        <xs:attribute name="max" type="xs:unsignedInt" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRangedUInt32" >
    <xs:complexContent>
      <xs:extension base="RangedUInt32">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RangedUInt64" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="min" type="xs:unsignedLong" />
        <xs:attribute name="max" type="xs:unsignedLong" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRangedUInt64" >
    <xs:complexContent>
      <xs:extension base="RangedUInt64">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RangedFloat" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="min" type="xs:float" />
        <xs:attribute name="max" type="xs:float" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRangedFloat" >
    <xs:complexContent>
      <xs:extension base="RangedFloat">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="P2" >
    <xs:complexContent>
      <xs:extension base="Field">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NP2" >
    <xs:complexContent>
      <xs:extension base="P2">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Percent" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NPercent" >
    <xs:complexContent>
      <xs:extension base="Percent">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RefSpecifyGenericType">
    <xs:attribute name="TypeToSpecify" use="required" >
      <xs:annotation>
        <xs:documentation>
          Generic type name to specify.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="Definition" use="required" >
      <xs:annotation>
        <xs:documentation>
          Object to define the generic type to.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RefMapGenericType">
    <xs:attribute name="TypeOnRef" use="required" >
      <xs:annotation>
        <xs:documentation>
          Generic type on ref to map.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="TypeOnObject" use="required" >
      <xs:annotation>
        <xs:documentation>
          Generic type on containing object to map to.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RefDirect" >
    <xs:sequence>
      <xs:element type="xs:string" name="Generic" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            The generic symbols to create in the object.  These can be used/referenced by fields.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element type="RefSpecifyGenericType" name="GenericSpecification" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            The generic symbols to specify and define on the field.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element type="RefMapGenericType" name="GenericMapping" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            The generic symbols to map to generics on the containing object.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element type="InterfaceType" name="Interface" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            Interface to reference.  Can not be used with refName, as this is an alternate way to reference.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="refName">
      <xs:annotation>
        <xs:documentation>
          Name of the Loqui object to reference.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="defaultType">
      <xs:annotation>
        <xs:documentation>
			What type to instantiate as the default value if field is not nullable
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="apiIterfaceType" type="LoquiInterfaceType">
      <xs:annotation>
        <xs:documentation>
          What type of reference interface to use in exposed API members.  Direct reference to Loqui object type, or one of the interfaces.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="thisCtor" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Adds "this" to constructor parameters as it is a common pattern to tie child to parent
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="RefDirectField" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:sequence>
          <xs:element type="xs:string" name="Generic" minOccurs="0" maxOccurs="unbounded" >
            <xs:annotation>
              <xs:documentation>
                The generic symbols to create in the object.  These can be used/referenced by fields.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element type="RefSpecifyGenericType" name="GenericSpecification" minOccurs="0" maxOccurs="unbounded" >
            <xs:annotation>
              <xs:documentation>
                The generic symbols to specify and define on the field.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element type="RefMapGenericType" name="GenericMapping" minOccurs="0" maxOccurs="unbounded" >
            <xs:annotation>
              <xs:documentation>
                The generic symbols to map to generics on the containing object.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element type="InterfaceType" name="Interface" minOccurs="0" maxOccurs="unbounded" >
            <xs:annotation>
              <xs:documentation>
                Interface to reference.  Can not be used with refName, as this is an alternate way to reference.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="refName">
          <xs:annotation>
            <xs:documentation>
              Name of the Loqui object to reference.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="apiIterfaceType" type="LoquiInterfaceType">
          <xs:annotation>
            <xs:documentation>
              What type of reference interface to use in exposed API members.  Direct reference to Loqui object type, or one of the interfaces.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="thisCtor" type="xs:boolean" >
          <xs:annotation>
            <xs:documentation>
              Adds "this" to constructor parameters as it is a common pattern to tie child to parent
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="singleton" type="xs:boolean" >
          <xs:annotation>
            <xs:documentation>
              Designates the singleton level of a ref.  If not null, if ever set to null, it will create a new instance instead.  If singleton, it will instantiate one singleton instance that can never point to another instance.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRefDirectField" >
    <xs:complexContent>
      <xs:extension base="RefDirectField">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RefListField" >
    <xs:complexContent>
      <xs:extension base="RefDirectField">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRefListField" >
    <xs:complexContent>
      <xs:extension base="RefListField">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Ref" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:annotation>
          <xs:documentation>
            Creates a single member reference to another Loqui object type.
          </xs:documentation>
        </xs:annotation>
        <xs:choice>
          <xs:element name="Direct" type="RefDirect">
            <xs:annotation>
              <xs:documentation>
                Direct reference to another Loqui type.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Generic" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                Name of generic to reference.  The generic will enforce that it's a Loqui object.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
        <xs:attribute name="singleton" type="xs:boolean" >
          <xs:annotation>
            <xs:documentation>
              Designates the singleton level of a ref.  If not null, if ever set to null, it will create a new instance instead.  If singleton, it will instantiate one singleton instance that can never point to another instance.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="thisCtor" type="xs:boolean" >
          <xs:annotation>
            <xs:documentation>
              Adds "this" to constructor parameters as it is a common pattern to tie child to parent
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRef" >
    <xs:complexContent>
      <xs:extension base="Ref">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Object" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:choice>
          <xs:element name="TargetType" type="xs:string" />
        </xs:choice>
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NObject" >
    <xs:complexContent>
      <xs:extension base="Ref">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Enum" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="enumName" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NEnum" >
    <xs:complexContent>
      <xs:extension base="Enum">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Bool" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NBool" >
    <xs:complexContent>
      <xs:extension base="Bool">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DateTime" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:date" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NDateTime" >
    <xs:complexContent>
      <xs:extension base="Bool">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeOnly" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:date" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NTimeOnly" >
    <xs:complexContent>
      <xs:extension base="Bool">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DateOnly" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:date" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NDateOnly" >
    <xs:complexContent>
      <xs:extension base="Bool">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Char" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="CharString"  />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NChar" >
    <xs:complexContent>
      <xs:extension base="Char">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="CharString">
    <xs:restriction base="xs:string">
      <xs:maxLength value="1" />
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="List" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:group ref="FieldOptions" minOccurs="1" maxOccurs="1" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NList" >
    <xs:complexContent>
      <xs:extension base="List">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Array" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:group ref="FieldOptions" minOccurs="1" maxOccurs="1" />
        <xs:attribute name="fixedSize" type="xs:int" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NArray" >
    <xs:complexContent>
      <xs:extension base="Array">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Array2d" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:group ref="FieldOptions" minOccurs="1" maxOccurs="1" />
        <xs:attribute name="fixedWidth" type="xs:int" />
        <xs:attribute name="fixedHeight" type="xs:int" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NArray2d" >
    <xs:complexContent>
      <xs:extension base="Array">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Dict" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:choice minOccurs="1" maxOccurs="1" >
          <xs:sequence>
            <xs:element name="Key" type="SingleFieldOption" />
            <xs:element name="Value" type="SingleFieldOption" />
          </xs:sequence>
          <xs:sequence>
            <xs:element name="KeyedValue" type="KeyedValue" />
          </xs:sequence>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NDict" >
    <xs:complexContent>
      <xs:extension base="Dict">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MarkerSet">
    <xs:choice minOccurs="0" maxOccurs="unbounded" >
      <xs:element name="Fields" type="FieldsType" minOccurs="0" maxOccurs="1" />
    </xs:choice>
    <xs:attribute name="name" type="xs:string" />
  </xs:complexType>

</xs:schema>
