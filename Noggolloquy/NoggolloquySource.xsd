<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="NoggolloquySource"
    targetNamespace="http://tempuri.org/NoggolloquySource.xsd"
    elementFormDefault="qualified"
    xmlns="http://tempuri.org/NoggolloquySource.xsd"
    xmlns:mstns="http://tempuri.org/NoggolloquySource.xsd"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:complexType name="ProtocolType" >
    <xs:attribute name="ProtocolID" type="xs:unsignedShort" use="required" >
      <xs:annotation>
        <xs:documentation>
          The ID of the protocol.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="Version" type="xs:unsignedShort" use="required" >
      <xs:annotation>
        <xs:documentation>
          The version this message is in the protocol.  Increment to define a new version old ones can upgrade to. (Not yet implemented)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:element name="Noggolloquy" type="NoggolloquyType" />

  <xs:complexType name="NoggolloquyType">
    <xs:annotation>
      <xs:documentation>
        The root node of a Noggolloquy source document.
      </xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:choice minOccurs="1" maxOccurs="1">
        <xs:element name="Protocol" type="ProtocolType" minOccurs="1" maxOccurs="1" >
          <xs:annotation>
            <xs:documentation>
              Used to define which protocol set this object is a part of.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="1" maxOccurs="1">
        <xs:element name="UniqueNamespace" type="xs:string" minOccurs="1" maxOccurs="1" >
          <xs:annotation>
            <xs:documentation>
              Unique namespace to define this object in.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Namespace" type="xs:string" minOccurs="1" maxOccurs="1" >
          <xs:annotation>
            <xs:documentation>
              Namespace to define this object in. Prefixed by default project namespace.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Object" type="ObjectType" minOccurs="0" maxOccurs="unbounded" >
          <xs:annotation>
            <xs:documentation>
              Define a new class object.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Struct" type="StructType" minOccurs="0" maxOccurs="unbounded" >
          <xs:annotation>
            <xs:documentation>
              Define a new struct object.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:choice>
  </xs:complexType>

  <xs:group name="FieldOptions">
    <xs:choice>
      <xs:element name="UInt8" type="Ranged" />
      <xs:element name="UInt16" type="Ranged" />
      <xs:element name="UInt32" type="Ranged" />
      <xs:element name="UInt64" type="Ranged" />
      <xs:element name="Int8" type="Ranged" />
      <xs:element name="Int16" type="Ranged" />
      <xs:element name="Int32" type="Ranged" />
      <xs:element name="Int64" type="Ranged" />
      <xs:element name="UInt8Null" type="Ranged" />
      <xs:element name="UInt16Null" type="Ranged" />
      <xs:element name="UInt32Null" type="Ranged" />
      <xs:element name="UInt64Null" type="Ranged" />
      <xs:element name="Int8Null" type="Ranged" />
      <xs:element name="Int16Null" type="Ranged" />
      <xs:element name="Int32Null" type="Ranged" />
      <xs:element name="Int64Null" type="Ranged" />
      <xs:element name="P2Int" type="String" />
      <xs:element name="P2IntNull" type="String" />
      <xs:element name="P3Int" type="String" />
      <xs:element name="P3IntNull" type="String" />
      <xs:element name="P3Double" type="String" />
      <xs:element name="P3DoubleNull" type="String" />
      <xs:element name="Bool" type="Bool" />
      <xs:element name="BoolNull" type="Bool" />
      <xs:element name="Char" type="Char" />
      <xs:element name="CharNull" type="Char" />
      <xs:element name="RangeInt" type="Ranged" />
      <xs:element name="RangeIntNull" type="Ranged" />
      <xs:element name="RangeDouble" type="Ranged" />
      <xs:element name="RangeDoubleNull" type="Ranged" />
      <xs:element name="Percent" type="String" />
      <xs:element name="Float" type="Ranged" />
      <xs:element name="FloatNull" type="Ranged" />
      <xs:element name="UDouble" type="Ranged" />
      <xs:element name="UDoubleNull" type="Ranged" />
      <xs:element name="Double" type="Ranged" />
      <xs:element name="DoubleNull" type="Ranged" />
      <xs:element name="Random" type="Field" />
      <xs:element name="Ref" type="Ref" />
      <xs:element name="List" type="List" />
      <xs:element name="Dict" type="Dict" />
      <xs:element name="Array2D" type="List" />
      <xs:element name="Enum" type="Enum" />
      <xs:element name="String" type="String" />
      <xs:element name="NonExportedObject" type="Object" >
        <xs:annotation>
          <xs:documentation>
            For if you want to generate a member of a type that is not supported by Noggolloquy, and do not care that it won't be exported.
            It will have all other features such as Notification.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Wildcard" type="Field" >
        <xs:annotation>
          <xs:documentation>
            Will accept any object, but will throw an exception if it's not Noggolloquy friendly.  Friendly objects are generally any fields you can define as a member in a Noggolloquy object.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:group>

  <xs:group name="NamedFieldOptions">
    <xs:choice>
      <xs:element name="UInt8" type="NRanged" />
      <xs:element name="UInt16" type="NRanged" />
      <xs:element name="UInt32" type="NRanged" />
      <xs:element name="UInt64" type="NRanged" />
      <xs:element name="Int8" type="NRanged" />
      <xs:element name="Int16" type="NRanged" />
      <xs:element name="Int32" type="NRanged" />
      <xs:element name="Int64" type="NRanged" />
      <xs:element name="UInt8Null" type="NRanged" />
      <xs:element name="UInt16Null" type="NRanged" />
      <xs:element name="UInt32Null" type="NRanged" />
      <xs:element name="UInt64Null" type="NRanged" />
      <xs:element name="Int8Null" type="NRanged" />
      <xs:element name="Int16Null" type="NRanged" />
      <xs:element name="Int32Null" type="NRanged" />
      <xs:element name="Int64Null" type="NRanged" />
      <xs:element name="P2Int" type="NString" />
      <xs:element name="P2IntNull" type="NString" />
      <xs:element name="P3Int" type="NString" />
      <xs:element name="P3IntNull" type="NString" />
      <xs:element name="P3Double" type="NString" />
      <xs:element name="P3DoubleNull" type="NString" />
      <xs:element name="P4Double" type="NString" />
      <xs:element name="P4DoubleNull" type="NString" />
      <xs:element name="Dimension2D" type="NString" />
      <xs:element name="Dimension2DNull" type="NString" />
      <xs:element name="Bounding2D" type="NString" />
      <xs:element name="Bounding2DNull" type="NString" />
      <xs:element name="Bool" type="NBool" />
      <xs:element name="BoolNull" type="NBool" />
      <xs:element name="Char" type="NChar" />
      <xs:element name="CharNull" type="NChar" />
      <xs:element name="Random" type="NField" />
      <xs:element name="RangeInt" type="NRanged" />
      <xs:element name="RangeIntNull" type="NRanged" />
      <xs:element name="RangeDouble" type="NRanged" />
      <xs:element name="RangeDoubleNull" type="NRanged" />
      <xs:element name="Percent" type="NString" />
      <xs:element name="Float" type="NRanged" />
      <xs:element name="FloatNull" type="NRanged" />
      <xs:element name="UDouble" type="NRanged" />
      <xs:element name="UDoubleNull" type="NRanged" />
      <xs:element name="Double" type="NRanged" />
      <xs:element name="DoubleNull" type="NRanged" />
      <xs:element name="Ref" type="NRef" />
      <xs:element name="List" type="NList" />
      <xs:element name="Dict" type="NDict" />
      <xs:element name="Array2D" type="NList" />
      <xs:element name="Enum" type="NEnum" />
      <xs:element name="String" type="NString" />
      <xs:element name="NonExportedType" type="NObject" >
        <xs:annotation>
          <xs:documentation>
            For if you want to generate a member of a type that is not supported by Noggolloquy, and do not care that it won't be exported.
            It will have all other features such as Notification.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Wildcard" type="NField" >
        <xs:annotation>
          <xs:documentation>
            Will accept any object, but will throw an exception if it's not Noggolloquy friendly.  Friendly objects are generally any fields you can define as a member in a Noggolloquy object.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:group>

  <xs:complexType name="StructType">
    <xs:choice minOccurs="0" maxOccurs="unbounded" >
      <xs:element name="Interface" type="xs:string" minOccurs="0" maxOccurs="1" >
        <xs:annotation>
          <xs:documentation>
            Define an interface this object should have.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Fields" type="FieldsType" minOccurs="0" maxOccurs="1" />
      <xs:element name="Namespaces" type="Namespaces" minOccurs="0" maxOccurs="1" />
      <xs:element name="Generic" type="Generic" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            The generic symbols to define in the object.  These can be used/referenced by fields.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation>
          The name this object should have.  This needs to be unique per protocol.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="publicCtor" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to expose the basic ctor to the public.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateToString" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to generate the ToString method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="GUID" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          TYPICALLY AUTOGENERATED.  Unique GUID for the object.  Will be generated if missing.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ID" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          TYPICALLY AUTOGENERATED.  Unique ushort ID for the object.  Will be generated if missing.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ObjectType">
    <xs:choice minOccurs="0" maxOccurs="unbounded" >
      <xs:element name="Interface" type="xs:string" minOccurs="0" maxOccurs="1" >
        <xs:annotation>
          <xs:documentation>
            Define an interface this object should have.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Fields" type="FieldsType" minOccurs="0" maxOccurs="1" />
      <xs:element name="Namespaces" type="Namespaces" minOccurs="0" maxOccurs="1" />
      <xs:element name="Generic" type="Generic" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            The generic symbols to define in the object.  These can be used/referenced by fields.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BaseGeneric" type="Generic" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            Define a generic symbol from the base class.  To be used when base class has generics.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation>
          The name this object should have.  This needs to be unique per protocol.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="baseClass" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          Noggolloquy name of the class to inherit from.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="abstract" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to mark object as abstract
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateToString" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to generate the ToString method.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="publicCtor" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether to expose the basic ctor to the public.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notifyingDefault" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Sets the default value of the "Notifying" property on all of this objects contained fields.  Mostly for convenience.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="GUID" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          TYPICALLY AUTOGENERATED.  Unique GUID for the object.  Will be generated if missing.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ID" type="xs:string" >
      <xs:annotation>
        <xs:documentation>
          TYPICALLY AUTOGENERATED.  Unique ushort ID for the object.  Will be generated if missing.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:attribute name="allowBaseRecords" type="xs:boolean">
    <xs:annotation>
      <xs:documentation>
        Whether to generate base record systems.  Defaults to true
      </xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:complexType name="UniqueNamespaces">
    <xs:annotation>
      <xs:documentation>
        Collection of extra namespaces to import.
      </xs:documentation>
    </xs:annotation>
    <xs:choice >
      <xs:element name="Namespace" type="xs:string" minOccurs="0" maxOccurs="1" >
        <xs:annotation>
          <xs:documentation>
            Extra namespace to import. Fully qualified.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="allowBaseRecords" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether to generate base record systems.  Defaults to true
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  
  <xs:complexType name="Namespaces">
    <xs:annotation>
      <xs:documentation>
        Collection of extra namespaces to import.
      </xs:documentation>
    </xs:annotation>
    <xs:choice >
      <xs:element name="Namespace" type="xs:string" minOccurs="0" maxOccurs="1" >
        <xs:annotation>
          <xs:documentation>
            Extra namespace to import. Prefixed by project namespace.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="Generic">
    <xs:annotation>
      <xs:documentation>
        A definition of a generic symbol.
      </xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="1">
      <xs:element name="Where" type="xs:string" minOccurs="1" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            Any extra "where" definitions that the generic needs to follow
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required" >
      <xs:annotation>
        <xs:documentation>
          Generic symbol to use.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="Generics">
    <xs:choice minOccurs="0" maxOccurs="unbounded" >
      <xs:element name="Generic" type="Generic" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="FieldsType" >
    <xs:annotation>
      <xs:documentation>
        Node which all field definitions will reside.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:group ref="NamedFieldOptions" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="SingleFieldOption" >
    <xs:sequence>
      <xs:group ref="FieldOptions" minOccurs="1" maxOccurs="1" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="KeyedValue" >
    <xs:sequence>
      <xs:element name="Ref" type="Ref" />
    </xs:sequence>
    <xs:attribute name="keyAccessor" use="required" />
  </xs:complexType>

  <xs:complexType name="Field" >
    <xs:attribute name="comment" >
      <xs:annotation>
        <xs:documentation>
          Comment text to add to the defined field member.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="keyField" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Determines whether it is a key field which will be included in the equals/hash.  If no fields are marked as key, then all are.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="derivative" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Marks the field as read-only from the public.  It can only be set from inside the class.

          This field is different from being marked readOnly because it will NOT be exported.  It only exists in the class definition, never on-disk.

          If a field is marked derivative, it is implicitly marked readOnly as well.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="readOnly" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Marks the field as read-only from the public.  It can only be set from inside the class.

          This field is different from being marked derivative because it WILL be exported.  It exists in the class definition, AND on-disk.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="notifying" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          Whether the field should be Notifying and can be subscribed to.  By default this is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generateClassMembers" type="xs:boolean" >
      <xs:annotation>
        <xs:documentation>
          If false, only the interface member will be defined.  The actual class member will be left up to the user to implement.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="NField" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="String" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NString" >
    <xs:complexContent>
      <xs:extension base="String">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Ranged" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="range" type="xs:string" />
        <xs:attribute name="rangeThrowException" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRanged" >
    <xs:complexContent>
      <xs:extension base="Ranged">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RefDirect" >
    <xs:choice>
      <xs:element type="xs:string"  name="Generic" minOccurs="0" maxOccurs="unbounded" >
        <xs:annotation>
          <xs:documentation>
            The generic symbols to define in the object.  These can be used/referenced by fields.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="refName">
      <xs:annotation>
        <xs:documentation>
          Name of the Noggolloquy object to reference.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="Ref" >
    <xs:annotation>
      <xs:documentation>
        Creates a single member reference to another Noggolloquy object type.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:choice>
          <xs:element name="Direct" type="RefDirect">
            <xs:annotation>
              <xs:documentation>
                Direct reference to another Noggolloquy type.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Generic" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                Name of generic to reference.  The generic will enforce that it's a Noggolloquy object.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
        <xs:attribute name="singleton" type="xs:boolean" >
          <xs:annotation>
            <xs:documentation>
              Creates a referenced class on construction.  This class instance will never be replaced.
              If something sets this member, it will have the values copied in, rather than the reference pointer replaced.
              This means it's safer to subscribe to without worry, and will never be null.
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NRef" >
    <xs:complexContent>
      <xs:extension base="Ref">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Object" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:choice>
          <xs:element name="TargetType" type="xs:string" />
          <xs:element name="Generic" type="xs:string" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NObject" >
    <xs:complexContent>
      <xs:extension base="Ref">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Enum" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:string" />
        <xs:attribute name="enumName" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NEnum" >
    <xs:complexContent>
      <xs:extension base="Enum">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Bool" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NBool" >
    <xs:complexContent>
      <xs:extension base="Bool">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Char" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:attribute name="default" type="CharString"  />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NChar" >
    <xs:complexContent>
      <xs:extension base="Char">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="CharString">
    <xs:restriction base="xs:string">
      <xs:maxLength value="1" />
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="List" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:group ref="FieldOptions" minOccurs="1" maxOccurs="1" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NList" >
    <xs:complexContent>
      <xs:extension base="List">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Dict" >
    <xs:complexContent>
      <xs:extension base="Field">
        <xs:choice minOccurs="1" maxOccurs="1" >
          <xs:sequence>
            <xs:element name="Key" type="SingleFieldOption" />
            <xs:element name="Value" type="SingleFieldOption" />
          </xs:sequence>
          <xs:sequence>
            <xs:element name="KeyedValue" type="KeyedValue" />
          </xs:sequence>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NDict" >
    <xs:complexContent>
      <xs:extension base="Dict">
        <xs:attribute name="name" type="xs:string" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

</xs:schema>
