/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Generated.Internals;
using Loqui.Tests.Generated;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Loqui.Tests.Generated
{
    #region Class
    public partial class TestObject_Notifying_SubClass : 
        TestObject_Notifying,
        ITestObject_Notifying_SubClass,
        ILoquiObject<TestObject_Notifying_SubClass>,
        ILoquiObjectSetter,
        IEquatable<TestObject_Notifying_SubClass>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TestObject_Notifying_SubClass_Registration.Instance;
        public new static TestObject_Notifying_SubClass_Registration Registration => TestObject_Notifying_SubClass_Registration.Instance;

        #region Ctor
        public TestObject_Notifying_SubClass()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NewField
        public Boolean NewField { get; set; }
        protected void UnsetNewField()
        {
            _hasBeenSetTracker[(int)TestObject_Notifying_SubClass_FieldIndex.NewField] = false;
            NewField = default(Boolean);
        }
        #endregion

        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => TestObject_Notifying_SubClassCommon.GetNthObject(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => TestObject_Notifying_SubClassCommon.GetNthObjectHasBeenSet(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => TestObject_Notifying_SubClassCommon.UnsetNthObject(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestObject_Notifying_SubClassCommon.SetNthObjectHasBeenSet(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<TestObject_Notifying_SubClass>.GetEqualsMask(TestObject_Notifying_SubClass rhs, EqualsMaskHelper.Include include) => TestObject_Notifying_SubClassCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ITestObject_Notifying_SubClassGetter>.GetEqualsMask(ITestObject_Notifying_SubClassGetter rhs, EqualsMaskHelper.Include include) => TestObject_Notifying_SubClassCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return TestObject_Notifying_SubClassCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestObject_Notifying_SubClass_Mask<bool> printMask = null)
        {
            return TestObject_Notifying_SubClassCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestObject_Notifying_SubClassCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new TestObject_Notifying_SubClass_Mask<bool> GetHasBeenSetMask()
        {
            return TestObject_Notifying_SubClassCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_Notifying_SubClass rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_Notifying_SubClass rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (this.NewField != rhs.NewField) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(NewField).CombineHashCode(ret);
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public new static TestObject_Notifying_SubClass Create_Xml(
            XElement node,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static TestObject_Notifying_SubClass Create_Xml(
            XElement node,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            bool doMasks = true,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TestObject_Notifying_SubClass_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static TestObject_Notifying_SubClass Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new TestObject_Notifying_SubClass();
            try
            {
                foreach (var elem in node.Elements())
                {
                    FillPrivateElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    TestObject_Notifying_SubClassCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static TestObject_Notifying_SubClass Create_Xml(
            string path,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static TestObject_Notifying_SubClass Create_Xml(
            string path,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestObject_Notifying_SubClass Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TestObject_Notifying_SubClass Create_Xml(
            Stream stream,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static TestObject_Notifying_SubClass Create_Xml(
            Stream stream,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestObject_Notifying_SubClass Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public override void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = TestObject_Notifying_SubClass_ErrorMask.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<TestObject_Notifying_SubClass>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml(
            XElement node,
            out TestObject_Notifying_ErrorMask errorMask,
            TestObject_Notifying_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = TestObject_Notifying_SubClass_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            bool doMasks = true,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestObject_Notifying_SubClass_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml(
            XElement node,
            out TestObject_Notifying_ErrorMask errorMask,
            bool doMasks = true,
            TestObject_Notifying_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestObject_Notifying_SubClass_ErrorMask.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            TestObject_Notifying_SubClassCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        protected static void FillPrivateElement_Xml(
            TestObject_Notifying_SubClass item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                default:
                    TestObject_Notifying.FillPrivateElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

        protected override bool GetHasBeenSet(int index)
        {
            switch ((TestObject_Notifying_SubClass_FieldIndex)index)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return true;
                default:
                    return base.GetHasBeenSet(index);
            }
        }

        public TestObject_Notifying_SubClass Copy(
            TestObject_Notifying_SubClass_CopyMask copyMask = null,
            ITestObject_Notifying_SubClassGetter def = null)
        {
            return TestObject_Notifying_SubClass.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestObject_Notifying_SubClass Copy(
            ITestObject_Notifying_SubClass item,
            TestObject_Notifying_SubClass_CopyMask copyMask = null,
            ITestObject_Notifying_SubClassGetter def = null)
        {
            TestObject_Notifying_SubClass ret;
            if (item.GetType().Equals(typeof(TestObject_Notifying_SubClass)))
            {
                ret = new TestObject_Notifying_SubClass();
            }
            else
            {
                ret = (TestObject_Notifying_SubClass)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static TestObject_Notifying_SubClass Copy_ToLoqui(
            ITestObject_Notifying_SubClassGetter item,
            TestObject_Notifying_SubClass_CopyMask copyMask = null,
            ITestObject_Notifying_SubClassGetter def = null)
        {
            TestObject_Notifying_SubClass ret;
            if (item.GetType().Equals(typeof(TestObject_Notifying_SubClass)))
            {
                ret = new TestObject_Notifying_SubClass() as TestObject_Notifying_SubClass;
            }
            else
            {
                ret = (TestObject_Notifying_SubClass)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom(
            ITestObject_NotifyingGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (ITestObject_Notifying_SubClassGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestObject_Notifying_SubClassGetter rhs,
            TestObject_Notifying_SubClass_CopyMask copyMask,
            ITestObject_Notifying_SubClassGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestObject_Notifying_SubClassGetter rhs,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            TestObject_Notifying_SubClass_CopyMask copyMask = null,
            ITestObject_Notifying_SubClassGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TestObject_Notifying_SubClassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = TestObject_Notifying_SubClass_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            ITestObject_Notifying_SubClassGetter rhs,
            ErrorMaskBuilder errorMask,
            TestObject_Notifying_SubClass_CopyMask copyMask = null,
            ITestObject_Notifying_SubClassGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            TestObject_Notifying_SubClassCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    this.NewField = (Boolean)obj;
                    break;
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestObject_Notifying_SubClassCommon.Clear(this, cmds);
        }


        public new static TestObject_Notifying_SubClass Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestObject_Notifying_SubClass();
            foreach (var pair in fields)
            {
                CopyInInternal_TestObject_Notifying_SubClass(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_TestObject_Notifying_SubClass(TestObject_Notifying_SubClass obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestObject_Notifying_SubClass_FieldIndex enu))
            {
                CopyInInternal_TestObject_Notifying(obj, pair);
            }
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    obj.NewField = (Boolean)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestObject_Notifying_SubClass obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ITestObject_Notifying_SubClass : ITestObject_Notifying_SubClassGetter, ITestObject_Notifying, ILoquiClass<ITestObject_Notifying_SubClass, ITestObject_Notifying_SubClassGetter>, ILoquiClass<TestObject_Notifying_SubClass, ITestObject_Notifying_SubClassGetter>
    {
        new Boolean NewField { get; set; }

    }

    public partial interface ITestObject_Notifying_SubClassGetter : ITestObject_NotifyingGetter
    {
        #region NewField
        Boolean NewField { get; }

        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Generated.Internals
{
    #region Field Index
    public enum TestObject_Notifying_SubClass_FieldIndex
    {
        ByteArray = 0,
        ByteArrayNull = 1,
        ByteArrayNotNull = 2,
        ByteArraySingleton = 3,
        BoolN = 4,
        Bool = 5,
        CharN = 6,
        Char = 7,
        DateTimeNull = 8,
        DateTime = 9,
        DoubleN = 10,
        DoubleN_Ranged = 11,
        Double = 12,
        Double_Ranged = 13,
        FloatN = 14,
        FloatN_Ranged = 15,
        Float = 16,
        Float_Ranged = 17,
        Int16N = 18,
        Int16N_Ranged = 19,
        Int16 = 20,
        Int16_Ranged = 21,
        Int32N = 22,
        Int32N_Ranged = 23,
        Int32 = 24,
        Int32_Ranged = 25,
        Int64N = 26,
        Int64N_Ranged = 27,
        Int64 = 28,
        Int64_Ranged = 29,
        Int8N = 30,
        Int8N_Ranged = 31,
        Int8 = 32,
        Int8_Ranged = 33,
        Unsafe = 34,
        UnsafeLoqui = 35,
        UnsafeNull = 36,
        P2IntN = 37,
        P2Int = 38,
        P3DoubleN = 39,
        P3Double = 40,
        P3IntN = 41,
        P3Int = 42,
        PercentN = 43,
        Percent = 44,
        RangeInt8N = 45,
        RangeInt8 = 46,
        RangeInt16N = 47,
        RangeInt16 = 48,
        RangeInt32N = 49,
        RangeInt32 = 50,
        RangeInt64N = 51,
        RangeInt64 = 52,
        RangeUInt8N = 53,
        RangeUInt8 = 54,
        RangeUInt16N = 55,
        RangeUInt16 = 56,
        RangeUInt32N = 57,
        RangeUInt32 = 58,
        RangeUInt64N = 59,
        RangeUInt64 = 60,
        String = 61,
        FilePath = 62,
        FilePathNull = 63,
        DirectoryPath = 64,
        DirectoryPathNull = 65,
        UDoubleN = 66,
        UDoubleN_Ranged = 67,
        UDouble = 68,
        UDouble_Ranged = 69,
        UInt16N = 70,
        UInt16N_Ranged = 71,
        UInt16 = 72,
        UInt16_Ranged = 73,
        UInt32N = 74,
        UInt32N_Ranged = 75,
        UInt32 = 76,
        UInt32_Ranged = 77,
        UInt64N = 78,
        UInt64N_Ranged = 79,
        UInt64 = 80,
        UInt64_Ranged = 81,
        UInt8N = 82,
        UInt8N_Ranged = 83,
        UInt8 = 84,
        UInt8_Ranged = 85,
        Enum = 86,
        EnumNull = 87,
        WildCard = 88,
        WildCardLoqui = 89,
        WildCardNull = 90,
        Ref = 91,
        Ref_NotNull = 92,
        Ref_Singleton = 93,
        RefGetter = 94,
        RefGetter_NotNull = 95,
        RefGetter_Singleton = 96,
        RefSetter = 97,
        RefSetter_NotNull = 98,
        RefSetter_Singleton = 99,
        List = 100,
        RefList = 101,
        Dict = 102,
        RefDict = 103,
        KeyRefDict = 104,
        ValRefDict = 105,
        DictKeyedValue = 106,
        NewField = 107,
    }
    #endregion

    #region Registration
    public class TestObject_Notifying_SubClass_Registration : ILoquiRegistration
    {
        public static readonly TestObject_Notifying_SubClass_Registration Instance = new TestObject_Notifying_SubClass_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTestsGenerated.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTestsGenerated.ProtocolKey,
            msgID: 4,
            version: 0);

        public const string GUID = "3c0cceee-3747-449d-ae3e-617f5c366ef7";

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 108;

        public static readonly Type MaskType = typeof(TestObject_Notifying_SubClass_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestObject_Notifying_SubClass_ErrorMask);

        public static readonly Type ClassType = typeof(TestObject_Notifying_SubClass);

        public static readonly Type GetterType = typeof(ITestObject_Notifying_SubClassGetter);

        public static readonly Type SetterType = typeof(ITestObject_Notifying_SubClass);

        public static readonly Type CommonType = typeof(TestObject_Notifying_SubClassCommon);

        public const string FullName = "Loqui.Tests.Generated.TestObject_Notifying_SubClass";

        public const string Name = "TestObject_Notifying_SubClass";

        public const string Namespace = "Loqui.Tests.Generated";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "NEWFIELD":
                    return (ushort)TestObject_Notifying_SubClass_FieldIndex.NewField;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return false;
                default:
                    return TestObject_Notifying_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return false;
                default:
                    return TestObject_Notifying_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return false;
                default:
                    return TestObject_Notifying_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return "NewField";
                default:
                    return TestObject_Notifying_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return false;
                default:
                    return TestObject_Notifying_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return false;
                default:
                    return TestObject_Notifying_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return typeof(Boolean);
                default:
                    return TestObject_Notifying_Registration.GetNthType(index);
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class TestObject_Notifying_SubClassCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            ITestObject_Notifying_SubClass item,
            ITestObject_Notifying_SubClassGetter rhs,
            ITestObject_Notifying_SubClassGetter def,
            ErrorMaskBuilder errorMask,
            TestObject_Notifying_SubClass_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            TestObject_NotifyingCommon.CopyFieldsFrom(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
            if (copyMask?.NewField ?? true)
            {
                errorMask?.PushIndex((int)TestObject_Notifying_SubClass_FieldIndex.NewField);
                item.NewField = rhs.NewField;
                errorMask?.PopIndex();
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestObject_Notifying_SubClass obj,
            NotifyingFireParameters cmds = null)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    TestObject_NotifyingCommon.SetNthObjectHasBeenSet(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestObject_Notifying_SubClass obj,
            NotifyingUnsetParameters cmds = null)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    obj.NewField = default(Boolean);
                    break;
                default:
                    TestObject_NotifyingCommon.UnsetNthObject(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestObject_Notifying_SubClass obj)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return true;
                default:
                    return TestObject_NotifyingCommon.GetNthObjectHasBeenSet(index, obj);
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestObject_Notifying_SubClassGetter obj)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return obj.NewField;
                default:
                    return TestObject_NotifyingCommon.GetNthObject(index, obj);
            }
        }

        public static void Clear(
            ITestObject_Notifying_SubClass item,
            NotifyingUnsetParameters cmds = null)
        {
            item.NewField = default(Boolean);
        }

        public static TestObject_Notifying_SubClass_Mask<bool> GetEqualsMask(
            this ITestObject_Notifying_SubClassGetter item,
            ITestObject_Notifying_SubClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TestObject_Notifying_SubClass_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            ITestObject_Notifying_SubClassGetter item,
            ITestObject_Notifying_SubClassGetter rhs,
            TestObject_Notifying_SubClass_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.NewField = item.NewField == rhs.NewField;
            TestObject_NotifyingCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString(
            this ITestObject_Notifying_SubClassGetter item,
            string name = null,
            TestObject_Notifying_SubClass_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITestObject_Notifying_SubClassGetter item,
            FileGeneration fg,
            string name = null,
            TestObject_Notifying_SubClass_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestObject_Notifying_SubClass)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestObject_Notifying_SubClass)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.NewField ?? true)
                {
                    fg.AppendLine($"NewField => {item.NewField}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITestObject_Notifying_SubClassGetter item,
            TestObject_Notifying_SubClass_Mask<bool?> checkMask)
        {
            return true;
        }

        public static TestObject_Notifying_SubClass_Mask<bool> GetHasBeenSetMask(ITestObject_Notifying_SubClassGetter item)
        {
            var ret = new TestObject_Notifying_SubClass_Mask<bool>();
            ret.NewField = true;
            return ret;
        }

        public static TestObject_Notifying_SubClass_FieldIndex? ConvertFieldIndex(TestObject_Notifying_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static TestObject_Notifying_SubClass_FieldIndex ConvertFieldIndex(TestObject_Notifying_FieldIndex index)
        {
            switch (index)
            {
                case TestObject_Notifying_FieldIndex.ByteArray:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.ByteArrayNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.ByteArrayNotNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.ByteArraySingleton:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.BoolN:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Bool:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.CharN:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Char:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.DateTimeNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.DateTime:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.DoubleN:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.DoubleN_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Double:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Double_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.FloatN:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.FloatN_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Float:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Float_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int16N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int16N_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int16:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int16_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int32N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int32N_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int32:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int32_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int64N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int64N_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int64:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int64_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int8N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int8N_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int8:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Int8_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Unsafe:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UnsafeLoqui:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UnsafeNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.P2IntN:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.P2Int:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.P3DoubleN:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.P3Double:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.P3IntN:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.P3Int:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.PercentN:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Percent:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeInt8N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeInt8:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeInt16N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeInt16:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeInt32N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeInt32:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeInt64N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeInt64:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeUInt8N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeUInt8:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeUInt16N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeUInt16:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeUInt32N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeUInt32:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeUInt64N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RangeUInt64:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.String:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.FilePath:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.FilePathNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.DirectoryPath:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.DirectoryPathNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UDoubleN:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UDoubleN_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UDouble:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UDouble_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt16N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt16N_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt16:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt16_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt32N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt32N_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt32:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt32_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt64N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt64N_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt64:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt64_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt8N:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt8N_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt8:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.UInt8_Ranged:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Enum:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.EnumNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.WildCard:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.WildCardLoqui:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.WildCardNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Ref:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Ref_NotNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Ref_Singleton:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RefGetter:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RefGetter_NotNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RefGetter_Singleton:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RefSetter:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RefSetter_NotNull:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RefSetter_Singleton:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.List:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RefList:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.Dict:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.RefDict:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.KeyRefDict:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.ValRefDict:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                case TestObject_Notifying_FieldIndex.DictKeyedValue:
                    return (TestObject_Notifying_SubClass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            ITestObject_Notifying_SubClassGetter item,
            bool doMasks,
            out TestObject_Notifying_SubClass_ErrorMask errorMask,
            TestObject_Notifying_SubClass_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestObject_Notifying_SubClass_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            ITestObject_Notifying_SubClassGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Loqui.Tests.Generated.TestObject_Notifying_SubClass");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Loqui.Tests.Generated.TestObject_Notifying_SubClass");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this ITestObject_Notifying_SubClassGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            TestObject_NotifyingCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            if ((translationMask?.GetShouldTranslate((int)TestObject_Notifying_SubClass_FieldIndex.NewField) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.NewField),
                    item: item.NewField,
                    fieldIndex: (int)TestObject_Notifying_SubClass_FieldIndex.NewField,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this TestObject_Notifying_SubClass item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestObject_Notifying_SubClassCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this TestObject_Notifying_SubClass item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "NewField":
                    if ((translationMask?.GetShouldTranslate((int)TestObject_Notifying_SubClass_FieldIndex.NewField) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestObject_Notifying_SubClass_FieldIndex.NewField);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean NewFieldParse,
                                errorMask: errorMask))
                            {
                                item.NewField = NewFieldParse;
                            }
                            else
                            {
                                item.NewField = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    TestObject_NotifyingCommon.FillPublicElement_Xml(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class TestObject_Notifying_SubClass_Mask<T> : TestObject_Notifying_Mask<T>, IMask<T>, IEquatable<TestObject_Notifying_SubClass_Mask<T>>
    {
        #region Ctors
        public TestObject_Notifying_SubClass_Mask()
        {
        }

        public TestObject_Notifying_SubClass_Mask(T initialValue)
        {
            this.NewField = initialValue;
        }
        #endregion

        #region Members
        public T NewField;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_Notifying_SubClass_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_Notifying_SubClass_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            if (!object.Equals(this.NewField, rhs.NewField)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.NewField?.GetHashCode());
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            if (!eval(this.NewField)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new TestObject_Notifying_SubClass_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestObject_Notifying_SubClass_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestObject_Notifying_SubClass_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
            obj.NewField = eval(this.NewField);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestObject_Notifying_SubClass_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestObject_Notifying_SubClass_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestObject_Notifying_SubClass_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.NewField ?? true)
                {
                    fg.AppendLine($"NewField => {NewField}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestObject_Notifying_SubClass_ErrorMask : TestObject_Notifying_ErrorMask, IErrorMask<TestObject_Notifying_SubClass_ErrorMask>
    {
        #region Members
        public Exception NewField;
        #endregion

        #region IErrorMask
        public override object GetNthMask(int index)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    return NewField;
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    this.NewField = ex;
                    break;
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            TestObject_Notifying_SubClass_FieldIndex enu = (TestObject_Notifying_SubClass_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_SubClass_FieldIndex.NewField:
                    this.NewField = (Exception)obj;
                    break;
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            if (NewField != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestObject_Notifying_SubClass_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
            fg.AppendLine($"NewField => {NewField}");
        }
        #endregion

        #region Combine
        public TestObject_Notifying_SubClass_ErrorMask Combine(TestObject_Notifying_SubClass_ErrorMask rhs)
        {
            var ret = new TestObject_Notifying_SubClass_ErrorMask();
            ret.NewField = this.NewField.Combine(rhs.NewField);
            return ret;
        }
        public static TestObject_Notifying_SubClass_ErrorMask Combine(TestObject_Notifying_SubClass_ErrorMask lhs, TestObject_Notifying_SubClass_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static TestObject_Notifying_SubClass_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new TestObject_Notifying_SubClass_ErrorMask();
        }
        #endregion

    }
    public class TestObject_Notifying_SubClass_CopyMask : TestObject_Notifying_CopyMask
    {
        public TestObject_Notifying_SubClass_CopyMask()
        {
        }

        public TestObject_Notifying_SubClass_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.NewField = defaultOn;
        }

        #region Members
        public bool NewField;
        #endregion

    }

    public class TestObject_Notifying_SubClass_TranslationMask : TestObject_Notifying_TranslationMask
    {
        #region Members
        public bool NewField;
        #endregion

        #region Ctors
        public TestObject_Notifying_SubClass_TranslationMask()
            : base()
        {
        }

        public TestObject_Notifying_SubClass_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
            this.NewField = defaultOn;
        }

        #endregion

        protected override void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            base.GetCrystal(ret);
            ret.Add((NewField, null));
        }
    }
    #endregion

    #endregion

}
