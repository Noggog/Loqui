/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Generated.Internals;
using Loqui.Tests.Generated;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Loqui.Tests.Generated
{
    #region Class
    public partial class TestGenericObject_SubClass<S, T, RBase, R> : 
        TestGenericObject<T, RBase, R>,
        ITestGenericObject_SubClass<S, T, RBase, R>,
        ILoquiObject<TestGenericObject_SubClass<S, T, RBase, R>>,
        ILoquiObjectSetter,
        IEquatable<TestGenericObject_SubClass<S, T, RBase, R>>
        where S : ObjectToRef, ILoquiObject<S>
        where T : ILoquiObject
        where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
        where R : ILoquiObject, ILoquiObject<>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TestGenericObject_SubClass_Registration.Instance;
        public new static TestGenericObject_SubClass_Registration Registration => TestGenericObject_SubClass_Registration.Instance;

        #region Ctor
        public TestGenericObject_SubClass()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => TestGenericObject_SubClassCommon.GetNthObject<S, T, RBase, R>(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => TestGenericObject_SubClassCommon.GetNthObjectHasBeenSet<S, T, RBase, R>(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => TestGenericObject_SubClassCommon.UnsetNthObject<S, T, RBase, R>(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestGenericObject_SubClassCommon.SetNthObjectHasBeenSet<S, T, RBase, R>(index, on, this);
        }

        #endregion

        IMask<bool> IEqualsMask<TestGenericObject_SubClass<S, T, RBase, R>>.GetEqualsMask(TestGenericObject_SubClass<S, T, RBase, R> rhs, EqualsMaskHelper.Include include) => TestGenericObject_SubClassCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ITestGenericObject_SubClassGetter<S, T, RBase, R>>.GetEqualsMask(ITestGenericObject_SubClassGetter<S, T, RBase, R> rhs, EqualsMaskHelper.Include include) => TestGenericObject_SubClassCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return TestGenericObject_SubClassCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestGenericObject_SubClass_Mask<bool> printMask = null)
        {
            return TestGenericObject_SubClassCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestGenericObject_SubClassCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public new TestGenericObject_SubClass_Mask<bool> GetHasBeenSetMask()
        {
            return TestGenericObject_SubClassCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericObject_SubClass<S, T, RBase, R> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericObject_SubClass<S, T, RBase, R> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static TestGenericObject_SubClass<S, T, RBase, R> Create_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            bool doMasks = true,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask = null)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static TestGenericObject_SubClass<S, T, RBase, R> Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new TestGenericObject_SubClass<S, T, RBase, R>();
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestGenericObject_SubClassCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static TestGenericObject_SubClass<S, T, RBase, R> Create_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            string path,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask = null)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestGenericObject_SubClass<S, T, RBase, R> Create_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            string path,
            ErrorMaskBuilder errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask = null)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TestGenericObject_SubClass<S, T, RBase, R> Create_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask = null)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestGenericObject_SubClass<S, T, RBase, R> Create_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask = null)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public virtual void CopyIn_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        protected override void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<TestGenericObject_SubClass<S, T, RBase, R>>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            string path,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public override void CopyIn_Xml<RBase_ErrMask, R_ErrMask>(
            XElement node,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            bool doMasks = true,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask = null,
            string name = null)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            string path,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public override void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml<S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public override void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        #region Base Class Trickdown Overrides
        public override void Write_Xml<RBase_ErrMask, R_ErrMask>(
            XElement node,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            bool doMasks = true,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        #endregion

        public override void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            TestGenericObject_SubClassCommon.Write_Xml<S, T, RBase, R, ObjectToRef_ErrorMask, RBase_ErrMask, ErrorMaskPlaceholder>(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        protected void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            string name = null)
        {
            TestGenericObject_SubClassCommon.Write_Xml<S, T, RBase, R, S_ErrMask, RBase_ErrMask, R_ErrMask>(
                writer: writer,
                item: this,
                errorMask: errorMask);
        }
        #endregion

        #endregion

        public TestGenericObject_SubClass<S, T, RBase, R> Copy<S_CopyMask, RBase_CopyMask, R_CopyMask>(
            TestGenericObject_SubClass_CopyMask<S_CopyMask, RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> def = null)
            where S_CopyMask : ObjectToRef_CopyMask, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            return TestGenericObject_SubClass<S, T, RBase, R>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestGenericObject_SubClass<S, T, RBase, R> Copy<S_CopyMask, RBase_CopyMask, R_CopyMask>(
            ITestGenericObject_SubClass<S, T, RBase, R> item,
            TestGenericObject_SubClass_CopyMask<S_CopyMask, RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> def = null)
            where S_CopyMask : ObjectToRef_CopyMask, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericObject_SubClass<S, T, RBase, R> ret;
            if (item.GetType().Equals(typeof(TestGenericObject_SubClass<S, T, RBase, R>)))
            {
                ret = new TestGenericObject_SubClass<S, T, RBase, R>();
            }
            else
            {
                ret = (TestGenericObject_SubClass<S, T, RBase, R>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<S_CopyMask, RBase_CopyMask, R_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static TestGenericObject_SubClass<S, T, RBase, R> Copy_ToLoqui<S_CopyMask, RBase_CopyMask, R_CopyMask>(
            ITestGenericObject_SubClassGetter<S, T, RBase, R> item,
            TestGenericObject_SubClass_CopyMask<S_CopyMask, RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> def = null)
            where S_CopyMask : ObjectToRef_CopyMask, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericObject_SubClass<S, T, RBase, R> ret;
            if (item.GetType().Equals(typeof(TestGenericObject_SubClass<S, T, RBase, R>)))
            {
                ret = new TestGenericObject_SubClass<S, T, RBase, R>() as TestGenericObject_SubClass<S, T, RBase, R>;
            }
            else
            {
                ret = (TestGenericObject_SubClass<S, T, RBase, R>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<S_CopyMask, RBase_CopyMask, R_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public override void CopyFieldsFrom<S_CopyMask, RBase_CopyMask, R_CopyMask>(
            ITestGenericObjectGetter<T, RBase, R> rhs,
            NotifyingFireParameters cmds = null)
            where S_CopyMask : ObjectToRef_CopyMask, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ObjectToRef_ErrorMask, ObjectToRef_ErrorMask, ErrorMaskPlaceholder, S_CopyMask, RBase_CopyMask, R_CopyMask>(
                rhs: (ITestGenericObject_SubClassGetter<S, T, RBase, R>)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom<S_CopyMask, RBase_CopyMask, R_CopyMask>(
            ITestGenericObject_SubClassGetter<S, T, RBase, R> rhs,
            TestGenericObject_SubClass_CopyMask<S_CopyMask, RBase_CopyMask, R_CopyMask> copyMask,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> def = null,
            NotifyingFireParameters cmds = null)
            where S_CopyMask : ObjectToRef_CopyMask, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ObjectToRef_ErrorMask, ObjectToRef_ErrorMask, ErrorMaskPlaceholder, S_CopyMask, RBase_CopyMask, R_CopyMask>(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom<S_ErrMask, RBase_ErrMask, R_ErrMask, S_CopyMask, RBase_CopyMask, R_CopyMask>(
            ITestGenericObject_SubClassGetter<S, T, RBase, R> rhs,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_SubClass_CopyMask<S_CopyMask, RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_CopyMask : ObjectToRef_CopyMask, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TestGenericObject_SubClassCommon.CopyFieldsFrom<S, T, RBase, R, S_CopyMask, RBase_CopyMask, R_CopyMask>(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom<S_CopyMask, RBase_CopyMask, R_CopyMask>(
            ITestGenericObject_SubClassGetter<S, T, RBase, R> rhs,
            ErrorMaskBuilder errorMask,
            TestGenericObject_SubClass_CopyMask<S_CopyMask, RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where S_CopyMask : ObjectToRef_CopyMask, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericObject_SubClassCommon.CopyFieldsFrom<S, T, RBase, R, S_CopyMask, RBase_CopyMask, R_CopyMask>(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestGenericObject_SubClassCommon.Clear(this, cmds);
        }


        public new static TestGenericObject_SubClass<S, T, RBase, R> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestGenericObject_SubClass<S, T, RBase, R>();
            foreach (var pair in fields)
            {
                CopyInInternal_TestGenericObject_SubClass(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_TestGenericObject_SubClass(TestGenericObject_SubClass<S, T, RBase, R> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestGenericObject_SubClass_FieldIndex enu))
            {
                CopyInInternal_TestGenericObject(obj, pair);
            }
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestGenericObject_SubClass<S, T, RBase, R> obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ITestGenericObject_SubClass<S, T, RBase, R> : ITestGenericObject_SubClassGetter<S, T, RBase, R>, ITestGenericObject<T, RBase, R>, ILoquiClass<ITestGenericObject_SubClass<S, T, RBase, R>, ITestGenericObject_SubClassGetter<S, T, RBase, R>>, ILoquiClass<TestGenericObject_SubClass<S, T, RBase, R>, ITestGenericObject_SubClassGetter<S, T, RBase, R>>
        where S : ObjectToRef, ILoquiObject<S>
        where T : ILoquiObject
        where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
        where R : ILoquiObject, ILoquiObject<>
    {
    }

    public partial interface ITestGenericObject_SubClassGetter<S, T, RBase, R> : ITestGenericObjectGetter<T, RBase, R>
        where S : ObjectToRef, ILoquiObject<S>
        where T : ILoquiObject
        where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
        where R : ILoquiObject, ILoquiObject<>
    {

    }

    #endregion

}

namespace Loqui.Tests.Generated.Internals
{
    #region Field Index
    public enum TestGenericObject_SubClass_FieldIndex
    {
        RefBase = 0,
        Ref = 1,
        RefList = 2,
    }
    #endregion

    #region Registration
    public class TestGenericObject_SubClass_Registration : ILoquiRegistration
    {
        public static readonly TestGenericObject_SubClass_Registration Instance = new TestGenericObject_SubClass_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTestsGenerated.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTestsGenerated.ProtocolKey,
            msgID: 6,
            version: 0);

        public const string GUID = "dfe7e700-e6c2-4772-9965-80cd875e7a21";

        public const ushort AdditionalFieldCount = 0;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(TestGenericObject_SubClass_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestGenericObject_SubClass_ErrorMask<, , >);

        public static readonly Type ClassType = typeof(TestGenericObject_SubClass<,,,>);

        public static readonly Type GetterType = typeof(ITestGenericObject_SubClassGetter<,,,>);

        public static readonly Type SetterType = typeof(ITestGenericObject_SubClass<,,,>);

        public static readonly Type CommonType = typeof(TestGenericObject_SubClassCommon);

        public const string FullName = "Loqui.Tests.Generated.TestGenericObject_SubClass";

        public const string Name = "TestGenericObject_SubClass";

        public const string Namespace = "Loqui.Tests.Generated";

        public const byte GenericCount = 4;

        public static readonly Type GenericRegistrationType = typeof(TestGenericObject_SubClass_Registration<,,,>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class TestGenericObject_SubClass_Registration<S, T, RBase, R> : TestGenericObject_SubClass_Registration
        where S : ObjectToRef, ILoquiObject<S>
        where T : ILoquiObject
        where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
        where R : ILoquiObject, ILoquiObject<>
    {
        public static readonly TestGenericObject_SubClass_Registration<S, T, RBase, R> GenericInstance = new TestGenericObject_SubClass_Registration<S, T, RBase, R>();

        public new static Type GetNthType(ushort index)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthType(index);
            }
        }

    }
    #endregion

    #region Extensions
    public static partial class TestGenericObject_SubClassCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<S, T, RBase, R, S_CopyMask, RBase_CopyMask, R_CopyMask>(
            ITestGenericObject_SubClass<S, T, RBase, R> item,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> rhs,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> def,
            ErrorMaskBuilder errorMask,
            TestGenericObject_SubClass_CopyMask<S_CopyMask, RBase_CopyMask, R_CopyMask> copyMask,
            NotifyingFireParameters cmds = null)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
            where S_CopyMask : ObjectToRef_CopyMask, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericObjectCommon.CopyFieldsFrom<RBase_ErrMask, RBase_CopyMask>(
                item,
                rhs,
                def,
                errorMask,
                copyMask,
                cmds);
        }

        #endregion

        public static void SetNthObjectHasBeenSet<S, T, RBase, R>(
            ushort index,
            bool on,
            ITestGenericObject_SubClass<S, T, RBase, R> obj,
            NotifyingFireParameters cmds = null)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    TestGenericObjectCommon.SetNthObjectHasBeenSet<T, RBase, R>(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject<S, T, RBase, R>(
            ushort index,
            ITestGenericObject_SubClass<S, T, RBase, R> obj,
            NotifyingUnsetParameters cmds = null)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    TestGenericObjectCommon.UnsetNthObject<T, RBase, R>(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet<S, T, RBase, R>(
            ushort index,
            ITestGenericObject_SubClass<S, T, RBase, R> obj)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObjectCommon.GetNthObjectHasBeenSet<T, RBase, R>(index, obj);
            }
        }

        public static object GetNthObject<S, T, RBase, R>(
            ushort index,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> obj)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObjectCommon.GetNthObject<T, RBase, R>(index, obj);
            }
        }

        public static void Clear<S, T, RBase, R>(
            ITestGenericObject_SubClass<S, T, RBase, R> item,
            NotifyingUnsetParameters cmds = null)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
        }

        public static TestGenericObject_SubClass_Mask<bool> GetEqualsMask<S, T, RBase, R>(
            this ITestGenericObject_SubClassGetter<S, T, RBase, R> item,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            var ret = new TestGenericObject_SubClass_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask<S, T, RBase, R>(
            ITestGenericObject_SubClassGetter<S, T, RBase, R> item,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> rhs,
            TestGenericObject_SubClass_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            if (rhs == null) return;
            TestGenericObjectCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString<S, T, RBase, R>(
            this ITestGenericObject_SubClassGetter<S, T, RBase, R> item,
            string name = null,
            TestGenericObject_SubClass_Mask<bool> printMask = null)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString<S, T, RBase, R>(
            this ITestGenericObject_SubClassGetter<S, T, RBase, R> item,
            FileGeneration fg,
            string name = null,
            TestGenericObject_SubClass_Mask<bool> printMask = null)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestGenericObject_SubClass<S, T, RBase, R>)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestGenericObject_SubClass<S, T, RBase, R>)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet<S, T, RBase, R>(
            this ITestGenericObject_SubClassGetter<S, T, RBase, R> item,
            TestGenericObject_SubClass_Mask<bool?> checkMask)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            return true;
        }

        public static TestGenericObject_SubClass_Mask<bool> GetHasBeenSetMask<S, T, RBase, R>(ITestGenericObject_SubClassGetter<S, T, RBase, R> item)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            var ret = new TestGenericObject_SubClass_Mask<bool>();
            return ret;
        }

        public static TestGenericObject_SubClass_FieldIndex? ConvertFieldIndex(TestGenericObject_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static TestGenericObject_SubClass_FieldIndex ConvertFieldIndex(TestGenericObject_FieldIndex index)
        {
            switch (index)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return (TestGenericObject_SubClass_FieldIndex)((int)index);
                case TestGenericObject_FieldIndex.Ref:
                    return (TestGenericObject_SubClass_FieldIndex)((int)index);
                case TestGenericObject_FieldIndex.RefList:
                    return (TestGenericObject_SubClass_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml<S, T, RBase, R, S_ErrMask, RBase_ErrMask, R_ErrMask, S_TranslMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> item,
            bool doMasks,
            out TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> translationMask,
            string name = null)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
            where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml<S, T, RBase, R>(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void Write_Xml<S, T, RBase, R>(
            XElement node,
            ITestGenericObject_SubClassGetter<S, T, RBase, R> item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            var elem = new XElement(name ?? "Loqui.Tests.Generated.TestGenericObject_SubClass");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Loqui.Tests.Generated.TestGenericObject_SubClass");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml<S, T, RBase, R>(
            this ITestGenericObject_SubClassGetter<S, T, RBase, R> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            TestGenericObjectCommon.WriteToNode_Xml(
                item: item,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }

        public static void FillPublic_Xml<S, T, RBase, R>(
            this TestGenericObject_SubClass<S, T, RBase, R> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestGenericObject_SubClassCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml<S, T, RBase, R>(
            this TestGenericObject_SubClass<S, T, RBase, R> item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where S : ObjectToRef, ILoquiObject<S>
            where T : ILoquiObject
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<>
            where R : ILoquiObject, ILoquiObject<>
        {
            switch (name)
            {
                default:
                    TestGenericObjectCommon.FillPublicElement_Xml<RBase_ErrMask, R_ErrMask>(
                        item: item,
                        node: node,
                        name: name,
                        errorMask: errorMask,
                        translationMask: translationMask);
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class TestGenericObject_SubClass_Mask<T> : TestGenericObject_Mask<T>, IMask<T>, IEquatable<TestGenericObject_SubClass_Mask<T>>
    {
        #region Ctors
        public TestGenericObject_SubClass_Mask()
        {
        }

        public TestGenericObject_SubClass_Mask(T initialValue)
        {
        }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericObject_SubClass_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericObject_SubClass_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new TestGenericObject_SubClass_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestGenericObject_SubClass_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestGenericObject_SubClass_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestGenericObject_SubClass_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestGenericObject_SubClass_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestGenericObject_SubClass_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> : TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>, IErrorMask<TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>>
        where S_ErrMask : ObjectToRef_ErrorMask, IErrorMask<S_ErrMask>, new()
        where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
    {
        #region IErrorMask
        public override object GetNthMask(int index)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    return base.GetNthMask(index);
            }
        }

        public override void SetNthException(int index, Exception ex)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            TestGenericObject_SubClass_FieldIndex enu = (TestGenericObject_SubClass_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestGenericObject_SubClass_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
        }
        #endregion

        #region Combine
        public TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> Combine(TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> rhs)
        {
            var ret = new TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>();
            return ret;
        }
        public static TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> Combine(TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> lhs, TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask> Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new TestGenericObject_SubClass_ErrorMask<S_ErrMask, RBase_ErrMask, R_ErrMask>();
        }
        #endregion

    }
    public class TestGenericObject_SubClass_CopyMask<S_CopyMask, RBase_CopyMask, R_CopyMask> : TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask>
        where S_CopyMask : ObjectToRef_CopyMask, new()
        where RBase_CopyMask : ObjectToRef_CopyMask, new()
        where R_CopyMask : class, new()
    {
        public TestGenericObject_SubClass_CopyMask()
        {
        }

        public TestGenericObject_SubClass_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
        }

    }

    public class TestGenericObject_SubClass_TranslationMask<S_TranslMask, RBase_TranslMask, R_TranslMask> : TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask>
        where S_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
        where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
        where R_TranslMask : class, ITranslationMask, new()
    {
        #region Ctors
        public TestGenericObject_SubClass_TranslationMask()
            : base()
        {
        }

        public TestGenericObject_SubClass_TranslationMask(bool defaultOn)
            : base(defaultOn)
        {
        }

        #endregion

    }
    #endregion

    #endregion

}
