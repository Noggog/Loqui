/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Generated.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Loqui.Tests.Generated
{
    #region Class
    public partial class ObjectToRef : 
        IObjectToRef,
        ILoquiObject<ObjectToRef>,
        ILoquiObjectSetter,
        IEquatable<ObjectToRef>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectToRef_Registration.Instance;
        public static ObjectToRef_Registration Registration => ObjectToRef_Registration.Instance;

        #region Ctor
        public ObjectToRef()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region KeyField
        protected IHasBeenSetItem<Int32> _KeyField = HasBeenSetItem.Factory<Int32>(markAsSet: false);
        public IHasBeenSetItem<Int32> KeyField_Property => _KeyField;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Int32 KeyField
        {
            get => this._KeyField.Item;
            set => this._KeyField.Set(value);
        }
        Int32 IObjectToRefGetter.KeyField => this.KeyField;
        protected void UnsetKeyField()
        {
            _hasBeenSetTracker[(int)ObjectToRef_FieldIndex.KeyField] = false;
            KeyField = default(Int32);
        }
        #endregion
        #region SomeField
        protected IHasBeenSetItem<Boolean> _SomeField = HasBeenSetItem.Factory<Boolean>(markAsSet: false);
        public IHasBeenSetItem<Boolean> SomeField_Property => _SomeField;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public Boolean SomeField
        {
            get => this._SomeField.Item;
            set => this._SomeField.Set(value);
        }
        Boolean IObjectToRefGetter.SomeField => this.SomeField;
        protected void UnsetSomeField()
        {
            _hasBeenSetTracker[(int)ObjectToRef_FieldIndex.SomeField] = false;
            SomeField = default(Boolean);
        }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => ObjectToRefCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => ObjectToRefCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => ObjectToRefCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            ObjectToRefCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<ObjectToRef>.GetEqualsMask(ObjectToRef rhs, EqualsMaskHelper.Include include) => ObjectToRefCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<IObjectToRefGetter>.GetEqualsMask(IObjectToRefGetter rhs, EqualsMaskHelper.Include include) => ObjectToRefCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return ObjectToRefCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            ObjectToRef_Mask<bool> printMask = null)
        {
            return ObjectToRefCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            ObjectToRefCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public ObjectToRef_Mask<bool> GetHasBeenSetMask()
        {
            return ObjectToRefCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is ObjectToRef rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ObjectToRef rhs)
        {
            if (rhs == null) return false;
            if (KeyField_Property.HasBeenSet != rhs.KeyField_Property.HasBeenSet) return false;
            if (KeyField_Property.HasBeenSet)
            {
                if (this.KeyField != rhs.KeyField) return false;
            }
            if (SomeField_Property.HasBeenSet != rhs.SomeField_Property.HasBeenSet) return false;
            if (SomeField_Property.HasBeenSet)
            {
                if (this.SomeField != rhs.SomeField) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (KeyField_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(KeyField).CombineHashCode(ret);
            }
            if (SomeField_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(SomeField).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static ObjectToRef Create_Xml(
            XElement node,
            ObjectToRef_TranslationMask translationMask = null)
        {
            return Create_Xml(
                node: node,
                errorMask: null,
                translationMask: translationMask?.GetCrystal());
        }

        [DebuggerStepThrough]
        public static ObjectToRef Create_Xml(
            XElement node,
            out ObjectToRef_ErrorMask errorMask,
            bool doMasks = true,
            ObjectToRef_TranslationMask translationMask = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = ObjectToRef_ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }

        public static ObjectToRef Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new ObjectToRef();
            try
            {
                foreach (var elem in node.Elements())
                {
                    ObjectToRefCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static ObjectToRef Create_Xml(
            string path,
            ObjectToRef_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static ObjectToRef Create_Xml(
            string path,
            out ObjectToRef_ErrorMask errorMask,
            ObjectToRef_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ObjectToRef Create_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            ObjectToRef_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static ObjectToRef Create_Xml(
            Stream stream,
            ObjectToRef_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                translationMask: translationMask);
        }

        public static ObjectToRef Create_Xml(
            Stream stream,
            out ObjectToRef_ErrorMask errorMask,
            ObjectToRef_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static ObjectToRef Create_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            ObjectToRef_TranslationMask translationMask = null)
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public void CopyIn_Xml(
            XElement node,
            NotifyingFireParameters cmds = null)
        {
            CopyIn_Xml_Internal(
                node: node,
                errorMask: null,
                translationMask: null,
                cmds: cmds);
        }

        public virtual void CopyIn_Xml(
            XElement node,
            out ObjectToRef_ErrorMask errorMask,
            ObjectToRef_TranslationMask translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = ObjectToRef_ErrorMask.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<ObjectToRef>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            string path,
            out ObjectToRef_ErrorMask errorMask,
            ObjectToRef_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml(
            Stream stream,
            NotifyingFireParameters cmds = null)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                cmds: cmds);
        }

        public void CopyIn_Xml(
            Stream stream,
            out ObjectToRef_ErrorMask errorMask,
            ObjectToRef_TranslationMask translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml(
            XElement node,
            out ObjectToRef_ErrorMask errorMask,
            bool doMasks = true,
            ObjectToRef_TranslationMask translationMask = null,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ObjectToRef_ErrorMask.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml(
            string path,
            out ObjectToRef_ErrorMask errorMask,
            ObjectToRef_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml(
            Stream stream,
            out ObjectToRef_ErrorMask errorMask,
            ObjectToRef_TranslationMask translationMask = null,
            bool doMasks = true,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml(
            XElement node,
            string name = null,
            ObjectToRef_TranslationMask translationMask = null)
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            ObjectToRefCommon.Write_Xml(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((ObjectToRef_FieldIndex)index)
            {
                case ObjectToRef_FieldIndex.KeyField:
                case ObjectToRef_FieldIndex.SomeField:
                    return _hasBeenSetTracker[index];
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public ObjectToRef Copy(
            ObjectToRef_CopyMask copyMask = null,
            IObjectToRefGetter def = null)
        {
            return ObjectToRef.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static ObjectToRef Copy(
            IObjectToRef item,
            ObjectToRef_CopyMask copyMask = null,
            IObjectToRefGetter def = null)
        {
            ObjectToRef ret;
            if (item.GetType().Equals(typeof(ObjectToRef)))
            {
                ret = new ObjectToRef();
            }
            else
            {
                ret = (ObjectToRef)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static ObjectToRef Copy_ToLoqui(
            IObjectToRefGetter item,
            ObjectToRef_CopyMask copyMask = null,
            IObjectToRefGetter def = null)
        {
            ObjectToRef ret;
            if (item.GetType().Equals(typeof(ObjectToRef)))
            {
                ret = new ObjectToRef() as ObjectToRef;
            }
            else
            {
                ret = (ObjectToRef)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom(
            IObjectToRefGetter rhs,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: (IObjectToRefGetter)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IObjectToRefGetter rhs,
            ObjectToRef_CopyMask copyMask,
            IObjectToRefGetter def = null,
            NotifyingFireParameters cmds = null)
        {
            this.CopyFieldsFrom(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            IObjectToRefGetter rhs,
            out ObjectToRef_ErrorMask errorMask,
            ObjectToRef_CopyMask copyMask = null,
            IObjectToRefGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectToRefCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = ObjectToRef_ErrorMask.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom(
            IObjectToRefGetter rhs,
            ErrorMaskBuilder errorMask,
            ObjectToRef_CopyMask copyMask = null,
            IObjectToRefGetter def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
        {
            ObjectToRefCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    this._KeyField.Set((Int32)obj);
                    break;
                case ObjectToRef_FieldIndex.SomeField:
                    this._SomeField.Set((Boolean)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            ObjectToRefCommon.Clear(this, cmds);
        }


        public static ObjectToRef Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new ObjectToRef();
            foreach (var pair in fields)
            {
                CopyInInternal_ObjectToRef(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_ObjectToRef(ObjectToRef obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out ObjectToRef_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    obj._KeyField.Set((Int32)pair.Value);
                    break;
                case ObjectToRef_FieldIndex.SomeField:
                    obj._SomeField.Set((Boolean)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, ObjectToRef obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectToRef : IObjectToRefGetter, ILoquiClass<IObjectToRef, IObjectToRefGetter>, ILoquiClass<ObjectToRef, IObjectToRefGetter>
    {
        new Int32 KeyField { get; set; }
        new IHasBeenSetItem<Int32> KeyField_Property { get; }

        new Boolean SomeField { get; set; }
        new IHasBeenSetItem<Boolean> SomeField_Property { get; }

    }

    public partial interface IObjectToRefGetter : ILoquiObject
    {
        #region KeyField
        Int32 KeyField { get; }
        IHasBeenSetItemGetter<Int32> KeyField_Property { get; }

        #endregion
        #region SomeField
        Boolean SomeField { get; }
        IHasBeenSetItemGetter<Boolean> SomeField_Property { get; }

        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Generated.Internals
{
    #region Field Index
    public enum ObjectToRef_FieldIndex
    {
        KeyField = 0,
        SomeField = 1,
    }
    #endregion

    #region Registration
    public class ObjectToRef_Registration : ILoquiRegistration
    {
        public static readonly ObjectToRef_Registration Instance = new ObjectToRef_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTestsGenerated.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTestsGenerated.ProtocolKey,
            msgID: 3,
            version: 0);

        public const string GUID = "39bed53a-0f81-4fdc-8ce4-84563c3125cf";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(ObjectToRef_Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectToRef_ErrorMask);

        public static readonly Type ClassType = typeof(ObjectToRef);

        public static readonly Type GetterType = typeof(IObjectToRefGetter);

        public static readonly Type SetterType = typeof(IObjectToRef);

        public static readonly Type CommonType = typeof(ObjectToRefCommon);

        public const string FullName = "Loqui.Tests.Generated.ObjectToRef";

        public const string Name = "ObjectToRef";

        public const string Namespace = "Loqui.Tests.Generated";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "KEYFIELD":
                    return (ushort)ObjectToRef_FieldIndex.KeyField;
                case "SOMEFIELD":
                    return (ushort)ObjectToRef_FieldIndex.SomeField;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                case ObjectToRef_FieldIndex.SomeField:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                case ObjectToRef_FieldIndex.SomeField:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                case ObjectToRef_FieldIndex.SomeField:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    return "KeyField";
                case ObjectToRef_FieldIndex.SomeField:
                    return "SomeField";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                case ObjectToRef_FieldIndex.SomeField:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                case ObjectToRef_FieldIndex.SomeField:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    return typeof(Int32);
                case ObjectToRef_FieldIndex.SomeField:
                    return typeof(Boolean);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class ObjectToRefCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            IObjectToRef item,
            IObjectToRefGetter rhs,
            IObjectToRefGetter def,
            ErrorMaskBuilder errorMask,
            ObjectToRef_CopyMask copyMask,
            NotifyingFireParameters cmds = null)
        {
            if (copyMask?.KeyField ?? true)
            {
                errorMask?.PushIndex((int)ObjectToRef_FieldIndex.KeyField);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.KeyField,
                        rhsHasBeenSet: rhs.KeyField_Property.HasBeenSet,
                        defItem: def?.KeyField ?? default(Int32),
                        defHasBeenSet: def?.KeyField_Property.HasBeenSet ?? false,
                        outRhsItem: out var rhsKeyFieldItem,
                        outDefItem: out var defKeyFieldItem))
                    {
                        item.KeyField = rhsKeyFieldItem;
                    }
                    else
                    {
                        item.KeyField_Property.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.SomeField ?? true)
            {
                errorMask?.PushIndex((int)ObjectToRef_FieldIndex.SomeField);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.SomeField,
                        rhsHasBeenSet: rhs.SomeField_Property.HasBeenSet,
                        defItem: def?.SomeField ?? default(Boolean),
                        defHasBeenSet: def?.SomeField_Property.HasBeenSet ?? false,
                        outRhsItem: out var rhsSomeFieldItem,
                        outDefItem: out var defSomeFieldItem))
                    {
                        item.SomeField = rhsSomeFieldItem;
                    }
                    else
                    {
                        item.SomeField_Property.Unset();
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            IObjectToRef obj,
            NotifyingFireParameters cmds = null)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    obj.KeyField_Property.HasBeenSet = on;
                    break;
                case ObjectToRef_FieldIndex.SomeField:
                    obj.SomeField_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            IObjectToRef obj,
            NotifyingUnsetParameters cmds = null)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    obj.KeyField_Property.Unset(cmds.ToUnsetParams());
                    break;
                case ObjectToRef_FieldIndex.SomeField:
                    obj.SomeField_Property.Unset(cmds.ToUnsetParams());
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            IObjectToRef obj)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    return obj.KeyField_Property.HasBeenSet;
                case ObjectToRef_FieldIndex.SomeField:
                    return obj.SomeField_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            IObjectToRefGetter obj)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    return obj.KeyField;
                case ObjectToRef_FieldIndex.SomeField:
                    return obj.SomeField;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            IObjectToRef item,
            NotifyingUnsetParameters cmds = null)
        {
            item.KeyField_Property.Unset(cmds.ToUnsetParams());
            item.SomeField_Property.Unset(cmds.ToUnsetParams());
        }

        public static ObjectToRef_Mask<bool> GetEqualsMask(
            this IObjectToRefGetter item,
            IObjectToRefGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectToRef_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask(
            IObjectToRefGetter item,
            IObjectToRefGetter rhs,
            ObjectToRef_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            if (rhs == null) return;
            ret.KeyField = item.KeyField_Property.Equals(rhs.KeyField_Property, (l, r) => l == r);
            ret.SomeField = item.SomeField_Property.Equals(rhs.SomeField_Property, (l, r) => l == r);
        }

        public static string ToString(
            this IObjectToRefGetter item,
            string name = null,
            ObjectToRef_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this IObjectToRefGetter item,
            FileGeneration fg,
            string name = null,
            ObjectToRef_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(ObjectToRef)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(ObjectToRef)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.KeyField ?? true)
                {
                    fg.AppendLine($"KeyField => {item.KeyField}");
                }
                if (printMask?.SomeField ?? true)
                {
                    fg.AppendLine($"SomeField => {item.SomeField}");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this IObjectToRefGetter item,
            ObjectToRef_Mask<bool?> checkMask)
        {
            if (checkMask.KeyField.HasValue && checkMask.KeyField.Value != item.KeyField_Property.HasBeenSet) return false;
            if (checkMask.SomeField.HasValue && checkMask.SomeField.Value != item.SomeField_Property.HasBeenSet) return false;
            return true;
        }

        public static ObjectToRef_Mask<bool> GetHasBeenSetMask(IObjectToRefGetter item)
        {
            var ret = new ObjectToRef_Mask<bool>();
            ret.KeyField = item.KeyField_Property.HasBeenSet;
            ret.SomeField = item.SomeField_Property.HasBeenSet;
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml(
            XElement node,
            IObjectToRefGetter item,
            bool doMasks,
            out ObjectToRef_ErrorMask errorMask,
            ObjectToRef_TranslationMask translationMask,
            string name = null)
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = ObjectToRef_ErrorMask.Factory(errorMaskBuilder);
        }

        public static void Write_Xml(
            XElement node,
            IObjectToRefGetter item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var elem = new XElement(name ?? "Loqui.Tests.Generated.ObjectToRef");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Loqui.Tests.Generated.ObjectToRef");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml(
            this IObjectToRefGetter item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            if (item.KeyField_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ObjectToRef_FieldIndex.KeyField) ?? true))
            {
                Int32XmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.KeyField),
                    item: item.KeyField,
                    fieldIndex: (int)ObjectToRef_FieldIndex.KeyField,
                    errorMask: errorMask);
            }
            if (item.SomeField_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)ObjectToRef_FieldIndex.SomeField) ?? true))
            {
                BooleanXmlTranslation.Instance.Write(
                    node: node,
                    name: nameof(item.SomeField),
                    item: item.SomeField,
                    fieldIndex: (int)ObjectToRef_FieldIndex.SomeField,
                    errorMask: errorMask);
            }
        }

        public static void FillPublic_Xml(
            this ObjectToRef item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    ObjectToRefCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml(
            this ObjectToRef item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            switch (name)
            {
                case "KeyField":
                    if ((translationMask?.GetShouldTranslate((int)ObjectToRef_FieldIndex.KeyField) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ObjectToRef_FieldIndex.KeyField);
                            if (Int32XmlTranslation.Instance.Parse(
                                node: node,
                                item: out Int32 KeyFieldParse,
                                errorMask: errorMask))
                            {
                                item.KeyField = KeyFieldParse;
                            }
                            else
                            {
                                item.KeyField = default(Int32);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "SomeField":
                    if ((translationMask?.GetShouldTranslate((int)ObjectToRef_FieldIndex.SomeField) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)ObjectToRef_FieldIndex.SomeField);
                            if (BooleanXmlTranslation.Instance.Parse(
                                node: node,
                                item: out Boolean SomeFieldParse,
                                errorMask: errorMask))
                            {
                                item.SomeField = SomeFieldParse;
                            }
                            else
                            {
                                item.SomeField = default(Boolean);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class ObjectToRef_Mask<T> : IMask<T>, IEquatable<ObjectToRef_Mask<T>>
    {
        #region Ctors
        public ObjectToRef_Mask()
        {
        }

        public ObjectToRef_Mask(T initialValue)
        {
            this.KeyField = initialValue;
            this.SomeField = initialValue;
        }
        #endregion

        #region Members
        public T KeyField;
        public T SomeField;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is ObjectToRef_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(ObjectToRef_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.KeyField, rhs.KeyField)) return false;
            if (!object.Equals(this.SomeField, rhs.SomeField)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.KeyField?.GetHashCode());
            ret = ret.CombineHashCode(this.SomeField?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.KeyField)) return false;
            if (!eval(this.SomeField)) return false;
            return true;
        }
        #endregion

        #region Translate
        public ObjectToRef_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new ObjectToRef_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(ObjectToRef_Mask<R> obj, Func<T, R> eval)
        {
            obj.KeyField = eval(this.KeyField);
            obj.SomeField = eval(this.SomeField);
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(ObjectToRef_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, ObjectToRef_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(ObjectToRef_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.KeyField ?? true)
                {
                    fg.AppendLine($"KeyField => {KeyField}");
                }
                if (printMask?.SomeField ?? true)
                {
                    fg.AppendLine($"SomeField => {SomeField}");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class ObjectToRef_ErrorMask : IErrorMask, IErrorMask<ObjectToRef_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception KeyField;
        public Exception SomeField;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    return KeyField;
                case ObjectToRef_FieldIndex.SomeField:
                    return SomeField;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    this.KeyField = ex;
                    break;
                case ObjectToRef_FieldIndex.SomeField:
                    this.SomeField = ex;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            ObjectToRef_FieldIndex enu = (ObjectToRef_FieldIndex)index;
            switch (enu)
            {
                case ObjectToRef_FieldIndex.KeyField:
                    this.KeyField = (Exception)obj;
                    break;
                case ObjectToRef_FieldIndex.SomeField:
                    this.SomeField = (Exception)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (KeyField != null) return true;
            if (SomeField != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("ObjectToRef_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"KeyField => {KeyField}");
            fg.AppendLine($"SomeField => {SomeField}");
        }
        #endregion

        #region Combine
        public ObjectToRef_ErrorMask Combine(ObjectToRef_ErrorMask rhs)
        {
            var ret = new ObjectToRef_ErrorMask();
            ret.KeyField = this.KeyField.Combine(rhs.KeyField);
            ret.SomeField = this.SomeField.Combine(rhs.SomeField);
            return ret;
        }
        public static ObjectToRef_ErrorMask Combine(ObjectToRef_ErrorMask lhs, ObjectToRef_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static ObjectToRef_ErrorMask Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new ObjectToRef_ErrorMask();
        }
        #endregion

    }
    public class ObjectToRef_CopyMask
    {
        public ObjectToRef_CopyMask()
        {
        }

        public ObjectToRef_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.KeyField = defaultOn;
            this.SomeField = defaultOn;
        }

        #region Members
        public bool KeyField;
        public bool SomeField;
        #endregion

    }

    public class ObjectToRef_TranslationMask : ITranslationMask
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool KeyField;
        public bool SomeField;
        #endregion

        #region Ctors
        public ObjectToRef_TranslationMask()
        {
        }

        public ObjectToRef_TranslationMask(bool defaultOn)
        {
            this.KeyField = defaultOn;
            this.SomeField = defaultOn;
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((KeyField, null));
            ret.Add((SomeField, null));
        }
    }
    #endregion

    #endregion

}
