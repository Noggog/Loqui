/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Generated.Internals;
using Loqui.Tests.Generated;
using DynamicData;
using CSharpExt.Rx;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Loqui.Tests.Generated
{
    #region Class
    public partial class TestGenericObject<T, RBase, R> : 
        ITestGenericObject<T, RBase, R>,
        ILoquiObject<TestGenericObject<T, RBase, R>>,
        ILoquiObjectSetter,
        IEquatable<TestGenericObject<T, RBase, R>>
        where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
        where R : ILoquiObject, ILoquiObject<R>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TestGenericObject_Registration.Instance;
        public static TestGenericObject_Registration Registration => TestGenericObject_Registration.Instance;

        #region Ctor
        public TestGenericObject()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region RefBase
        protected IHasBeenSetItem<RBase> _RefBase = HasBeenSetItem.Factory<RBase>(markAsSet: false);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public RBase RefBase
        {
            get => this._RefBase.Item;
            set => this._RefBase.Item = value;
        }
        public IHasBeenSetItem<RBase> RefBase_Property => _RefBase;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RBase ITestGenericObjectGetter<T, RBase, R>.RefBase => this.RefBase;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHasBeenSetItemGetter<RBase> ITestGenericObjectGetter<T, RBase, R>.RefBase_Property => this._RefBase;
        #endregion
        #region Ref
        protected IHasBeenSetItem<R> _Ref = HasBeenSetItem.Factory<R>(markAsSet: false);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public R Ref
        {
            get => this._Ref.Item;
            set => this._Ref.Item = value;
        }
        public IHasBeenSetItem<R> Ref_Property => _Ref;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        R ITestGenericObjectGetter<T, RBase, R>.Ref => this.Ref;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IHasBeenSetItemGetter<R> ITestGenericObjectGetter<T, RBase, R>.Ref_Property => this._Ref;
        #endregion
        #region RefList
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SourceSetList<RBase> _RefList = new SourceSetList<RBase>();
        public ISourceSetList<RBase> RefList => _RefList;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public IEnumerable<RBase> RefListEnumerable
        {
            get => _RefList.Items;
            set => _RefList.SetTo(value);
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISourceSetList<RBase> ITestGenericObject<T, RBase, R>.RefList => _RefList;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObservableSetList<RBase> ITestGenericObjectGetter<T, RBase, R>.RefList => _RefList;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected virtual object GetNthObject(ushort index) => TestGenericObjectCommon.GetNthObject<T, RBase, R>(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected virtual bool GetNthObjectHasBeenSet(ushort index) => TestGenericObjectCommon.GetNthObjectHasBeenSet<T, RBase, R>(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected virtual void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => TestGenericObjectCommon.UnsetNthObject<T, RBase, R>(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected virtual void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestGenericObjectCommon.SetNthObjectHasBeenSet<T, RBase, R>(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<TestGenericObject<T, RBase, R>>.GetEqualsMask(TestGenericObject<T, RBase, R> rhs, EqualsMaskHelper.Include include) => TestGenericObjectCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ITestGenericObjectGetter<T, RBase, R>>.GetEqualsMask(ITestGenericObjectGetter<T, RBase, R> rhs, EqualsMaskHelper.Include include) => TestGenericObjectCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return TestGenericObjectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestGenericObject_Mask<bool> printMask = null)
        {
            return TestGenericObjectCommon.ToString(this, name: name, printMask: printMask);
        }

        public virtual void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestGenericObjectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public TestGenericObject_Mask<bool> GetHasBeenSetMask()
        {
            return TestGenericObjectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericObject<T, RBase, R> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericObject<T, RBase, R> rhs)
        {
            if (rhs == null) return false;
            if (RefBase_Property.HasBeenSet != rhs.RefBase_Property.HasBeenSet) return false;
            if (RefBase_Property.HasBeenSet)
            {
                if (!object.Equals(this.RefBase, rhs.RefBase)) return false;
            }
            if (Ref_Property.HasBeenSet != rhs.Ref_Property.HasBeenSet) return false;
            if (Ref_Property.HasBeenSet)
            {
                if (!object.Equals(this.Ref, rhs.Ref)) return false;
            }
            if (RefList.HasBeenSet != rhs.RefList.HasBeenSet) return false;
            if (RefList.HasBeenSet)
            {
                if (!this.RefList.SequenceEqual(rhs.RefList)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (RefBase_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefBase).CombineHashCode(ret);
            }
            if (Ref_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ref).CombineHashCode(ret);
            }
            if (RefList.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefList).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static TestGenericObject<T, RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            bool doMasks = true,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static TestGenericObject<T, RBase, R> Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new TestGenericObject<T, RBase, R>();
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestGenericObjectCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static TestGenericObject<T, RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            string path,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestGenericObject<T, RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            string path,
            ErrorMaskBuilder errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TestGenericObject<T, RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestGenericObject<T, RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public virtual void CopyIn_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        protected virtual void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<TestGenericObject<T, RBase, R>>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            string path,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            bool doMasks = true,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            string path,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public virtual void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public virtual void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public virtual void Write_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            string name = null,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public virtual void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public virtual void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public virtual void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            TestGenericObjectCommon.Write_Xml<T, RBase, R>(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((TestGenericObject_FieldIndex)index)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                    return _hasBeenSetTracker[index];
                case TestGenericObject_FieldIndex.RefList:
                    return RefList.HasBeenSet;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public TestGenericObject<T, RBase, R> Copy<RBase_CopyMask, R_CopyMask>(
            TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            return TestGenericObject<T, RBase, R>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestGenericObject<T, RBase, R> Copy<RBase_CopyMask, R_CopyMask>(
            ITestGenericObject<T, RBase, R> item,
            TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericObject<T, RBase, R> ret;
            if (item.GetType().Equals(typeof(TestGenericObject<T, RBase, R>)))
            {
                ret = new TestGenericObject<T, RBase, R>();
            }
            else
            {
                ret = (TestGenericObject<T, RBase, R>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static TestGenericObject<T, RBase, R> Copy_ToLoqui<RBase_CopyMask, R_CopyMask>(
            ITestGenericObjectGetter<T, RBase, R> item,
            TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericObject<T, RBase, R> ret;
            if (item.GetType().Equals(typeof(TestGenericObject<T, RBase, R>)))
            {
                ret = new TestGenericObject<T, RBase, R>() as TestGenericObject<T, RBase, R>;
            }
            else
            {
                ret = (TestGenericObject<T, RBase, R>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public virtual void CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
            ITestGenericObjectGetter<T, RBase, R> rhs,
            NotifyingFireParameters cmds = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ObjectToRef_ErrorMask, ErrorMaskPlaceholder, RBase_CopyMask, R_CopyMask>(
                rhs: (ITestGenericObjectGetter<T, RBase, R>)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
            ITestGenericObjectGetter<T, RBase, R> rhs,
            TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask> copyMask,
            ITestGenericObjectGetter<T, RBase, R> def = null,
            NotifyingFireParameters cmds = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ObjectToRef_ErrorMask, ErrorMaskPlaceholder, RBase_CopyMask, R_CopyMask>(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom<RBase_ErrMask, R_ErrMask, RBase_CopyMask, R_CopyMask>(
            ITestGenericObjectGetter<T, RBase, R> rhs,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TestGenericObjectCommon.CopyFieldsFrom<T, RBase, R, RBase_CopyMask, R_CopyMask>(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
            ITestGenericObjectGetter<T, RBase, R> rhs,
            ErrorMaskBuilder errorMask,
            TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericObjectCommon.CopyFieldsFrom<T, RBase, R, RBase_CopyMask, R_CopyMask>(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected virtual void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    this._RefBase.Set((RBase)obj);
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    this._Ref.Set((R)obj);
                    break;
                case TestGenericObject_FieldIndex.RefList:
                    this._RefList.SetTo((IEnumerable<RBase>)obj);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public virtual void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestGenericObjectCommon.Clear(this, cmds);
        }


        public static TestGenericObject<T, RBase, R> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestGenericObject<T, RBase, R>();
            foreach (var pair in fields)
            {
                CopyInInternal_TestGenericObject(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TestGenericObject(TestGenericObject<T, RBase, R> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestGenericObject_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    obj._RefBase.Set((RBase)pair.Value);
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    obj._Ref.Set((R)pair.Value);
                    break;
                case TestGenericObject_FieldIndex.RefList:
                    obj._RefList.SetTo((IEnumerable<RBase>)pair.Value);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestGenericObject<T, RBase, R> obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ITestGenericObject<T, RBase, R> : ITestGenericObjectGetter<T, RBase, R>, ILoquiClass<ITestGenericObject<T, RBase, R>, ITestGenericObjectGetter<T, RBase, R>>, ILoquiClass<TestGenericObject<T, RBase, R>, ITestGenericObjectGetter<T, RBase, R>>
        where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
        where R : ILoquiObject, ILoquiObject<R>
    {
        new RBase RefBase { get; set; }
        new IHasBeenSetItem<RBase> RefBase_Property { get; }

        new R Ref { get; set; }
        new IHasBeenSetItem<R> Ref_Property { get; }

        new ISourceSetList<RBase> RefList { get; }
    }

    public partial interface ITestGenericObjectGetter<T, RBase, R> : ILoquiObject
        where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
        where R : ILoquiObject, ILoquiObject<R>
    {
        #region RefBase
        RBase RefBase { get; }
        IHasBeenSetItemGetter<RBase> RefBase_Property { get; }

        #endregion
        #region Ref
        R Ref { get; }
        IHasBeenSetItemGetter<R> Ref_Property { get; }

        #endregion
        #region RefList
        IObservableSetList<RBase> RefList { get; }
        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Generated.Internals
{
    #region Field Index
    public enum TestGenericObject_FieldIndex
    {
        RefBase = 0,
        Ref = 1,
        RefList = 2,
    }
    #endregion

    #region Registration
    public class TestGenericObject_Registration : ILoquiRegistration
    {
        public static readonly TestGenericObject_Registration Instance = new TestGenericObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTestsGenerated.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTestsGenerated.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "c0c6b45b-906e-4a34-8e26-13ac0f04e3f8";

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(TestGenericObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestGenericObject_ErrorMask<, >);

        public static readonly Type ClassType = typeof(TestGenericObject<,,>);

        public static readonly Type GetterType = typeof(ITestGenericObjectGetter<,,>);

        public static readonly Type SetterType = typeof(ITestGenericObject<,,>);

        public static readonly Type CommonType = typeof(TestGenericObjectCommon);

        public const string FullName = "Loqui.Tests.Generated.TestGenericObject";

        public const string Name = "TestGenericObject";

        public const string Namespace = "Loqui.Tests.Generated";

        public const byte GenericCount = 3;

        public static readonly Type GenericRegistrationType = typeof(TestGenericObject_Registration<,,>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REFBASE":
                    return (ushort)TestGenericObject_FieldIndex.RefBase;
                case "REF":
                    return (ushort)TestGenericObject_FieldIndex.Ref;
                case "REFLIST":
                    return (ushort)TestGenericObject_FieldIndex.RefList;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefList:
                    return true;
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                case TestGenericObject_FieldIndex.RefList:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                case TestGenericObject_FieldIndex.RefList:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return "RefBase";
                case TestGenericObject_FieldIndex.Ref:
                    return "Ref";
                case TestGenericObject_FieldIndex.RefList:
                    return "RefList";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                case TestGenericObject_FieldIndex.RefList:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                case TestGenericObject_FieldIndex.RefList:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class TestGenericObject_Registration<T, RBase, R> : TestGenericObject_Registration
        where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
        where R : ILoquiObject, ILoquiObject<R>
    {
        public static readonly TestGenericObject_Registration<T, RBase, R> GenericInstance = new TestGenericObject_Registration<T, RBase, R>();

        public new static Type GetNthType(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return typeof(RBase);
                case TestGenericObject_FieldIndex.Ref:
                    return typeof(R);
                case TestGenericObject_FieldIndex.RefList:
                    return typeof(SourceSetList<RBase>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Extensions
    public static partial class TestGenericObjectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<T, RBase, R, RBase_CopyMask, R_CopyMask>(
            ITestGenericObject<T, RBase, R> item,
            ITestGenericObjectGetter<T, RBase, R> rhs,
            ITestGenericObjectGetter<T, RBase, R> def,
            ErrorMaskBuilder errorMask,
            TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask> copyMask,
            NotifyingFireParameters cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            if (copyMask?.RefBase != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TestGenericObject_FieldIndex.RefBase);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.RefBase,
                        rhsHasBeenSet: rhs.RefBase_Property.HasBeenSet,
                        defItem: def?.RefBase,
                        defHasBeenSet: def?.RefBase_Property.HasBeenSet ?? false,
                        outRhsItem: out var rhsRefBaseItem,
                        outDefItem: out var defRefBaseItem))
                    {
                        switch (copyMask?.RefBase ?? CopyOption.Reference)
                        {
                            case CopyOption.Reference:
                                item.RefBase = rhsRefBaseItem;
                                break;
                            case CopyOption.CopyIn:
                                throw new NotImplementedException();
                                break;
                            case CopyOption.MakeCopy:
                                item.RefBase = LoquiRegistration.GetCopyFunc<RBase>()(rhsRefBaseItem, null, defRefBaseItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefBase}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.RefBase_Set(
                            item: default(RBase),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.Ref != GetterCopyOption.Skip)
            {
                errorMask?.PushIndex((int)TestGenericObject_FieldIndex.Ref);
                try
                {
                    if (LoquiHelper.DefaultSwitch(
                        rhsItem: rhs.Ref,
                        rhsHasBeenSet: rhs.Ref_Property.HasBeenSet,
                        defItem: def?.Ref,
                        defHasBeenSet: def?.Ref_Property.HasBeenSet ?? false,
                        outRhsItem: out var rhsRefItem,
                        outDefItem: out var defRefItem))
                    {
                        switch (copyMask?.Ref ?? GetterCopyOption.Reference)
                        {
                            case GetterCopyOption.Reference:
                                item.Ref = rhsRefItem;
                                break;
                            case GetterCopyOption.MakeCopy:
                                var copyFunc = LoquiRegistration.GetCopyFunc<R>();
                                item.Ref = copyFunc(rhsRefItem, null, defRefItem);
                                break;
                            default:
                                throw new NotImplementedException($"Unknown GetterCopyOption {copyMask?.Ref}. Cannot execute copy.");
                        }
                    }
                    else
                    {
                        item.Ref_Set(
                            item: default(R),
                            hasBeenSet: false);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.RefList.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TestGenericObject_FieldIndex.RefList);
                try
                {
                    item.RefList.SetToWithDefault(
                        rhs: rhs.RefList,
                        def: def?.RefList,
                        converter: (r, d) =>
                        {
                            switch (copyMask?.RefList.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return LoquiRegistration.GetCopyFunc<RBase>()(r, null, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefList.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet<T, RBase, R>(
            ushort index,
            bool on,
            ITestGenericObject<T, RBase, R> obj,
            NotifyingFireParameters cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    obj.RefBase_Property.HasBeenSet = on;
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    obj.Ref_Property.HasBeenSet = on;
                    break;
                case TestGenericObject_FieldIndex.RefList:
                    obj.RefList.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject<T, RBase, R>(
            ushort index,
            ITestGenericObject<T, RBase, R> obj,
            NotifyingUnsetParameters cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    obj.RefBase_Property.Unset(cmds.ToUnsetParams());
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    obj.Ref_Property.Unset(cmds.ToUnsetParams());
                    break;
                case TestGenericObject_FieldIndex.RefList:
                    obj.RefList.Unset();
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet<T, RBase, R>(
            ushort index,
            ITestGenericObject<T, RBase, R> obj)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return obj.RefBase_Property.HasBeenSet;
                case TestGenericObject_FieldIndex.Ref:
                    return obj.Ref_Property.HasBeenSet;
                case TestGenericObject_FieldIndex.RefList:
                    return obj.RefList.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject<T, RBase, R>(
            ushort index,
            ITestGenericObjectGetter<T, RBase, R> obj)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return obj.RefBase;
                case TestGenericObject_FieldIndex.Ref:
                    return obj.Ref;
                case TestGenericObject_FieldIndex.RefList:
                    return obj.RefList;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear<T, RBase, R>(
            ITestGenericObject<T, RBase, R> item,
            NotifyingUnsetParameters cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            item.RefBase_Property.Unset(cmds.ToUnsetParams());
            item.Ref_Property.Unset(cmds.ToUnsetParams());
            item.RefList.Unset();
        }

        public static TestGenericObject_Mask<bool> GetEqualsMask<T, RBase, R>(
            this ITestGenericObjectGetter<T, RBase, R> item,
            ITestGenericObjectGetter<T, RBase, R> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            var ret = new TestGenericObject_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask<T, RBase, R>(
            ITestGenericObjectGetter<T, RBase, R> item,
            ITestGenericObjectGetter<T, RBase, R> rhs,
            TestGenericObject_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            if (rhs == null) return;
            ret.RefBase = item.RefBase_Property.EqualsHelper(
                rhs.RefBase_Property,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.Ref = item.Ref_Property.EqualsHelper(
                rhs.Ref_Property,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs),
                include);
            ret.RefList = item.RefList.CollectionEqualsHelper(
                rhs.RefList,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }

        public static string ToString<T, RBase, R>(
            this ITestGenericObjectGetter<T, RBase, R> item,
            string name = null,
            TestGenericObject_Mask<bool> printMask = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString<T, RBase, R>(
            this ITestGenericObjectGetter<T, RBase, R> item,
            FileGeneration fg,
            string name = null,
            TestGenericObject_Mask<bool> printMask = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestGenericObject<T, RBase, R>)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestGenericObject<T, RBase, R>)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.RefBase?.Overall ?? true)
                {
                    item.RefBase?.ToString(fg, "RefBase");
                }
                if (printMask?.Ref?.Overall ?? true)
                {
                    item.Ref?.ToString(fg, "Ref");
                }
                if (printMask?.RefList?.Overall ?? true)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.RefList)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet<T, RBase, R>(
            this ITestGenericObjectGetter<T, RBase, R> item,
            TestGenericObject_Mask<bool?> checkMask)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            if (checkMask.RefBase.Overall.HasValue && checkMask.RefBase.Overall.Value != item.RefBase_Property.HasBeenSet) return false;
            if (checkMask.RefBase.Specific != null && (item.RefBase == null || !item.RefBase.HasBeenSet(checkMask.RefBase.Specific))) return false;
            if (checkMask.Ref.Overall.HasValue && checkMask.Ref.Overall.Value != item.Ref_Property.HasBeenSet) return false;
            if (checkMask.RefList.Overall.HasValue && checkMask.RefList.Overall.Value != item.RefList.HasBeenSet) return false;
            return true;
        }

        public static TestGenericObject_Mask<bool> GetHasBeenSetMask<T, RBase, R>(ITestGenericObjectGetter<T, RBase, R> item)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            var ret = new TestGenericObject_Mask<bool>();
            ret.RefBase = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.RefBase_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.RefBase));
            ret.Ref = new MaskItem<bool, IMask<bool>>(item.Ref_Property.HasBeenSet, null);
            ret.RefList = new MaskItem<bool, IEnumerable<MaskItemIndexed<bool, ObjectToRef_Mask<bool>>>>(item.RefList.HasBeenSet, item.RefList.WithIndex().Select((i) => new MaskItemIndexed<bool, ObjectToRef_Mask<bool>>(i.Index, true, i.Item.GetHasBeenSetMask())));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml<T, RBase, R, RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            ITestGenericObjectGetter<T, RBase, R> item,
            bool doMasks,
            out TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask,
            string name = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml<T, RBase, R>(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void Write_Xml<T, RBase, R>(
            XElement node,
            ITestGenericObjectGetter<T, RBase, R> item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            var elem = new XElement(name ?? "Loqui.Tests.Generated.TestGenericObject");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Loqui.Tests.Generated.TestGenericObject");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml<T, RBase, R>(
            this ITestGenericObjectGetter<T, RBase, R> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            if (item.RefBase_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)TestGenericObject_FieldIndex.RefBase) ?? true))
            {
                LoquiXmlTranslation<RBase>.Instance.Write(
                    node: node,
                    item: item.RefBase,
                    name: nameof(item.RefBase),
                    fieldIndex: (int)TestGenericObject_FieldIndex.RefBase,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestGenericObject_FieldIndex.RefBase));
            }
            if (item.Ref_Property.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)TestGenericObject_FieldIndex.Ref) ?? true))
            {
                LoquiXmlTranslation<R>.Instance.Write(
                    node: node,
                    item: item.Ref,
                    name: nameof(item.Ref),
                    fieldIndex: (int)TestGenericObject_FieldIndex.Ref,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestGenericObject_FieldIndex.Ref));
            }
            if (item.RefList.HasBeenSet
                && (translationMask?.GetShouldTranslate((int)TestGenericObject_FieldIndex.RefList) ?? true))
            {
                ListXmlTranslation<RBase>.Instance.Write(
                    node: node,
                    name: nameof(item.RefList),
                    item: item.RefList,
                    fieldIndex: (int)TestGenericObject_FieldIndex.RefList,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestGenericObject_FieldIndex.RefList),
                    transl: (XElement subNode, RBase subItem, ErrorMaskBuilder listSubMask, TranslationCrystal listTranslMask) =>
                    {
                        LoquiXmlTranslation<RBase>.Instance.Write(
                            node: subNode,
                            item: subItem,
                            name: null,
                            errorMask: listSubMask,
                            translationMask: listTranslMask);
                    }
                    );
            }
        }

        public static void FillPublic_Xml<T, RBase, R>(
            this TestGenericObject<T, RBase, R> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestGenericObjectCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml<T, RBase, R>(
            this TestGenericObject<T, RBase, R> item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObject<RBase>
            where R : ILoquiObject, ILoquiObject<R>
        {
            switch (name)
            {
                case "RefBase":
                    if ((translationMask?.GetShouldTranslate((int)TestGenericObject_FieldIndex.RefBase) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestGenericObject_FieldIndex.RefBase);
                            if (LoquiXmlTranslation<RBase>.Instance.Parse(
                                node: node,
                                item: out RBase RefBaseParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestGenericObject_FieldIndex.RefBase)))
                            {
                                item.RefBase = RefBaseParse;
                            }
                            else
                            {
                                item.RefBase = default(RBase);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "Ref":
                    if ((translationMask?.GetShouldTranslate((int)TestGenericObject_FieldIndex.Ref) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestGenericObject_FieldIndex.Ref);
                            if (LoquiXmlTranslation<R>.Instance.Parse(
                                node: node,
                                item: out R RefParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestGenericObject_FieldIndex.Ref)))
                            {
                                item.Ref = RefParse;
                            }
                            else
                            {
                                item.Ref = default(R);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "RefList":
                    if ((translationMask?.GetShouldTranslate((int)TestGenericObject_FieldIndex.RefList) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestGenericObject_FieldIndex.RefList);
                            if (ListXmlTranslation<RBase>.Instance.Parse(
                                node: node,
                                enumer: out var RefListItem,
                                transl: LoquiXmlTranslation<RBase>.Instance.Parse,
                                errorMask: errorMask,
                                translationMask: translationMask))
                            {
                                item.RefList.SetTo(RefListItem);
                            }
                            else
                            {
                                item.RefList.Unset();
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class TestGenericObject_Mask<T> : IMask<T>, IEquatable<TestGenericObject_Mask<T>>
    {
        #region Ctors
        public TestGenericObject_Mask()
        {
        }

        public TestGenericObject_Mask(T initialValue)
        {
            this.RefBase = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.Ref = new MaskItem<T, IMask<T>>(initialValue, null);
            this.RefList = new MaskItem<T, IEnumerable<MaskItemIndexed<T, ObjectToRef_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public MaskItem<T, ObjectToRef_Mask<T>> RefBase { get; set; }
        public MaskItem<T, IMask<T>> Ref { get; set; }
        public MaskItem<T, IEnumerable<MaskItemIndexed<T, ObjectToRef_Mask<T>>>> RefList;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericObject_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericObject_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.RefBase, rhs.RefBase)) return false;
            if (!object.Equals(this.Ref, rhs.Ref)) return false;
            if (!object.Equals(this.RefList, rhs.RefList)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.RefBase?.GetHashCode());
            ret = ret.CombineHashCode(this.Ref?.GetHashCode());
            ret = ret.CombineHashCode(this.RefList?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public virtual bool AllEqual(Func<T, bool> eval)
        {
            if (RefBase != null)
            {
                if (!eval(this.RefBase.Overall)) return false;
                if (this.RefBase.Specific != null && !this.RefBase.Specific.AllEqual(eval)) return false;
            }
            if (Ref != null)
            {
                if (!eval(this.Ref.Overall)) return false;
                if (!this.Ref.Specific.AllEqual(eval)) return false;
            }
            if (this.RefList != null)
            {
                if (!eval(this.RefList.Overall)) return false;
                if (this.RefList.Specific != null)
                {
                    foreach (var item in this.RefList.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (item.Specific != null && !item.Specific.AllEqual(eval)) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public TestGenericObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestGenericObject_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestGenericObject_Mask<R> obj, Func<T, R> eval)
        {
            if (this.RefBase != null)
            {
                obj.RefBase = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefBase.Overall = eval(this.RefBase.Overall);
                if (this.RefBase.Specific != null)
                {
                    obj.RefBase.Specific = this.RefBase.Specific.Translate(eval);
                }
            }
            if (this.Ref != null)
            {
                obj.Ref = new MaskItem<R, IMask<R>>();
                obj.Ref.Overall = eval(this.Ref.Overall);
                throw new NotImplementedException();
            }
            if (RefList != null)
            {
                obj.RefList = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ObjectToRef_Mask<R>>>>();
                obj.RefList.Overall = eval(this.RefList.Overall);
                if (RefList.Specific != null)
                {
                    List<MaskItemIndexed<R, ObjectToRef_Mask<R>>> l = new List<MaskItemIndexed<R, ObjectToRef_Mask<R>>>();
                    obj.RefList.Specific = l;
                    foreach (var item in RefList.Specific.WithIndex())
                    {
                        MaskItemIndexed<R, ObjectToRef_Mask<R>> mask = default;
                        mask.Index = item.Index;
                        if (item.Item != null)
                        {
                            mask = new MaskItemIndexed<R, ObjectToRef_Mask<R>>(item.Item.Index);
                            mask.Overall = eval(item.Item.Overall);
                            if (item.Item.Specific != null)
                            {
                                mask.Specific = item.Item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public virtual void ClearEnumerables()
        {
            this.RefList.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestGenericObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestGenericObject_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestGenericObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.RefBase?.Overall ?? true)
                {
                    RefBase?.ToString(fg);
                }
                if (printMask?.Ref?.Overall ?? true)
                {
                    Ref?.ToString(fg);
                }
                if (printMask?.RefList?.Overall ?? true)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefList.Overall != null)
                        {
                            fg.AppendLine(RefList.Overall.ToString());
                        }
                        if (RefList.Specific != null)
                        {
                            foreach (var subItem in RefList.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> : IErrorMask, IErrorMask<TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>>
        where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, RBase_ErrMask> RefBase;
        public MaskItem<Exception, R_ErrMask> Ref;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, RBase_ErrMask>>> RefList;
        #endregion

        #region IErrorMask
        public virtual object GetNthMask(int index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return RefBase;
                case TestGenericObject_FieldIndex.Ref:
                    return Ref;
                case TestGenericObject_FieldIndex.RefList:
                    return RefList;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthException(int index, Exception ex)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    this.RefBase = new MaskItem<Exception, RBase_ErrMask>(ex, null);
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    this.Ref = new MaskItem<Exception, R_ErrMask>(ex, null);
                    break;
                case TestGenericObject_FieldIndex.RefList:
                    this.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RBase_ErrMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(int index, object obj)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    this.RefBase = (MaskItem<Exception, RBase_ErrMask>)obj;
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    this.Ref = (MaskItem<Exception, R_ErrMask>)obj;
                    break;
                case TestGenericObject_FieldIndex.RefList:
                    this.RefList = (MaskItem<Exception, IEnumerable<MaskItem<Exception, RBase_ErrMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual bool IsInError()
        {
            if (Overall != null) return true;
            if (RefBase != null) return true;
            if (Ref != null) return true;
            if (RefList != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public virtual void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestGenericObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected virtual void ToString_FillInternal(FileGeneration fg)
        {
            RefBase?.ToString(fg);
            Ref?.ToString(fg);
            fg.AppendLine("RefList =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (RefList.Overall != null)
                {
                    fg.AppendLine(RefList.Overall.ToString());
                }
                if (RefList.Specific != null)
                {
                    foreach (var subItem in RefList.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> Combine(TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> rhs)
        {
            var ret = new TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>();
            ret.RefBase = new MaskItem<Exception, RBase_ErrMask>(this.RefBase.Overall.Combine(rhs.RefBase.Overall), ((IErrorMask<RBase_ErrMask>)this.RefBase.Specific).Combine(rhs.RefBase.Specific));
            ret.Ref = new MaskItem<Exception, R_ErrMask>(this.Ref.Overall.Combine(rhs.Ref.Overall), Loqui.Internal.LoquiHelper.Combine(this.Ref.Specific, rhs.Ref.Specific));
            ret.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, RBase_ErrMask>>>(this.RefList.Overall.Combine(rhs.RefList.Overall), new List<MaskItem<Exception, RBase_ErrMask>>(this.RefList.Specific.And(rhs.RefList.Specific)));
            return ret;
        }
        public static TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> Combine(TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> lhs, TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask> Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>();
        }
        #endregion

    }
    public class TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask>
        where RBase_CopyMask : ObjectToRef_CopyMask, new()
        where R_CopyMask : class, new()
    {
        public TestGenericObject_CopyMask()
        {
        }

        public TestGenericObject_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.RefBase = deepCopyOption;
            this.Ref = deepCopyOption;
            this.RefList = new MaskItem<CopyOption, RBase_CopyMask>(deepCopyOption, default);
        }

        #region Members
        public CopyOption RefBase;
        public GetterCopyOption Ref;
        public MaskItem<CopyOption, RBase_CopyMask> RefList;
        #endregion

    }

    public class TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask> : ITranslationMask
        where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
        where R_TranslMask : class, ITranslationMask, new()
    {
        #region Members
        private TranslationCrystal _crystal;
        public bool RefBase;
        public bool Ref;
        public MaskItem<bool, RBase_TranslMask> RefList;
        #endregion

        #region Ctors
        public TestGenericObject_TranslationMask()
        {
        }

        public TestGenericObject_TranslationMask(bool defaultOn)
        {
            this.RefBase = new MaskItem<bool, RBase_TranslMask>(defaultOn, null);
            this.Ref = new MaskItem<bool, R_TranslMask>(defaultOn, null);
            this.RefList = new MaskItem<bool, RBase_TranslMask>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected virtual void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((RefBase?.Overall ?? true, RefBase?.Specific?.GetCrystal()));
            ret.Add((Ref?.Overall ?? true, Ref?.Specific?.GetCrystal()));
            ret.Add((RefList?.Overall ?? true, RefList?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
