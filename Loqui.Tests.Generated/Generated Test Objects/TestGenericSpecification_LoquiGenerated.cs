/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Generated.Internals;
using Loqui.Tests.Generated;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using Loqui.Internal;
using System.Diagnostics;
using System.Collections.Specialized;

namespace Loqui.Tests.Generated
{
    #region Class
    public partial class TestGenericSpecification<RBase, R> : 
        ITestGenericSpecification<RBase, R>,
        ILoquiObject<TestGenericSpecification<RBase, R>>,
        ILoquiObjectSetter,
        IEquatable<TestGenericSpecification<RBase, R>>
        where RBase : ObjectToRef, ILoquiObject<RBase>
        where R : ILoquiObjectGetter, ILoquiObject<R>
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TestGenericSpecification_Registration.Instance;
        public static TestGenericSpecification_Registration Registration => TestGenericSpecification_Registration.Instance;

        #region Ctor
        public TestGenericSpecification()
        {
            _hasBeenSetTracker = new BitArray(((ILoquiObject)this).Registration.FieldCount);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TestGenericObjectSpecified
        public TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef> TestGenericObjectSpecified { get; set; }
        #endregion
        #region TestGenericObjectHalfSpecified
        public TestGenericObject<ObjectToRef, RBase, R> TestGenericObjectHalfSpecified { get; set; }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TestGenericSpecificationCommon.GetNthObject<RBase, R>(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestGenericSpecificationCommon.GetNthObjectHasBeenSet<RBase, R>(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => TestGenericSpecificationCommon.UnsetNthObject<RBase, R>(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestGenericSpecificationCommon.SetNthObjectHasBeenSet<RBase, R>(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        IMask<bool> IEqualsMask<TestGenericSpecification<RBase, R>>.GetEqualsMask(TestGenericSpecification<RBase, R> rhs, EqualsMaskHelper.Include include) => TestGenericSpecificationCommon.GetEqualsMask(this, rhs, include);
        IMask<bool> IEqualsMask<ITestGenericSpecificationGetter<RBase, R>>.GetEqualsMask(ITestGenericSpecificationGetter<RBase, R> rhs, EqualsMaskHelper.Include include) => TestGenericSpecificationCommon.GetEqualsMask(this, rhs, include);
        #region To String
        public override string ToString()
        {
            return TestGenericSpecificationCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestGenericSpecification_Mask<bool> printMask = null)
        {
            return TestGenericSpecificationCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestGenericSpecificationCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        IMask<bool> ILoquiObjectGetter.GetHasBeenSetMask() => this.GetHasBeenSetMask();
        public TestGenericSpecification_Mask<bool> GetHasBeenSetMask()
        {
            return TestGenericSpecificationCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericSpecification<RBase, R> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericSpecification<RBase, R> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TestGenericObjectSpecified, rhs.TestGenericObjectSpecified)) return false;
            if (!object.Equals(this.TestGenericObjectHalfSpecified, rhs.TestGenericObjectHalfSpecified)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(TestGenericObjectSpecified).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TestGenericObjectHalfSpecified).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region Xml Translation
        #region Xml Create
        [DebuggerStepThrough]
        public static TestGenericSpecification<RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            bool doMasks = true,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            var ret = Create_Xml(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask.GetCrystal());
            errorMask = TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }

        public static TestGenericSpecification<RBase, R> Create_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
        {
            var ret = new TestGenericSpecification<RBase, R>();
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestGenericSpecificationCommon.FillPublicElement_Xml(
                        item: ret,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
            return ret;
        }

        public static TestGenericSpecification<RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            string path,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestGenericSpecification<RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            string path,
            ErrorMaskBuilder errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(path).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        public static TestGenericSpecification<RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask);
        }

        public static TestGenericSpecification<RBase, R> Create_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            return Create_Xml(
                node: node,
                errorMask: errorMask,
                translationMask: translationMask?.GetCrystal());
        }

        #endregion

        #region Xml Copy In
        public virtual void CopyIn_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            NotifyingFireParameters cmds = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            CopyIn_Xml_Internal(
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal(),
                cmds: cmds);
            errorMask = TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        protected void CopyIn_Xml_Internal(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            NotifyingFireParameters cmds = null)
        {
            LoquiXmlTranslation<TestGenericSpecification<RBase, R>>.Instance.CopyIn(
                node: node,
                item: this,
                skipProtected: true,
                errorMask: errorMask,
                translationMask: translationMask,
                cmds: cmds);
        }

        public void CopyIn_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            string path,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(path).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        public void CopyIn_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = XDocument.Load(stream).Root;
            this.CopyIn_Xml(
                node: node,
                errorMask: out errorMask,
                translationMask: translationMask,
                cmds: cmds,
                doMasks: doMasks);
        }

        #endregion

        #region Xml Write
        public virtual void Write_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            bool doMasks = true,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        public virtual void Write_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            string path,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            string path,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().SaveIfChanged(path);
        }
        public virtual void Write_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            Stream stream,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null,
            bool doMasks = true,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: out errorMask,
                doMasks: doMasks,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            Stream stream,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
            node.Elements().First().Save(stream);
        }
        public void Write_Xml<RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            string name = null,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            this.Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: translationMask.GetCrystal());
        }

        public void Write_Xml(
            string path,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().SaveIfChanged(path);
        }

        public void Write_Xml(
            Stream stream,
            string name = null)
        {
            var node = new XElement("topnode");
            Write_Xml(
                name: name,
                node: node,
                errorMask: null,
                translationMask: null);
            node.Elements().First().Save(stream);
        }

        public void Write_Xml(
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
        {
            TestGenericSpecificationCommon.Write_Xml<RBase, R>(
                item: this,
                name: name,
                node: node,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        #endregion

        protected readonly BitArray _hasBeenSetTracker;
        protected bool GetHasBeenSet(int index)
        {
            switch ((TestGenericSpecification_FieldIndex)index)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return true;
                default:
                    throw new ArgumentException($"Unknown field index: {index}");
            }
        }

        public TestGenericSpecification<RBase, R> Copy<RBase_CopyMask, R_CopyMask>(
            TestGenericSpecification_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            return TestGenericSpecification<RBase, R>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestGenericSpecification<RBase, R> Copy<RBase_CopyMask, R_CopyMask>(
            ITestGenericSpecification<RBase, R> item,
            TestGenericSpecification_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericSpecification<RBase, R> ret;
            if (item.GetType().Equals(typeof(TestGenericSpecification<RBase, R>)))
            {
                ret = new TestGenericSpecification<RBase, R>();
            }
            else
            {
                ret = (TestGenericSpecification<RBase, R>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static TestGenericSpecification<RBase, R> Copy_ToLoqui<RBase_CopyMask, R_CopyMask>(
            ITestGenericSpecificationGetter<RBase, R> item,
            TestGenericSpecification_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericSpecification<RBase, R> ret;
            if (item.GetType().Equals(typeof(TestGenericSpecification<RBase, R>)))
            {
                ret = new TestGenericSpecification<RBase, R>() as TestGenericSpecification<RBase, R>;
            }
            else
            {
                ret = (TestGenericSpecification<RBase, R>)System.Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public void CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
            ITestGenericSpecificationGetter<RBase, R> rhs,
            NotifyingFireParameters cmds = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ObjectToRef_ErrorMask, ErrorMaskPlaceholder, RBase_CopyMask, R_CopyMask>(
                rhs: (ITestGenericSpecificationGetter<RBase, R>)rhs,
                def: null,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: null,
                cmds: cmds);
        }

        public void CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
            ITestGenericSpecificationGetter<RBase, R> rhs,
            TestGenericSpecification_CopyMask<RBase_CopyMask, R_CopyMask> copyMask,
            ITestGenericSpecificationGetter<RBase, R> def = null,
            NotifyingFireParameters cmds = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            this.CopyFieldsFrom<ObjectToRef_ErrorMask, ErrorMaskPlaceholder, RBase_CopyMask, R_CopyMask>(
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: out var errMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom<RBase_ErrMask, R_ErrMask, RBase_CopyMask, R_CopyMask>(
            ITestGenericSpecificationGetter<RBase, R> rhs,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericSpecification_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TestGenericSpecificationCommon.CopyFieldsFrom<RBase, R, RBase_CopyMask, R_CopyMask>(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMaskBuilder,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        public void CopyFieldsFrom<RBase_CopyMask, R_CopyMask>(
            ITestGenericSpecificationGetter<RBase, R> rhs,
            ErrorMaskBuilder errorMask,
            TestGenericSpecification_CopyMask<RBase_CopyMask, R_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null,
            NotifyingFireParameters cmds = null,
            bool doMasks = true)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            TestGenericSpecificationCommon.CopyFieldsFrom<RBase, R, RBase_CopyMask, R_CopyMask>(
                item: this,
                rhs: rhs,
                def: def,
                errorMask: errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters cmds = null)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    this.TestGenericObjectSpecified = (TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>)obj;
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    this.TestGenericObjectHalfSpecified = (TestGenericObject<ObjectToRef, RBase, R>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestGenericSpecificationCommon.Clear(this, cmds);
        }


        public static TestGenericSpecification<RBase, R> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestGenericSpecification<RBase, R>();
            foreach (var pair in fields)
            {
                CopyInInternal_TestGenericSpecification(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TestGenericSpecification(TestGenericSpecification<RBase, R> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestGenericSpecification_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    obj.TestGenericObjectSpecified = (TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>)pair.Value;
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    obj.TestGenericObjectHalfSpecified = (TestGenericObject<ObjectToRef, RBase, R>)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestGenericSpecification<RBase, R> obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public partial interface ITestGenericSpecification<RBase, R> : ITestGenericSpecificationGetter<RBase, R>, ILoquiClass<ITestGenericSpecification<RBase, R>, ITestGenericSpecificationGetter<RBase, R>>, ILoquiClass<TestGenericSpecification<RBase, R>, ITestGenericSpecificationGetter<RBase, R>>
        where RBase : ObjectToRef, ILoquiObject<RBase>
        where R : ILoquiObjectGetter, ILoquiObject<R>
    {
        new TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef> TestGenericObjectSpecified { get; set; }

        new TestGenericObject<ObjectToRef, RBase, R> TestGenericObjectHalfSpecified { get; set; }

    }

    public partial interface ITestGenericSpecificationGetter<RBase, R> : ILoquiObject
        where RBase : ObjectToRef, ILoquiObject<RBase>
        where R : ILoquiObjectGetter, ILoquiObject<R>
    {
        #region TestGenericObjectSpecified
        TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef> TestGenericObjectSpecified { get; }
        #endregion
        #region TestGenericObjectHalfSpecified
        TestGenericObject<ObjectToRef, RBase, R> TestGenericObjectHalfSpecified { get; }
        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Generated.Internals
{
    #region Field Index
    public enum TestGenericSpecification_FieldIndex
    {
        TestGenericObjectSpecified = 0,
        TestGenericObjectHalfSpecified = 1,
    }
    #endregion

    #region Registration
    public class TestGenericSpecification_Registration : ILoquiRegistration
    {
        public static readonly TestGenericSpecification_Registration Instance = new TestGenericSpecification_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTestsGenerated.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTestsGenerated.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "61cec4c5-3aba-449a-9d61-1bb5f6ef4f25";

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(TestGenericSpecification_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestGenericSpecification_ErrorMask<, >);

        public static readonly Type ClassType = typeof(TestGenericSpecification<,>);

        public static readonly Type GetterType = typeof(ITestGenericSpecificationGetter<,>);

        public static readonly Type SetterType = typeof(ITestGenericSpecification<,>);

        public static readonly Type CommonType = typeof(TestGenericSpecificationCommon);

        public const string FullName = "Loqui.Tests.Generated.TestGenericSpecification";

        public const string Name = "TestGenericSpecification";

        public const string Namespace = "Loqui.Tests.Generated";

        public const byte GenericCount = 2;

        public static readonly Type GenericRegistrationType = typeof(TestGenericSpecification_Registration<,>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TESTGENERICOBJECTSPECIFIED":
                    return (ushort)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified;
                case "TESTGENERICOBJECTHALFSPECIFIED":
                    return (ushort)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    return "TestGenericObjectSpecified";
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return "TestGenericObjectHalfSpecified";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class TestGenericSpecification_Registration<RBase, R> : TestGenericSpecification_Registration
        where RBase : ObjectToRef, ILoquiObject<RBase>
        where R : ILoquiObjectGetter, ILoquiObject<R>
    {
        public static readonly TestGenericSpecification_Registration<RBase, R> GenericInstance = new TestGenericSpecification_Registration<RBase, R>();

        public new static Type GetNthType(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    return typeof(TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>);
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return typeof(TestGenericObject<ObjectToRef, RBase, R>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Extensions
    public static partial class TestGenericSpecificationCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<RBase, R, RBase_CopyMask, R_CopyMask>(
            ITestGenericSpecification<RBase, R> item,
            ITestGenericSpecificationGetter<RBase, R> rhs,
            ITestGenericSpecificationGetter<RBase, R> def,
            ErrorMaskBuilder errorMask,
            TestGenericSpecification_CopyMask<RBase_CopyMask, R_CopyMask> copyMask,
            NotifyingFireParameters cmds = null)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where R_CopyMask : class, new()
        {
            if (copyMask?.TestGenericObjectSpecified.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified);
                try
                {
                    switch (copyMask?.TestGenericObjectSpecified?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.TestGenericObjectSpecified = rhs.TestGenericObjectSpecified;
                            break;
                        case CopyOption.CopyIn:
                            TestGenericObjectCommon.CopyFieldsFrom(
                                item: item.TestGenericObjectSpecified,
                                rhs: rhs.TestGenericObjectSpecified,
                                def: def?.TestGenericObjectSpecified,
                                errorMask: errorMask,
                                copyMask: copyMask?.TestGenericObjectSpecified.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.TestGenericObjectSpecified == null)
                            {
                                item.TestGenericObjectSpecified = null;
                            }
                            else
                            {
                                item.TestGenericObjectSpecified = TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>.Copy(
                                    rhs.TestGenericObjectSpecified,
                                    copyMask?.TestGenericObjectSpecified?.Specific,
                                    def?.TestGenericObjectSpecified);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.TestGenericObjectSpecified?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (copyMask?.TestGenericObjectHalfSpecified.Overall != CopyOption.Skip)
            {
                errorMask?.PushIndex((int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified);
                try
                {
                    switch (copyMask?.TestGenericObjectHalfSpecified?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.TestGenericObjectHalfSpecified = rhs.TestGenericObjectHalfSpecified;
                            break;
                        case CopyOption.CopyIn:
                            TestGenericObjectCommon.CopyFieldsFrom(
                                item: item.TestGenericObjectHalfSpecified,
                                rhs: rhs.TestGenericObjectHalfSpecified,
                                def: def?.TestGenericObjectHalfSpecified,
                                errorMask: errorMask,
                                copyMask: copyMask?.TestGenericObjectHalfSpecified.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.TestGenericObjectHalfSpecified == null)
                            {
                                item.TestGenericObjectHalfSpecified = null;
                            }
                            else
                            {
                                item.TestGenericObjectHalfSpecified = TestGenericObject<ObjectToRef, RBase, R>.Copy(
                                    rhs.TestGenericObjectHalfSpecified,
                                    copyMask?.TestGenericObjectHalfSpecified?.Specific,
                                    def?.TestGenericObjectHalfSpecified);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.TestGenericObjectHalfSpecified?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet<RBase, R>(
            ushort index,
            bool on,
            ITestGenericSpecification<RBase, R> obj,
            NotifyingFireParameters cmds = null)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject<RBase, R>(
            ushort index,
            ITestGenericSpecification<RBase, R> obj,
            NotifyingUnsetParameters cmds = null)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    obj.TestGenericObjectSpecified = default(TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>);
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    obj.TestGenericObjectHalfSpecified = default(TestGenericObject<ObjectToRef, RBase, R>);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet<RBase, R>(
            ushort index,
            ITestGenericSpecification<RBase, R> obj)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject<RBase, R>(
            ushort index,
            ITestGenericSpecificationGetter<RBase, R> obj)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    return obj.TestGenericObjectSpecified;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return obj.TestGenericObjectHalfSpecified;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear<RBase, R>(
            ITestGenericSpecification<RBase, R> item,
            NotifyingUnsetParameters cmds = null)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            item.TestGenericObjectSpecified = default(TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>);
            item.TestGenericObjectHalfSpecified = default(TestGenericObject<ObjectToRef, RBase, R>);
        }

        public static TestGenericSpecification_Mask<bool> GetEqualsMask<RBase, R>(
            this ITestGenericSpecificationGetter<RBase, R> item,
            ITestGenericSpecificationGetter<RBase, R> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            var ret = new TestGenericSpecification_Mask<bool>();
            FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }

        public static void FillEqualsMask<RBase, R>(
            ITestGenericSpecificationGetter<RBase, R> item,
            ITestGenericSpecificationGetter<RBase, R> rhs,
            TestGenericSpecification_Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            if (rhs == null) return;
            ret.TestGenericObjectSpecified = MaskItemExt.Factory(TestGenericObjectCommon.GetEqualsMask(item.TestGenericObjectSpecified, rhs.TestGenericObjectSpecified, include), include);
            ret.TestGenericObjectHalfSpecified = MaskItemExt.Factory(TestGenericObjectCommon.GetEqualsMask(item.TestGenericObjectHalfSpecified, rhs.TestGenericObjectHalfSpecified, include), include);
        }

        public static string ToString<RBase, R>(
            this ITestGenericSpecificationGetter<RBase, R> item,
            string name = null,
            TestGenericSpecification_Mask<bool> printMask = null)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString<RBase, R>(
            this ITestGenericSpecificationGetter<RBase, R> item,
            FileGeneration fg,
            string name = null,
            TestGenericSpecification_Mask<bool> printMask = null)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestGenericSpecification<RBase, R>)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestGenericSpecification<RBase, R>)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TestGenericObjectSpecified?.Overall ?? true)
                {
                    item.TestGenericObjectSpecified?.ToString(fg, "TestGenericObjectSpecified");
                }
                if (printMask?.TestGenericObjectHalfSpecified?.Overall ?? true)
                {
                    item.TestGenericObjectHalfSpecified?.ToString(fg, "TestGenericObjectHalfSpecified");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet<RBase, R>(
            this ITestGenericSpecificationGetter<RBase, R> item,
            TestGenericSpecification_Mask<bool?> checkMask)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            return true;
        }

        public static TestGenericSpecification_Mask<bool> GetHasBeenSetMask<RBase, R>(ITestGenericSpecificationGetter<RBase, R> item)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            var ret = new TestGenericSpecification_Mask<bool>();
            ret.TestGenericObjectSpecified = new MaskItem<bool, TestGenericObject_Mask<bool>>(true, TestGenericObjectCommon.GetHasBeenSetMask(item.TestGenericObjectSpecified));
            ret.TestGenericObjectHalfSpecified = new MaskItem<bool, TestGenericObject_Mask<bool>>(true, TestGenericObjectCommon.GetHasBeenSetMask(item.TestGenericObjectHalfSpecified));
            return ret;
        }

        #region Xml Translation
        #region Xml Write
        public static void Write_Xml<RBase, R, RBase_ErrMask, R_ErrMask, RBase_TranslMask, R_TranslMask>(
            XElement node,
            ITestGenericSpecificationGetter<RBase, R> item,
            bool doMasks,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> errorMask,
            TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> translationMask,
            string name = null)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
            where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
            where R_TranslMask : class, ITranslationMask, new()
        {
            ErrorMaskBuilder errorMaskBuilder = doMasks ? new ErrorMaskBuilder() : null;
            Write_Xml<RBase, R>(
                name: name,
                node: node,
                item: item,
                errorMask: errorMaskBuilder,
                translationMask: translationMask?.GetCrystal());
            errorMask = TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void Write_Xml<RBase, R>(
            XElement node,
            ITestGenericSpecificationGetter<RBase, R> item,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask,
            string name = null)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            var elem = new XElement(name ?? "Loqui.Tests.Generated.TestGenericSpecification");
            node.Add(elem);
            if (name != null)
            {
                elem.SetAttributeValue("type", "Loqui.Tests.Generated.TestGenericSpecification");
            }
            WriteToNode_Xml(
                item: item,
                node: elem,
                errorMask: errorMask,
                translationMask: translationMask);
        }
        #endregion

        public static void WriteToNode_Xml<RBase, R>(
            this ITestGenericSpecificationGetter<RBase, R> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            if ((translationMask?.GetShouldTranslate((int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified) ?? true))
            {
                LoquiXmlTranslation<TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>>.Instance.Write(
                    node: node,
                    item: item.TestGenericObjectSpecified,
                    name: nameof(item.TestGenericObjectSpecified),
                    fieldIndex: (int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified));
            }
            if ((translationMask?.GetShouldTranslate((int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified) ?? true))
            {
                LoquiXmlTranslation<TestGenericObject<ObjectToRef, RBase, R>>.Instance.Write(
                    node: node,
                    item: item.TestGenericObjectHalfSpecified,
                    name: nameof(item.TestGenericObjectHalfSpecified),
                    fieldIndex: (int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified,
                    errorMask: errorMask,
                    translationMask: translationMask?.GetSubCrystal((int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified));
            }
        }

        public static void FillPublic_Xml<RBase, R>(
            this TestGenericSpecification<RBase, R> item,
            XElement node,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            try
            {
                foreach (var elem in node.Elements())
                {
                    TestGenericSpecificationCommon.FillPublicElement_Xml(
                        item: item,
                        node: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask,
                        translationMask: translationMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask.ReportException(ex);
            }
        }

        public static void FillPublicElement_Xml<RBase, R>(
            this TestGenericSpecification<RBase, R> item,
            XElement node,
            string name,
            ErrorMaskBuilder errorMask,
            TranslationCrystal translationMask)
            where RBase : ObjectToRef, ILoquiObject<RBase>
            where R : ILoquiObjectGetter, ILoquiObject<R>
        {
            switch (name)
            {
                case "TestGenericObjectSpecified":
                    if ((translationMask?.GetShouldTranslate((int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified);
                            if (LoquiXmlTranslation<TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>>.Instance.Parse(
                                node: node,
                                item: out TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef> TestGenericObjectSpecifiedParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified)))
                            {
                                item.TestGenericObjectSpecified = TestGenericObjectSpecifiedParse;
                            }
                            else
                            {
                                item.TestGenericObjectSpecified = default(TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                case "TestGenericObjectHalfSpecified":
                    if ((translationMask?.GetShouldTranslate((int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified) ?? true))
                    {
                        try
                        {
                            errorMask?.PushIndex((int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified);
                            if (LoquiXmlTranslation<TestGenericObject<ObjectToRef, RBase, R>>.Instance.Parse(
                                node: node,
                                item: out TestGenericObject<ObjectToRef, RBase, R> TestGenericObjectHalfSpecifiedParse,
                                errorMask: errorMask,
                                translationMask: translationMask?.GetSubCrystal((int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified)))
                            {
                                item.TestGenericObjectHalfSpecified = TestGenericObjectHalfSpecifiedParse;
                            }
                            else
                            {
                                item.TestGenericObjectHalfSpecified = default(TestGenericObject<ObjectToRef, RBase, R>);
                            }
                        }
                        catch (Exception ex)
                        when (errorMask != null)
                        {
                            errorMask.ReportException(ex);
                        }
                        finally
                        {
                            errorMask?.PopIndex();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

    }
    #endregion

    #region Modules
    #region Mask
    public class TestGenericSpecification_Mask<T> : IMask<T>, IEquatable<TestGenericSpecification_Mask<T>>
    {
        #region Ctors
        public TestGenericSpecification_Mask()
        {
        }

        public TestGenericSpecification_Mask(T initialValue)
        {
            this.TestGenericObjectSpecified = new MaskItem<T, TestGenericObject_Mask<T>>(initialValue, new TestGenericObject_Mask<T>(initialValue));
            this.TestGenericObjectHalfSpecified = new MaskItem<T, TestGenericObject_Mask<T>>(initialValue, new TestGenericObject_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, TestGenericObject_Mask<T>> TestGenericObjectSpecified { get; set; }
        public MaskItem<T, TestGenericObject_Mask<T>> TestGenericObjectHalfSpecified { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericSpecification_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericSpecification_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TestGenericObjectSpecified, rhs.TestGenericObjectSpecified)) return false;
            if (!object.Equals(this.TestGenericObjectHalfSpecified, rhs.TestGenericObjectHalfSpecified)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TestGenericObjectSpecified?.GetHashCode());
            ret = ret.CombineHashCode(this.TestGenericObjectHalfSpecified?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (TestGenericObjectSpecified != null)
            {
                if (!eval(this.TestGenericObjectSpecified.Overall)) return false;
                if (this.TestGenericObjectSpecified.Specific != null && !this.TestGenericObjectSpecified.Specific.AllEqual(eval)) return false;
            }
            if (TestGenericObjectHalfSpecified != null)
            {
                if (!eval(this.TestGenericObjectHalfSpecified.Overall)) return false;
                if (this.TestGenericObjectHalfSpecified.Specific != null && !this.TestGenericObjectHalfSpecified.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public TestGenericSpecification_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestGenericSpecification_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestGenericSpecification_Mask<R> obj, Func<T, R> eval)
        {
            if (this.TestGenericObjectSpecified != null)
            {
                obj.TestGenericObjectSpecified = new MaskItem<R, TestGenericObject_Mask<R>>();
                obj.TestGenericObjectSpecified.Overall = eval(this.TestGenericObjectSpecified.Overall);
                if (this.TestGenericObjectSpecified.Specific != null)
                {
                    obj.TestGenericObjectSpecified.Specific = this.TestGenericObjectSpecified.Specific.Translate(eval);
                }
            }
            if (this.TestGenericObjectHalfSpecified != null)
            {
                obj.TestGenericObjectHalfSpecified = new MaskItem<R, TestGenericObject_Mask<R>>();
                obj.TestGenericObjectHalfSpecified.Overall = eval(this.TestGenericObjectHalfSpecified.Overall);
                if (this.TestGenericObjectHalfSpecified.Specific != null)
                {
                    obj.TestGenericObjectHalfSpecified.Specific = this.TestGenericObjectHalfSpecified.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestGenericSpecification_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestGenericSpecification_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestGenericSpecification_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TestGenericObjectSpecified?.Overall ?? true)
                {
                    TestGenericObjectSpecified?.ToString(fg);
                }
                if (printMask?.TestGenericObjectHalfSpecified?.Overall ?? true)
                {
                    TestGenericObjectHalfSpecified?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> : IErrorMask, IErrorMask<TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask>>
        where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        where R_ErrMask : class, IErrorMask<R_ErrMask>, new()
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask, ObjectToRef_ErrorMask>> TestGenericObjectSpecified;
        public MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>> TestGenericObjectHalfSpecified;
        #endregion

        #region IErrorMask
        public object GetNthMask(int index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    return TestGenericObjectSpecified;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return TestGenericObjectHalfSpecified;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthException(int index, Exception ex)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    this.TestGenericObjectSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask, ObjectToRef_ErrorMask>>(ex, null);
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    this.TestGenericObjectHalfSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    this.TestGenericObjectSpecified = (MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask, ObjectToRef_ErrorMask>>)obj;
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    this.TestGenericObjectHalfSpecified = (MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public bool IsInError()
        {
            if (Overall != null) return true;
            if (TestGenericObjectSpecified != null) return true;
            if (TestGenericObjectHalfSpecified != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestGenericSpecification_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            TestGenericObjectSpecified?.ToString(fg);
            TestGenericObjectHalfSpecified?.ToString(fg);
        }
        #endregion

        #region Combine
        public TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> Combine(TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> rhs)
        {
            var ret = new TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask>();
            ret.TestGenericObjectSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask, ObjectToRef_ErrorMask>>(this.TestGenericObjectSpecified.Overall.Combine(rhs.TestGenericObjectSpecified.Overall), ((IErrorMask<TestGenericObject_ErrorMask<ObjectToRef_ErrorMask, ObjectToRef_ErrorMask>>)this.TestGenericObjectSpecified.Specific).Combine(rhs.TestGenericObjectSpecified.Specific));
            ret.TestGenericObjectHalfSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>>(this.TestGenericObjectHalfSpecified.Overall.Combine(rhs.TestGenericObjectHalfSpecified.Overall), ((IErrorMask<TestGenericObject_ErrorMask<RBase_ErrMask, R_ErrMask>>)this.TestGenericObjectHalfSpecified.Specific).Combine(rhs.TestGenericObjectHalfSpecified.Specific));
            return ret;
        }
        public static TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> Combine(TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> lhs, TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

        #region Factory
        public static TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask> Factory(ErrorMaskBuilder errorMask)
        {
            if (errorMask?.Empty ?? true) return null;
            return new TestGenericSpecification_ErrorMask<RBase_ErrMask, R_ErrMask>();
        }
        #endregion

    }
    public class TestGenericSpecification_CopyMask<RBase_CopyMask, R_CopyMask>
        where RBase_CopyMask : ObjectToRef_CopyMask, new()
        where R_CopyMask : class, new()
    {
        public TestGenericSpecification_CopyMask()
        {
        }

        public TestGenericSpecification_CopyMask(bool defaultOn, CopyOption deepCopyOption = CopyOption.Reference)
        {
            this.TestGenericObjectSpecified = new MaskItem<CopyOption, TestGenericObject_CopyMask<ObjectToRef_CopyMask, ObjectToRef_CopyMask>>(deepCopyOption, default);
            this.TestGenericObjectHalfSpecified = new MaskItem<CopyOption, TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask>>(deepCopyOption, default);
        }

        #region Members
        public MaskItem<CopyOption, TestGenericObject_CopyMask<ObjectToRef_CopyMask, ObjectToRef_CopyMask>> TestGenericObjectSpecified;
        public MaskItem<CopyOption, TestGenericObject_CopyMask<RBase_CopyMask, R_CopyMask>> TestGenericObjectHalfSpecified;
        #endregion

    }

    public class TestGenericSpecification_TranslationMask<RBase_TranslMask, R_TranslMask> : ITranslationMask
        where RBase_TranslMask : ObjectToRef_TranslationMask, ITranslationMask, new()
        where R_TranslMask : class, ITranslationMask, new()
    {
        #region Members
        private TranslationCrystal _crystal;
        public MaskItem<bool, TestGenericObject_TranslationMask<ObjectToRef_TranslationMask, ObjectToRef_TranslationMask>> TestGenericObjectSpecified;
        public MaskItem<bool, TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask>> TestGenericObjectHalfSpecified;
        #endregion

        #region Ctors
        public TestGenericSpecification_TranslationMask()
        {
        }

        public TestGenericSpecification_TranslationMask(bool defaultOn)
        {
            this.TestGenericObjectSpecified = new MaskItem<bool, TestGenericObject_TranslationMask<ObjectToRef_TranslationMask, ObjectToRef_TranslationMask>>(defaultOn, null);
            this.TestGenericObjectHalfSpecified = new MaskItem<bool, TestGenericObject_TranslationMask<RBase_TranslMask, R_TranslMask>>(defaultOn, null);
        }

        #endregion

        public TranslationCrystal GetCrystal()
        {
            if (_crystal != null) return _crystal;
            List<(bool On, TranslationCrystal SubCrystal)> ret = new List<(bool On, TranslationCrystal SubCrystal)>();
            GetCrystal(ret);
            _crystal = new TranslationCrystal()
            {
                Crystal = ret.ToArray()
            };
            return _crystal;
        }

        protected void GetCrystal(List<(bool On, TranslationCrystal SubCrystal)> ret)
        {
            ret.Add((TestGenericObjectSpecified?.Overall ?? true, TestGenericObjectSpecified?.Specific?.GetCrystal()));
            ret.Add((TestGenericObjectHalfSpecified?.Overall ?? true, TestGenericObjectHalfSpecified?.Specific?.GetCrystal()));
        }
    }
    #endregion

    #endregion

}
