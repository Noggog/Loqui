using Noggog.Notifying;
using Loqui.Internal;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;

namespace Loqui.Generation
{
    public abstract class ObjectGeneration
    {
        public const string AUTOGENERATED = "LoquiGenerated";
        public string Name;
        public string Namespace;
        public string InternalNamespace => $"{Namespace}.Internals";
        public string FullName => $"{Namespace}.{Name}";
        public abstract bool Abstract { get; }
        public DisabledLevel Disabled { get; protected set; }
        public bool GenerateClass { get; protected set; }
        public bool GenerateEquals { get; protected set; }
        public bool GenerateToString { get; protected set; }
        public bool GeneratePublicBasicCtor { get; protected set; }
        public abstract NotifyingOption NotifyingDefault { get; }
        public LoquiInterfaceType InterfaceTypeDefault;
        public bool ProtectedDefault;
        public bool DerivativeDefault;
        public bool RaisePropertyChangedDefault;
        public bool HasRaisedPropertyChanged => this.Fields.Any((f) => f.RaisePropertyChanged);
        public int StartingIndex => this.HasBaseObject ? this.BaseClass.StartingIndex + this.BaseClass.Fields.Count : 0;
        public ObjectGeneration BaseClass;
        public bool HasBaseObject => BaseClass != null;
        public bool IsTopClass => BaseClass == null;
        public HashSet<string> Interfaces = new HashSet<string>();
        public Dictionary<string, GenericDefinition> Generics = new Dictionary<string, GenericDefinition>();
        public string EmptyGenerics => (this.Generics.Count > 0 ? $"<{string.Join(",", this.Generics.Select((g) => string.Empty))}>" : string.Empty);
        public Dictionary<string, string> BaseGenerics = new Dictionary<string, string>();
        public virtual string FunctionOverride => " ";
        public virtual string NewOverride => " ";
        public virtual string ProtectedKeyword => "protected";
        public ushort? ID;
        public Guid GUID;
        public ushort Version;
        public XElement Node;

        // String properties
        public string ObjectName => this.Name + GenericTypes;
        public string ExtName => Name + "Ext";
        public string InterfaceStr => InterfaceStr_Generic(this.GenericTypes);
        public string RegistrationName => $"{this.Name}_Registration";
        public string Getter_InterfaceStr_NoGenerics => $"I{Name}Getter";
        public string Getter_InterfaceStr => this.Getter_InterfaceStr_NoGenerics + GenericTypes;
        public string GenericTypes => GenerateGenericClause(Generics.Select((g) => g.Key));
        public string BaseGenericTypes { get; private set; }
        public string BaseClassName => $"{this.BaseClass.Name}{this.BaseGenericTypes}";
        public string ErrorMask => $"{this.Name}_ErrorMask";
        public string CopyMask => $"{this.Name}_CopyMask";
        public string EnumName => $"{this.Name}_FieldIndex";

        public string ExtCommonName => $"{Name}Common";

        public string InterfaceStr_Generic(string genericTypes) => $"I{this.Name}{genericTypes}";

        public string Getter_InterfaceStr_Generic(string genericTypes) => $"{Getter_InterfaceStr_NoGenerics}{genericTypes}";

        public DirectoryInfo TargetDir { get; private set; }
        public FileInfo SourceXMLFile { get; private set; }
        protected LoquiGenerator gen;
        public ProtocolGeneration ProtoGen;
        public HashSet<string> RequiredNamespaces = new HashSet<string>();
        public List<GenerationInterface> GenerationInterfaces = new List<GenerationInterface>();
        public List<TypeGeneration> Fields = new List<TypeGeneration>();

        public ObjectGeneration(LoquiGenerator gen, ProtocolGeneration protoGen, FileInfo sourceFile)
        {
            this.gen = gen;
            this.ProtoGen = protoGen;
            this.TargetDir = sourceFile.Directory;
            this.SourceXMLFile = sourceFile;

            RequiredNamespaces.Add("System");
            RequiredNamespaces.Add("System.Collections");
            RequiredNamespaces.Add("System.Collections.Generic");
            RequiredNamespaces.Add("System.Linq");
            RequiredNamespaces.Add("System.Text");
            RequiredNamespaces.Add("Loqui");
            RequiredNamespaces.Add("Noggog");
            RequiredNamespaces.Add("Noggog.Notifying");
        }

        public virtual void Load()
        {
            GenerateClass = Node.GetAttribute<bool>("generateClass", true);
            GenerateEquals = Node.GetAttribute<bool>("generateEquals", true);
            GenerateToString = Node.GetAttribute<bool>("generateToString", true);
            GeneratePublicBasicCtor = Node.GetAttribute<bool>("publicCtor", true);
            Version = Node.GetAttribute<ushort>("version", 0);
            this.InterfaceTypeDefault = Node.GetAttribute<LoquiInterfaceType>("interfaceTypeDefault", this.ProtoGen.InterfaceTypeDefault);
            this.ProtectedDefault = Node.GetAttribute<bool>("protectedDefault", this.ProtoGen.ProtectedDefault);
            this.DerivativeDefault = Node.GetAttribute<bool>("derivativeDefault", this.ProtoGen.DerivativeDefault);
            this.RaisePropertyChangedDefault = Node.GetAttribute<bool>("raisePropertyChangedDefault", this.ProtoGen.RaisePropertyChangedDefault);
            this.Disabled = Node.GetAttribute<DisabledLevel>("disable", DisabledLevel.Enabled);

            var namespacesNode = Node.Element(XName.Get("Namespaces", LoquiGenerator.Namespace));
            if (namespacesNode != null)
            {
                foreach (var node in namespacesNode.Elements())
                {
                    if (!string.IsNullOrWhiteSpace(node.Value))
                    {
                        this.RequiredNamespaces.Add(node.Value);
                    }
                }
            }
            RequiredNamespaces.Add(InternalNamespace);

            foreach (var genNode in Node.Elements(XName.Get("Generic", LoquiGenerator.Namespace)))
            {
                var generic = new GenericDefinition();
                var genName = genNode.GetAttribute("name");
                var baseClass = genNode.Element(XName.Get("BaseClass", LoquiGenerator.Namespace));
                if (baseClass != null)
                {
                    generic.Add(baseClass.Value);
                }
                foreach (var where in genNode.Elements(XName.Get("Where", LoquiGenerator.Namespace)))
                {
                    generic.Add(where.Value);
                }
                this.Generics[genName] = generic;
            }

            foreach (var interfNode in Node.Elements(XName.Get("Interface", LoquiGenerator.Namespace)))
            {
                Interfaces.Add(interfNode.Value);
            }

            var fieldsNode = Node.Element(XName.Get("Fields", LoquiGenerator.Namespace));
            if (fieldsNode != null)
            {
                foreach (var fieldNode in fieldsNode.Elements())
                {
                    if (LoadField(fieldNode, true, out TypeGeneration typeGen))
                    {
                        Fields.Add(typeGen);
                    }
                }
            }

            foreach (var interf in this.GenerationInterfaces)
            {
                interf.Modify(this);
            }

            foreach (var mods in this.gen.GenerationModules)
            {
                mods.Modify(this);
            }
        }

        public bool LoadField(XElement fieldNode, bool requireName, out TypeGeneration typeGen)
        {
            if (fieldNode.NodeType == System.Xml.XmlNodeType.Comment)
            {
                typeGen = null;
                return false;
            }

            if (!gen.TryGetTypeGeneration(fieldNode.Name.LocalName, out typeGen))
            {
                throw new ArgumentException("Unknown field type: " + fieldNode.Name);
            }

            typeGen.ObjectGen = this;
            typeGen.ProtoGen = this.ProtoGen;
            typeGen.Load(fieldNode, requireName);
            var name = typeGen.Name;
            if (this.Fields.Any((f) => f.Name?.Equals(name) ?? false))
            {
                throw new ArgumentException("Cannot have two fields with the same name.");
            }
            return true;
        }

        public void Generate()
        {
            if (this.Disabled != DisabledLevel.Enabled) return;
            FileGeneration fg = new FileGeneration();
            fg.AppendLine("/*");
            fg.AppendLine(" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ");
            fg.AppendLine(" * Autogenerated by Loqui.  Do not manually change.");
            fg.AppendLine(" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ");
            fg.AppendLine("*/");

            AddNamespaces(fg);

            using (new NamespaceWrapper(fg, this.Namespace))
            {
                if (GenerateClass)
                {
                    GenerateClassFile(fg);
                }

                GenerateInterfaces(fg);
            }
            fg.AppendLine();

            using (new NamespaceWrapper(fg, this.InternalNamespace))
            {
                GenerateEnumIndex(fg);
                GenerateRegistration(fg);
                GenerateInterfaceExtensions(fg);
                GenerateTranslations(fg);
                GenerateLoquiInterfaces(fg);
            }

            var fileName = $"{TargetDir.FullName}\\{this.Name}_{AUTOGENERATED}.cs";
            fg.Generate(new FileInfo(fileName));
            if (!this.gen.GeneratedFiles.Add(fileName))
            {
                throw new ArgumentException();
            }
        }

        public bool HasKeyField()
        {
            foreach (var field in this.Fields)
            {
                if (field.KeyField) return true;
            }
            if (this.HasBaseObject)
            {
                return this.BaseClass.HasKeyField();
            }
            return false;
        }

        protected string GenerateGenericClause(IEnumerable<string> keys)
        {
            if (!keys.Any()) return string.Empty;
            return $"<{string.Join(", ", keys)}>";
        }

        public void WriteWhereClauses(FileGeneration fg, IEnumerable<KeyValuePair<string, GenericDefinition>> defs)
        {
            using (new DepthWrapper(fg))
            {
                foreach (var item in GenerateWhereClauses(defs))
                {
                    fg.AppendLine(item);
                }
            }
        }

        public IEnumerable<string> GenerateWhereClauses(IEnumerable<KeyValuePair<string, GenericDefinition>> defs = null)
        {
            foreach (var gen in (defs ?? this.Generics))
            {
                List<string> wheres = new List<string>();
                if (gen.Value.MustBeClass)
                {
                    wheres.Add("class");
                }
                wheres.AddRange(gen.Value.Wheres);
                if (wheres.Count > 0)
                {
                    yield return $"where {gen.Key} : {string.Join(", ", wheres)}";
                }
            }
        }

        private void GenerateClassFile(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Class"))
            {
                GenerateClassLine(fg);

                WriteWhereClauses(fg, this.Generics);

                using (new BraceWrapper(fg))
                {
                    GenerateRegistrationRouting(fg);

                    GenerateRaisePropertyChanged(fg);

                    GenerateCtor(fg);
                    // Generate fields
                    foreach (var field in Fields)
                    {
                        if (!field.GenerateClassMembers) continue;
                        using (new RegionWrapper(fg, field.Name) { AppendExtraLine = false })
                        {
                            field.GenerateForClass(fg);
                        }
                    }
                    fg.AppendLine();

                    GenerateLoquiGetterInterface(fg);

                    GenerateLoquiSetterInterface(fg);

                    GenerateToStringCode(fg);

                    GenerateEqualsSection(fg);

                    GenerateModules(fg);

                    GenerateInterfacesInClass(fg);

                    GenerateCopy(fg);

                    GenerateSetNthObject(fg);

                    GenerateClear(fg, true);

                    GenerateGenericCreate(fg);
                }
            }
        }

        private void GenerateInterfaces(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Interface"))
            {
                GenerateSetterInterface(fg);
                GenerateGetterInterface(fg);
            }
        }

        protected virtual void GenerateSetterInterface(FileGeneration fg)
        {
            // Interface
            fg.AppendLine($"public interface {this.InterfaceStr} : {this.Getter_InterfaceStr}{(this.HasBaseObject ? ", " + this.BaseClass.InterfaceStr_Generic(this.BaseGenericTypes) : string.Empty)}, ILoquiClass<{this.InterfaceStr}, {this.Getter_InterfaceStr}>, ILoquiClass<{this.ObjectName}, {this.Getter_InterfaceStr}>");
            WriteWhereClauses(fg, this.Generics);
            using (new BraceWrapper(fg))
            {
                foreach (var field in Fields)
                {
                    field.GenerateForInterface(fg);
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateGetterInterface(FileGeneration fg)
        {
            // Getter 
            fg.AppendLine($"public interface {this.Getter_InterfaceStr} : {(this.HasBaseObject ? this.BaseClass.Getter_InterfaceStr_Generic(this.BaseGenericTypes) : nameof(ILoquiObject))}");
            WriteWhereClauses(fg, this.Generics);

            using (new BraceWrapper(fg))
            {
                foreach (var field in Fields)
                {
                    using (new RegionWrapper(fg, field.Name) { AppendExtraLine = false })
                    {
                        field.GenerateForGetterInterface(fg);
                    }
                }
                fg.AppendLine();

                foreach (var mod in this.gen.GenerationModules)
                {
                    using (new RegionWrapper(fg, mod.RegionString))
                    {
                        mod.GenerateInInterfaceGetter(this, fg);
                    }
                }
            }
            fg.AppendLine();
        }

        protected void GenerateEnumIndex(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Field Index"))
            {
                fg.AppendLine($"public enum {this.EnumName}");
                using (new BraceWrapper(fg))
                {
                    foreach (var field in this.IterateFields())
                    {
                        fg.AppendLine($"{field.Field.Name} = {field.Index},");
                    }
                }
            }
        }

        protected void GenerateRegistration(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Registration"))
            {
                fg.AppendLine($"public class {this.RegistrationName} : ILoquiRegistration");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"public static readonly {this.RegistrationName} Instance = new {this.RegistrationName}();");
                    fg.AppendLine();

                    fg.AppendLine($"public static ProtocolDefinition ProtocolDefinition => ProtocolDefinition_{this.ProtoGen.Definition.Nickname}.Definition;");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly ObjectKey ObjectKey = new ObjectKey(");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"protocolKey: ProtocolDefinition_{this.ProtoGen.Definition.Nickname}.ProtocolKey,");
                        fg.AppendLine($"msgID: {this.ID},");
                        fg.AppendLine($"version: {this.Version});");
                    }
                    fg.AppendLine();

                    fg.AppendLine($"public const string GUID = \"{this.GUID}\";");
                    fg.AppendLine();

                    fg.AppendLine($"public const ushort FieldCount = {this.Fields.Count};");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly Type MaskType = typeof({this.GetMaskString("")});");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly Type ErrorMaskType = typeof({this.ErrorMask});");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly Type ClassType = typeof({this.Name}{this.EmptyGenerics});");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly Type CommonType = typeof({this.ExtCommonName});");
                    fg.AppendLine();

                    fg.AppendLine($"public const string FullName = \"{this.FullName}\";");
                    fg.AppendLine();

                    fg.AppendLine($"public const string Name = \"{this.Name}\";");
                    fg.AppendLine();

                    fg.AppendLine($"public const byte GenericCount = {this.Generics.Count};");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly Type GenericRegistrationType = {(this.Generics.Count > 0 ? $"typeof({this.RegistrationName}{this.EmptyGenerics})" : "null")};");
                    fg.AppendLine();

                    GenerateGetNameIndex(fg);

                    GenerateNthObjectIsEnumerable(fg);

                    GenerateNthObjectIsLoqui(fg);

                    GenerateGetNthIsSingleton(fg);

                    GenerateGetNthName(fg);

                    GenerateNthObjectIsDerivative(fg);

                    GenerateIsProtected(fg);

                    if (this.Generics.Count == 0)
                    {
                        GenerateGetNthType(fg, false);
                    }
                    else
                    {
                        fg.AppendLine("public static Type GetNthType(ushort index) => throw new ArgumentException(\"Cannot get nth type for a generic object here.  Use generic registration instead.\");");
                        fg.AppendLine();
                    }

                    using (new RegionWrapper(fg, "Interface"))
                    {
                        fg.AppendLine($"ProtocolDefinition ILoquiRegistration.ProtocolDefinition => ProtocolDefinition;");
                        fg.AppendLine($"ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;");
                        fg.AppendLine($"string ILoquiRegistration.GUID => GUID;");
                        fg.AppendLine($"int ILoquiRegistration.FieldCount => FieldCount;");
                        fg.AppendLine($"Type ILoquiRegistration.MaskType => MaskType;");
                        fg.AppendLine($"Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;");
                        fg.AppendLine($"Type ILoquiRegistration.ClassType => ClassType;");
                        fg.AppendLine($"Type ILoquiRegistration.CommonType => CommonType;");
                        fg.AppendLine($"string ILoquiRegistration.FullName => FullName;");
                        fg.AppendLine($"string ILoquiRegistration.Name => Name;");
                        fg.AppendLine($"byte ILoquiRegistration.GenericCount => GenericCount;");
                        fg.AppendLine($"Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;");
                        fg.AppendLine($"ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);");
                        fg.AppendLine($"bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);");
                        fg.AppendLine($"bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);");
                        fg.AppendLine($"bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);");
                        fg.AppendLine($"string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);");
                        fg.AppendLine($"bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);");
                        fg.AppendLine($"bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);");
                        fg.AppendLine($"Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);");

                    }
                }

                if (this.Generics.Count > 0)
                {
                    fg.AppendLine();
                    fg.AppendLine($"public class {this.RegistrationName}{this.GenericTypes} : {this.RegistrationName}");
                    WriteWhereClauses(fg, this.Generics);
                    using (new BraceWrapper(fg))
                    {
                        fg.AppendLine($"public static readonly {this.RegistrationName}{this.GenericTypes} GenericInstance = new {this.RegistrationName}{this.GenericTypes}();");
                        fg.AppendLine();

                        GenerateGetNthType(fg, true);
                    }
                }
            }
        }

        private void GenerateInterfaceExtensions(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Extensions"))
            {
                fg.AppendLine($"public static class {this.ExtCommonName}");

                using (new BraceWrapper(fg))
                {
                    GenerateCopyFieldsFrom(fg);

                    GenerateSetNthObjectHasBeenSet(fg, false);

                    GenerateUnsetNthObject(fg);

                    GenerateGetNthObjectHasBeenSet(fg);

                    GenerateGetNthObject(fg);

                    GenerateClear(fg, false);

                    GenerateGetEqualsMask(fg);

                    // Fields might add some content
                    foreach (var field in this.Fields)
                    {
                        field.GenerateForInterfaceExt(fg);
                    }

                    // Modules might add some content
                    foreach (var mod in this.gen.GenerationModules)
                    {
                        using (new RegionWrapper(fg, mod.RegionString))
                        {
                            mod.GenerateInCommonExt(this, fg);
                        }
                    }
                }
            }
        }

        protected virtual void GenerateStaticCopy_ToLoqui(FileGeneration fg)
        {
            fg.AppendLine($"return {this.ObjectName}.Copy(item, def: null);");
        }

        protected virtual void GenerateCopyFieldsFrom(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Copy Fields From"))
            {
                using (var args = new FunctionWrapper(fg,
                    $"public static void CopyFieldsFrom{this.GenericTypes}",
                    GenerateWhereClauses().ToArray()))
                {
                    args.Add($"this {this.InterfaceStr} item");
                    args.Add($"{this.Getter_InterfaceStr} rhs");
                    args.Add($"{this.Getter_InterfaceStr} def");
                    args.Add($"bool doErrorMask");
                    args.Add($"out {this.ErrorMask} errorMask");
                    args.Add($"{this.CopyMask} copyMask");
                    args.Add($"NotifyingFireParameters? cmds");
                }
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"{this.ErrorMask} retErrorMask = null;");
                    fg.AppendLine($"Func<{this.ErrorMask}> maskGetter = () =>");
                    using (new BraceWrapper(fg) { AppendSemicolon = true })
                    {
                        fg.AppendLine($"if (retErrorMask == null)");
                        using (new BraceWrapper(fg))
                        {
                            fg.AppendLine($"retErrorMask = new {this.ErrorMask}();");
                        }
                        fg.AppendLine("return retErrorMask;");
                    }
                    using (var args = new ArgsWrapper(fg,
                        $"CopyFieldsFrom{this.GenericTypes}"))
                    {
                        args.Add("item: item");
                        args.Add("rhs: rhs");
                        args.Add("def: def");
                        args.Add("doErrorMask: true");
                        args.Add("errorMask: maskGetter");
                        args.Add("copyMask: copyMask");
                        args.Add("cmds: cmds");
                    }
                    fg.AppendLine("errorMask = retErrorMask;");
                }
                fg.AppendLine();

                using (var args = new FunctionWrapper(fg,
                    $"public static void CopyFieldsFrom{this.GenericTypes}",
                    GenerateWhereClauses().ToArray()))
                {
                    args.Add($"this {this.InterfaceStr} item");
                    args.Add($"{this.Getter_InterfaceStr} rhs");
                    args.Add($"{this.Getter_InterfaceStr} def");
                    args.Add($"bool doErrorMask");
                    args.Add($"Func<{this.ErrorMask}> errorMask");
                    args.Add($"{this.CopyMask} copyMask");
                    args.Add($"NotifyingFireParameters? cmds");
                }
                using (new BraceWrapper(fg))
                {
                    GenerateCopyForFields(
                        fg,
                        "item",
                        "rhs",
                        defaultFallbackAccessor: "def",
                        doErrMaskAccessor: "doErrorMask",
                        errMaskAccessor: "errorMask",
                        copyMaskAccessor: "copyMask",
                        cmdsAccessor: "cmds");
                }
                fg.AppendLine();
            }
        }

        private void GenerateCopyForFields(
            FileGeneration fg,
            string accessorPrefix,
            string rhsAccessorPrefix,
            string defaultFallbackAccessor,
            string doErrMaskAccessor,
            string errMaskAccessor,
            string copyMaskAccessor,
            string cmdsAccessor)
        {
            if (this.HasBaseObject)
            {
                using (var args = new ArgsWrapper(fg,
                    $"{this.BaseClass.ExtCommonName}.CopyFieldsFrom{this.BaseGenericTypes}"))
                {
                    args.Add(accessorPrefix);
                    args.Add(rhsAccessorPrefix);
                    args.Add(defaultFallbackAccessor);
                    args.Add(doErrMaskAccessor);
                    args.Add(errMaskAccessor);
                    args.Add(copyMaskAccessor);
                    args.Add(cmdsAccessor);
                }
            }

            foreach (var item in this.IterateFields())
            {
                if (item.Field.Copy)
                {
                    fg.AppendLine($"if ({item.Field.SkipCheck(copyMaskAccessor)})");
                    using (new BraceWrapper(fg))
                    {
                        if (item.Field.CopyNeedsTryCatch)
                        {
                            fg.AppendLine("try");
                            using (new BraceWrapper(fg))
                            {
                                item.Field.GenerateForCopy(
                                    fg,
                                    accessorPrefix,
                                    rhsAccessorPrefix,
                                    copyMaskAccessor,
                                    defaultFallbackAccessor,
                                    cmdsAccessor: cmdsAccessor,
                                    protectedMembers: false);
                            }
                            GenerateExceptionCatcher(fg, item.Field, doErrMaskAccessor, errMaskAccessor, $"{item.Field.IndexEnumName}");
                        }
                        else
                        {
                            item.Field.GenerateForCopy(
                                fg,
                                accessorPrefix,
                                rhsAccessorPrefix,
                                copyMaskAccessor,
                                defaultFallbackAccessor,
                                cmdsAccessor: cmdsAccessor,
                                protectedMembers: false);
                        }
                    }
                }
            }
        }

        #region Generation Snippets
        protected void GenerateRegistrationRouting(FileGeneration fg)
        {
            fg.AppendLine($"ILoquiRegistration ILoquiObject.Registration => {this.RegistrationName}.Instance;");
            fg.AppendLine($"public{NewOverride}static {this.RegistrationName} Registration => {this.RegistrationName}.Instance;");
            fg.AppendLine();
        }

        protected void GenerateRaisePropertyChanged(FileGeneration fg)
        {
            if (!this.HasRaisedPropertyChanged) return;
            using (new RegionWrapper(fg, "PropertyChangedHandler"))
            {
                fg.AppendLine($"public event PropertyChangedEventHandler PropertyChanged;");
                fg.AppendLine();

                fg.AppendLine($"protected void OnPropertyChanged(string name)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));");
                }
            }
        }

        protected abstract void GenerateCtor(FileGeneration fg);

        protected abstract void GenerateClassLine(FileGeneration fg);

        public void GenerateLoquiGetterInterface(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Loqui Getter Interface"))
            {
                fg.AppendLine();

                fg.AppendLine($"protected{this.FunctionOverride}object GetNthObject(ushort index) => {this.ExtCommonName}.GetNthObject{this.GenericTypes}(index, this);");
                if (this.IsTopClass)
                {
                    fg.AppendLine($"object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);");
                }
                fg.AppendLine();

                using (new LineWrapper(fg))
                {
                    fg.Append($"protected{this.FunctionOverride}bool GetNthObjectHasBeenSet(ushort index) => ");
                    if (this is ClassGeneration)
                    {
                        fg.Append($"{this.ExtCommonName}.GetNthObjectHasBeenSet{this.GenericTypes}(index, this);");
                    }
                    else
                    {
                        fg.Append("true;");
                    }
                }
                if (this.IsTopClass)
                {
                    fg.AppendLine($"bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);");
                }
                fg.AppendLine();

                fg.AppendLine($"protected{this.FunctionOverride}void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => {this.ExtCommonName}.UnsetNthObject{this.GenericTypes}(index, this, cmds);");
                if (this.IsTopClass)
                {
                    fg.AppendLine($"void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);");
                }
                fg.AppendLine();
            }
        }

        protected virtual void GenerateLoquiSetterInterface(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Loqui Interface"))
            {
                fg.AppendLine($"protected{this.FunctionOverride}void SetNthObjectHasBeenSet(ushort index, bool on)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"{this.ExtCommonName}.SetNthObjectHasBeenSet{this.GenericTypes}(index, on, this);");
                }
                if (this.IsTopClass)
                {
                    fg.AppendLine($"void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);");
                }
                fg.AppendLine();

                // Generic version
                using (var args = new FunctionWrapper(fg,
                    $"public void CopyFieldsFrom"))
                {
                    args.Add($"{this.Getter_InterfaceStr} rhs");
                    args.Add($"{this.CopyMask} copyMask = null");
                    args.Add($"{this.Getter_InterfaceStr} def = null");
                    args.Add($"NotifyingFireParameters? cmds = null");
                }
                using (new BraceWrapper(fg))
                {
                    using (var args = new ArgsWrapper(fg,
                        $"{this.ExtCommonName}.CopyFieldsFrom{this.GenericTypes}"))
                    {
                        args.Add("item: this");
                        args.Add("rhs: rhs");
                        args.Add("def: def");
                        args.Add("doErrorMask: false");
                        args.Add("errorMask: null");
                        args.Add("copyMask: copyMask");
                        args.Add("cmds: cmds");
                    }
                }
                fg.AppendLine();

                using (var args = new FunctionWrapper(fg,
                    $"public void CopyFieldsFrom"))
                {
                    args.Add($"{this.Getter_InterfaceStr} rhs");
                    args.Add($"out {this.ErrorMask} errorMask");
                    args.Add($"{this.CopyMask} copyMask = null");
                    args.Add($"{this.Getter_InterfaceStr} def = null");
                    args.Add($"NotifyingFireParameters? cmds = null");
                }
                using (new BraceWrapper(fg))
                {
                    using (var args = new ArgsWrapper(fg,
                        $"{this.ExtCommonName}.CopyFieldsFrom{this.GenericTypes}"))
                    {
                        args.Add("item: this");
                        args.Add("rhs: rhs");
                        args.Add("def: def");
                        args.Add("doErrorMask: true");
                        args.Add("errorMask: out errorMask");
                        args.Add("copyMask: copyMask");
                        args.Add("cmds: cmds");
                    }
                }
                fg.AppendLine();

                using (var args = new FunctionWrapper(fg,
                    $"public void CopyFieldsFrom"))
                {
                    args.Add($"{this.Getter_InterfaceStr} rhs");
                    args.Add($"bool doErrorMask");
                    args.Add($"out {this.ErrorMask} errorMask");
                    args.Add($"{this.CopyMask} copyMask = null");
                    args.Add($"{this.Getter_InterfaceStr} def = null");
                    args.Add($"NotifyingFireParameters? cmds = null");
                }
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine("if (doErrorMask)");
                    using (new BraceWrapper(fg))
                    {
                        using (var args = new ArgsWrapper(fg,
                            "CopyFieldsFrom"))
                        {
                            args.Add("rhs: rhs");
                            args.Add("errorMask: out errorMask");
                            args.Add("copyMask: copyMask");
                            args.Add("def: def");
                            args.Add("cmds: cmds");
                        }
                    }
                    fg.AppendLine("else");
                    using (new BraceWrapper(fg))
                    {
                        fg.AppendLine("errorMask = null;");
                        using (var args = new ArgsWrapper(fg,
                            "CopyFieldsFrom"))
                        {
                            args.Add("rhs: rhs");
                            args.Add("copyMask: copyMask");
                            args.Add("def: def");
                            args.Add("cmds: cmds");
                        }
                    }
                }
                fg.AppendLine();
            }
        }

        private void GenerateProtocolProperty(FileGeneration fg)
        {
            fg.AppendLine($"public static ProtocolKey Loqui_ProtocolKey_Static => new ProtocolKey({ProtoGen.Definition.Key.ProtocolID});");

            fg.AppendLine($"public{FunctionOverride}ProtocolKey Loqui_ProtocolKey => Loqui_ProtocolKey_Static;");

            fg.AppendLine("public static ProtocolDefinition Loqui_ProtocolDefinition_Static => new ProtocolDefinition(");
            using (new DepthWrapper(fg))
            {
                fg.AppendLine($"key: Loqui_ProtocolKey_Static,");
                fg.AppendLine($"nickname: \"{this.ProtoGen.Definition.Nickname}\");");
            }

            fg.AppendLine($"public{FunctionOverride}ProtocolDefinition Loqui_ProtocolDefinition => Loqui_ProtocolDefinition_Static;");

            fg.AppendLine($"public static ObjectKey Loqui_ObjectKey_Static => new ObjectKey(protocolKey: Loqui_ProtocolKey_Static, msgID: {this.ID}, version: {this.Version});");

            fg.AppendLine($"public{FunctionOverride}ObjectKey Loqui_ObjectKey => Loqui_ObjectKey_Static;");
        }

        private void GenerateGetNthObject(FileGeneration fg)
        {
            using (var args = new FunctionWrapper(fg,
                $"public static object GetNthObject{this.GenericTypes}",
                GenerateWhereClauses().ToArray()))
            {
                args.Add($"ushort index");
                args.Add($"{this.Getter_InterfaceStr} obj");
            }
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        using (new DepthWrapper(fg))
                        {
                            item.Field.GenerateGetNth(fg, "obj");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "GetNthObject", "index", true, true, "obj");
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateGetNthObjectHasBeenSet(FileGeneration fg)
        {
            using (var args = new FunctionWrapper(fg,
                $"public static bool GetNthObjectHasBeenSet{this.GenericTypes}",
                GenerateWhereClauses().ToArray()))
            {
                args.Add($"ushort index");
                args.Add($"{this.InterfaceStr} obj");
            }
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    var nonNotifying = IterateFields()
                        .Where((f) => f.Field.Notifying == NotifyingOption.None).ToList();
                    if (nonNotifying.Count > 0)
                    {
                        foreach (var item in nonNotifying)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"return true;");
                        }
                    }

                    foreach (var item in IterateFields())
                    {
                        if (item.Field.Notifying == NotifyingOption.None) continue;
                        fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"return obj.{item.Field.HasBeenSetAccessor};");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "GetNthObjectHasBeenSet", "index", true, true, "obj");
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateSetNthObject(FileGeneration fg)
        {
            if (this.IsTopClass)
            {
                fg.AppendLine("void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);");
            }
            fg.AppendLine($"protected{FunctionOverride}void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    var derivatives = IterateFields()
                        .Where((f) => f.Field.Derivative).ToList();
                    if (derivatives.Count > 0)
                    {
                        foreach (var item in derivatives)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("throw new ArgumentException($\"Tried to set at a derivative index {index}\");");
                        }
                    }
                    foreach (var item in IterateFields())
                    {
                        if (item.Field.Derivative) continue;
                        fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        using (new DepthWrapper(fg))
                        {
                            item.Field.GenerateInterfaceSet(
                                fg,
                                accessorPrefix: $"this",
                                rhsAccessorPrefix: $"({item.Field.SetToName})obj",
                                cmdsAccessor: "cmds");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "SetNthObject", "index", false, false, "obj", "cmds");
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateSetNthObjectHasBeenSet(FileGeneration fg, bool internalUse)
        {
            using (var args = new FunctionWrapper(fg,
                $"public {(internalUse ? string.Empty : "static ")}void SetNthObjectHasBeenSet{(internalUse ? "_Internal" : string.Empty)}{this.GenericTypes}",
                GenerateWhereClauses().ToArray()))
            {
                args.Add($"ushort index");
                args.Add($"bool on");
                args.Add($"{(internalUse ? this.ObjectName : this.InterfaceStr)} obj");
                args.Add($"{nameof(NotifyingFireParameters)}? cmds = null");
            }
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    var derivatives = IterateFields()
                        .Where((f) => f.Field.Derivative).ToList();
                    if (derivatives.Count > 0)
                    {
                        foreach (var item in derivatives)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("throw new ArgumentException($\"Tried to set at a derivative index {index}\");");
                        }
                    }
                    foreach (var item in IterateFields())
                    {
                        if (item.Field.Derivative) continue;
                        fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        using (new DepthWrapper(fg))
                        {
                            if (!internalUse && item.Field.Protected)
                            {
                                fg.AppendLine("throw new ArgumentException(\"Tried to set at a readonly index \" + index);");
                            }
                            else
                            {
                                item.Field.GenerateSetNthHasBeenSet(fg, "obj", "on", internalUse);
                            }
                        }
                    }

                    GenerateStandardIndexDefault(fg, "SetNthObjectHasBeenSet", "index", false, true, "on", "obj");
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateUnsetNthObject(FileGeneration fg)
        {
            using (var args = new FunctionWrapper(fg,
                $"public static void UnsetNthObject{this.GenericTypes}",
                this.GenerateWhereClauses().ToArray()))
            {
                args.Add("ushort index");
                args.Add($"{this.InterfaceStr} obj");
                args.Add($"{nameof(NotifyingUnsetParameters)}? cmds = null");
            }
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    var derivatives = IterateFields()
                        .Where((f) => f.Field.Derivative).ToList();
                    if (derivatives.Count > 0)
                    {
                        foreach (var item in derivatives)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("throw new ArgumentException($\"Tried to unset at a derivative index {index}\");");
                        }
                    }
                    foreach (var item in IterateFields())
                    {
                        if (item.Field.Derivative) continue;

                        fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        using (new DepthWrapper(fg))
                        {
                            if (item.Field.Protected)
                            {
                                fg.AppendLine("throw new ArgumentException(\"Tried to set at a readonly index \" + index);");
                            }
                            else
                            {
                                item.Field.GenerateUnsetNth(fg, "obj", "cmds");
                            }
                        }
                    }

                    GenerateStandardIndexDefault(fg, "UnsetNthObject", "index", false, true, "obj");
                }
            }
            fg.AppendLine();
        }

        private void GenerateNthObjectIsLoqui(FileGeneration fg)
        {
            fg.AppendLine("public static bool GetNthIsLoqui(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    Func<TypeGeneration, bool> tester = (t) =>
                    {
                        if (t is LoquiType)
                        {
                            return true;
                        }
                        else if (t is ContainerType)
                        {
                            ContainerType listField = t as ContainerType;
                            if (listField.SubTypeGeneration is LoquiType)
                            {
                                return true;
                            }
                            else
                            {
                                return false;
                            }
                        }
                        else
                        {
                            return false;
                        }
                    };

                    var trues = IterateFields().Where((i) => tester(i.Field));
                    var falses = IterateFields().Where((i) => !tester(i.Field));
                    if (trues.Any())
                    {
                        foreach (var item in trues)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    if (falses.Any())
                    {
                        foreach (var item in falses)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return false;");
                        }
                    }

                    GenerateStandardRegistrationDefault(fg, "GetNthIsLoqui", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateNthObjectIsDerivative(FileGeneration fg)
        {
            fg.AppendLine("public static bool IsNthDerivative(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    var trues = IterateFields().Where((i) => i.Field.Derivative);
                    var falses = IterateFields().Where((i) => !i.Field.Derivative);
                    if (trues.Any())
                    {
                        foreach (var item in trues)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    if (falses.Any())
                    {
                        foreach (var item in falses)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return false;");
                        }
                    }

                    GenerateStandardRegistrationDefault(fg, "IsNthDerivative", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateNthObjectIsEnumerable(FileGeneration fg)
        {
            fg.AppendLine("public static bool GetNthIsEnumerable(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    var trues = IterateFields().Where((i) => i.Field is ContainerType);
                    var falses = IterateFields().Where((i) => !(i.Field is ContainerType));
                    if (trues.Any())
                    {
                        foreach (var item in trues)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    if (falses.Any())
                    {
                        foreach (var item in falses)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return false;");
                        }
                    }

                    GenerateStandardRegistrationDefault(fg, "GetNthIsEnumerable", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateGetNthType(FileGeneration fg, bool generic)
        {
            fg.AppendLine($"public{(generic ? " new " : " ")}static Type GetNthType(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"return typeof({item.Field.TypeName});");
                        }
                    }

                    GenerateStandardRegistrationDefault(fg, "GetNthType", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateGetNthName(FileGeneration fg)
        {
            fg.AppendLine("public static string GetNthName(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"return \"{item.Field.Name}\";");
                        }
                    }

                    GenerateStandardRegistrationDefault(fg, "GetNthName", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateGetNthIsSingleton(FileGeneration fg)
        {
            fg.AppendLine("public static bool GetNthIsSingleton(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    Func<TypeGeneration, bool> tester = (f) =>
                    {
                        if (!(f is LoquiType loqui)) return false;
                        return loqui.SingletonType == LoquiType.SingletonLevel.Singleton;
                    };
                    var trues = IterateFields().Where((i) => tester(i.Field));
                    var falses = IterateFields().Where((i) => !tester(i.Field));
                    if (trues.Any())
                    {
                        foreach (var item in trues)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    if (falses.Any())
                    {
                        foreach (var item in falses)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return false;");
                        }
                    }

                    GenerateStandardRegistrationDefault(fg, "GetNthIsSingleton", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateGetEqualsMask(FileGeneration fg)
        {

            using (var args = new FunctionWrapper(fg, $"public static {this.GetMaskString("bool")} GetEqualsMask{this.GenericTypes}",
                GenerateWhereClauses().ToArray()))
            {
                args.Add($"this {this.Getter_InterfaceStr} item");
                args.Add($"{this.Getter_InterfaceStr} rhs");
            }
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"var ret = new {this.GetMaskString("bool")}();");
                fg.AppendLine($"FillEqualsMask(item, rhs, ret);");
                fg.AppendLine("return ret;");
            }
            fg.AppendLine();

            using (var args = new FunctionWrapper(fg, $"public static void FillEqualsMask{this.GenericTypes}",
                GenerateWhereClauses().ToArray()))
            {
                args.Add($"this {this.Getter_InterfaceStr} item");
                args.Add($"{this.Getter_InterfaceStr} rhs");
                args.Add($"{this.GetMaskString("bool")} ret");
            }
            using (new BraceWrapper(fg))
            {
                foreach (var field in Fields)
                {
                    if (!HasKeyField() || field.KeyField)
                    {
                        field.GenerateForEqualsMask(fg, $"item.{field.PropertyOrName}", $"rhs.{field.PropertyOrName}", $"ret.{field.Name}");
                    }
                }
                if (this.HasBaseObject)
                {
                    fg.AppendLine($"{this.BaseClass.ExtCommonName}.FillEqualsMask(item, rhs, ret);");
                }
            }
            fg.AppendLine();
        }

        public void GenerateStandardRegistrationDefault(FileGeneration fg, string functionName, string indexAccessor, bool ret, params string[] otherParameters)
        {
            fg.AppendLine("default:");
            using (new DepthWrapper(fg))
            {
                if (this.HasBaseObject)
                {
                    fg.AppendLine($"{(ret ? "return " : string.Empty)}{BaseClass.RegistrationName}.{functionName}({string.Join(", ", indexAccessor.And(otherParameters))});");
                    if (!ret)
                    {
                        fg.AppendLine("break;");
                    }
                }
                else
                {
                    GenerateIndexOutOfRangeEx(fg, indexAccessor);
                }
            }
        }

        public void GenerateStandardIndexDefault(
            FileGeneration fg,
            string functionName,
            string indexAccessor,
            bool ret,
            bool common,
            params string[] otherParameters)
        {
            fg.AppendLine("default:");
            using (new DepthWrapper(fg))
            {
                if (this.HasBaseObject)
                {
                    if (common)
                    {
                        fg.AppendLine($"{(ret ? "return " : string.Empty)}{BaseClass.ExtCommonName}.{functionName}{this.BaseGenericTypes}({string.Join(", ", indexAccessor.And(otherParameters))});");
                    }
                    else
                    {
                        fg.AppendLine($"{(ret ? "return " : string.Empty)}base.{functionName}({string.Join(", ", indexAccessor.And(otherParameters))});");
                    }
                    if (!ret)
                    {
                        fg.AppendLine("break;");
                    }
                }
                else
                {
                    GenerateIndexOutOfRangeEx(fg, indexAccessor);
                }
            }
        }

        public void GenerateIndexOutOfRangeEx(FileGeneration fg, string indexAccessor)
        {
            fg.AppendLine($"throw new ArgumentException($\"Index is out of range: {{{indexAccessor}}}\");");
        }

        private void GenerateGetNameIndex(FileGeneration fg)
        {
            fg.AppendLine("public static ushort? GetNameIndex(StringCaseAgnostic str)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (str.Upper)");
                using (new BraceWrapper(fg))
                {
                    for (int i = 0; i < this.Fields.Count; i++)
                    {
                        fg.AppendLine($"case \"{this.Fields[i].Name.ToUpper()}\":");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"return (ushort){this.EnumName}.{this.Fields[i].Name};");
                        }
                    }

                    fg.AppendLine("default:");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine("return null;");
                    }
                }
            }
            fg.AppendLine();
        }

        private void AddNamespaces(FileGeneration fg)
        {
            RequiredNamespaces.Add(
                this.gen.GenerationModules.SelectMany((tr) => tr.RequiredUsingStatements())
                .Union(this.GenerationInterfaces.SelectMany((i) => i.RequiredUsingStatements())));
            foreach (var nameSpace in RequiredNamespaces.Union(gen.Namespaces))
            {
                fg.AppendLine($"using {nameSpace};");
            }
            fg.AppendLine();
        }

        protected abstract void GenerateEqualsCode(FileGeneration fg);

        private void GenerateEqualsSection(FileGeneration fg)
        {
            // Generate equals and hash
            if (GenerateEquals)
            {
                using (new RegionWrapper(fg, "Equals and Hash"))
                {
                    fg.AppendLine("public override bool Equals(object obj)");
                    using (new BraceWrapper(fg))
                    {
                        GenerateEqualsCode(fg);
                    }
                    fg.AppendLine();

                    fg.AppendLine($"public bool Equals({this.ObjectName} rhs)");
                    using (new BraceWrapper(fg))
                    {
                        foreach (var field in Fields)
                        {
                            if (!HasKeyField() || field.KeyField)
                            {
                                if (field.Notifying == NotifyingOption.None)
                                {
                                    field.GenerateForEquals(fg, "rhs");
                                }
                                else
                                {
                                    fg.AppendLine($"if ({field.HasBeenSetAccessor} != rhs.{field.HasBeenSetAccessor}) return false;");
                                    fg.AppendLine($"if ({field.HasBeenSetAccessor})");
                                    using (new BraceWrapper(fg))
                                    {
                                        field.GenerateForEquals(fg, "rhs");
                                    }
                                }
                            }
                        }
                        if (this.HasBaseObject)
                        {
                            fg.AppendLine($"return base.Equals(rhs);");
                        }
                        else
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    fg.AppendLine();

                    if (Fields.Count != 0 || this.HasBaseObject)
                    {
                        fg.AppendLine("public override int GetHashCode()");
                        using (new BraceWrapper(fg))
                        {
                            fg.AppendLine("int ret = 0;");
                            foreach (var field in Fields)
                            {
                                if (!HasKeyField() || field.KeyField)
                                {
                                    if (field.Notifying == NotifyingOption.None)
                                    {
                                        field.GenerateForHash(fg, "ret");
                                    }
                                    else
                                    {
                                        fg.AppendLine($"if ({field.HasBeenSetAccessor})");
                                        using (new BraceWrapper(fg))
                                        {
                                            field.GenerateForHash(fg, "ret");
                                        }
                                    }
                                }
                            }
                            if (this.HasBaseObject)
                            {
                                fg.AppendLine($"ret = ret.CombineHashCode(base.GetHashCode());");
                            }
                            fg.AppendLine("return ret;");
                        }
                        fg.AppendLine();
                    }
                }
                fg.AppendLine();
            }
        }

        private void GenerateToStringCode(FileGeneration fg)
        {
            if (GenerateToString)
            {
                using (new RegionWrapper(fg, "To String"))
                {
                    fg.AppendLine("public override string ToString()");
                    using (new BraceWrapper(fg))
                    {
                        fg.AppendLine("return ILoquiObjectExt.PrintPretty(this);");
                    }
                }
                fg.AppendLine();
            }
        }

        private void GenerateModules(FileGeneration fg)
        {
            if (this.gen.GenerationModules.Count > 0)
            {
                foreach (var transl in gen.GenerationModules)
                {
                    using (new RegionWrapper(fg, transl.RegionString))
                    {
                        transl.GenerateInClass(this, fg);
                    }
                }
            }
        }

        private void GenerateInterfacesInClass(FileGeneration fg)
        {
            if (this.GenerationInterfaces.Count > 0)
            {
                foreach (var interf in gen.GenerationInterfaces)
                {
                    using (new RegionWrapper(fg, interf.RegionString))
                    {
                        interf.GenerateInClass(this, fg);
                    }
                }
            }
        }

        protected virtual void GenerateCopy_ToObject(FileGeneration fg)
        {
            fg.AppendLine($"{this.ProtectedKeyword}{this.FunctionOverride}object Copy_ToObject(object def = null)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"var ret = new {this.ObjectName}();");
                fg.AppendLine($"ret.CopyFieldsFrom_Generic(this, def: def, cmds: null);");
                fg.AppendLine("return ret;");
            }
            fg.AppendLine();
        }

        public virtual void GenerateCopy(FileGeneration fg)
        {
            using (var args = new FunctionWrapper(fg,
                $"public {this.ObjectName} Copy"))
            {
                args.Add($"{this.CopyMask} copyMask = null");
                args.Add($"{this.Getter_InterfaceStr} def = null");
            }
            using (new BraceWrapper(fg))
            {
                using (var args = new ArgsWrapper(fg,
                    $"return {this.ObjectName}.Copy"))
                {
                    args.Add("this");
                    args.Add("copyMask: copyMask");
                    args.Add("def: def");
                }
            }
            fg.AppendLine();

            if (this.Abstract) return;

            using (var args = new FunctionWrapper(fg,
                $"public static {this.ObjectName} Copy"))
            {
                args.Add($"{this.InterfaceStr} item");
                args.Add($"{this.CopyMask} copyMask = null");
                args.Add($"{this.Getter_InterfaceStr} def = null");
            }
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.ObjectName} ret;");
                fg.AppendLine($"if (item.GetType().Equals(typeof({this.ObjectName})))");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"ret = new {this.ObjectName}();");
                }
                fg.AppendLine("else");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"ret = ({this.ObjectName})Activator.CreateInstance(item.GetType());");
                }
                using (var args = new ArgsWrapper(fg,
                    "ret.CopyFieldsFrom"))
                {
                    args.Add("item");
                    args.Add("copyMask: copyMask");
                    args.Add("def: def");
                }
                fg.AppendLine("return ret;");
            }
            fg.AppendLine();

            using (var args = new FunctionWrapper(fg,
                $"public static CopyType Copy<CopyType>"))
            {
                args.Add($"CopyType item");
                args.Add($"{this.CopyMask} copyMask = null");
                args.Add($"{this.Getter_InterfaceStr} def = null");
            }
            using (new DepthWrapper(fg))
            {
                fg.AppendLine($"where CopyType : class, {this.InterfaceStr}");
            }
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"CopyType ret;");
                fg.AppendLine($"if (item.GetType().Equals(typeof({this.ObjectName})))");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"ret = new {this.ObjectName}() as CopyType;");
                }
                fg.AppendLine("else");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"ret = (CopyType)Activator.CreateInstance(item.GetType());");
                }
                using (var args = new ArgsWrapper(fg,
                    "ret.CopyFieldsFrom"))
                {
                    args.Add("item");
                    args.Add("copyMask: copyMask");
                    args.Add("doErrorMask: false");
                    args.Add("errorMask: null");
                    args.Add("cmds: null");
                    args.Add("def: def");
                }
                fg.AppendLine("return ret;");
            }
            fg.AppendLine();

            using (var args = new FunctionWrapper(fg,
                $"public static {this.ObjectName} Copy_ToLoqui"))
            {
                args.Add($"{this.Getter_InterfaceStr} item");
                args.Add($"{this.CopyMask} copyMask = null");
                args.Add($"{this.Getter_InterfaceStr} def = null");
            }
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"var ret = new {this.ObjectName}();");
                using (var args = new ArgsWrapper(fg,
                    "ret.CopyFieldsFrom"))
                {
                    args.Add("item");
                    args.Add("copyMask: copyMask");
                    args.Add("def: def");
                }
                fg.AppendLine("return ret;");
            }
            fg.AppendLine();
        }

        protected virtual void GenerateClear(FileGeneration fg, bool classFile)
        {
            if (classFile)
            {
                if (!HasBaseObject)
                {
                    fg.AppendLine("partial void ClearPartial(NotifyingUnsetParameters? cmds);");
                    fg.AppendLine();

                    fg.AppendLine("protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)");
                    using (new BraceWrapper(fg))
                    {
                        fg.AppendLine($"ClearPartial(cmds);");
                    }
                    fg.AppendLine();
                }

                fg.AppendLine($"public{FunctionOverride}void Clear(NotifyingUnsetParameters? cmds = null)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine("CallClearPartial_Internal(cmds);");
                    fg.AppendLine($"{this.ExtCommonName}.Clear(this, cmds);");
                }
                fg.AppendLine();
            }
            else
            {
                using (var args = new FunctionWrapper(fg,
                    $"public static void Clear{this.GenericTypes}",
                    GenerateWhereClauses().ToArray()))
                {
                    args.Add($"{this.InterfaceStr} item");
                    args.Add($"NotifyingUnsetParameters? cmds = null");
                }
                using (new BraceWrapper(fg))
                {
                    foreach (var field in this.Fields)
                    {
                        if (field.Protected) continue;
                        field.GenerateClear(fg, "item", "cmds");
                    }
                }
            }
            fg.AppendLine();
        }

        private void GenerateClear(FileGeneration fg, string accessor, string cmdAccessor)
        {
        }

        protected virtual void GenerateGenericCreate(FileGeneration fg)
        {
            if (!this.Abstract)
            {
                fg.AppendLine($"public{this.NewOverride}static {this.ObjectName} {Constants.CREATE_FUNC_NAME}(IEnumerable<KeyValuePair<ushort, object>> fields)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"var ret = new {this.ObjectName}();");
                    fg.AppendLine("ILoquiObjectExt.CopyFieldsIn(ret, fields, def: null, skipProtected: false, cmds: null);");
                    fg.AppendLine("return ret;");
                }
                fg.AppendLine();
            }

            fg.AppendLine($"public static void {Constants.COPYIN_FUNC_NAME}(IEnumerable<KeyValuePair<ushort, object>> fields, {this.ObjectName} obj)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);");
            }
            fg.AppendLine();
        }

        private void GenerateIsProtected(FileGeneration fg)
        {
            fg.AppendLine("public static bool IsProtected(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"{this.EnumName} enu = ({this.EnumName})index;");
                fg.AppendLine("switch (enu)");
                using (new BraceWrapper(fg))
                {
                    var trues = IterateFields().Where((i) => i.Field.Protected);
                    var falses = IterateFields().Where((i) => !i.Field.Protected);
                    if (trues.Any())
                    {
                        foreach (var item in trues)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    if (falses.Any())
                    {
                        foreach (var item in falses)
                        {
                            fg.AppendLine($"case {item.Field.IndexEnumName}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return false;");
                        }
                    }

                    GenerateStandardRegistrationDefault(fg, "IsProtected", "index", true);
                }
            }
            fg.AppendLine();
        }

        public void GenerateExceptionCatcher(FileGeneration fg, TypeGeneration field, string doErrMaskAccessor, string errorMaskAccessor, string enumAccessor)
        {
            fg.AppendLine("catch (Exception ex)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"if ({doErrMaskAccessor}) throw;");
                fg.AppendLine($"{errorMaskAccessor}().SetNthException((ushort){enumAccessor}, ex);");
            }
        }
        #endregion

        private void GenerateTranslations(FileGeneration fg)
        {
            if (this.gen.GenerationModules.Count == 0) return;
            using (new RegionWrapper(fg, "Modules"))
            {
                foreach (var translGen in this.gen.GenerationModules)
                {
                    using (new RegionWrapper(fg, translGen.RegionString))
                    {
                        translGen.Generate(this, fg);
                    }
                    fg.AppendLine();
                }
            }
        }

        private void GenerateLoquiInterfaces(FileGeneration fg)
        {
            if (this.gen.GenerationModules.Count == 0) return;
            using (new RegionWrapper(fg, "Loqui Interfaces"))
            {
                foreach (var interfGen in this.GenerationInterfaces)
                {
                    using (new RegionWrapper(fg, interfGen.RegionString))
                    {
                        interfGen.Generate(this, fg);
                    }
                }
            }
        }

        public bool HasLoquiInterface<T>()
            where T : GenerationInterface
        {
            return this.GenerationInterfaces.Any((i) => i.GetType().Equals(typeof(T)));
        }

        public string GetMaskString(string t)
        {
            if (t.Equals("Exception"))
            {
                return this.ErrorMask;
            }
            else
            {
                var str = this.Name;
                str += "_Mask";
                str += $"<{t}>";
                return str;
            }
        }

        public virtual void Resolve()
        {
            foreach (var field in this.Fields.ToList())
            {
                field.Resolve();
            }

            if (this.HasRaisedPropertyChanged)
            {
                this.RequiredNamespaces.Add("System.ComponentModel");
                this.Interfaces.Add(nameof(INotifyPropertyChanged));
            }

            if (this.HasBaseObject)
            {
                foreach (var baseGen in this.BaseClass.Generics)
                {
                    this.Generics.Add(baseGen.Key, baseGen.Value.Copy());
                    this.BaseGenerics[baseGen.Key] = baseGen.Key;
                }

                foreach (var baseGeneric in Node.Elements(XName.Get("BaseGeneric", LoquiGenerator.Namespace)))
                {
                    var genName = baseGeneric.GetAttribute("name");
                    var whereElem = baseGeneric.Elements(XName.Get("Where", LoquiGenerator.Namespace)).ToArray();
                    var definedElem = baseGeneric.Element(XName.Get("Defined", LoquiGenerator.Namespace));
                    if (whereElem.Any()
                        && definedElem != null)
                    {
                        throw new ArgumentException("Cannot define both Where and Defined nodes.");
                    }
                    if (whereElem.Any())
                    {
                        this.BaseGenerics[genName] = genName;
                        this.Generics[genName].Add(whereElem.Select((w) => w.Value));
                    }
                    else if (definedElem != null)
                    {
                        this.BaseGenerics[genName] = definedElem.Value;
                        this.Generics.Remove(genName);
                    }
                    else
                    {
                        throw new ArgumentException("Need to define Where or Defined node.");
                    }
                }

                if (this.BaseGenerics.Count > 0)
                {
                    this.BaseGenericTypes = $"<{string.Join(", ", BaseGenerics.Select((g) => g.Value))}>";
                }
            }
        }

        public void RegenerateAndStampSourceXML()
        {
            XDocument doc;
            using (var stream = new FileStream(this.SourceXMLFile.FullName, FileMode.Open))
            {
                doc = XDocument.Load(stream);
            }
            bool modified = false;

            var LoquiNode = doc.Element(XName.Get("Loqui", LoquiGenerator.Namespace));
            foreach (var obj in LoquiNode.Elements(XName.Get("Object", LoquiGenerator.Namespace))
                .And(LoquiNode.Elements(XName.Get("Struct", LoquiGenerator.Namespace))))
            {
                var name = obj.GetAttribute("name");
                if (name.Equals(this.Name))
                {
                    if (obj.GetAttribute("GUID") == null)
                    {
                        var guidAttr = new XAttribute("GUID", this.GUID.ToString());
                        obj.Add(guidAttr);
                        modified = true;
                    }
                    if (obj.GetAttribute("ID") == null)
                    {
                        var guidAttr = new XAttribute("ID", this.ID.ToString());
                        obj.Add(guidAttr);
                        modified = true;
                    }
                    break;
                }
            }

            if (!modified) return;

            using (var writer = new XmlTextWriter(
                new FileStream(this.SourceXMLFile.FullName, FileMode.Create), Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 2;
                doc.WriteTo(writer);
            }
        }

        public IEnumerable<(int Index, TypeGeneration Field)> IterateFields()
        {
            var startIndex = this.StartingIndex;
            for (int i = 0; i < this.Fields.Count; i++)
            {
                yield return (i + startIndex, this.Fields[i]);
            }
        }

        public IEnumerable<ObjectGeneration> BaseClassTrail()
        {
            if (!this.HasBaseObject) yield break;
            yield return this.BaseClass;
            foreach (var ret in this.BaseClass.BaseClassTrail())
            {
                yield return ret;
            }
        }
    }
}
