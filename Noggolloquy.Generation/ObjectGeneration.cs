using Noggog.Notifying;
using Noggolloquy.Internal;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;

namespace Noggolloquy.Generation
{
    public abstract class ObjectGeneration
    {
        public const string AUTOGENERATED = "NoggolloquyGenerated";
        public string Name;
        public string Namespace;
        public abstract bool Abstract { get; }
        public bool GenerateClass { get; protected set; }
        public bool GenerateEquals { get; protected set; }
        public bool GenerateToString { get; protected set; }
        public bool GeneratePublicBasicCtor { get; protected set; }
        public abstract bool NotifyingDefault { get; }
        public int StartingIndex => this.HasBaseObject ? this.BaseClass.StartingIndex + this.BaseClass.Fields.Count : 0;
        public ObjectGeneration BaseClass;
        public bool HasBaseObject => BaseClass != null;
        public bool IsTopClass => BaseClass == null;
        public HashSet<string> Interfaces = new HashSet<string>();
        public Dictionary<string, GenericDefinition> Generics = new Dictionary<string, GenericDefinition>();
        public string EmptyGenerics => (this.Generics.Count > 0 ? $"<{string.Join(",", this.Generics.Select((g) => string.Empty))}>" : string.Empty);
        public Dictionary<string, string> BaseGenerics = new Dictionary<string, string>();
        public virtual string FunctionOverride => " ";
        public virtual string NewOverride => " ";
        public virtual string ProtectedKeyword => "protected";
        public ushort? ID;
        public Guid GUID;
        public ushort Version;
        public XElement Node;

        // String properties
        public string ObjectName => this.Name + GenericTypes;
        public string ExtName => Name + "Ext";
        public string InterfaceStr => InterfaceStr_Generic(this.GenericTypes);
        public string RegistrationName => $"{this.Name}_Registration";
        public string Getter_InterfaceStr_NoGenerics => $"I{Name}Getter";
        public string Getter_InterfaceStr => this.Getter_InterfaceStr_NoGenerics + GenericTypes;
        public string GenericTypes => GenerateGenericClause(Generics.Select((g) => g.Key));
        public string BaseGenericTypes { get; private set; }

        public string ExtCommonName(string genericTypes) => $"{Name}Common{genericTypes}";

        public string InterfaceStr_Generic(string genericTypes) => $"I{this.Name}{genericTypes}";

        public DirectoryInfo TargetDir { get; private set; }
        public FileInfo SourceXMLFile { get; private set; }
        protected NoggolloquyGenerator gen;
        public ProtocolGeneration ProtoGen;
        private HashSet<string> requiredNamespaces = new HashSet<string>();
        public List<GenerationInterface> GenerationInterfaces = new List<GenerationInterface>();
        public List<TypeGeneration> Fields = new List<TypeGeneration>();

        public ObjectGeneration(NoggolloquyGenerator gen, ProtocolGeneration protoGen, FileInfo sourceFile)
        {
            this.gen = gen;
            this.ProtoGen = protoGen;
            this.TargetDir = sourceFile.Directory;
            this.SourceXMLFile = sourceFile;

            requiredNamespaces.Add("System");
            requiredNamespaces.Add("System.Collections");
            requiredNamespaces.Add("System.Collections.Generic");
            requiredNamespaces.Add("System.Linq");
            requiredNamespaces.Add("System.Text");
            requiredNamespaces.Add("Noggolloquy");
            requiredNamespaces.Add("Noggog");
            requiredNamespaces.Add("Noggog.Notifying");
        }

        public virtual void Load()
        {
            GenerateClass = Node.GetAttribute<bool>("generateClass", true);
            GenerateEquals = Node.GetAttribute<bool>("generateEquals", true);
            GenerateToString = Node.GetAttribute<bool>("generateToString", true);
            GeneratePublicBasicCtor = Node.GetAttribute<bool>("publicCtor", true);
            Version = Node.GetAttribute<ushort>("version", 0);

            var namespacesNode = Node.Element(XName.Get("Namespaces", NoggolloquyGenerator.Namespace));
            if (namespacesNode != null)
            {
                foreach (var node in namespacesNode.Elements())
                {
                    if (!string.IsNullOrWhiteSpace(node.Value))
                    {
                        this.requiredNamespaces.Add(node.Value);
                    }
                }
            }

            foreach (var generic in Node.Elements(XName.Get("Generic", NoggolloquyGenerator.Namespace)))
            {
                GenericDefinition gen = new GenericDefinition();
                var genName = generic.GetAttribute("name");
                foreach (var where in generic.Elements(XName.Get("Where", NoggolloquyGenerator.Namespace)))
                {
                    gen.Wheres.Add(where.Value);
                }
                this.Generics[genName] = gen;
            }

            foreach (XElement baseGeneric in Node.Elements(XName.Get("BaseGeneric", NoggolloquyGenerator.Namespace)))
            {
                var genName = baseGeneric.GetAttribute("name");
                this.BaseGenerics[genName] = baseGeneric.Value;
            }

            if (this.BaseGenerics.Count > 0)
            {
                this.BaseGenericTypes = $"<{string.Join(", ", BaseGenerics.Select((g) => g.Value))}>";
            }

            foreach (XElement interfNode in Node.Elements(XName.Get("Interface", NoggolloquyGenerator.Namespace)))
            {
                Interfaces.Add(interfNode.Value);
            }

            XElement fieldsNode = Node.Element(XName.Get("Fields", NoggolloquyGenerator.Namespace));
            if (fieldsNode != null)
            {
                foreach (XElement fieldNode in fieldsNode.Elements())
                {
                    if (LoadField(fieldNode, true, out TypeGeneration typeGen))
                    {
                        Fields.Add(typeGen);
                    }
                }
            }

            foreach (var interf in this.GenerationInterfaces)
            {
                interf.Modify(this);
            }

            foreach (var mods in this.gen.GenerationModules)
            {
                mods.Modify(this);
            }
        }

        public bool LoadField(XElement fieldNode, bool requireName, out TypeGeneration typeGen)
        {
            if (fieldNode.NodeType == System.Xml.XmlNodeType.Comment)
            {
                typeGen = null;
                return false;
            }

            if (!gen.TryGetTypeGeneration(fieldNode.Name.LocalName, out typeGen))
            {
                throw new ArgumentException("Unknown field type: " + fieldNode.Name);
            }

            typeGen.ObjectGen = this;
            typeGen.ProtoGen = this.ProtoGen;
            typeGen.Load(fieldNode, requireName);
            requiredNamespaces.Add(typeGen.GetRequiredNamespaces());
            return true;
        }

        public void Generate()
        {
            FileGeneration fg = new FileGeneration();
            fg.AppendLine("/*");
            fg.AppendLine(" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ");
            fg.AppendLine(" * Autogenerated by Noggolloquy.  Do not manually change.");
            fg.AppendLine(" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ");
            fg.AppendLine("*/");

            AddNamespaces(fg);

            using (new NamespaceWrapper(fg, this.Namespace))
            {
                if (GenerateClass)
                {
                    GenerateClassFile(fg);
                }

                GenerateInterfaces(fg);
                GenerateRegistration(fg);
                GenerateInterfaceExtensions(fg);
                GenerateTranslations(fg);
                GenerateNoggolloquyInterfaces(fg);
            }

            var fileName = $"{TargetDir.FullName}\\{this.Name}_{AUTOGENERATED}.cs";
            fg.Generate(new FileInfo(fileName));
            if (!this.gen.GeneratedFiles.Add(fileName))
            {
                throw new ArgumentException();
            }
        }

        protected string GenerateGenericClause(IEnumerable<string> keys)
        {
            if (!keys.Any()) return string.Empty;
            return $"<{string.Join(", ", keys)}>";
        }

        public void GenerateWhereClauses(FileGeneration fg, IEnumerable<KeyValuePair<string, GenericDefinition>> defs)
        {
            using (new DepthWrapper(fg))
            {
                foreach (var gen in defs)
                {
                    List<string> wheres = new List<string>();
                    if (gen.Value.MustBeClass)
                    {
                        wheres.Add("class");
                    }
                    wheres.AddRange(gen.Value.Wheres);
                    if (wheres.Count > 0)
                    {
                        fg.AppendLine($"where {gen.Key} : {string.Join(", ", wheres)}");
                    }
                }
            }
        }

        private void GenerateClassFile(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Class"))
            {
                GenerateClassWrappers(fg);

                GenerateClassLine(fg);

                GenerateWhereClauses(fg, this.Generics);

                using (new BraceWrapper(fg))
                {
                    GenerateRegrationRouting(fg);

                    GenerateCtor(fg);
                    // Generate fields
                    foreach (var field in Fields)
                    {
                        if (!field.GenerateClassMembers) continue;
                        using (new RegionWrapper(fg, field.Name))
                        {
                            field.GenerateForClass(fg);
                        }
                        fg.AppendLine();
                    }
                    fg.AppendLine();

                    GenerateNoggolloquyGetterInterface(fg);

                    GenerateNoggolloquySetterInterface(fg);

                    GenerateToStringCode(fg);

                    GenerateEqualsSection(fg);

                    GenerateSetTo(fg);

                    GenerateModules(fg);

                    GenerateInterfacesInClass(fg);

                    GenerateCopyableInterface(fg);

                    GenerateCopyInAbleInterface(fg);

                    GenerateCopy(fg);

                    GenerateClear(fg);

                    GenerateGenericCreate(fg);
                }
            }

            fg.AppendLine();
        }

        private void GenerateInterfaces(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Interface"))
            {
                GenerateSetterInterface(fg);
                GenerateGetterInterface(fg);
            }

            fg.AppendLine();
        }

        protected virtual void GenerateSetterInterface(FileGeneration fg)
        {
            // Interface
            fg.AppendLine($"public interface {this.InterfaceStr} : {this.Getter_InterfaceStr}{(this.HasBaseObject ? ", " + this.BaseClass.InterfaceStr_Generic(this.BaseGenericTypes) : string.Empty)}, INoggolloquyClass<{this.InterfaceStr}, {this.Getter_InterfaceStr}>, INoggolloquyClass<{this.ObjectName}, {this.Getter_InterfaceStr}>");
            GenerateWhereClauses(fg, this.Generics);
            using (new BraceWrapper(fg))
            {
                foreach (var field in Fields)
                {
                    field.GenerateForInterface(fg);
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateGetterInterface(FileGeneration fg)
        {
            // Getter
            fg.AppendLine($"public interface {this.Getter_InterfaceStr} : INoggolloquyObjectGetter{(this.HasBaseObject ? ", " + this.BaseClass.InterfaceStr_Generic(this.BaseGenericTypes) : string.Empty)}");
            GenerateWhereClauses(fg, this.Generics);

            using (new BraceWrapper(fg))
            {
                foreach (var field in Fields)
                {
                    using (new RegionWrapper(fg, field.Name))
                    {
                        field.GenerateForGetterInterface(fg);
                    }
                    fg.AppendLine();
                }
                fg.AppendLine();

                foreach (var mod in this.gen.GenerationModules)
                {
                    using (new RegionWrapper(fg, mod.RegionString))
                    {
                        mod.GenerateInInterfaceGetter(this, fg);
                    }
                }
            }
            fg.AppendLine();
        }

        protected void GenerateRegistration(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Registration"))
            {
                fg.AppendLine($"public class {this.RegistrationName} : INoggolloquyRegistration");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"public static readonly {this.RegistrationName} Instance = new {this.RegistrationName}();");
                    fg.AppendLine();

                    fg.AppendLine($"public static ProtocolDefinition ProtocolDefinition => ProtocolDefinition_{this.ProtoGen.Definition.Nickname}.Definition;");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly ObjectKey ObjectKey = new ObjectKey(");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"protocolKey: ProtocolDefinition_{this.ProtoGen.Definition.Nickname}.ProtocolKey,");
                        fg.AppendLine($"msgID: {this.ID},");
                        fg.AppendLine($"version: {this.Version});");
                    }
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly string GUID = \"{this.GUID}\";");
                    fg.AppendLine();

                    fg.AppendLine($"public const ushort FieldCount = {this.Fields.Count};");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly Type MaskType = typeof({this.GetMaskString("")});");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly Type ErrorMaskType = typeof({this.GetErrorMaskItemString()});");
                    fg.AppendLine();

                    fg.AppendLine($"public static readonly Type ClassType = typeof({this.Name}{this.EmptyGenerics});");
                    fg.AppendLine();

                    fg.AppendLine($"public const string FullName = \"{this.Namespace}.{this.Name}\";");
                    fg.AppendLine();

                    fg.AppendLine($"public const string Name = \"{this.Name}\";");
                    fg.AppendLine();

                    GenerateGetNameIndex(fg);

                    GenerateNthObjectIsEnumerable(fg);

                    GenerateNthObjectIsNoggolloquy(fg);

                    GenerateGetNthIsSingleton(fg);

                    GenerateGetNthName(fg);

                    GenerateNthObjectIsDerivative(fg);

                    GenerateIsReadOnly(fg);

                    using (new RegionWrapper(fg, "Interface"))
                    {
                        fg.AppendLine($"ProtocolDefinition INoggolloquyRegistration.ProtocolDefinition => ProtocolDefinition;");
                        fg.AppendLine($"ObjectKey INoggolloquyRegistration.ObjectKey => ObjectKey;");
                        fg.AppendLine($"string INoggolloquyRegistration.GUID => GUID;");
                        fg.AppendLine($"int INoggolloquyRegistration.FieldCount => FieldCount;");
                        fg.AppendLine($"Type INoggolloquyRegistration.MaskType => MaskType;");
                        fg.AppendLine($"Type INoggolloquyRegistration.ErrorMaskType => ErrorMaskType;");
                        fg.AppendLine($"Type INoggolloquyRegistration.ClassType => ClassType;");
                        fg.AppendLine($"string INoggolloquyRegistration.FullName => FullName;");
                        fg.AppendLine($"string INoggolloquyRegistration.Name => Name;");
                        fg.AppendLine($"ushort? INoggolloquyRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);");
                        fg.AppendLine($"bool INoggolloquyRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);");
                        fg.AppendLine($"bool INoggolloquyRegistration.GetNthIsNoggolloquy(ushort index) => GetNthIsNoggolloquy(index);");
                        fg.AppendLine($"bool INoggolloquyRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);");
                        fg.AppendLine($"string INoggolloquyRegistration.GetNthName(ushort index) => GetNthName(index);");
                        fg.AppendLine($"bool INoggolloquyRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);");
                        fg.AppendLine($"bool INoggolloquyRegistration.IsReadOnly(ushort index) => IsReadOnly(index);");

                    }
                }
            }
        }

        private void GenerateInterfaceExtensions(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Extensions"))
            {
                fg.AppendLine($"public static class {this.ExtCommonName(this.GenericTypes)}");
                GenerateWhereClauses(fg, this.Generics);

                using (new BraceWrapper(fg))
                {
                    GenerateCopyFieldsFrom(fg);

                    GenerateSetNthObjectHasBeenSet(fg, false);

                    GenerateUnsetNthObject(fg);

                    GenerateGetNthObjectHasBeenSet(fg);

                    GenerateGetNthObject(fg);

                    GenerateSetNthObject(fg);

                    GenerateGetNthType(fg);

                    // Fields might add some content
                    foreach (var field in this.Fields)
                    {
                        field.GenerateForInterfaceExt(fg);
                    }
                }

                fg.AppendLine($"public static class {this.ExtName}");

                using (new BraceWrapper(fg))
                {
                    if (!this.Abstract)
                    {
                        fg.AppendLine($"public static {this.ObjectName} Copy_ToNoggolloquy{GenericTypes}(this {this.Getter_InterfaceStr} item)");
                        GenerateWhereClauses(fg, this.Generics);
                        using (new BraceWrapper(fg))
                        {
                            GenerateStaticCopy_ToNoggolloquy(fg);
                        }
                        fg.AppendLine();
                    }
                }
            }

            fg.AppendLine();
        }

        protected virtual void GenerateStaticCopy_ToNoggolloquy(FileGeneration fg)
        {
            fg.AppendLine($"return {this.ObjectName}.Copy(item, def: null);");
        }

        protected virtual void GenerateCopyFieldsFrom(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Copy Fields From"))
            {
                // Specific HasSet version with default
                fg.AppendLine($"public static void CopyFieldsFrom({this.InterfaceStr} item, {this.Getter_InterfaceStr} rhs, {this.Getter_InterfaceStr} def, {this.GetErrorMaskItemString()} errorMask, NotifyingFireParameters? cmds)");
                using (new BraceWrapper(fg))
                {
                    GenerateCopyForFields(fg, "item", "rhs", defaultFallbackAccessor: "def", maskAccessor: "errorMask", cmdsAccessor: "cmds");
                }
                fg.AppendLine();
            }
            fg.AppendLine();
        }

        private void GenerateCopyForFields(FileGeneration fg, string accessorPrefix, string rhsAccessorPrefix, string defaultFallbackAccessor, string maskAccessor, string cmdsAccessor)
        {
            if (this.HasBaseObject)
            {
                fg.AppendLine($"{this.BaseClass.ExtCommonName(this.BaseGenericTypes)}.CopyFieldsFrom({accessorPrefix}, {rhsAccessorPrefix}, {defaultFallbackAccessor}, {maskAccessor}, {cmdsAccessor});");
            }

            foreach (var item in this.IterateFields())
            {
                if (item.Field.Copy)
                {
                    fg.AppendLine("try");
                    using (new BraceWrapper(fg))
                    {
                        item.Field.GenerateForCopy(fg, accessorPrefix, rhsAccessorPrefix, defaultFallbackAccessor, cmdsAccessor: cmdsAccessor);
                    }
                    GenerateExceptionCatcher(fg, item.Field, maskAccessor, item.Index);
                }
            }
        }

        #region Generation Snippets
        protected void GenerateRegrationRouting(FileGeneration fg)
        {
            fg.AppendLine($"INoggolloquyRegistration INoggolloquyObjectGetter.Registration => {this.RegistrationName}.Instance;");
            fg.AppendLine($"public static {this.RegistrationName} Registration => {this.RegistrationName}.Instance;");
            fg.AppendLine();
        }

        protected abstract void GenerateCtor(FileGeneration fg);

        protected virtual void GenerateClassWrappers(FileGeneration fg)
        {
        }

        protected abstract void GenerateClassLine(FileGeneration fg);

        public void GenerateNoggolloquyGetterInterface(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Noggolloquy Getter Interface"))
            {
                fg.AppendLine();

                fg.AppendLine($"public{this.FunctionOverride}object GetNthObject(ushort index) => {this.ExtCommonName(this.GenericTypes)}.GetNthObject(index, this);");
                fg.AppendLine();

                using (new LineWrapper(fg))
                {
                    fg.Append($"public{this.FunctionOverride}bool GetNthObjectHasBeenSet(ushort index) => ");
                    if (this is ClassGeneration)
                    {
                        fg.Append($"{this.ExtCommonName(this.GenericTypes)}.GetNthObjectHasBeenSet(index, this);");
                    }
                    else
                    {
                        fg.Append("true;");
                    }
                }
                fg.AppendLine();

                fg.AppendLine($"public{this.FunctionOverride}void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => {this.ExtCommonName(this.GenericTypes)}.SetNthObject(this, index, obj, cmds);");
                fg.AppendLine();

                fg.AppendLine($"public{this.FunctionOverride}void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => {this.ExtCommonName(this.GenericTypes)}.UnsetNthObject(this, index, cmds);");
                fg.AppendLine();

                fg.AppendLine($"public{this.FunctionOverride}Type GetNthType(ushort index) => {this.ExtCommonName(this.GenericTypes)}.GetNthType(index);");
                fg.AppendLine();
            }
            fg.AppendLine();
        }

        protected virtual void GenerateNoggolloquySetterInterface(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Noggolloquy Interface"))
            {
                fg.AppendLine($"public{this.FunctionOverride}void SetNthObjectHasBeenSet(ushort index, bool on)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"{this.ExtCommonName(this.GenericTypes)}.SetNthObjectHasBeenSet(index, on, this);");
                }
                fg.AppendLine();

                // Generic version
                fg.AppendLine($"public void CopyFieldsFrom({this.Getter_InterfaceStr} rhs, {this.Getter_InterfaceStr} def = null, NotifyingFireParameters? cmds = null)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"{this.ExtCommonName(this.GenericTypes)}.CopyFieldsFrom(this, rhs, def, null, cmds);");
                }
                fg.AppendLine();

                // Generic version with default
                fg.AppendLine($"public void CopyFieldsFrom({this.Getter_InterfaceStr} rhs, out {this.GetErrorMaskItemString()} errorMask, {this.Getter_InterfaceStr} def = null, NotifyingFireParameters? cmds = null)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"var retErrorMask = new {this.GetErrorMaskItemString()}();");
                    fg.AppendLine("errorMask = retErrorMask;");
                    fg.AppendLine($"{this.ExtCommonName(this.GenericTypes)}.CopyFieldsFrom(this, rhs, def, retErrorMask, cmds);");
                }
                fg.AppendLine();
            }
            fg.AppendLine();
        }

        private void GenerateProtocolProperty(FileGeneration fg)
        {
            fg.AppendLine($"public static ProtocolKey Noggolloquy_ProtocolKey_Static => new ProtocolKey({ProtoGen.Definition.Key.ProtocolID});");

            fg.AppendLine($"public{FunctionOverride}ProtocolKey Noggolloquy_ProtocolKey => Noggolloquy_ProtocolKey_Static;");

            fg.AppendLine("public static ProtocolDefinition Noggolloquy_ProtocolDefinition_Static => new ProtocolDefinition(");
            using (new DepthWrapper(fg))
            {
                fg.AppendLine($"key: Noggolloquy_ProtocolKey_Static,");
                fg.AppendLine($"nickname: \"{this.ProtoGen.Definition.Nickname}\");");
            }

            fg.AppendLine($"public{FunctionOverride}ProtocolDefinition Noggolloquy_ProtocolDefinition => Noggolloquy_ProtocolDefinition_Static;");

            fg.AppendLine($"public static ObjectKey Noggolloquy_ObjectKey_Static => new ObjectKey(protocolKey: Noggolloquy_ProtocolKey_Static, msgID: {this.ID}, version: {this.Version});");

            fg.AppendLine($"public{FunctionOverride}ObjectKey Noggolloquy_ObjectKey => Noggolloquy_ObjectKey_Static;");
        }

        private void GenerateGetNthObject(FileGeneration fg)
        {
            fg.AppendLine($"public static object GetNthObject(ushort index, {this.Getter_InterfaceStr} obj)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Index}:");
                        using (new DepthWrapper(fg))
                        {
                            item.Field.GenerateGetNth(fg, "obj");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "GetNthObject", "index", true, "obj");
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateGetNthObjectHasBeenSet(FileGeneration fg)
        {
            fg.AppendLine($"public static bool GetNthObjectHasBeenSet(ushort index, {this.InterfaceStr} obj)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Index}:");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"return obj.{item.Field.HasBeenSetAccessor};");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "GetNthObjectHasBeenSet", "index", true, "obj");
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateSetNthObject(FileGeneration fg)
        {
            fg.AppendLine($"public static void SetNthObject({this.InterfaceStr} nog, ushort index, object obj, NotifyingFireParameters? cmds = null)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Index}:");
                        using (new DepthWrapper(fg))
                        {
                            item.Field.GenerateInterfaceSet(
                                fg,
                                accessorPrefix: $"nog",
                                rhsAccessorPrefix: $"(({item.Field.TypeName})obj)",
                                cmdsAccessor: "cmds");
                            fg.AppendLine($"break;");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "SetNthObject", "index", true, "obj");
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateSetNthObjectHasBeenSet(FileGeneration fg, bool internalUse)
        {
            fg.AppendLine($"public {(internalUse ? string.Empty : "static ")}void SetNthObjectHasBeenSet{(internalUse ? "_Internal" : string.Empty)}(ushort index, bool on, {(internalUse ? this.ObjectName : this.InterfaceStr)} obj, {nameof(NotifyingFireParameters)}? cmds = null)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Index}:");
                        using (new DepthWrapper(fg))
                        {
                            if (item.Field.Derivative)
                            {
                                fg.AppendLine("throw new ArgumentException(\"Tried to set at a readonly index \" + index);");
                                return;
                            }

                            if (!internalUse && item.Field.Protected)
                            {
                                fg.AppendLine("throw new ArgumentException(\"Tried to set at a readonly index \" + index);");
                            }
                            else
                            {
                                item.Field.GenerateSetNthHasBeenSet(fg, "obj", "on", internalUse);
                                fg.AppendLine("break;");
                            }
                        }
                    }

                    GenerateStandardIndexDefault(fg, "SetNthObjectHasBeenSet", "index", false, "on", "obj");
                }
            }
            fg.AppendLine();
        }

        protected virtual void GenerateUnsetNthObject(FileGeneration fg)
        {
            fg.AppendLine($"public static void UnsetNthObject({this.InterfaceStr} obj, ushort index, {nameof(NotifyingUnsetParameters)}? cmds = null)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Index}:");
                        using (new DepthWrapper(fg))
                        {
                            if (item.Field.Derivative)
                            {
                                fg.AppendLine("throw new ArgumentException(\"Tried to set at a readonly index \" + index);");
                                return;
                            }

                            if (item.Field.Protected)
                            {
                                fg.AppendLine("throw new ArgumentException(\"Tried to set at a readonly index \" + index);");
                            }
                            else
                            {
                                item.Field.GenerateUnsetNth(fg, "obj", "cmds");
                                fg.AppendLine("break;");
                            }
                        }
                    }

                    GenerateStandardIndexDefault(fg, "SetNthObjectHasBeenSet", "index", false, "on", "obj");
                }
            }
            fg.AppendLine();
        }

        private void GenerateNthObjectIsNoggolloquy(FileGeneration fg)
        {
            fg.AppendLine("public static bool GetNthIsNoggolloquy(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    Func<TypeGeneration, bool> tester = (t) =>
                    {
                        if (t is NoggType)
                        {
                            return true;
                        }
                        else if (t is ContainerType)
                        {
                            ContainerType listField = t as ContainerType;
                            if (listField.SubTypeGeneration is NoggType)
                            {
                                return true;
                            }
                            else
                            {
                                return false;
                            }
                        }
                        else
                        {
                            return false;
                        }
                    };

                    var trues = IterateFields().Where((i) => tester(i.Field));
                    var falses = IterateFields().Where((i) => !tester(i.Field));
                    if (trues.Any())
                    {
                        foreach (var item in trues)
                        {
                            fg.AppendLine($"case {item.Index}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    if (falses.Any())
                    {
                        foreach (var item in falses)
                        {
                            fg.AppendLine($"case {item.Index}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return false;");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "GetNthIsNoggolloquy", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateNthObjectIsDerivative(FileGeneration fg)
        {
            fg.AppendLine("public static bool IsNthDerivative(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    var trues = IterateFields().Where((i) => i.Field.Derivative);
                    var falses = IterateFields().Where((i) => !i.Field.Derivative);
                    if (trues.Any())
                    {
                        foreach (var item in trues)
                        {
                            fg.AppendLine($"case {item.Index}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    if (falses.Any())
                    {
                        foreach (var item in falses)
                        {
                            fg.AppendLine($"case {item.Index}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return false;");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "IsNthDerivative", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateNthObjectIsEnumerable(FileGeneration fg)
        {
            fg.AppendLine("public static bool GetNthIsEnumerable(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    var trues = IterateFields().Where((i) => i.Field is ContainerType);
                    var falses = IterateFields().Where((i) => !(i.Field is ContainerType));
                    if (trues.Any())
                    {
                        foreach (var item in trues)
                        {
                            fg.AppendLine($"case {item.Index}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    if (falses.Any())
                    {
                        foreach (var item in falses)
                        {
                            fg.AppendLine($"case {item.Index}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return false;");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "GetNthIsEnumerable", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateGetNthType(FileGeneration fg)
        {
            fg.AppendLine("public static Type GetNthType(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Index}:");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"return typeof({item.Field.TypeName});");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "GetNthType", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateGetNthName(FileGeneration fg)
        {
            fg.AppendLine("public static string GetNthName(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        fg.AppendLine($"case {item.Index}:");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"return \"{item.Field.Name}\";");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "GetNthName", "index", true);
                }
            }
            fg.AppendLine();
        }

        private void GenerateGetNthIsSingleton(FileGeneration fg)
        {
            fg.AppendLine("public static bool GetNthIsSingleton(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in IterateFields())
                    {
                        if (item.Field is NoggType nogg)
                        {
                            fg.AppendLine($"case {item.Index}:");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"return {(nogg.SingletonMember ? "true" : "false")};");
                            }
                        }
                    }

                    GenerateStandardIndexDefault(fg, "GetNthIsSingleton", "index", true);
                }
            }
            fg.AppendLine();
        }

        public void GenerateStandardIndexDefault(FileGeneration fg, string functionName, string indexAccessor, bool ret, params string[] otherParameters)
        {
            fg.AppendLine("default:");
            using (new DepthWrapper(fg))
            {
                if (this.HasBaseObject)
                {
                    fg.AppendLine($"{(ret ? "return " : string.Empty)}{BaseClass.ExtCommonName(this.BaseGenericTypes)}.{functionName}({string.Join(", ", indexAccessor.And(otherParameters))});");
                    if (!ret)
                    {
                        fg.AppendLine("break;");
                    }
                }
                else
                {
                    GenerateIndexOutOfRangeEx(fg, indexAccessor);
                }
            }
        }

        private void GenerateIndexOutOfRangeEx(FileGeneration fg, string indexAccessor)
        {
            fg.AppendLine($"throw new ArgumentException($\"Index is out of range: {{{indexAccessor}}}\");");
        }

        private void GenerateGetNameIndex(FileGeneration fg)
        {
            fg.AppendLine("public static ushort? GetNameIndex(StringCaseAgnostic str)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (str.Upper)");
                using (new BraceWrapper(fg))
                {
                    for (int i = 0; i < this.Fields.Count; i++)
                    {
                        fg.AppendLine($"case \"{this.Fields[i].Name.ToUpper()}\":");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"return {i};");
                        }
                    }

                    fg.AppendLine("default:");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine("throw new ArgumentException($\"Queried unknown field: {str}\");");
                    }
                }
            }
            fg.AppendLine();
        }

        private void AddNamespaces(FileGeneration fg)
        {
            requiredNamespaces.Add(
                this.gen.GenerationModules.SelectMany((tr) => tr.RequiredUsingStatements())
                .Union(this.GenerationInterfaces.SelectMany((i) => i.RequiredUsingStatements())));
            foreach (var nameSpace in requiredNamespaces.Union(gen.Namespaces))
            {
                fg.AppendLine($"using {nameSpace};");
            }
            fg.AppendLine();
        }

        protected abstract void GenerateEqualsCode(FileGeneration fg);

        private void GenerateEqualsSection(FileGeneration fg)
        {
            // Generate equals and hash
            if (GenerateEquals)
            {
                using (new RegionWrapper(fg, "Equals and Hash"))
                {
                    bool hasKeyField = false;
                    foreach (var field in this.Fields)
                    {
                        if (field.KeyField)
                        {
                            hasKeyField = true;
                            break;
                        }
                    }

                    fg.AppendLine("public override bool Equals(object obj)");
                    using (new BraceWrapper(fg))
                    {
                        GenerateEqualsCode(fg);
                    }
                    fg.AppendLine();

                    fg.AppendLine($"public bool Equals({this.ObjectName} rhs)");
                    using (new BraceWrapper(fg))
                    {
                        foreach (var field in Fields)
                        {
                            if (!hasKeyField || field.KeyField)
                            {
                                fg.AppendLine($"if (!object.Equals(this.{field.Name}, rhs.{field.Name})) return false;");
                            }
                        }
                        fg.AppendLine("return true;");
                    }
                    fg.AppendLine();

                    if (Fields.Count != 0)
                    {
                        fg.AppendLine("public override int GetHashCode()");
                        using (new BraceWrapper(fg))
                        {
                            fg.AppendLine("return ");
                            bool first = true;
                            foreach (var field in Fields)
                            {
                                if (!hasKeyField || field.KeyField)
                                {
                                    using (new LineWrapper(fg))
                                    {
                                        if (!first)
                                        {
                                            fg.Append(".CombineHashCode(");
                                        }
                                        fg.Append($"HashHelper.GetHashCode({field.Name})");

                                        if (first)
                                        {
                                            first = false;
                                        }
                                        else
                                        {
                                            fg.Append(")");
                                        }
                                    }
                                }
                            }
                            fg.AppendLine(";");
                        }
                        fg.AppendLine();
                    }
                }
                fg.AppendLine();
            }
        }

        private void GenerateToStringCode(FileGeneration fg)
        {
            if (GenerateToString)
            {
                using (new RegionWrapper(fg, "To String"))
                {
                    fg.AppendLine("public override string ToString()");
                    using (new BraceWrapper(fg))
                    {
                        fg.AppendLine("return this.PrintPretty();");
                    }
                }
                fg.AppendLine();
            }
        }

        protected virtual void GenerateSetTo(FileGeneration fg)
        {
            using (new RegionWrapper(fg, "Set To"))
            {
                fg.AppendLine($"public void SetTo({this.ObjectName} rhs, I{this.ObjectName} def = null, NotifyingFireParameters? cmds = null)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine("SetTo_Internal(rhs, def, null, cmds);");
                }
                fg.AppendLine();

                fg.AppendLine($"public void SetTo({this.ObjectName} rhs, I{this.ObjectName} def, out {this.GetErrorMaskItemString()} errorMask, NotifyingFireParameters? cmds = null)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"var retErrorMask = new {this.GetErrorMaskItemString()}();");
                    fg.AppendLine("errorMask = retErrorMask;");
                    fg.AppendLine("SetTo_Internal(rhs, def, retErrorMask, cmds);");
                }
                fg.AppendLine();

                fg.AppendLine($"private void SetTo_Internal({this.ObjectName} rhs, I{this.ObjectName} def, {this.GetErrorMaskItemString()} errorMask, NotifyingFireParameters? cmds)");
                using (new BraceWrapper(fg))
                {
                    foreach (var item in this.IterateFields())
                    {
                        if (item.Field.Copy)
                        {
                            fg.AppendLine("try");
                            using (new BraceWrapper(fg))
                            {
                                item.Field.GenerateForSetTo(fg, "this", "rhs", "def", "cmds");
                            }
                            GenerateExceptionCatcher(fg, item.Field, "errorMask", item.Index);
                        }
                    }
                }
            }
        }

        private void GenerateClear(FileGeneration fg, string accessor, string cmdAccessor)
        {
            foreach (var field in this.Fields)
            {
                if (field.ReadOnly) continue;
                field.GenerateClear(fg, accessor, cmdAccessor);
            }
        }

        private void GenerateModules(FileGeneration fg)
        {
            if (this.gen.GenerationModules.Count > 0)
            {
                foreach (var transl in gen.GenerationModules)
                {
                    using (new RegionWrapper(fg, transl.RegionString))
                    {
                        transl.GenerateInClass(this, fg);
                    }
                }
            }
        }

        private void GenerateInterfacesInClass(FileGeneration fg)
        {
            if (this.GenerationInterfaces.Count > 0)
            {
                foreach (var interf in gen.GenerationInterfaces)
                {
                    using (new RegionWrapper(fg, interf.RegionString))
                    {
                        interf.GenerateInClass(this, fg);
                    }
                }
            }
        }

        public void GenerateCopyableInterface(FileGeneration fg)
        {
            fg.AppendLine($"object ICopyable.Copy()");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("return this.Copy_ToObject(def: null);");
            }
            fg.AppendLine();

            if (this.Abstract)
            {
                if (this.IsTopClass)
                {
                    fg.AppendLine($"{this.ProtectedKeyword} abstract object Copy_ToObject(object def = null);");
                    fg.AppendLine();
                }
            }
            else
            {
                GenerateCopy_ToObject(fg);
            }
        }

        protected virtual void GenerateCopy_ToObject(FileGeneration fg)
        {
            fg.AppendLine($"{this.ProtectedKeyword}{this.FunctionOverride}object Copy_ToObject(object def = null)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"var ret = new {this.ObjectName}();");
                fg.AppendLine($"ret.CopyFieldsFrom_Generic(this, def: def, cmds: null);");
                fg.AppendLine("return ret;");
            }
            fg.AppendLine();
        }

        public virtual void GenerateCopyInAbleInterface(FileGeneration fg)
        {
            fg.AppendLine($"void ICopyInAble.CopyFieldsFrom(object rhs, object def, NotifyingFireParameters? cmds)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("this.CopyFieldsFrom_Generic(rhs, def, cmds);");
            }
            fg.AppendLine();

            if (this.Abstract)
            {
                if (this.IsTopClass)
                {
                    fg.AppendLine($"{this.ProtectedKeyword} abstract void CopyFieldsFrom_Generic(object rhs, object def, NotifyingFireParameters? cmds);");
                    fg.AppendLine();
                }
            }
            else
            {
                fg.AppendLine($"{this.ProtectedKeyword}{this.FunctionOverride}void CopyFieldsFrom_Generic(object rhs, object def, NotifyingFireParameters? cmds)");
                using (new BraceWrapper(fg))
                {
                    if (this.HasBaseObject && !this.BaseClass.Abstract)
                    {
                        fg.AppendLine("base.CopyFieldsFrom_Generic(rhs, def, cmds);");
                    }
                    fg.AppendLine($"if (rhs is {this.ObjectName} rhsCast)");
                    using (new BraceWrapper(fg))
                    {
                        fg.AppendLine($"this.CopyFieldsFrom(rhsCast, def as {this.ObjectName}, cmds);");
                    }
                }
                fg.AppendLine();
            }
        }

        public virtual void GenerateCopy(FileGeneration fg)
        {
            fg.AppendLine($"public {this.ObjectName} Copy({this.Getter_InterfaceStr} def = null)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"return ({this.ObjectName})this.Copy_ToObject(def: def);");
            }
            fg.AppendLine();

            if (this.Abstract) return;

            fg.AppendLine($"public static {this.ObjectName} Copy({this.Getter_InterfaceStr} item, {this.Getter_InterfaceStr} def = null)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"var ret = new {this.ObjectName}();");
                fg.AppendLine("ret.CopyFieldsFrom(item, def);");
                fg.AppendLine("return ret;");
            }
            fg.AppendLine();
        }

        protected virtual void GenerateClear(FileGeneration fg)
        {
            if (!HasBaseObject)
            {
                fg.AppendLine("partial void ClearPartial(NotifyingUnsetParameters? cmds);");
                fg.AppendLine();
            }

            fg.AppendLine($"public{FunctionOverride}void Clear(NotifyingUnsetParameters? cmds = null)");
            using (new BraceWrapper(fg))
            {
                if (HasBaseObject)
                {
                    fg.AppendLine("base.Clear(cmds);");
                }
                else
                {
                    fg.AppendLine("ClearPartial(cmds);");
                }
                GenerateClear(fg, "this", "cmds");
            }
            fg.AppendLine();
        }

        protected virtual void GenerateGenericCreate(FileGeneration fg)
        {
            if (!this.Abstract)
            {
                fg.AppendLine($"public static {this.ObjectName} {Constants.CREATE_FUNC_NAME}(IEnumerable<KeyValuePair<ushort, object>> fields)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"var ret = new {this.ObjectName}();");
                    fg.AppendLine("INoggolloquyObjectExt.CopyFieldsIn(ret, fields, def: null, skipReadonly: false, cmds: null);");
                    fg.AppendLine("return ret;");
                }
                fg.AppendLine();
            }

            fg.AppendLine($"public static void {Constants.COPYIN_FUNC_NAME}(IEnumerable<KeyValuePair<ushort, object>> fields, {this.ObjectName} obj)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("INoggolloquyObjectExt.CopyFieldsIn(obj, fields, def: null, skipReadonly: false, cmds: null);");
            }
            fg.AppendLine();
        }

        private void GenerateIsReadOnly(FileGeneration fg)
        {
            fg.AppendLine("public static bool IsReadOnly(ushort index)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine("switch (index)");
                using (new BraceWrapper(fg))
                {
                    var trues = IterateFields().Where((i) => i.Field.Derivative);
                    var falses = IterateFields().Where((i) => !i.Field.Derivative);
                    if (trues.Any())
                    {
                        foreach (var item in trues)
                        {
                            fg.AppendLine($"case {item.Index}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return true;");
                        }
                    }
                    if (falses.Any())
                    {
                        foreach (var item in falses)
                        {
                            fg.AppendLine($"case {item.Index}:");
                        }
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("return false;");
                        }
                    }

                    GenerateStandardIndexDefault(fg, "IsReadOnly", "index", true);
                }
            }
            fg.AppendLine();
        }

        public void GenerateExceptionCatcher(FileGeneration fg, TypeGeneration field, string errorMaskAccessor, int index)
        {
            fg.AppendLine("catch (Exception ex)");
            using (new BraceWrapper(fg))
            {
                fg.AppendLine($"if ({errorMaskAccessor} != null)");
                using (new BraceWrapper(fg))
                {
                    fg.AppendLine($"{errorMaskAccessor}.SetNthException({index}, ex);");
                }
            }
        }
        #endregion

        private void GenerateTranslations(FileGeneration fg)
        {
            if (this.gen.GenerationModules.Count == 0) return;
            using (new RegionWrapper(fg, "Modules"))
            {
                foreach (var translGen in this.gen.GenerationModules)
                {
                    using (new RegionWrapper(fg, translGen.RegionString))
                    {
                        translGen.Generate(this, fg);
                    }
                    fg.AppendLine();
                }
            }
            fg.AppendLine();
        }

        private void GenerateNoggolloquyInterfaces(FileGeneration fg)
        {
            if (this.gen.GenerationModules.Count == 0) return;
            using (new RegionWrapper(fg, "Noggolloquy Interfaces"))
            {
                foreach (var interfGen in this.GenerationInterfaces)
                {
                    using (new RegionWrapper(fg, interfGen.RegionString))
                    {
                        interfGen.Generate(this, fg);
                    }
                    fg.AppendLine();
                }
            }
            fg.AppendLine();
        }

        public bool HasNoggolloquyInterface<T>()
            where T : GenerationInterface
        {
            return this.GenerationInterfaces.Any((i) => i.GetType().Equals(typeof(T)));
        }

        public string GetMaskString(string t)
        {
            var str = this.Name;
            str += "_Mask";
            str += $"<{t}>";
            return str;
        }

        public string GetErrorMaskItemString()
        {
            return $"{this.Name}_ErrorMask";
        }

        public virtual void Resolve()
        {
        }

        public void RegenerateAndStampSourceXML()
        {
            XDocument doc;
            using (var stream = new FileStream(this.SourceXMLFile.FullName, FileMode.Open))
            {
                doc = XDocument.Load(stream);
            }
            bool modified = false;

            var NoggolloquyNode = doc.Element(XName.Get("Noggolloquy", NoggolloquyGenerator.Namespace));
            foreach (var obj in NoggolloquyNode.Elements(XName.Get("Object", NoggolloquyGenerator.Namespace))
                .And(NoggolloquyNode.Elements(XName.Get("Struct", NoggolloquyGenerator.Namespace))))
            {
                var name = obj.GetAttribute("name");
                if (name.Equals(this.Name))
                {
                    if (obj.GetAttribute("GUID") == null)
                    {
                        var guidAttr = new XAttribute("GUID", this.GUID.ToString());
                        obj.Add(guidAttr);
                        modified = true;
                    }
                    if (obj.GetAttribute("ID") == null)
                    {
                        var guidAttr = new XAttribute("ID", this.ID.ToString());
                        obj.Add(guidAttr);
                        modified = true;
                    }
                    break;
                }
            }

            if (!modified) return;

            using (XmlTextWriter writer = new XmlTextWriter(
                new FileStream(this.SourceXMLFile.FullName, FileMode.Create), Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 2;
                doc.WriteTo(writer);
            }
        }

        public IEnumerable<(int Index, TypeGeneration Field)> IterateFields()
        {
            var startIndex = this.StartingIndex;
            for (int i = 0; i < this.Fields.Count; i++)
            {
                yield return (i + startIndex, this.Fields[i]);
            }
        }

        public IEnumerable<ObjectGeneration> BaseClassTrail()
        {
            if (this.HasBaseObject)
            {
                yield return this.BaseClass;
                foreach (var ret in this.BaseClass.BaseClassTrail())
                {
                    yield return ret;
                }
            }
        }
    }
}
