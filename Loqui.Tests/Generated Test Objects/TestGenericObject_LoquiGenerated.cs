/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Internals;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;

namespace Loqui.Tests
{
    #region Class
    public partial class TestGenericObject<T, RBase, R> : ITestGenericObject<T, RBase, R>, ILoquiObjectSetter, IEquatable<TestGenericObject<T, RBase, R>>
        where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        where R : ILoquiObject, ILoquiObjectGetter
    {
        ILoquiRegistration ILoquiObject.Registration => TestGenericObject_Registration.Instance;
        public static TestGenericObject_Registration Registration => TestGenericObject_Registration.Instance;

        public TestGenericObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #region RefBase
        private readonly INotifyingItem<RBase> _RefBase = new NotifyingItem<RBase>();
        public INotifyingItem<RBase> RefBase_Property => this._RefBase;
        RBase ITestGenericObjectGetter<T, RBase, R>.RefBase => this.RefBase;
        public RBase RefBase { get => _RefBase.Item; set => _RefBase.Item = value; }
        INotifyingItem<RBase> ITestGenericObject<T, RBase, R>.RefBase_Property => this.RefBase_Property;
        INotifyingItemGetter<RBase> ITestGenericObjectGetter<T, RBase, R>.RefBase_Property => this.RefBase_Property;
        #endregion
        #region Ref
        private readonly INotifyingItem<R> _Ref = new NotifyingItem<R>();
        public INotifyingItem<R> Ref_Property => this._Ref;
        R ITestGenericObjectGetter<T, RBase, R>.Ref => this.Ref;
        public R Ref { get => _Ref.Item; set => _Ref.Item = value; }
        INotifyingItem<R> ITestGenericObject<T, RBase, R>.Ref_Property => this.Ref_Property;
        INotifyingItemGetter<R> ITestGenericObjectGetter<T, RBase, R>.Ref_Property => this.Ref_Property;
        #endregion

        #region Loqui Getter Interface

        protected virtual object GetNthObject(ushort index) => TestGenericObjectCommon.GetNthObject<T, RBase, R>(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected virtual bool GetNthObjectHasBeenSet(ushort index) => TestGenericObjectCommon.GetNthObjectHasBeenSet<T, RBase, R>(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected virtual void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestGenericObjectCommon.UnsetNthObject<T, RBase, R>(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected virtual void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestGenericObjectCommon.SetNthObjectHasBeenSet<T, RBase, R>(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        public void CopyFieldsFrom(
            ITestGenericObjectGetter<T, RBase, R> rhs,
            TestGenericObject_CopyMask copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestGenericObjectCommon.CopyFieldsFrom<T, RBase, R>(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestGenericObjectGetter<T, RBase, R> rhs,
            out TestGenericObject_ErrorMask errorMask,
            TestGenericObject_CopyMask copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestGenericObjectCommon.CopyFieldsFrom<T, RBase, R>(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestGenericObjectGetter<T, RBase, R> rhs,
            bool doErrorMask,
            out TestGenericObject_ErrorMask errorMask,
            TestGenericObject_CopyMask copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null,
            NotifyingFireParameters? cmds = null)
        {
            if (doErrorMask)
            {
                CopyFieldsFrom(
                    rhs: rhs,
                    errorMask: out errorMask,
                    copyMask: copyMask,
                    def: def,
                    cmds: cmds);
            }
            else
            {
                errorMask = null;
                CopyFieldsFrom(
                    rhs: rhs,
                    copyMask: copyMask,
                    def: def,
                    cmds: cmds);
            }
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return ILoquiObjectExt.PrintPretty(this);
        }
        #endregion


        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericObject<T, RBase, R> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericObject<T, RBase, R> rhs)
        {
            if (RefBase_Property.HasBeenSet != rhs.RefBase_Property.HasBeenSet) return false;
            if (RefBase_Property.HasBeenSet)
            {
                if (object.Equals(RefBase, rhs.RefBase)) return false;
            }
            if (Ref_Property.HasBeenSet != rhs.Ref_Property.HasBeenSet) return false;
            if (Ref_Property.HasBeenSet)
            {
                if (object.Equals(Ref, rhs.Ref)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (RefBase_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefBase).CombineHashCode(ret);
            }
            if (Ref_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ref).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        public static TestGenericObject<T, RBase, R> Create_XML(Stream stream)
        {
            using (var reader = new StreamReader(stream))
            {
                return Create_XML(XElement.Parse(reader.ReadToEnd()));
            }
        }

        public static TestGenericObject<T, RBase, R> Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static TestGenericObject<T, RBase, R> Create_XML(
            XElement root,
            out TestGenericObject_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static TestGenericObject<T, RBase, R> Create_XML(
            XElement root,
            bool doMasks,
            out TestGenericObject_ErrorMask errorMask)
        {
            TestGenericObject_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestGenericObject_ErrorMask()) : default(Func<TestGenericObject_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        private static TestGenericObject<T, RBase, R> Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<TestGenericObject_ErrorMask> errorMask)
        {
            var ret = new TestGenericObject<T, RBase, R>();
            try
            {
                foreach (var elem in root.Elements())
                {
                    if (!elem.TryGetAttribute("name", out XAttribute name)) continue;
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: name.Value,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            {
                if (!doMasks) throw;
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            TestGenericObject<T, RBase, R> item,
            XElement root,
            string name,
            bool doMasks,
            Func<TestGenericObject_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "RefBase":
                    try
                    {
                        item._RefBase.Item = ObjectToRef.Create_XML(
                            root: root,
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestGenericObject_FieldIndex.RefBase, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestGenericObject_FieldIndex.RefBase, ex);
                    }
                    break;
                case "Ref":
                    try
                    {
                        throw new NotImplementedException();
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestGenericObject_FieldIndex.Ref, ex);
                    }
                    break;
                default:
                    break;
            }
        }

        public virtual void CopyIn_XML(XElement root, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestGenericObject<T, RBase, R>, TestGenericObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TestGenericObject_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(XElement root, out TestGenericObject_ErrorMask errorMask, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestGenericObject<T, RBase, R>, TestGenericObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void Write_XML(Stream stream)
        {
            TestGenericObjectCommon.Write_XML(
                this,
                stream);
        }

        public void Write_XML(Stream stream, out TestGenericObject_ErrorMask errorMask)
        {
            TestGenericObjectCommon.Write_XML(
                this,
                stream,
                out errorMask);
        }

        public void Write_XML(XmlWriter writer, out TestGenericObject_ErrorMask errorMask, string name = null)
        {
            TestGenericObjectCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_XML(XmlWriter writer, string name = null)
        {
            TestGenericObjectCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out TestGenericObject_ErrorMask errorMask);
        }

        #endregion

        public TestGenericObject<T, RBase, R> Copy(
            TestGenericObject_CopyMask copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null)
        {
            return TestGenericObject<T, RBase, R>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestGenericObject<T, RBase, R> Copy(
            ITestGenericObject<T, RBase, R> item,
            TestGenericObject_CopyMask copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null)
        {
            TestGenericObject<T, RBase, R> ret;
            if (item.GetType().Equals(typeof(TestGenericObject<T, RBase, R>)))
            {
                ret = new TestGenericObject<T, RBase, R>();
            }
            else
            {
                ret = (TestGenericObject<T, RBase, R>)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType Copy<CopyType>(
            CopyType item,
            TestGenericObject_CopyMask copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null)
            where CopyType : class, ITestGenericObject<T, RBase, R>
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestGenericObject<T, RBase, R>)))
            {
                ret = new TestGenericObject<T, RBase, R>() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestGenericObject<T, RBase, R> Copy_ToLoqui(
            ITestGenericObjectGetter<T, RBase, R> item,
            TestGenericObject_CopyMask copyMask = null,
            ITestGenericObjectGetter<T, RBase, R> def = null)
        {
            var ret = new TestGenericObject<T, RBase, R>();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected virtual void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    this._RefBase.Set(
                        (RBase)obj,
                        cmds);
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    this._Ref.Set(
                        (R)obj,
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public virtual void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestGenericObjectCommon.Clear(this, cmds);
        }


        public static TestGenericObject<T, RBase, R> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestGenericObject<T, RBase, R>();
            ILoquiObjectExt.CopyFieldsIn(ret, fields, def: null, skipProtected: false, cmds: null);
            return ret;
        }

        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestGenericObject<T, RBase, R> obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestGenericObject<T, RBase, R> : ITestGenericObjectGetter<T, RBase, R>, ILoquiClass<ITestGenericObject<T, RBase, R>, ITestGenericObjectGetter<T, RBase, R>>, ILoquiClass<TestGenericObject<T, RBase, R>, ITestGenericObjectGetter<T, RBase, R>>
        where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        where R : ILoquiObject, ILoquiObjectGetter
    {
        new RBase RefBase { get; set; }
        new INotifyingItem<RBase> RefBase_Property { get; }

        new R Ref { get; set; }
        new INotifyingItem<R> Ref_Property { get; }

    }

    public interface ITestGenericObjectGetter<T, RBase, R> : ILoquiObject
        where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        where R : ILoquiObject, ILoquiObjectGetter
    {
        #region RefBase
        RBase RefBase { get; }
        INotifyingItemGetter<RBase> RefBase_Property { get; }

        #endregion
        #region Ref
        R Ref { get; }
        INotifyingItemGetter<R> Ref_Property { get; }

        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Internals
{
    #region Field Index
    public enum TestGenericObject_FieldIndex
    {
        RefBase = 0,
        Ref = 1,
    }
    #endregion

    #region Registration
    public class TestGenericObject_Registration : ILoquiRegistration
    {
        public static readonly TestGenericObject_Registration Instance = new TestGenericObject_Registration();

        public static ProtocolDefinition ProtocolDefinition => ProtocolDefinition_LoquiTests.Definition;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTests.ProtocolKey,
            msgID: 1,
            version: 0);

        public const string GUID = "c0c6b45b-906e-4a34-8e26-13ac0f04e3f8";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(TestGenericObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestGenericObject_ErrorMask);

        public static readonly Type ClassType = typeof(TestGenericObject<,,>);

        public const string FullName = "Loqui.Tests.TestGenericObject";

        public const string Name = "TestGenericObject";

        public const byte GenericCount = 3;

        public static readonly Type GenericRegistrationType = typeof(TestGenericObject_Registration<,,>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "REFBASE":
                    return (ushort)TestGenericObject_FieldIndex.RefBase;
                case "REF":
                    return (ushort)TestGenericObject_FieldIndex.Ref;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return "RefBase";
                case TestGenericObject_FieldIndex.Ref:
                    return "Ref";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                case TestGenericObject_FieldIndex.Ref:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        #region Interface
        ProtocolDefinition ILoquiRegistration.ProtocolDefinition => ProtocolDefinition;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class TestGenericObject_Registration<T, RBase, R> : TestGenericObject_Registration
        where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        where R : ILoquiObject, ILoquiObjectGetter
    {
        public static readonly TestGenericObject_Registration<T, RBase, R> GenericInstance = new TestGenericObject_Registration<T, RBase, R>();

        public new static Type GetNthType(ushort index)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return typeof(RBase);
                case TestGenericObject_FieldIndex.Ref:
                    return typeof(R);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Extensions
    public static class TestGenericObjectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<T, RBase, R>(
            this ITestGenericObject<T, RBase, R> item,
            ITestGenericObjectGetter<T, RBase, R> rhs,
            ITestGenericObjectGetter<T, RBase, R> def,
            bool doErrorMask,
            out TestGenericObject_ErrorMask errorMask,
            TestGenericObject_CopyMask copyMask,
            NotifyingFireParameters? cmds)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_ErrorMask retErrorMask = null;
            Func<TestGenericObject_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestGenericObject_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom<T, RBase, R>(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom<T, RBase, R>(
            this ITestGenericObject<T, RBase, R> item,
            ITestGenericObjectGetter<T, RBase, R> rhs,
            ITestGenericObjectGetter<T, RBase, R> def,
            bool doErrorMask,
            Func<TestGenericObject_ErrorMask> errorMask,
            TestGenericObject_CopyMask copyMask,
            NotifyingFireParameters? cmds)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            if (copyMask?.RefBase != CopyOption.Skip)
            {
                try
                {
                    item.RefBase_Property.SetToWithDefault(
                        rhs.RefBase_Property,
                        def?.RefBase_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RefBase ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ILoquiObjectExt.CopyFieldsIn(
                                        obj: r,
                                        rhs: item.RefBase,
                                        def: def == null ? default(RBase) : def.RefBase,
                                        skipProtected: true,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(RBase);
                                    var copyFunc = LoquiRegistration.GetCopyFunc<RBase>();
                                    return copyFunc(r, null, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefBase}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestGenericObject_FieldIndex.RefBase, ex);
                }
            }
            if (copyMask?.Ref != GetterCopyOption.Skip)
            {
                try
                {
                    item.Ref_Property.SetToWithDefault(
                        rhs.Ref_Property,
                        def?.Ref_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Ref ?? GetterCopyOption.Reference)
                            {
                                case GetterCopyOption.Reference:
                                    return r;
                                case GetterCopyOption.MakeCopy:
                                    if (r == null) return default(R);
                                    var copyFunc = LoquiRegistration.GetCopyFunc<R>();
                                    return copyFunc(r, null, d);
                                default:
                                    throw new NotImplementedException($"Unknown GetterCopyOption {copyMask?.Ref}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestGenericObject_FieldIndex.Ref, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet<T, RBase, R>(
            ushort index,
            bool on,
            ITestGenericObject<T, RBase, R> obj,
            NotifyingFireParameters? cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    obj.RefBase_Property.HasBeenSet = on;
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    obj.Ref_Property.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject<T, RBase, R>(
            ushort index,
            ITestGenericObject<T, RBase, R> obj,
            NotifyingUnsetParameters? cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    obj.RefBase_Property.Unset(cmds);
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    obj.Ref_Property.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet<T, RBase, R>(
            ushort index,
            ITestGenericObject<T, RBase, R> obj)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return obj.RefBase_Property.HasBeenSet;
                case TestGenericObject_FieldIndex.Ref:
                    return obj.Ref_Property.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject<T, RBase, R>(
            ushort index,
            ITestGenericObjectGetter<T, RBase, R> obj)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return obj.RefBase;
                case TestGenericObject_FieldIndex.Ref:
                    return obj.Ref;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear<T, RBase, R>(
            ITestGenericObject<T, RBase, R> item,
            NotifyingUnsetParameters? cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            item.RefBase_Property.Unset(cmds.ToUnsetParams());
            item.Ref_Property.Unset(cmds.ToUnsetParams());
        }

        public static TestGenericObject_Mask<bool> GetEqualsMask<T, RBase, R>(
            this ITestGenericObjectGetter<T, RBase, R> item,
            ITestGenericObjectGetter<T, RBase, R> rhs)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            var ret = new TestGenericObject_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask<T, RBase, R>(
            this ITestGenericObjectGetter<T, RBase, R> item,
            ITestGenericObjectGetter<T, RBase, R> rhs,
            TestGenericObject_Mask<bool> ret)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            ret.RefBase = item.RefBase_Property.LoquiEqualsHelper(rhs.RefBase_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Ref = new MaskItem<bool, object>();
            ret.Ref.Overall = item.Ref_Property.Equals(rhs.Ref_Property, (loqLhs, loqRhs) => object.Equals(loqLhs, loqRhs));
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML<T, RBase, R>(
            ITestGenericObjectGetter<T, RBase, R> item,
            Stream stream)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: false,
                    errorMask: out TestGenericObject_ErrorMask errorMask);
            }
        }

        public static void Write_XML<T, RBase, R>(
            ITestGenericObjectGetter<T, RBase, R> item,
            Stream stream,
            out TestGenericObject_ErrorMask errorMask)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: true,
                    errorMask: out errorMask);
            }
        }

        public static void Write_XML<T, RBase, R>(
            XmlWriter writer,
            string name,
            ITestGenericObjectGetter<T, RBase, R> item,
            bool doMasks,
            out TestGenericObject_ErrorMask errorMask)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestGenericObject_ErrorMask()) : default(Func<TestGenericObject_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal<T, RBase, R>(
            XmlWriter writer,
            string name,
            ITestGenericObjectGetter<T, RBase, R> item,
            bool doMasks,
            Func<TestGenericObject_ErrorMask> errorMask)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where R : ILoquiObject, ILoquiObjectGetter
        {
            try
            {
                using (new ElementWrapper(writer, nameof(TestGenericObject<T, RBase, R>)))
                {
                    if (!string.IsNullOrEmpty(name))
                    {
                        writer.WriteAttributeString("name", name);
                    }
                    if (item.RefBase_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RefBase_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.RefBase,
                                    name: nameof(item.RefBase),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestGenericObject_FieldIndex.RefBase, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestGenericObject_FieldIndex.RefBase, ex);
                        }
                    }
                    if (item.Ref_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Ref_Property.HasBeenSet)
                            {
                                var wildType = item.Ref == null ? null : item.Ref.GetType();
                                var transl = XmlTranslator.GetTranslator(wildType);
                                if (transl?.Item.Failed ?? true)
                                {
                                    throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                                }
                                transl.Item.Value.Write(
                                    writer,
                                    nameof(item.Ref),
                                    item.Ref,
                                    doMasks,
                                    out object suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestGenericObject_FieldIndex.Ref, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestGenericObject_FieldIndex.Ref, ex);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (!doMasks) throw;
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestGenericObject_Mask<T> : IMask<T>
    {
        #region Members
        public MaskItem<T, ObjectToRef_Mask<T>> RefBase { get; set; }
        public MaskItem<T, object> Ref { get; set; }
        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (RefBase != null)
            {
                if (!eval(this.RefBase.Overall)) return false;
                if (RefBase.Specific != null && !RefBase.Specific.AllEqual(eval)) return false;
            }
            if (Ref != null)
            {
                if (!eval(this.Ref.Overall)) return false;
                throw new NotImplementedException();
            }
            return true;
        }
        #endregion

        #region Translate
        public TestGenericObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestGenericObject_Mask<R>();
            if (this.RefBase != null)
            {
                ret.RefBase = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.RefBase.Overall = eval(this.RefBase.Overall);
                if (this.RefBase.Specific != null)
                {
                    ret.RefBase.Specific = this.RefBase.Specific.Translate(eval);
                }
            }
            if (this.Ref != null)
            {
                ret.Ref = new MaskItem<R, object>();
                ret.Ref.Overall = eval(this.Ref.Overall);
                throw new NotImplementedException();
            }
            return ret;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine($"{nameof(TestGenericObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (RefBase != null)
                {
                    fg.AppendLine("RefBase =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefBase.Overall != null)
                        {
                            fg.AppendLine(RefBase.Overall.ToString());
                        }
                        if (RefBase.Specific != null)
                        {
                            RefBase.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Ref != null)
                {
                    fg.AppendLine("Ref =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref.Overall != null)
                        {
                            fg.AppendLine(Ref.Overall.ToString());
                        }
                        if (Ref.Specific != null)
                        {
                            fg.AppendLine(Ref.Specific.ToString());
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestGenericObject_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefBase;
        public MaskItem<Exception, object> Ref;
        #endregion

        #region IErrorMask
        public virtual void SetNthException(ushort index, Exception ex)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    this.RefBase = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    this.Ref = new MaskItem<Exception, object>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public virtual void SetNthMask(ushort index, object obj)
        {
            TestGenericObject_FieldIndex enu = (TestGenericObject_FieldIndex)index;
            switch (enu)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    this.RefBase = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestGenericObject_FieldIndex.Ref:
                    this.Ref = (MaskItem<Exception, object>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestGenericObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (RefBase != null)
                {
                    fg.AppendLine("RefBase =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefBase.Overall != null)
                        {
                            fg.AppendLine(RefBase.Overall.ToString());
                        }
                        if (RefBase.Specific != null)
                        {
                            RefBase.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Ref != null)
                {
                    fg.AppendLine("Ref =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref.Overall != null)
                        {
                            fg.AppendLine(Ref.Overall.ToString());
                        }
                        if (Ref.Specific != null)
                        {
                            fg.AppendLine(Ref.Specific.ToString());
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TestGenericObject_ErrorMask Combine(TestGenericObject_ErrorMask rhs)
        {
            var ret = new TestGenericObject_ErrorMask();
            ret.RefBase = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefBase.Overall.Combine(rhs.RefBase.Overall), this.RefBase.Specific.Combine(rhs.RefBase.Specific));
            ret.Ref = new MaskItem<Exception, object>(this.Ref.Overall.Combine(rhs.Ref.Overall), this.Ref.Specific.Combine(rhs.Ref.Specific));
            return ret;
        }
        public static TestGenericObject_ErrorMask Combine(TestGenericObject_ErrorMask lhs, TestGenericObject_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TestGenericObject_CopyMask
    {
        #region Members
        public CopyOption RefBase;
        public GetterCopyOption Ref;
        #endregion

    }
    #endregion


    #endregion

}
