/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Internals;
using Loqui.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;

namespace Loqui.Tests
{
    #region Class
    public partial class TestObject_HasBeenSet_ReadOnly : ITestObject_HasBeenSet_ReadOnly, ILoquiObjectSetter, IEquatable<TestObject_HasBeenSet_ReadOnly>
    {
        ILoquiRegistration ILoquiObject.Registration => TestObject_HasBeenSet_ReadOnly_Registration.Instance;
        public static TestObject_HasBeenSet_ReadOnly_Registration Registration => TestObject_HasBeenSet_ReadOnly_Registration.Instance;

        #region Ctor
        public TestObject_HasBeenSet_ReadOnly()
        {
            _Ref_Singleton = HasBeenSetItem.Factory<ObjectToRef>(
                defaultVal: _Ref_Singleton_Object,
                markAsSet: true);
            _RefGetter_Singleton = HasBeenSetItem.Factory<IObjectToRefGetter>(
                defaultVal: _RefGetter_Singleton_Object,
                markAsSet: true);
            _RefSetter_Singleton = HasBeenSetItem.Factory<IObjectToRef>(
                defaultVal: _RefSetter_Singleton_Object,
                markAsSet: true);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ByteArray
        protected readonly IHasBeenSetItem<Byte[]> _ByteArray = HasBeenSetItem.Factory<Byte[]>(markAsSet: false);
        public IHasBeenSetItem<Byte[]> ByteArray_Property => _ByteArray;
        public Byte[] ByteArray
        {
            get => this._ByteArray.Item;
            protected set => this._ByteArray.Set(value);
        }
        Byte[] ITestObject_HasBeenSet_ReadOnlyGetter.ByteArray => this.ByteArray;
        IHasBeenSetItemGetter<Byte[]> ITestObject_HasBeenSet_ReadOnlyGetter.ByteArray_Property => this.ByteArray_Property;
        #endregion
        #region ByteArrayNull
        protected readonly IHasBeenSetItem<Byte[]> _ByteArrayNull = HasBeenSetItem.Factory<Byte[]>(markAsSet: false);
        public IHasBeenSetItem<Byte[]> ByteArrayNull_Property => _ByteArrayNull;
        public Byte[] ByteArrayNull
        {
            get => this._ByteArrayNull.Item;
            protected set => this._ByteArrayNull.Set(value);
        }
        Byte[] ITestObject_HasBeenSet_ReadOnlyGetter.ByteArrayNull => this.ByteArrayNull;
        IHasBeenSetItemGetter<Byte[]> ITestObject_HasBeenSet_ReadOnlyGetter.ByteArrayNull_Property => this.ByteArrayNull_Property;
        #endregion
        #region ByteArrayNotNull
        protected readonly IHasBeenSetItem<Byte[]> _ByteArrayNotNull = HasBeenSetItem.Factory<Byte[]>(
            markAsSet: false,
            noNullFallback: () => new byte[3]);
        public IHasBeenSetItem<Byte[]> ByteArrayNotNull_Property => _ByteArrayNotNull;
        public Byte[] ByteArrayNotNull
        {
            get => this._ByteArrayNotNull.Item;
            protected set => this._ByteArrayNotNull.Set(value);
        }
        Byte[] ITestObject_HasBeenSet_ReadOnlyGetter.ByteArrayNotNull => this.ByteArrayNotNull;
        IHasBeenSetItemGetter<Byte[]> ITestObject_HasBeenSet_ReadOnlyGetter.ByteArrayNotNull_Property => this.ByteArrayNotNull_Property;
        #endregion
        #region ByteArraySingleton
        protected readonly IHasBeenSetItem<Byte[]> _ByteArraySingleton = HasBeenSetItem.Factory<Byte[]>(
            markAsSet: true,
            noNullFallback: () => new byte[3]);
        public IHasBeenSetItem<Byte[]> ByteArraySingleton_Property => _ByteArraySingleton;
        public Byte[] ByteArraySingleton
        {
            get => this._ByteArraySingleton.Item;
            protected set => this._ByteArraySingleton.Set(value);
        }
        Byte[] ITestObject_HasBeenSet_ReadOnlyGetter.ByteArraySingleton => this.ByteArraySingleton;
        IHasBeenSetItemGetter<Byte[]> ITestObject_HasBeenSet_ReadOnlyGetter.ByteArraySingleton_Property => this.ByteArraySingleton_Property;
        #endregion
        #region BoolN
        protected readonly IHasBeenSetItem<Boolean?> _BoolN = HasBeenSetItem.Factory<Boolean?>(markAsSet: false);
        public IHasBeenSetItem<Boolean?> BoolN_Property => _BoolN;
        public Boolean? BoolN
        {
            get => this._BoolN.Item;
            protected set => this._BoolN.Set(value);
        }
        Boolean? ITestObject_HasBeenSet_ReadOnlyGetter.BoolN => this.BoolN;
        IHasBeenSetItemGetter<Boolean?> ITestObject_HasBeenSet_ReadOnlyGetter.BoolN_Property => this.BoolN_Property;
        #endregion
        #region Bool
        protected readonly IHasBeenSetItem<Boolean> _Bool = HasBeenSetItem.Factory<Boolean>(markAsSet: false);
        public IHasBeenSetItem<Boolean> Bool_Property => _Bool;
        public Boolean Bool
        {
            get => this._Bool.Item;
            protected set => this._Bool.Set(value);
        }
        Boolean ITestObject_HasBeenSet_ReadOnlyGetter.Bool => this.Bool;
        IHasBeenSetItemGetter<Boolean> ITestObject_HasBeenSet_ReadOnlyGetter.Bool_Property => this.Bool_Property;
        #endregion
        #region CharN
        protected readonly IHasBeenSetItem<Char?> _CharN = HasBeenSetItem.Factory<Char?>(markAsSet: false);
        public IHasBeenSetItem<Char?> CharN_Property => _CharN;
        public Char? CharN
        {
            get => this._CharN.Item;
            protected set => this._CharN.Set(value);
        }
        Char? ITestObject_HasBeenSet_ReadOnlyGetter.CharN => this.CharN;
        IHasBeenSetItemGetter<Char?> ITestObject_HasBeenSet_ReadOnlyGetter.CharN_Property => this.CharN_Property;
        #endregion
        #region Char
        protected readonly IHasBeenSetItem<Char> _Char = HasBeenSetItem.Factory<Char>(markAsSet: false);
        public IHasBeenSetItem<Char> Char_Property => _Char;
        public Char Char
        {
            get => this._Char.Item;
            protected set => this._Char.Set(value);
        }
        Char ITestObject_HasBeenSet_ReadOnlyGetter.Char => this.Char;
        IHasBeenSetItemGetter<Char> ITestObject_HasBeenSet_ReadOnlyGetter.Char_Property => this.Char_Property;
        #endregion
        #region DateTimeNull
        protected readonly IHasBeenSetItem<DateTime?> _DateTimeNull = HasBeenSetItem.Factory<DateTime?>(markAsSet: false);
        public IHasBeenSetItem<DateTime?> DateTimeNull_Property => _DateTimeNull;
        public DateTime? DateTimeNull
        {
            get => this._DateTimeNull.Item;
            protected set => this._DateTimeNull.Set(value);
        }
        DateTime? ITestObject_HasBeenSet_ReadOnlyGetter.DateTimeNull => this.DateTimeNull;
        IHasBeenSetItemGetter<DateTime?> ITestObject_HasBeenSet_ReadOnlyGetter.DateTimeNull_Property => this.DateTimeNull_Property;
        #endregion
        #region DateTime
        protected readonly IHasBeenSetItem<DateTime> _DateTime = HasBeenSetItem.Factory<DateTime>(markAsSet: false);
        public IHasBeenSetItem<DateTime> DateTime_Property => _DateTime;
        public DateTime DateTime
        {
            get => this._DateTime.Item;
            protected set => this._DateTime.Set(value);
        }
        DateTime ITestObject_HasBeenSet_ReadOnlyGetter.DateTime => this.DateTime;
        IHasBeenSetItemGetter<DateTime> ITestObject_HasBeenSet_ReadOnlyGetter.DateTime_Property => this.DateTime_Property;
        #endregion
        #region DoubleN
        protected readonly IHasBeenSetItem<Double?> _DoubleN = HasBeenSetItem.Factory<Double?>(markAsSet: false);
        public IHasBeenSetItem<Double?> DoubleN_Property => _DoubleN;
        public Double? DoubleN
        {
            get => this._DoubleN.Item;
            protected set => this._DoubleN.Set(value);
        }
        Double? ITestObject_HasBeenSet_ReadOnlyGetter.DoubleN => this.DoubleN;
        IHasBeenSetItemGetter<Double?> ITestObject_HasBeenSet_ReadOnlyGetter.DoubleN_Property => this.DoubleN_Property;
        #endregion
        #region DoubleN_Ranged
        protected readonly IHasBeenSetItem<Double?> _DoubleN_Ranged = HasBeenSetItem.Factory<Double?>(markAsSet: false);
        public IHasBeenSetItem<Double?> DoubleN_Ranged_Property => _DoubleN_Ranged;
        public Double? DoubleN_Ranged
        {
            get => this._DoubleN_Ranged.Item;
            protected set => this._DoubleN_Ranged.Set(value?.PutInRange(DoubleN_Ranged_Range.Min, DoubleN_Ranged_Range.Max));
        }
        Double? ITestObject_HasBeenSet_ReadOnlyGetter.DoubleN_Ranged => this.DoubleN_Ranged;
        IHasBeenSetItemGetter<Double?> ITestObject_HasBeenSet_ReadOnlyGetter.DoubleN_Ranged_Property => this.DoubleN_Ranged_Property;
        public static RangeDouble DoubleN_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region Double
        protected readonly IHasBeenSetItem<Double> _Double = HasBeenSetItem.Factory<Double>(markAsSet: false);
        public IHasBeenSetItem<Double> Double_Property => _Double;
        public Double Double
        {
            get => this._Double.Item;
            protected set => this._Double.Set(value);
        }
        Double ITestObject_HasBeenSet_ReadOnlyGetter.Double => this.Double;
        IHasBeenSetItemGetter<Double> ITestObject_HasBeenSet_ReadOnlyGetter.Double_Property => this.Double_Property;
        #endregion
        #region Double_Ranged
        protected readonly IHasBeenSetItem<Double> _Double_Ranged = HasBeenSetItem.Factory<Double>(markAsSet: false);
        public IHasBeenSetItem<Double> Double_Ranged_Property => _Double_Ranged;
        public Double Double_Ranged
        {
            get => this._Double_Ranged.Item;
            protected set => this._Double_Ranged.Set(value.PutInRange(Double_Ranged_Range.Min, Double_Ranged_Range.Max));
        }
        Double ITestObject_HasBeenSet_ReadOnlyGetter.Double_Ranged => this.Double_Ranged;
        IHasBeenSetItemGetter<Double> ITestObject_HasBeenSet_ReadOnlyGetter.Double_Ranged_Property => this.Double_Ranged_Property;
        public static RangeDouble Double_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region FloatN
        protected readonly IHasBeenSetItem<Single?> _FloatN = HasBeenSetItem.Factory<Single?>(markAsSet: false);
        public IHasBeenSetItem<Single?> FloatN_Property => _FloatN;
        public Single? FloatN
        {
            get => this._FloatN.Item;
            protected set => this._FloatN.Set(value);
        }
        Single? ITestObject_HasBeenSet_ReadOnlyGetter.FloatN => this.FloatN;
        IHasBeenSetItemGetter<Single?> ITestObject_HasBeenSet_ReadOnlyGetter.FloatN_Property => this.FloatN_Property;
        #endregion
        #region FloatN_Ranged
        protected readonly IHasBeenSetItem<Single?> _FloatN_Ranged = HasBeenSetItem.Factory<Single?>(markAsSet: false);
        public IHasBeenSetItem<Single?> FloatN_Ranged_Property => _FloatN_Ranged;
        public Single? FloatN_Ranged
        {
            get => this._FloatN_Ranged.Item;
            protected set => this._FloatN_Ranged.Set(value?.PutInRange(FloatN_Ranged_Range.Min, FloatN_Ranged_Range.Max));
        }
        Single? ITestObject_HasBeenSet_ReadOnlyGetter.FloatN_Ranged => this.FloatN_Ranged;
        IHasBeenSetItemGetter<Single?> ITestObject_HasBeenSet_ReadOnlyGetter.FloatN_Ranged_Property => this.FloatN_Ranged_Property;
        public static RangeFloat FloatN_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Float
        protected readonly IHasBeenSetItem<Single> _Float = HasBeenSetItem.Factory<Single>(markAsSet: false);
        public IHasBeenSetItem<Single> Float_Property => _Float;
        public Single Float
        {
            get => this._Float.Item;
            protected set => this._Float.Set(value);
        }
        Single ITestObject_HasBeenSet_ReadOnlyGetter.Float => this.Float;
        IHasBeenSetItemGetter<Single> ITestObject_HasBeenSet_ReadOnlyGetter.Float_Property => this.Float_Property;
        #endregion
        #region Float_Ranged
        protected readonly IHasBeenSetItem<Single> _Float_Ranged = HasBeenSetItem.Factory<Single>(markAsSet: false);
        public IHasBeenSetItem<Single> Float_Ranged_Property => _Float_Ranged;
        public Single Float_Ranged
        {
            get => this._Float_Ranged.Item;
            protected set => this._Float_Ranged.Set(value.PutInRange(Float_Ranged_Range.Min, Float_Ranged_Range.Max));
        }
        Single ITestObject_HasBeenSet_ReadOnlyGetter.Float_Ranged => this.Float_Ranged;
        IHasBeenSetItemGetter<Single> ITestObject_HasBeenSet_ReadOnlyGetter.Float_Ranged_Property => this.Float_Ranged_Property;
        public static RangeFloat Float_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Int16N
        protected readonly IHasBeenSetItem<Int16?> _Int16N = HasBeenSetItem.Factory<Int16?>(markAsSet: false);
        public IHasBeenSetItem<Int16?> Int16N_Property => _Int16N;
        public Int16? Int16N
        {
            get => this._Int16N.Item;
            protected set => this._Int16N.Set(value);
        }
        Int16? ITestObject_HasBeenSet_ReadOnlyGetter.Int16N => this.Int16N;
        IHasBeenSetItemGetter<Int16?> ITestObject_HasBeenSet_ReadOnlyGetter.Int16N_Property => this.Int16N_Property;
        #endregion
        #region Int16N_Ranged
        protected readonly IHasBeenSetItem<Int16?> _Int16N_Ranged = HasBeenSetItem.Factory<Int16?>(markAsSet: false);
        public IHasBeenSetItem<Int16?> Int16N_Ranged_Property => _Int16N_Ranged;
        public Int16? Int16N_Ranged
        {
            get => this._Int16N_Ranged.Item;
            protected set => this._Int16N_Ranged.Set(value?.PutInRange(Int16N_Ranged_Range.Min, Int16N_Ranged_Range.Max));
        }
        Int16? ITestObject_HasBeenSet_ReadOnlyGetter.Int16N_Ranged => this.Int16N_Ranged;
        IHasBeenSetItemGetter<Int16?> ITestObject_HasBeenSet_ReadOnlyGetter.Int16N_Ranged_Property => this.Int16N_Ranged_Property;
        public static RangeInt16 Int16N_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int16
        protected readonly IHasBeenSetItem<Int16> _Int16 = HasBeenSetItem.Factory<Int16>(markAsSet: false);
        public IHasBeenSetItem<Int16> Int16_Property => _Int16;
        public Int16 Int16
        {
            get => this._Int16.Item;
            protected set => this._Int16.Set(value);
        }
        Int16 ITestObject_HasBeenSet_ReadOnlyGetter.Int16 => this.Int16;
        IHasBeenSetItemGetter<Int16> ITestObject_HasBeenSet_ReadOnlyGetter.Int16_Property => this.Int16_Property;
        #endregion
        #region Int16_Ranged
        protected readonly IHasBeenSetItem<Int16> _Int16_Ranged = HasBeenSetItem.Factory<Int16>(markAsSet: false);
        public IHasBeenSetItem<Int16> Int16_Ranged_Property => _Int16_Ranged;
        public Int16 Int16_Ranged
        {
            get => this._Int16_Ranged.Item;
            protected set => this._Int16_Ranged.Set(value.PutInRange(Int16_Ranged_Range.Min, Int16_Ranged_Range.Max));
        }
        Int16 ITestObject_HasBeenSet_ReadOnlyGetter.Int16_Ranged => this.Int16_Ranged;
        IHasBeenSetItemGetter<Int16> ITestObject_HasBeenSet_ReadOnlyGetter.Int16_Ranged_Property => this.Int16_Ranged_Property;
        public static RangeInt16 Int16_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int32N
        protected readonly IHasBeenSetItem<Int32?> _Int32N = HasBeenSetItem.Factory<Int32?>(markAsSet: false);
        public IHasBeenSetItem<Int32?> Int32N_Property => _Int32N;
        public Int32? Int32N
        {
            get => this._Int32N.Item;
            protected set => this._Int32N.Set(value);
        }
        Int32? ITestObject_HasBeenSet_ReadOnlyGetter.Int32N => this.Int32N;
        IHasBeenSetItemGetter<Int32?> ITestObject_HasBeenSet_ReadOnlyGetter.Int32N_Property => this.Int32N_Property;
        #endregion
        #region Int32N_Ranged
        protected readonly IHasBeenSetItem<Int32?> _Int32N_Ranged = HasBeenSetItem.Factory<Int32?>(markAsSet: false);
        public IHasBeenSetItem<Int32?> Int32N_Ranged_Property => _Int32N_Ranged;
        public Int32? Int32N_Ranged
        {
            get => this._Int32N_Ranged.Item;
            protected set => this._Int32N_Ranged.Set(value?.PutInRange(Int32N_Ranged_Range.Min, Int32N_Ranged_Range.Max));
        }
        Int32? ITestObject_HasBeenSet_ReadOnlyGetter.Int32N_Ranged => this.Int32N_Ranged;
        IHasBeenSetItemGetter<Int32?> ITestObject_HasBeenSet_ReadOnlyGetter.Int32N_Ranged_Property => this.Int32N_Ranged_Property;
        public static RangeInt32 Int32N_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int32
        protected readonly IHasBeenSetItem<Int32> _Int32 = HasBeenSetItem.Factory<Int32>(markAsSet: false);
        public IHasBeenSetItem<Int32> Int32_Property => _Int32;
        public Int32 Int32
        {
            get => this._Int32.Item;
            protected set => this._Int32.Set(value);
        }
        Int32 ITestObject_HasBeenSet_ReadOnlyGetter.Int32 => this.Int32;
        IHasBeenSetItemGetter<Int32> ITestObject_HasBeenSet_ReadOnlyGetter.Int32_Property => this.Int32_Property;
        #endregion
        #region Int32_Ranged
        protected readonly IHasBeenSetItem<Int32> _Int32_Ranged = HasBeenSetItem.Factory<Int32>(markAsSet: false);
        public IHasBeenSetItem<Int32> Int32_Ranged_Property => _Int32_Ranged;
        public Int32 Int32_Ranged
        {
            get => this._Int32_Ranged.Item;
            protected set => this._Int32_Ranged.Set(value.PutInRange(Int32_Ranged_Range.Min, Int32_Ranged_Range.Max));
        }
        Int32 ITestObject_HasBeenSet_ReadOnlyGetter.Int32_Ranged => this.Int32_Ranged;
        IHasBeenSetItemGetter<Int32> ITestObject_HasBeenSet_ReadOnlyGetter.Int32_Ranged_Property => this.Int32_Ranged_Property;
        public static RangeInt32 Int32_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int64N
        protected readonly IHasBeenSetItem<Int64?> _Int64N = HasBeenSetItem.Factory<Int64?>(markAsSet: false);
        public IHasBeenSetItem<Int64?> Int64N_Property => _Int64N;
        public Int64? Int64N
        {
            get => this._Int64N.Item;
            protected set => this._Int64N.Set(value);
        }
        Int64? ITestObject_HasBeenSet_ReadOnlyGetter.Int64N => this.Int64N;
        IHasBeenSetItemGetter<Int64?> ITestObject_HasBeenSet_ReadOnlyGetter.Int64N_Property => this.Int64N_Property;
        #endregion
        #region Int64N_Ranged
        protected readonly IHasBeenSetItem<Int64?> _Int64N_Ranged = HasBeenSetItem.Factory<Int64?>(markAsSet: false);
        public IHasBeenSetItem<Int64?> Int64N_Ranged_Property => _Int64N_Ranged;
        public Int64? Int64N_Ranged
        {
            get => this._Int64N_Ranged.Item;
            protected set => this._Int64N_Ranged.Set(value?.PutInRange(Int64N_Ranged_Range.Min, Int64N_Ranged_Range.Max));
        }
        Int64? ITestObject_HasBeenSet_ReadOnlyGetter.Int64N_Ranged => this.Int64N_Ranged;
        IHasBeenSetItemGetter<Int64?> ITestObject_HasBeenSet_ReadOnlyGetter.Int64N_Ranged_Property => this.Int64N_Ranged_Property;
        public static RangeInt64 Int64N_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int64
        protected readonly IHasBeenSetItem<Int64> _Int64 = HasBeenSetItem.Factory<Int64>(markAsSet: false);
        public IHasBeenSetItem<Int64> Int64_Property => _Int64;
        public Int64 Int64
        {
            get => this._Int64.Item;
            protected set => this._Int64.Set(value);
        }
        Int64 ITestObject_HasBeenSet_ReadOnlyGetter.Int64 => this.Int64;
        IHasBeenSetItemGetter<Int64> ITestObject_HasBeenSet_ReadOnlyGetter.Int64_Property => this.Int64_Property;
        #endregion
        #region Int64_Ranged
        protected readonly IHasBeenSetItem<Int64> _Int64_Ranged = HasBeenSetItem.Factory<Int64>(markAsSet: false);
        public IHasBeenSetItem<Int64> Int64_Ranged_Property => _Int64_Ranged;
        public Int64 Int64_Ranged
        {
            get => this._Int64_Ranged.Item;
            protected set => this._Int64_Ranged.Set(value.PutInRange(Int64_Ranged_Range.Min, Int64_Ranged_Range.Max));
        }
        Int64 ITestObject_HasBeenSet_ReadOnlyGetter.Int64_Ranged => this.Int64_Ranged;
        IHasBeenSetItemGetter<Int64> ITestObject_HasBeenSet_ReadOnlyGetter.Int64_Ranged_Property => this.Int64_Ranged_Property;
        public static RangeInt64 Int64_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int8N
        protected readonly IHasBeenSetItem<SByte?> _Int8N = HasBeenSetItem.Factory<SByte?>(markAsSet: false);
        public IHasBeenSetItem<SByte?> Int8N_Property => _Int8N;
        public SByte? Int8N
        {
            get => this._Int8N.Item;
            protected set => this._Int8N.Set(value);
        }
        SByte? ITestObject_HasBeenSet_ReadOnlyGetter.Int8N => this.Int8N;
        IHasBeenSetItemGetter<SByte?> ITestObject_HasBeenSet_ReadOnlyGetter.Int8N_Property => this.Int8N_Property;
        #endregion
        #region Int8N_Ranged
        protected readonly IHasBeenSetItem<SByte?> _Int8N_Ranged = HasBeenSetItem.Factory<SByte?>(markAsSet: false);
        public IHasBeenSetItem<SByte?> Int8N_Ranged_Property => _Int8N_Ranged;
        public SByte? Int8N_Ranged
        {
            get => this._Int8N_Ranged.Item;
            protected set => this._Int8N_Ranged.Set(value?.PutInRange(Int8N_Ranged_Range.Min, Int8N_Ranged_Range.Max));
        }
        SByte? ITestObject_HasBeenSet_ReadOnlyGetter.Int8N_Ranged => this.Int8N_Ranged;
        IHasBeenSetItemGetter<SByte?> ITestObject_HasBeenSet_ReadOnlyGetter.Int8N_Ranged_Property => this.Int8N_Ranged_Property;
        public static RangeInt8 Int8N_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Int8
        protected readonly IHasBeenSetItem<SByte> _Int8 = HasBeenSetItem.Factory<SByte>(markAsSet: false);
        public IHasBeenSetItem<SByte> Int8_Property => _Int8;
        public SByte Int8
        {
            get => this._Int8.Item;
            protected set => this._Int8.Set(value);
        }
        SByte ITestObject_HasBeenSet_ReadOnlyGetter.Int8 => this.Int8;
        IHasBeenSetItemGetter<SByte> ITestObject_HasBeenSet_ReadOnlyGetter.Int8_Property => this.Int8_Property;
        #endregion
        #region Int8_Ranged
        protected readonly IHasBeenSetItem<SByte> _Int8_Ranged = HasBeenSetItem.Factory<SByte>(markAsSet: false);
        public IHasBeenSetItem<SByte> Int8_Ranged_Property => _Int8_Ranged;
        public SByte Int8_Ranged
        {
            get => this._Int8_Ranged.Item;
            protected set => this._Int8_Ranged.Set(value.PutInRange(Int8_Ranged_Range.Min, Int8_Ranged_Range.Max));
        }
        SByte ITestObject_HasBeenSet_ReadOnlyGetter.Int8_Ranged => this.Int8_Ranged;
        IHasBeenSetItemGetter<SByte> ITestObject_HasBeenSet_ReadOnlyGetter.Int8_Ranged_Property => this.Int8_Ranged_Property;
        public static RangeInt8 Int8_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Unsafe
        protected readonly IHasBeenSetItem<bool> _Unsafe = HasBeenSetItem.Factory<bool>(markAsSet: false);
        public IHasBeenSetItem<bool> Unsafe_Property => _Unsafe;
        public bool Unsafe
        {
            get => this._Unsafe.Item;
            protected set => this._Unsafe.Set(value);
        }
        bool ITestObject_HasBeenSet_ReadOnlyGetter.Unsafe => this.Unsafe;
        IHasBeenSetItemGetter<bool> ITestObject_HasBeenSet_ReadOnlyGetter.Unsafe_Property => this.Unsafe_Property;
        #endregion
        #region UnsafeLoqui
        protected readonly IHasBeenSetItem<ObjectToRef> _UnsafeLoqui = HasBeenSetItem.Factory<ObjectToRef>(markAsSet: false);
        public IHasBeenSetItem<ObjectToRef> UnsafeLoqui_Property => _UnsafeLoqui;
        public ObjectToRef UnsafeLoqui
        {
            get => this._UnsafeLoqui.Item;
            protected set => this._UnsafeLoqui.Set(value);
        }
        ObjectToRef ITestObject_HasBeenSet_ReadOnlyGetter.UnsafeLoqui => this.UnsafeLoqui;
        IHasBeenSetItemGetter<ObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.UnsafeLoqui_Property => this.UnsafeLoqui_Property;
        #endregion
        #region UnsafeNull
        protected readonly IHasBeenSetItem<ObjectToRef> _UnsafeNull = HasBeenSetItem.Factory<ObjectToRef>(markAsSet: false);
        public IHasBeenSetItem<ObjectToRef> UnsafeNull_Property => _UnsafeNull;
        public ObjectToRef UnsafeNull
        {
            get => this._UnsafeNull.Item;
            protected set => this._UnsafeNull.Set(value);
        }
        ObjectToRef ITestObject_HasBeenSet_ReadOnlyGetter.UnsafeNull => this.UnsafeNull;
        IHasBeenSetItemGetter<ObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.UnsafeNull_Property => this.UnsafeNull_Property;
        #endregion
        #region P2IntN
        protected readonly IHasBeenSetItem<P2Int?> _P2IntN = HasBeenSetItem.Factory<P2Int?>(markAsSet: false);
        public IHasBeenSetItem<P2Int?> P2IntN_Property => _P2IntN;
        public P2Int? P2IntN
        {
            get => this._P2IntN.Item;
            protected set => this._P2IntN.Set(value);
        }
        P2Int? ITestObject_HasBeenSet_ReadOnlyGetter.P2IntN => this.P2IntN;
        IHasBeenSetItemGetter<P2Int?> ITestObject_HasBeenSet_ReadOnlyGetter.P2IntN_Property => this.P2IntN_Property;
        #endregion
        #region P2Int
        protected readonly IHasBeenSetItem<P2Int> _P2Int = HasBeenSetItem.Factory<P2Int>(markAsSet: false);
        public IHasBeenSetItem<P2Int> P2Int_Property => _P2Int;
        public P2Int P2Int
        {
            get => this._P2Int.Item;
            protected set => this._P2Int.Set(value);
        }
        P2Int ITestObject_HasBeenSet_ReadOnlyGetter.P2Int => this.P2Int;
        IHasBeenSetItemGetter<P2Int> ITestObject_HasBeenSet_ReadOnlyGetter.P2Int_Property => this.P2Int_Property;
        #endregion
        #region P3DoubleN
        protected readonly IHasBeenSetItem<P3Double?> _P3DoubleN = HasBeenSetItem.Factory<P3Double?>(markAsSet: false);
        public IHasBeenSetItem<P3Double?> P3DoubleN_Property => _P3DoubleN;
        public P3Double? P3DoubleN
        {
            get => this._P3DoubleN.Item;
            protected set => this._P3DoubleN.Set(value);
        }
        P3Double? ITestObject_HasBeenSet_ReadOnlyGetter.P3DoubleN => this.P3DoubleN;
        IHasBeenSetItemGetter<P3Double?> ITestObject_HasBeenSet_ReadOnlyGetter.P3DoubleN_Property => this.P3DoubleN_Property;
        #endregion
        #region P3Double
        protected readonly IHasBeenSetItem<P3Double> _P3Double = HasBeenSetItem.Factory<P3Double>(markAsSet: false);
        public IHasBeenSetItem<P3Double> P3Double_Property => _P3Double;
        public P3Double P3Double
        {
            get => this._P3Double.Item;
            protected set => this._P3Double.Set(value);
        }
        P3Double ITestObject_HasBeenSet_ReadOnlyGetter.P3Double => this.P3Double;
        IHasBeenSetItemGetter<P3Double> ITestObject_HasBeenSet_ReadOnlyGetter.P3Double_Property => this.P3Double_Property;
        #endregion
        #region P3IntN
        protected readonly IHasBeenSetItem<P3Int?> _P3IntN = HasBeenSetItem.Factory<P3Int?>(markAsSet: false);
        public IHasBeenSetItem<P3Int?> P3IntN_Property => _P3IntN;
        public P3Int? P3IntN
        {
            get => this._P3IntN.Item;
            protected set => this._P3IntN.Set(value);
        }
        P3Int? ITestObject_HasBeenSet_ReadOnlyGetter.P3IntN => this.P3IntN;
        IHasBeenSetItemGetter<P3Int?> ITestObject_HasBeenSet_ReadOnlyGetter.P3IntN_Property => this.P3IntN_Property;
        #endregion
        #region P3Int
        protected readonly IHasBeenSetItem<P3Int> _P3Int = HasBeenSetItem.Factory<P3Int>(markAsSet: false);
        public IHasBeenSetItem<P3Int> P3Int_Property => _P3Int;
        public P3Int P3Int
        {
            get => this._P3Int.Item;
            protected set => this._P3Int.Set(value);
        }
        P3Int ITestObject_HasBeenSet_ReadOnlyGetter.P3Int => this.P3Int;
        IHasBeenSetItemGetter<P3Int> ITestObject_HasBeenSet_ReadOnlyGetter.P3Int_Property => this.P3Int_Property;
        #endregion
        #region PercentN
        protected readonly IHasBeenSetItem<Percent?> _PercentN = HasBeenSetItem.Factory<Percent?>(markAsSet: false);
        public IHasBeenSetItem<Percent?> PercentN_Property => _PercentN;
        public Percent? PercentN
        {
            get => this._PercentN.Item;
            protected set => this._PercentN.Set(value);
        }
        Percent? ITestObject_HasBeenSet_ReadOnlyGetter.PercentN => this.PercentN;
        IHasBeenSetItemGetter<Percent?> ITestObject_HasBeenSet_ReadOnlyGetter.PercentN_Property => this.PercentN_Property;
        #endregion
        #region Percent
        protected readonly IHasBeenSetItem<Percent> _Percent = HasBeenSetItem.Factory<Percent>(markAsSet: false);
        public IHasBeenSetItem<Percent> Percent_Property => _Percent;
        public Percent Percent
        {
            get => this._Percent.Item;
            protected set => this._Percent.Set(value);
        }
        Percent ITestObject_HasBeenSet_ReadOnlyGetter.Percent => this.Percent;
        IHasBeenSetItemGetter<Percent> ITestObject_HasBeenSet_ReadOnlyGetter.Percent_Property => this.Percent_Property;
        #endregion
        #region RangeInt8N
        protected readonly IHasBeenSetItem<RangeInt8?> _RangeInt8N = HasBeenSetItem.Factory<RangeInt8?>(markAsSet: false);
        public IHasBeenSetItem<RangeInt8?> RangeInt8N_Property => _RangeInt8N;
        public RangeInt8? RangeInt8N
        {
            get => this._RangeInt8N.Item;
            protected set => this._RangeInt8N.Set(value);
        }
        RangeInt8? ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt8N => this.RangeInt8N;
        IHasBeenSetItemGetter<RangeInt8?> ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt8N_Property => this.RangeInt8N_Property;
        #endregion
        #region RangeInt8
        protected readonly IHasBeenSetItem<RangeInt8> _RangeInt8 = HasBeenSetItem.Factory<RangeInt8>(markAsSet: false);
        public IHasBeenSetItem<RangeInt8> RangeInt8_Property => _RangeInt8;
        public RangeInt8 RangeInt8
        {
            get => this._RangeInt8.Item;
            protected set => this._RangeInt8.Set(value);
        }
        RangeInt8 ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt8 => this.RangeInt8;
        IHasBeenSetItemGetter<RangeInt8> ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt8_Property => this.RangeInt8_Property;
        #endregion
        #region RangeInt16N
        protected readonly IHasBeenSetItem<RangeInt16?> _RangeInt16N = HasBeenSetItem.Factory<RangeInt16?>(markAsSet: false);
        public IHasBeenSetItem<RangeInt16?> RangeInt16N_Property => _RangeInt16N;
        public RangeInt16? RangeInt16N
        {
            get => this._RangeInt16N.Item;
            protected set => this._RangeInt16N.Set(value);
        }
        RangeInt16? ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt16N => this.RangeInt16N;
        IHasBeenSetItemGetter<RangeInt16?> ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt16N_Property => this.RangeInt16N_Property;
        #endregion
        #region RangeInt16
        protected readonly IHasBeenSetItem<RangeInt16> _RangeInt16 = HasBeenSetItem.Factory<RangeInt16>(markAsSet: false);
        public IHasBeenSetItem<RangeInt16> RangeInt16_Property => _RangeInt16;
        public RangeInt16 RangeInt16
        {
            get => this._RangeInt16.Item;
            protected set => this._RangeInt16.Set(value);
        }
        RangeInt16 ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt16 => this.RangeInt16;
        IHasBeenSetItemGetter<RangeInt16> ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt16_Property => this.RangeInt16_Property;
        #endregion
        #region RangeInt32N
        protected readonly IHasBeenSetItem<RangeInt32?> _RangeInt32N = HasBeenSetItem.Factory<RangeInt32?>(markAsSet: false);
        public IHasBeenSetItem<RangeInt32?> RangeInt32N_Property => _RangeInt32N;
        public RangeInt32? RangeInt32N
        {
            get => this._RangeInt32N.Item;
            protected set => this._RangeInt32N.Set(value);
        }
        RangeInt32? ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt32N => this.RangeInt32N;
        IHasBeenSetItemGetter<RangeInt32?> ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt32N_Property => this.RangeInt32N_Property;
        #endregion
        #region RangeInt32
        protected readonly IHasBeenSetItem<RangeInt32> _RangeInt32 = HasBeenSetItem.Factory<RangeInt32>(markAsSet: false);
        public IHasBeenSetItem<RangeInt32> RangeInt32_Property => _RangeInt32;
        public RangeInt32 RangeInt32
        {
            get => this._RangeInt32.Item;
            protected set => this._RangeInt32.Set(value);
        }
        RangeInt32 ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt32 => this.RangeInt32;
        IHasBeenSetItemGetter<RangeInt32> ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt32_Property => this.RangeInt32_Property;
        #endregion
        #region RangeInt64N
        protected readonly IHasBeenSetItem<RangeInt64?> _RangeInt64N = HasBeenSetItem.Factory<RangeInt64?>(markAsSet: false);
        public IHasBeenSetItem<RangeInt64?> RangeInt64N_Property => _RangeInt64N;
        public RangeInt64? RangeInt64N
        {
            get => this._RangeInt64N.Item;
            protected set => this._RangeInt64N.Set(value);
        }
        RangeInt64? ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt64N => this.RangeInt64N;
        IHasBeenSetItemGetter<RangeInt64?> ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt64N_Property => this.RangeInt64N_Property;
        #endregion
        #region RangeInt64
        protected readonly IHasBeenSetItem<RangeInt64> _RangeInt64 = HasBeenSetItem.Factory<RangeInt64>(markAsSet: false);
        public IHasBeenSetItem<RangeInt64> RangeInt64_Property => _RangeInt64;
        public RangeInt64 RangeInt64
        {
            get => this._RangeInt64.Item;
            protected set => this._RangeInt64.Set(value);
        }
        RangeInt64 ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt64 => this.RangeInt64;
        IHasBeenSetItemGetter<RangeInt64> ITestObject_HasBeenSet_ReadOnlyGetter.RangeInt64_Property => this.RangeInt64_Property;
        #endregion
        #region RangeUInt8N
        protected readonly IHasBeenSetItem<RangeUInt8?> _RangeUInt8N = HasBeenSetItem.Factory<RangeUInt8?>(markAsSet: false);
        public IHasBeenSetItem<RangeUInt8?> RangeUInt8N_Property => _RangeUInt8N;
        public RangeUInt8? RangeUInt8N
        {
            get => this._RangeUInt8N.Item;
            protected set => this._RangeUInt8N.Set(value);
        }
        RangeUInt8? ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt8N => this.RangeUInt8N;
        IHasBeenSetItemGetter<RangeUInt8?> ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt8N_Property => this.RangeUInt8N_Property;
        #endregion
        #region RangeUInt8
        protected readonly IHasBeenSetItem<RangeUInt8> _RangeUInt8 = HasBeenSetItem.Factory<RangeUInt8>(markAsSet: false);
        public IHasBeenSetItem<RangeUInt8> RangeUInt8_Property => _RangeUInt8;
        public RangeUInt8 RangeUInt8
        {
            get => this._RangeUInt8.Item;
            protected set => this._RangeUInt8.Set(value);
        }
        RangeUInt8 ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt8 => this.RangeUInt8;
        IHasBeenSetItemGetter<RangeUInt8> ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt8_Property => this.RangeUInt8_Property;
        #endregion
        #region RangeUInt16N
        protected readonly IHasBeenSetItem<RangeUInt16?> _RangeUInt16N = HasBeenSetItem.Factory<RangeUInt16?>(markAsSet: false);
        public IHasBeenSetItem<RangeUInt16?> RangeUInt16N_Property => _RangeUInt16N;
        public RangeUInt16? RangeUInt16N
        {
            get => this._RangeUInt16N.Item;
            protected set => this._RangeUInt16N.Set(value);
        }
        RangeUInt16? ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt16N => this.RangeUInt16N;
        IHasBeenSetItemGetter<RangeUInt16?> ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt16N_Property => this.RangeUInt16N_Property;
        #endregion
        #region RangeUInt16
        protected readonly IHasBeenSetItem<RangeUInt16> _RangeUInt16 = HasBeenSetItem.Factory<RangeUInt16>(markAsSet: false);
        public IHasBeenSetItem<RangeUInt16> RangeUInt16_Property => _RangeUInt16;
        public RangeUInt16 RangeUInt16
        {
            get => this._RangeUInt16.Item;
            protected set => this._RangeUInt16.Set(value);
        }
        RangeUInt16 ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt16 => this.RangeUInt16;
        IHasBeenSetItemGetter<RangeUInt16> ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt16_Property => this.RangeUInt16_Property;
        #endregion
        #region RangeUInt32N
        protected readonly IHasBeenSetItem<RangeUInt32?> _RangeUInt32N = HasBeenSetItem.Factory<RangeUInt32?>(markAsSet: false);
        public IHasBeenSetItem<RangeUInt32?> RangeUInt32N_Property => _RangeUInt32N;
        public RangeUInt32? RangeUInt32N
        {
            get => this._RangeUInt32N.Item;
            protected set => this._RangeUInt32N.Set(value);
        }
        RangeUInt32? ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt32N => this.RangeUInt32N;
        IHasBeenSetItemGetter<RangeUInt32?> ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt32N_Property => this.RangeUInt32N_Property;
        #endregion
        #region RangeUInt32
        protected readonly IHasBeenSetItem<RangeUInt32> _RangeUInt32 = HasBeenSetItem.Factory<RangeUInt32>(markAsSet: false);
        public IHasBeenSetItem<RangeUInt32> RangeUInt32_Property => _RangeUInt32;
        public RangeUInt32 RangeUInt32
        {
            get => this._RangeUInt32.Item;
            protected set => this._RangeUInt32.Set(value);
        }
        RangeUInt32 ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt32 => this.RangeUInt32;
        IHasBeenSetItemGetter<RangeUInt32> ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt32_Property => this.RangeUInt32_Property;
        #endregion
        #region RangeUInt64N
        protected readonly IHasBeenSetItem<RangeUInt64?> _RangeUInt64N = HasBeenSetItem.Factory<RangeUInt64?>(markAsSet: false);
        public IHasBeenSetItem<RangeUInt64?> RangeUInt64N_Property => _RangeUInt64N;
        public RangeUInt64? RangeUInt64N
        {
            get => this._RangeUInt64N.Item;
            protected set => this._RangeUInt64N.Set(value);
        }
        RangeUInt64? ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt64N => this.RangeUInt64N;
        IHasBeenSetItemGetter<RangeUInt64?> ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt64N_Property => this.RangeUInt64N_Property;
        #endregion
        #region RangeUInt64
        protected readonly IHasBeenSetItem<RangeUInt64> _RangeUInt64 = HasBeenSetItem.Factory<RangeUInt64>(markAsSet: false);
        public IHasBeenSetItem<RangeUInt64> RangeUInt64_Property => _RangeUInt64;
        public RangeUInt64 RangeUInt64
        {
            get => this._RangeUInt64.Item;
            protected set => this._RangeUInt64.Set(value);
        }
        RangeUInt64 ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt64 => this.RangeUInt64;
        IHasBeenSetItemGetter<RangeUInt64> ITestObject_HasBeenSet_ReadOnlyGetter.RangeUInt64_Property => this.RangeUInt64_Property;
        #endregion
        #region String
        protected readonly IHasBeenSetItem<String> _String = HasBeenSetItem.Factory<String>(markAsSet: false);
        public IHasBeenSetItem<String> String_Property => _String;
        public String String
        {
            get => this._String.Item;
            protected set => this._String.Set(value);
        }
        String ITestObject_HasBeenSet_ReadOnlyGetter.String => this.String;
        IHasBeenSetItemGetter<String> ITestObject_HasBeenSet_ReadOnlyGetter.String_Property => this.String_Property;
        #endregion
        #region FilePath
        protected readonly IHasBeenSetItem<FilePath> _FilePath = HasBeenSetItem.Factory<FilePath>(markAsSet: false);
        public IHasBeenSetItem<FilePath> FilePath_Property => _FilePath;
        public FilePath FilePath
        {
            get => this._FilePath.Item;
            protected set => this._FilePath.Set(value);
        }
        FilePath ITestObject_HasBeenSet_ReadOnlyGetter.FilePath => this.FilePath;
        IHasBeenSetItemGetter<FilePath> ITestObject_HasBeenSet_ReadOnlyGetter.FilePath_Property => this.FilePath_Property;
        #endregion
        #region FilePathNull
        protected readonly IHasBeenSetItem<FilePath?> _FilePathNull = HasBeenSetItem.Factory<FilePath?>(markAsSet: false);
        public IHasBeenSetItem<FilePath?> FilePathNull_Property => _FilePathNull;
        public FilePath? FilePathNull
        {
            get => this._FilePathNull.Item;
            protected set => this._FilePathNull.Set(value);
        }
        FilePath? ITestObject_HasBeenSet_ReadOnlyGetter.FilePathNull => this.FilePathNull;
        IHasBeenSetItemGetter<FilePath?> ITestObject_HasBeenSet_ReadOnlyGetter.FilePathNull_Property => this.FilePathNull_Property;
        #endregion
        #region DirectoryPath
        protected readonly IHasBeenSetItem<DirectoryPath> _DirectoryPath = HasBeenSetItem.Factory<DirectoryPath>(markAsSet: false);
        public IHasBeenSetItem<DirectoryPath> DirectoryPath_Property => _DirectoryPath;
        public DirectoryPath DirectoryPath
        {
            get => this._DirectoryPath.Item;
            protected set => this._DirectoryPath.Set(value);
        }
        DirectoryPath ITestObject_HasBeenSet_ReadOnlyGetter.DirectoryPath => this.DirectoryPath;
        IHasBeenSetItemGetter<DirectoryPath> ITestObject_HasBeenSet_ReadOnlyGetter.DirectoryPath_Property => this.DirectoryPath_Property;
        #endregion
        #region DirectoryPathNull
        protected readonly IHasBeenSetItem<DirectoryPath?> _DirectoryPathNull = HasBeenSetItem.Factory<DirectoryPath?>(markAsSet: false);
        public IHasBeenSetItem<DirectoryPath?> DirectoryPathNull_Property => _DirectoryPathNull;
        public DirectoryPath? DirectoryPathNull
        {
            get => this._DirectoryPathNull.Item;
            protected set => this._DirectoryPathNull.Set(value);
        }
        DirectoryPath? ITestObject_HasBeenSet_ReadOnlyGetter.DirectoryPathNull => this.DirectoryPathNull;
        IHasBeenSetItemGetter<DirectoryPath?> ITestObject_HasBeenSet_ReadOnlyGetter.DirectoryPathNull_Property => this.DirectoryPathNull_Property;
        #endregion
        #region UDoubleN
        protected readonly IHasBeenSetItem<UDouble?> _UDoubleN = HasBeenSetItem.Factory<UDouble?>(markAsSet: false);
        public IHasBeenSetItem<UDouble?> UDoubleN_Property => _UDoubleN;
        public UDouble? UDoubleN
        {
            get => this._UDoubleN.Item;
            protected set => this._UDoubleN.Set(value);
        }
        UDouble? ITestObject_HasBeenSet_ReadOnlyGetter.UDoubleN => this.UDoubleN;
        IHasBeenSetItemGetter<UDouble?> ITestObject_HasBeenSet_ReadOnlyGetter.UDoubleN_Property => this.UDoubleN_Property;
        #endregion
        #region UDoubleN_Ranged
        protected readonly IHasBeenSetItem<UDouble?> _UDoubleN_Ranged = HasBeenSetItem.Factory<UDouble?>(markAsSet: false);
        public IHasBeenSetItem<UDouble?> UDoubleN_Ranged_Property => _UDoubleN_Ranged;
        public UDouble? UDoubleN_Ranged
        {
            get => this._UDoubleN_Ranged.Item;
            protected set => this._UDoubleN_Ranged.Set(value?.PutInRange(UDoubleN_Ranged_Range.Min, UDoubleN_Ranged_Range.Max));
        }
        UDouble? ITestObject_HasBeenSet_ReadOnlyGetter.UDoubleN_Ranged => this.UDoubleN_Ranged;
        IHasBeenSetItemGetter<UDouble?> ITestObject_HasBeenSet_ReadOnlyGetter.UDoubleN_Ranged_Property => this.UDoubleN_Ranged_Property;
        public static RangeUDouble UDoubleN_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UDouble
        protected readonly IHasBeenSetItem<UDouble> _UDouble = HasBeenSetItem.Factory<UDouble>(markAsSet: false);
        public IHasBeenSetItem<UDouble> UDouble_Property => _UDouble;
        public UDouble UDouble
        {
            get => this._UDouble.Item;
            protected set => this._UDouble.Set(value);
        }
        UDouble ITestObject_HasBeenSet_ReadOnlyGetter.UDouble => this.UDouble;
        IHasBeenSetItemGetter<UDouble> ITestObject_HasBeenSet_ReadOnlyGetter.UDouble_Property => this.UDouble_Property;
        #endregion
        #region UDouble_Ranged
        protected readonly IHasBeenSetItem<UDouble> _UDouble_Ranged = HasBeenSetItem.Factory<UDouble>(markAsSet: false);
        public IHasBeenSetItem<UDouble> UDouble_Ranged_Property => _UDouble_Ranged;
        public UDouble UDouble_Ranged
        {
            get => this._UDouble_Ranged.Item;
            protected set => this._UDouble_Ranged.Set(value.PutInRange(UDouble_Ranged_Range.Min, UDouble_Ranged_Range.Max));
        }
        UDouble ITestObject_HasBeenSet_ReadOnlyGetter.UDouble_Ranged => this.UDouble_Ranged;
        IHasBeenSetItemGetter<UDouble> ITestObject_HasBeenSet_ReadOnlyGetter.UDouble_Ranged_Property => this.UDouble_Ranged_Property;
        public static RangeUDouble UDouble_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UInt16N
        protected readonly IHasBeenSetItem<UInt16?> _UInt16N = HasBeenSetItem.Factory<UInt16?>(markAsSet: false);
        public IHasBeenSetItem<UInt16?> UInt16N_Property => _UInt16N;
        public UInt16? UInt16N
        {
            get => this._UInt16N.Item;
            protected set => this._UInt16N.Set(value);
        }
        UInt16? ITestObject_HasBeenSet_ReadOnlyGetter.UInt16N => this.UInt16N;
        IHasBeenSetItemGetter<UInt16?> ITestObject_HasBeenSet_ReadOnlyGetter.UInt16N_Property => this.UInt16N_Property;
        #endregion
        #region UInt16N_Ranged
        protected readonly IHasBeenSetItem<UInt16?> _UInt16N_Ranged = HasBeenSetItem.Factory<UInt16?>(markAsSet: false);
        public IHasBeenSetItem<UInt16?> UInt16N_Ranged_Property => _UInt16N_Ranged;
        public UInt16? UInt16N_Ranged
        {
            get => this._UInt16N_Ranged.Item;
            protected set => this._UInt16N_Ranged.Set(value?.PutInRange(UInt16N_Ranged_Range.Min, UInt16N_Ranged_Range.Max));
        }
        UInt16? ITestObject_HasBeenSet_ReadOnlyGetter.UInt16N_Ranged => this.UInt16N_Ranged;
        IHasBeenSetItemGetter<UInt16?> ITestObject_HasBeenSet_ReadOnlyGetter.UInt16N_Ranged_Property => this.UInt16N_Ranged_Property;
        public static RangeUInt16 UInt16N_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt16
        protected readonly IHasBeenSetItem<UInt16> _UInt16 = HasBeenSetItem.Factory<UInt16>(markAsSet: false);
        public IHasBeenSetItem<UInt16> UInt16_Property => _UInt16;
        public UInt16 UInt16
        {
            get => this._UInt16.Item;
            protected set => this._UInt16.Set(value);
        }
        UInt16 ITestObject_HasBeenSet_ReadOnlyGetter.UInt16 => this.UInt16;
        IHasBeenSetItemGetter<UInt16> ITestObject_HasBeenSet_ReadOnlyGetter.UInt16_Property => this.UInt16_Property;
        #endregion
        #region UInt16_Ranged
        protected readonly IHasBeenSetItem<UInt16> _UInt16_Ranged = HasBeenSetItem.Factory<UInt16>(markAsSet: false);
        public IHasBeenSetItem<UInt16> UInt16_Ranged_Property => _UInt16_Ranged;
        public UInt16 UInt16_Ranged
        {
            get => this._UInt16_Ranged.Item;
            protected set => this._UInt16_Ranged.Set(value.PutInRange(UInt16_Ranged_Range.Min, UInt16_Ranged_Range.Max));
        }
        UInt16 ITestObject_HasBeenSet_ReadOnlyGetter.UInt16_Ranged => this.UInt16_Ranged;
        IHasBeenSetItemGetter<UInt16> ITestObject_HasBeenSet_ReadOnlyGetter.UInt16_Ranged_Property => this.UInt16_Ranged_Property;
        public static RangeUInt16 UInt16_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt32N
        protected readonly IHasBeenSetItem<UInt32?> _UInt32N = HasBeenSetItem.Factory<UInt32?>(markAsSet: false);
        public IHasBeenSetItem<UInt32?> UInt32N_Property => _UInt32N;
        public UInt32? UInt32N
        {
            get => this._UInt32N.Item;
            protected set => this._UInt32N.Set(value);
        }
        UInt32? ITestObject_HasBeenSet_ReadOnlyGetter.UInt32N => this.UInt32N;
        IHasBeenSetItemGetter<UInt32?> ITestObject_HasBeenSet_ReadOnlyGetter.UInt32N_Property => this.UInt32N_Property;
        #endregion
        #region UInt32N_Ranged
        protected readonly IHasBeenSetItem<UInt32?> _UInt32N_Ranged = HasBeenSetItem.Factory<UInt32?>(markAsSet: false);
        public IHasBeenSetItem<UInt32?> UInt32N_Ranged_Property => _UInt32N_Ranged;
        public UInt32? UInt32N_Ranged
        {
            get => this._UInt32N_Ranged.Item;
            protected set => this._UInt32N_Ranged.Set(value?.PutInRange(UInt32N_Ranged_Range.Min, UInt32N_Ranged_Range.Max));
        }
        UInt32? ITestObject_HasBeenSet_ReadOnlyGetter.UInt32N_Ranged => this.UInt32N_Ranged;
        IHasBeenSetItemGetter<UInt32?> ITestObject_HasBeenSet_ReadOnlyGetter.UInt32N_Ranged_Property => this.UInt32N_Ranged_Property;
        public static RangeUInt32 UInt32N_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt32
        protected readonly IHasBeenSetItem<UInt32> _UInt32 = HasBeenSetItem.Factory<UInt32>(markAsSet: false);
        public IHasBeenSetItem<UInt32> UInt32_Property => _UInt32;
        public UInt32 UInt32
        {
            get => this._UInt32.Item;
            protected set => this._UInt32.Set(value);
        }
        UInt32 ITestObject_HasBeenSet_ReadOnlyGetter.UInt32 => this.UInt32;
        IHasBeenSetItemGetter<UInt32> ITestObject_HasBeenSet_ReadOnlyGetter.UInt32_Property => this.UInt32_Property;
        #endregion
        #region UInt32_Ranged
        protected readonly IHasBeenSetItem<UInt32> _UInt32_Ranged = HasBeenSetItem.Factory<UInt32>(markAsSet: false);
        public IHasBeenSetItem<UInt32> UInt32_Ranged_Property => _UInt32_Ranged;
        public UInt32 UInt32_Ranged
        {
            get => this._UInt32_Ranged.Item;
            protected set => this._UInt32_Ranged.Set(value.PutInRange(UInt32_Ranged_Range.Min, UInt32_Ranged_Range.Max));
        }
        UInt32 ITestObject_HasBeenSet_ReadOnlyGetter.UInt32_Ranged => this.UInt32_Ranged;
        IHasBeenSetItemGetter<UInt32> ITestObject_HasBeenSet_ReadOnlyGetter.UInt32_Ranged_Property => this.UInt32_Ranged_Property;
        public static RangeUInt32 UInt32_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt64N
        protected readonly IHasBeenSetItem<UInt64?> _UInt64N = HasBeenSetItem.Factory<UInt64?>(markAsSet: false);
        public IHasBeenSetItem<UInt64?> UInt64N_Property => _UInt64N;
        public UInt64? UInt64N
        {
            get => this._UInt64N.Item;
            protected set => this._UInt64N.Set(value);
        }
        UInt64? ITestObject_HasBeenSet_ReadOnlyGetter.UInt64N => this.UInt64N;
        IHasBeenSetItemGetter<UInt64?> ITestObject_HasBeenSet_ReadOnlyGetter.UInt64N_Property => this.UInt64N_Property;
        #endregion
        #region UInt64N_Ranged
        protected readonly IHasBeenSetItem<UInt64?> _UInt64N_Ranged = HasBeenSetItem.Factory<UInt64?>(markAsSet: false);
        public IHasBeenSetItem<UInt64?> UInt64N_Ranged_Property => _UInt64N_Ranged;
        public UInt64? UInt64N_Ranged
        {
            get => this._UInt64N_Ranged.Item;
            protected set => this._UInt64N_Ranged.Set(value?.PutInRange(UInt64N_Ranged_Range.Min, UInt64N_Ranged_Range.Max));
        }
        UInt64? ITestObject_HasBeenSet_ReadOnlyGetter.UInt64N_Ranged => this.UInt64N_Ranged;
        IHasBeenSetItemGetter<UInt64?> ITestObject_HasBeenSet_ReadOnlyGetter.UInt64N_Ranged_Property => this.UInt64N_Ranged_Property;
        public static RangeUInt64 UInt64N_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt64
        protected readonly IHasBeenSetItem<UInt64> _UInt64 = HasBeenSetItem.Factory<UInt64>(markAsSet: false);
        public IHasBeenSetItem<UInt64> UInt64_Property => _UInt64;
        public UInt64 UInt64
        {
            get => this._UInt64.Item;
            protected set => this._UInt64.Set(value);
        }
        UInt64 ITestObject_HasBeenSet_ReadOnlyGetter.UInt64 => this.UInt64;
        IHasBeenSetItemGetter<UInt64> ITestObject_HasBeenSet_ReadOnlyGetter.UInt64_Property => this.UInt64_Property;
        #endregion
        #region UInt64_Ranged
        protected readonly IHasBeenSetItem<UInt64> _UInt64_Ranged = HasBeenSetItem.Factory<UInt64>(markAsSet: false);
        public IHasBeenSetItem<UInt64> UInt64_Ranged_Property => _UInt64_Ranged;
        public UInt64 UInt64_Ranged
        {
            get => this._UInt64_Ranged.Item;
            protected set => this._UInt64_Ranged.Set(value.PutInRange(UInt64_Ranged_Range.Min, UInt64_Ranged_Range.Max));
        }
        UInt64 ITestObject_HasBeenSet_ReadOnlyGetter.UInt64_Ranged => this.UInt64_Ranged;
        IHasBeenSetItemGetter<UInt64> ITestObject_HasBeenSet_ReadOnlyGetter.UInt64_Ranged_Property => this.UInt64_Ranged_Property;
        public static RangeUInt64 UInt64_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt8N
        protected readonly IHasBeenSetItem<Byte?> _UInt8N = HasBeenSetItem.Factory<Byte?>(markAsSet: false);
        public IHasBeenSetItem<Byte?> UInt8N_Property => _UInt8N;
        public Byte? UInt8N
        {
            get => this._UInt8N.Item;
            protected set => this._UInt8N.Set(value);
        }
        Byte? ITestObject_HasBeenSet_ReadOnlyGetter.UInt8N => this.UInt8N;
        IHasBeenSetItemGetter<Byte?> ITestObject_HasBeenSet_ReadOnlyGetter.UInt8N_Property => this.UInt8N_Property;
        #endregion
        #region UInt8N_Ranged
        protected readonly IHasBeenSetItem<Byte?> _UInt8N_Ranged = HasBeenSetItem.Factory<Byte?>(markAsSet: false);
        public IHasBeenSetItem<Byte?> UInt8N_Ranged_Property => _UInt8N_Ranged;
        public Byte? UInt8N_Ranged
        {
            get => this._UInt8N_Ranged.Item;
            protected set => this._UInt8N_Ranged.Set(value?.PutInRange(UInt8N_Ranged_Range.Min, UInt8N_Ranged_Range.Max));
        }
        Byte? ITestObject_HasBeenSet_ReadOnlyGetter.UInt8N_Ranged => this.UInt8N_Ranged;
        IHasBeenSetItemGetter<Byte?> ITestObject_HasBeenSet_ReadOnlyGetter.UInt8N_Ranged_Property => this.UInt8N_Ranged_Property;
        public static RangeUInt8 UInt8N_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region UInt8
        protected readonly IHasBeenSetItem<Byte> _UInt8 = HasBeenSetItem.Factory<Byte>(markAsSet: false);
        public IHasBeenSetItem<Byte> UInt8_Property => _UInt8;
        public Byte UInt8
        {
            get => this._UInt8.Item;
            protected set => this._UInt8.Set(value);
        }
        Byte ITestObject_HasBeenSet_ReadOnlyGetter.UInt8 => this.UInt8;
        IHasBeenSetItemGetter<Byte> ITestObject_HasBeenSet_ReadOnlyGetter.UInt8_Property => this.UInt8_Property;
        #endregion
        #region UInt8_Ranged
        protected readonly IHasBeenSetItem<Byte> _UInt8_Ranged = HasBeenSetItem.Factory<Byte>(markAsSet: false);
        public IHasBeenSetItem<Byte> UInt8_Ranged_Property => _UInt8_Ranged;
        public Byte UInt8_Ranged
        {
            get => this._UInt8_Ranged.Item;
            protected set => this._UInt8_Ranged.Set(value.PutInRange(UInt8_Ranged_Range.Min, UInt8_Ranged_Range.Max));
        }
        Byte ITestObject_HasBeenSet_ReadOnlyGetter.UInt8_Ranged => this.UInt8_Ranged;
        IHasBeenSetItemGetter<Byte> ITestObject_HasBeenSet_ReadOnlyGetter.UInt8_Ranged_Property => this.UInt8_Ranged_Property;
        public static RangeUInt8 UInt8_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region Enum
        protected readonly IHasBeenSetItem<TestEnum> _Enum = HasBeenSetItem.Factory<TestEnum>(markAsSet: false);
        public IHasBeenSetItem<TestEnum> Enum_Property => _Enum;
        public TestEnum Enum
        {
            get => this._Enum.Item;
            protected set => this._Enum.Set(value);
        }
        TestEnum ITestObject_HasBeenSet_ReadOnlyGetter.Enum => this.Enum;
        IHasBeenSetItemGetter<TestEnum> ITestObject_HasBeenSet_ReadOnlyGetter.Enum_Property => this.Enum_Property;
        #endregion
        #region EnumNull
        protected readonly IHasBeenSetItem<TestEnum?> _EnumNull = HasBeenSetItem.Factory<TestEnum?>(markAsSet: false);
        public IHasBeenSetItem<TestEnum?> EnumNull_Property => _EnumNull;
        public TestEnum? EnumNull
        {
            get => this._EnumNull.Item;
            protected set => this._EnumNull.Set(value);
        }
        TestEnum? ITestObject_HasBeenSet_ReadOnlyGetter.EnumNull => this.EnumNull;
        IHasBeenSetItemGetter<TestEnum?> ITestObject_HasBeenSet_ReadOnlyGetter.EnumNull_Property => this.EnumNull_Property;
        #endregion
        #region WildCard
        protected readonly IHasBeenSetItem<Object> _WildCard = HasBeenSetItem.Factory<Object>(markAsSet: false);
        public IHasBeenSetItemGetter<Object> WildCard_Property => _WildCard;
        public Object WildCard => this._WildCard;
        IHasBeenSetItemGetter<Object> ITestObject_HasBeenSet_ReadOnlyGetter.WildCard_Property => this.WildCard_Property;
        #endregion
        #region WildCardLoqui
        protected readonly IHasBeenSetItem<Object> _WildCardLoqui = HasBeenSetItem.Factory<Object>(markAsSet: false);
        public IHasBeenSetItemGetter<Object> WildCardLoqui_Property => _WildCardLoqui;
        public Object WildCardLoqui => this._WildCardLoqui;
        IHasBeenSetItemGetter<Object> ITestObject_HasBeenSet_ReadOnlyGetter.WildCardLoqui_Property => this.WildCardLoqui_Property;
        #endregion
        #region WildCardNull
        protected readonly IHasBeenSetItem<Object> _WildCardNull = HasBeenSetItem.Factory<Object>(markAsSet: false);
        public IHasBeenSetItemGetter<Object> WildCardNull_Property => _WildCardNull;
        public Object WildCardNull => this._WildCardNull;
        IHasBeenSetItemGetter<Object> ITestObject_HasBeenSet_ReadOnlyGetter.WildCardNull_Property => this.WildCardNull_Property;
        #endregion
        #region Ref
        protected readonly IHasBeenSetItem<ObjectToRef> _Ref = HasBeenSetItem.Factory<ObjectToRef>(markAsSet: false);
        public ObjectToRef Ref
        {
            get => this._Ref.Item;
            protected set => this._Ref.Item = value;
        }
        public IHasBeenSetItemGetter<ObjectToRef> Ref_Property => this._Ref;
        ObjectToRef ITestObject_HasBeenSet_ReadOnlyGetter.Ref => this._Ref.Item;
        IHasBeenSetItemGetter<ObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.Ref_Property => this._Ref;
        #endregion
        #region Ref_NotNull
        protected readonly IHasBeenSetItem<ObjectToRef> _Ref_NotNull = HasBeenSetItem.FactoryNoNull<ObjectToRef>(markAsSet: false);
        public ObjectToRef Ref_NotNull
        {
            get => this._Ref_NotNull.Item;
            protected set => this._Ref_NotNull.Item = value;
        }
        public IHasBeenSetItemGetter<ObjectToRef> Ref_NotNull_Property => this._Ref_NotNull;
        ObjectToRef ITestObject_HasBeenSet_ReadOnlyGetter.Ref_NotNull => this._Ref_NotNull.Item;
        IHasBeenSetItemGetter<ObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.Ref_NotNull_Property => this._Ref_NotNull;
        #endregion
        #region Ref_Singleton
        private ObjectToRef _Ref_Singleton_Object = new ObjectToRef();
        protected readonly IHasBeenSetItem<ObjectToRef> _Ref_Singleton;
        public ObjectToRef Ref_Singleton
        {
            get => this._Ref_Singleton_Object;
        }
        public IHasBeenSetItemGetter<ObjectToRef> Ref_Singleton_Property => this._Ref_Singleton;
        ObjectToRef ITestObject_HasBeenSet_ReadOnlyGetter.Ref_Singleton => this._Ref_Singleton_Object;
        IHasBeenSetItemGetter<ObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.Ref_Singleton_Property => this._Ref_Singleton;
        #endregion
        #region RefGetter
        protected readonly IHasBeenSetItem<IObjectToRefGetter> _RefGetter = HasBeenSetItem.Factory<IObjectToRefGetter>(markAsSet: false);
        public IObjectToRefGetter RefGetter
        {
            get => this._RefGetter.Item;
            protected set => this._RefGetter.Item = value;
        }
        public IHasBeenSetItemGetter<IObjectToRefGetter> RefGetter_Property => this._RefGetter;
        IObjectToRefGetter ITestObject_HasBeenSet_ReadOnlyGetter.RefGetter => this._RefGetter.Item;
        IHasBeenSetItemGetter<IObjectToRefGetter> ITestObject_HasBeenSet_ReadOnlyGetter.RefGetter_Property => this._RefGetter;
        #endregion
        #region RefGetter_NotNull
        protected readonly IHasBeenSetItem<IObjectToRefGetter> _RefGetter_NotNull = HasBeenSetItem.Factory<IObjectToRefGetter>(
            noNullFallback: () => new ObjectToRef(),
            markAsSet: false);
        public IObjectToRefGetter RefGetter_NotNull
        {
            get => this._RefGetter_NotNull.Item;
            protected set => this._RefGetter_NotNull.Item = value;
        }
        public IHasBeenSetItemGetter<IObjectToRefGetter> RefGetter_NotNull_Property => this._RefGetter_NotNull;
        IObjectToRefGetter ITestObject_HasBeenSet_ReadOnlyGetter.RefGetter_NotNull => this._RefGetter_NotNull.Item;
        IHasBeenSetItemGetter<IObjectToRefGetter> ITestObject_HasBeenSet_ReadOnlyGetter.RefGetter_NotNull_Property => this._RefGetter_NotNull;
        #endregion
        #region RefGetter_Singleton
        private ObjectToRef _RefGetter_Singleton_Object = new ObjectToRef();
        protected readonly IHasBeenSetItem<IObjectToRefGetter> _RefGetter_Singleton;
        public IObjectToRefGetter RefGetter_Singleton
        {
            get => this._RefGetter_Singleton_Object;
        }
        public IHasBeenSetItemGetter<IObjectToRefGetter> RefGetter_Singleton_Property => this._RefGetter_Singleton;
        IObjectToRefGetter ITestObject_HasBeenSet_ReadOnlyGetter.RefGetter_Singleton => this._RefGetter_Singleton_Object;
        IHasBeenSetItemGetter<IObjectToRefGetter> ITestObject_HasBeenSet_ReadOnlyGetter.RefGetter_Singleton_Property => this._RefGetter_Singleton;
        #endregion
        #region RefSetter
        protected readonly IHasBeenSetItem<IObjectToRef> _RefSetter = HasBeenSetItem.Factory<IObjectToRef>(markAsSet: false);
        public IObjectToRef RefSetter
        {
            get => this._RefSetter.Item;
            protected set => this._RefSetter.Item = value;
        }
        public IHasBeenSetItemGetter<IObjectToRef> RefSetter_Property => this._RefSetter;
        IObjectToRef ITestObject_HasBeenSet_ReadOnlyGetter.RefSetter => this._RefSetter.Item;
        IHasBeenSetItemGetter<IObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.RefSetter_Property => this._RefSetter;
        #endregion
        #region RefSetter_NotNull
        protected readonly IHasBeenSetItem<IObjectToRef> _RefSetter_NotNull = HasBeenSetItem.Factory<IObjectToRef>(
            noNullFallback: () => new ObjectToRef(),
            markAsSet: false);
        public IObjectToRef RefSetter_NotNull
        {
            get => this._RefSetter_NotNull.Item;
            protected set => this._RefSetter_NotNull.Item = value;
        }
        public IHasBeenSetItemGetter<IObjectToRef> RefSetter_NotNull_Property => this._RefSetter_NotNull;
        IObjectToRef ITestObject_HasBeenSet_ReadOnlyGetter.RefSetter_NotNull => this._RefSetter_NotNull.Item;
        IHasBeenSetItemGetter<IObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.RefSetter_NotNull_Property => this._RefSetter_NotNull;
        #endregion
        #region RefSetter_Singleton
        private ObjectToRef _RefSetter_Singleton_Object = new ObjectToRef();
        protected readonly IHasBeenSetItem<IObjectToRef> _RefSetter_Singleton;
        public IObjectToRef RefSetter_Singleton
        {
            get => this._RefSetter_Singleton_Object;
        }
        public IHasBeenSetItemGetter<IObjectToRef> RefSetter_Singleton_Property => this._RefSetter_Singleton;
        IObjectToRef ITestObject_HasBeenSet_ReadOnlyGetter.RefSetter_Singleton => this._RefSetter_Singleton_Object;
        IHasBeenSetItemGetter<IObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.RefSetter_Singleton_Property => this._RefSetter_Singleton;
        #endregion
        #region List
        private readonly INotifyingList<Boolean> _List = new NotifyingList<Boolean>();
        public INotifyingListGetter<Boolean> List => _List;
        #region Interface Members
        INotifyingListGetter<Boolean> ITestObject_HasBeenSet_ReadOnlyGetter.List => _List;
        #endregion

        #endregion
        #region RefList
        private readonly INotifyingList<ObjectToRef> _RefList = new NotifyingList<ObjectToRef>();
        public INotifyingListGetter<ObjectToRef> RefList => _RefList;
        #region Interface Members
        INotifyingListGetter<ObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.RefList => _RefList;
        #endregion

        #endregion
        #region Dict
        private readonly INotifyingDictionary<String, Boolean> _Dict = new NotifyingDictionary<String, Boolean>();
        public INotifyingDictionary<String, Boolean> Dict { get { return _Dict; } }
        #region Interface Members
        INotifyingDictionaryGetter<String, Boolean> ITestObject_HasBeenSet_ReadOnlyGetter.Dict => _Dict;
        #endregion

        #endregion
        #region RefDict
        private readonly INotifyingDictionary<ObjectToRef, ObjectToRef> _RefDict = new NotifyingDictionary<ObjectToRef, ObjectToRef>();
        public INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get { return _RefDict; } }
        #region Interface Members
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.RefDict => _RefDict;
        #endregion

        #endregion
        #region KeyRefDict
        private readonly INotifyingDictionary<ObjectToRef, Boolean> _KeyRefDict = new NotifyingDictionary<ObjectToRef, Boolean>();
        public INotifyingDictionary<ObjectToRef, Boolean> KeyRefDict { get { return _KeyRefDict; } }
        #region Interface Members
        INotifyingDictionaryGetter<ObjectToRef, Boolean> ITestObject_HasBeenSet_ReadOnlyGetter.KeyRefDict => _KeyRefDict;
        #endregion

        #endregion
        #region ValRefDict
        private readonly INotifyingDictionary<String, ObjectToRef> _ValRefDict = new NotifyingDictionary<String, ObjectToRef>();
        public INotifyingDictionary<String, ObjectToRef> ValRefDict { get { return _ValRefDict; } }
        #region Interface Members
        INotifyingDictionaryGetter<String, ObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.ValRefDict => _ValRefDict;
        #endregion

        #endregion
        #region DictKeyedValue
        private readonly INotifyingKeyedCollection<Int32, ObjectToRef> _DictKeyedValue = new NotifyingKeyedCollection<Int32, ObjectToRef>((item) => item.KeyField);
        public INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue => _DictKeyedValue;
        #region Interface Members
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> ITestObject_HasBeenSet_ReadOnlyGetter.DictKeyedValue => _DictKeyedValue;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TestObject_HasBeenSet_ReadOnlyCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestObject_HasBeenSet_ReadOnlyCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestObject_HasBeenSet_ReadOnlyCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestObject_HasBeenSet_ReadOnlyCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return TestObject_HasBeenSet_ReadOnlyCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestObject_HasBeenSet_ReadOnly_Mask<bool> printMask = null)
        {
            return TestObject_HasBeenSet_ReadOnlyCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestObject_HasBeenSet_ReadOnlyCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public TestObject_HasBeenSet_ReadOnly_Mask<bool> GetHasBeenSetMask()
        {
            return TestObject_HasBeenSet_ReadOnlyCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_HasBeenSet_ReadOnly rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_HasBeenSet_ReadOnly rhs)
        {
            if (rhs == null) return false;
            if (ByteArray_Property.HasBeenSet != rhs.ByteArray_Property.HasBeenSet) return false;
            if (ByteArray_Property.HasBeenSet)
            {
                if (!ByteArray.EqualsFast(rhs.ByteArray)) return false;
            }
            if (ByteArrayNull_Property.HasBeenSet != rhs.ByteArrayNull_Property.HasBeenSet) return false;
            if (ByteArrayNull_Property.HasBeenSet)
            {
                if (!ByteArrayNull.EqualsFast(rhs.ByteArrayNull)) return false;
            }
            if (ByteArrayNotNull_Property.HasBeenSet != rhs.ByteArrayNotNull_Property.HasBeenSet) return false;
            if (ByteArrayNotNull_Property.HasBeenSet)
            {
                if (!ByteArrayNotNull.EqualsFast(rhs.ByteArrayNotNull)) return false;
            }
            if (ByteArraySingleton_Property.HasBeenSet != rhs.ByteArraySingleton_Property.HasBeenSet) return false;
            if (ByteArraySingleton_Property.HasBeenSet)
            {
                if (!ByteArraySingleton.EqualsFast(rhs.ByteArraySingleton)) return false;
            }
            if (BoolN_Property.HasBeenSet != rhs.BoolN_Property.HasBeenSet) return false;
            if (BoolN_Property.HasBeenSet)
            {
                if (BoolN != rhs.BoolN) return false;
            }
            if (Bool_Property.HasBeenSet != rhs.Bool_Property.HasBeenSet) return false;
            if (Bool_Property.HasBeenSet)
            {
                if (Bool != rhs.Bool) return false;
            }
            if (CharN_Property.HasBeenSet != rhs.CharN_Property.HasBeenSet) return false;
            if (CharN_Property.HasBeenSet)
            {
                if (CharN != rhs.CharN) return false;
            }
            if (Char_Property.HasBeenSet != rhs.Char_Property.HasBeenSet) return false;
            if (Char_Property.HasBeenSet)
            {
                if (Char != rhs.Char) return false;
            }
            if (DateTimeNull_Property.HasBeenSet != rhs.DateTimeNull_Property.HasBeenSet) return false;
            if (DateTimeNull_Property.HasBeenSet)
            {
                if (DateTimeNull != rhs.DateTimeNull) return false;
            }
            if (DateTime_Property.HasBeenSet != rhs.DateTime_Property.HasBeenSet) return false;
            if (DateTime_Property.HasBeenSet)
            {
                if (DateTime != rhs.DateTime) return false;
            }
            if (DoubleN_Property.HasBeenSet != rhs.DoubleN_Property.HasBeenSet) return false;
            if (DoubleN_Property.HasBeenSet)
            {
                if (DoubleN != rhs.DoubleN) return false;
            }
            if (DoubleN_Ranged_Property.HasBeenSet != rhs.DoubleN_Ranged_Property.HasBeenSet) return false;
            if (DoubleN_Ranged_Property.HasBeenSet)
            {
                if (DoubleN_Ranged != rhs.DoubleN_Ranged) return false;
            }
            if (Double_Property.HasBeenSet != rhs.Double_Property.HasBeenSet) return false;
            if (Double_Property.HasBeenSet)
            {
                if (Double != rhs.Double) return false;
            }
            if (Double_Ranged_Property.HasBeenSet != rhs.Double_Ranged_Property.HasBeenSet) return false;
            if (Double_Ranged_Property.HasBeenSet)
            {
                if (Double_Ranged != rhs.Double_Ranged) return false;
            }
            if (FloatN_Property.HasBeenSet != rhs.FloatN_Property.HasBeenSet) return false;
            if (FloatN_Property.HasBeenSet)
            {
                if (FloatN != rhs.FloatN) return false;
            }
            if (FloatN_Ranged_Property.HasBeenSet != rhs.FloatN_Ranged_Property.HasBeenSet) return false;
            if (FloatN_Ranged_Property.HasBeenSet)
            {
                if (FloatN_Ranged != rhs.FloatN_Ranged) return false;
            }
            if (Float_Property.HasBeenSet != rhs.Float_Property.HasBeenSet) return false;
            if (Float_Property.HasBeenSet)
            {
                if (Float != rhs.Float) return false;
            }
            if (Float_Ranged_Property.HasBeenSet != rhs.Float_Ranged_Property.HasBeenSet) return false;
            if (Float_Ranged_Property.HasBeenSet)
            {
                if (Float_Ranged != rhs.Float_Ranged) return false;
            }
            if (Int16N_Property.HasBeenSet != rhs.Int16N_Property.HasBeenSet) return false;
            if (Int16N_Property.HasBeenSet)
            {
                if (Int16N != rhs.Int16N) return false;
            }
            if (Int16N_Ranged_Property.HasBeenSet != rhs.Int16N_Ranged_Property.HasBeenSet) return false;
            if (Int16N_Ranged_Property.HasBeenSet)
            {
                if (Int16N_Ranged != rhs.Int16N_Ranged) return false;
            }
            if (Int16_Property.HasBeenSet != rhs.Int16_Property.HasBeenSet) return false;
            if (Int16_Property.HasBeenSet)
            {
                if (Int16 != rhs.Int16) return false;
            }
            if (Int16_Ranged_Property.HasBeenSet != rhs.Int16_Ranged_Property.HasBeenSet) return false;
            if (Int16_Ranged_Property.HasBeenSet)
            {
                if (Int16_Ranged != rhs.Int16_Ranged) return false;
            }
            if (Int32N_Property.HasBeenSet != rhs.Int32N_Property.HasBeenSet) return false;
            if (Int32N_Property.HasBeenSet)
            {
                if (Int32N != rhs.Int32N) return false;
            }
            if (Int32N_Ranged_Property.HasBeenSet != rhs.Int32N_Ranged_Property.HasBeenSet) return false;
            if (Int32N_Ranged_Property.HasBeenSet)
            {
                if (Int32N_Ranged != rhs.Int32N_Ranged) return false;
            }
            if (Int32_Property.HasBeenSet != rhs.Int32_Property.HasBeenSet) return false;
            if (Int32_Property.HasBeenSet)
            {
                if (Int32 != rhs.Int32) return false;
            }
            if (Int32_Ranged_Property.HasBeenSet != rhs.Int32_Ranged_Property.HasBeenSet) return false;
            if (Int32_Ranged_Property.HasBeenSet)
            {
                if (Int32_Ranged != rhs.Int32_Ranged) return false;
            }
            if (Int64N_Property.HasBeenSet != rhs.Int64N_Property.HasBeenSet) return false;
            if (Int64N_Property.HasBeenSet)
            {
                if (Int64N != rhs.Int64N) return false;
            }
            if (Int64N_Ranged_Property.HasBeenSet != rhs.Int64N_Ranged_Property.HasBeenSet) return false;
            if (Int64N_Ranged_Property.HasBeenSet)
            {
                if (Int64N_Ranged != rhs.Int64N_Ranged) return false;
            }
            if (Int64_Property.HasBeenSet != rhs.Int64_Property.HasBeenSet) return false;
            if (Int64_Property.HasBeenSet)
            {
                if (Int64 != rhs.Int64) return false;
            }
            if (Int64_Ranged_Property.HasBeenSet != rhs.Int64_Ranged_Property.HasBeenSet) return false;
            if (Int64_Ranged_Property.HasBeenSet)
            {
                if (Int64_Ranged != rhs.Int64_Ranged) return false;
            }
            if (Int8N_Property.HasBeenSet != rhs.Int8N_Property.HasBeenSet) return false;
            if (Int8N_Property.HasBeenSet)
            {
                if (Int8N != rhs.Int8N) return false;
            }
            if (Int8N_Ranged_Property.HasBeenSet != rhs.Int8N_Ranged_Property.HasBeenSet) return false;
            if (Int8N_Ranged_Property.HasBeenSet)
            {
                if (Int8N_Ranged != rhs.Int8N_Ranged) return false;
            }
            if (Int8_Property.HasBeenSet != rhs.Int8_Property.HasBeenSet) return false;
            if (Int8_Property.HasBeenSet)
            {
                if (Int8 != rhs.Int8) return false;
            }
            if (Int8_Ranged_Property.HasBeenSet != rhs.Int8_Ranged_Property.HasBeenSet) return false;
            if (Int8_Ranged_Property.HasBeenSet)
            {
                if (Int8_Ranged != rhs.Int8_Ranged) return false;
            }
            if (Unsafe_Property.HasBeenSet != rhs.Unsafe_Property.HasBeenSet) return false;
            if (Unsafe_Property.HasBeenSet)
            {
                if (!object.Equals(Unsafe, rhs.Unsafe)) return false;
            }
            if (UnsafeLoqui_Property.HasBeenSet != rhs.UnsafeLoqui_Property.HasBeenSet) return false;
            if (UnsafeLoqui_Property.HasBeenSet)
            {
                if (!object.Equals(UnsafeLoqui, rhs.UnsafeLoqui)) return false;
            }
            if (UnsafeNull_Property.HasBeenSet != rhs.UnsafeNull_Property.HasBeenSet) return false;
            if (UnsafeNull_Property.HasBeenSet)
            {
                if (!object.Equals(UnsafeNull, rhs.UnsafeNull)) return false;
            }
            if (P2IntN_Property.HasBeenSet != rhs.P2IntN_Property.HasBeenSet) return false;
            if (P2IntN_Property.HasBeenSet)
            {
                if (P2IntN != rhs.P2IntN) return false;
            }
            if (P2Int_Property.HasBeenSet != rhs.P2Int_Property.HasBeenSet) return false;
            if (P2Int_Property.HasBeenSet)
            {
                if (P2Int != rhs.P2Int) return false;
            }
            if (P3DoubleN_Property.HasBeenSet != rhs.P3DoubleN_Property.HasBeenSet) return false;
            if (P3DoubleN_Property.HasBeenSet)
            {
                if (P3DoubleN != rhs.P3DoubleN) return false;
            }
            if (P3Double_Property.HasBeenSet != rhs.P3Double_Property.HasBeenSet) return false;
            if (P3Double_Property.HasBeenSet)
            {
                if (P3Double != rhs.P3Double) return false;
            }
            if (P3IntN_Property.HasBeenSet != rhs.P3IntN_Property.HasBeenSet) return false;
            if (P3IntN_Property.HasBeenSet)
            {
                if (P3IntN != rhs.P3IntN) return false;
            }
            if (P3Int_Property.HasBeenSet != rhs.P3Int_Property.HasBeenSet) return false;
            if (P3Int_Property.HasBeenSet)
            {
                if (P3Int != rhs.P3Int) return false;
            }
            if (PercentN_Property.HasBeenSet != rhs.PercentN_Property.HasBeenSet) return false;
            if (PercentN_Property.HasBeenSet)
            {
                if (PercentN != rhs.PercentN) return false;
            }
            if (Percent_Property.HasBeenSet != rhs.Percent_Property.HasBeenSet) return false;
            if (Percent_Property.HasBeenSet)
            {
                if (Percent != rhs.Percent) return false;
            }
            if (RangeInt8N_Property.HasBeenSet != rhs.RangeInt8N_Property.HasBeenSet) return false;
            if (RangeInt8N_Property.HasBeenSet)
            {
                if (RangeInt8N != rhs.RangeInt8N) return false;
            }
            if (RangeInt8_Property.HasBeenSet != rhs.RangeInt8_Property.HasBeenSet) return false;
            if (RangeInt8_Property.HasBeenSet)
            {
                if (RangeInt8 != rhs.RangeInt8) return false;
            }
            if (RangeInt16N_Property.HasBeenSet != rhs.RangeInt16N_Property.HasBeenSet) return false;
            if (RangeInt16N_Property.HasBeenSet)
            {
                if (RangeInt16N != rhs.RangeInt16N) return false;
            }
            if (RangeInt16_Property.HasBeenSet != rhs.RangeInt16_Property.HasBeenSet) return false;
            if (RangeInt16_Property.HasBeenSet)
            {
                if (RangeInt16 != rhs.RangeInt16) return false;
            }
            if (RangeInt32N_Property.HasBeenSet != rhs.RangeInt32N_Property.HasBeenSet) return false;
            if (RangeInt32N_Property.HasBeenSet)
            {
                if (RangeInt32N != rhs.RangeInt32N) return false;
            }
            if (RangeInt32_Property.HasBeenSet != rhs.RangeInt32_Property.HasBeenSet) return false;
            if (RangeInt32_Property.HasBeenSet)
            {
                if (RangeInt32 != rhs.RangeInt32) return false;
            }
            if (RangeInt64N_Property.HasBeenSet != rhs.RangeInt64N_Property.HasBeenSet) return false;
            if (RangeInt64N_Property.HasBeenSet)
            {
                if (RangeInt64N != rhs.RangeInt64N) return false;
            }
            if (RangeInt64_Property.HasBeenSet != rhs.RangeInt64_Property.HasBeenSet) return false;
            if (RangeInt64_Property.HasBeenSet)
            {
                if (RangeInt64 != rhs.RangeInt64) return false;
            }
            if (RangeUInt8N_Property.HasBeenSet != rhs.RangeUInt8N_Property.HasBeenSet) return false;
            if (RangeUInt8N_Property.HasBeenSet)
            {
                if (RangeUInt8N != rhs.RangeUInt8N) return false;
            }
            if (RangeUInt8_Property.HasBeenSet != rhs.RangeUInt8_Property.HasBeenSet) return false;
            if (RangeUInt8_Property.HasBeenSet)
            {
                if (RangeUInt8 != rhs.RangeUInt8) return false;
            }
            if (RangeUInt16N_Property.HasBeenSet != rhs.RangeUInt16N_Property.HasBeenSet) return false;
            if (RangeUInt16N_Property.HasBeenSet)
            {
                if (RangeUInt16N != rhs.RangeUInt16N) return false;
            }
            if (RangeUInt16_Property.HasBeenSet != rhs.RangeUInt16_Property.HasBeenSet) return false;
            if (RangeUInt16_Property.HasBeenSet)
            {
                if (RangeUInt16 != rhs.RangeUInt16) return false;
            }
            if (RangeUInt32N_Property.HasBeenSet != rhs.RangeUInt32N_Property.HasBeenSet) return false;
            if (RangeUInt32N_Property.HasBeenSet)
            {
                if (RangeUInt32N != rhs.RangeUInt32N) return false;
            }
            if (RangeUInt32_Property.HasBeenSet != rhs.RangeUInt32_Property.HasBeenSet) return false;
            if (RangeUInt32_Property.HasBeenSet)
            {
                if (RangeUInt32 != rhs.RangeUInt32) return false;
            }
            if (RangeUInt64N_Property.HasBeenSet != rhs.RangeUInt64N_Property.HasBeenSet) return false;
            if (RangeUInt64N_Property.HasBeenSet)
            {
                if (RangeUInt64N != rhs.RangeUInt64N) return false;
            }
            if (RangeUInt64_Property.HasBeenSet != rhs.RangeUInt64_Property.HasBeenSet) return false;
            if (RangeUInt64_Property.HasBeenSet)
            {
                if (RangeUInt64 != rhs.RangeUInt64) return false;
            }
            if (String_Property.HasBeenSet != rhs.String_Property.HasBeenSet) return false;
            if (String_Property.HasBeenSet)
            {
                if (!object.Equals(String, rhs.String)) return false;
            }
            if (FilePath_Property.HasBeenSet != rhs.FilePath_Property.HasBeenSet) return false;
            if (FilePath_Property.HasBeenSet)
            {
                if (!object.Equals(FilePath, rhs.FilePath)) return false;
            }
            if (FilePathNull_Property.HasBeenSet != rhs.FilePathNull_Property.HasBeenSet) return false;
            if (FilePathNull_Property.HasBeenSet)
            {
                if (!object.Equals(FilePathNull, rhs.FilePathNull)) return false;
            }
            if (DirectoryPath_Property.HasBeenSet != rhs.DirectoryPath_Property.HasBeenSet) return false;
            if (DirectoryPath_Property.HasBeenSet)
            {
                if (!object.Equals(DirectoryPath, rhs.DirectoryPath)) return false;
            }
            if (DirectoryPathNull_Property.HasBeenSet != rhs.DirectoryPathNull_Property.HasBeenSet) return false;
            if (DirectoryPathNull_Property.HasBeenSet)
            {
                if (!object.Equals(DirectoryPathNull, rhs.DirectoryPathNull)) return false;
            }
            if (UDoubleN_Property.HasBeenSet != rhs.UDoubleN_Property.HasBeenSet) return false;
            if (UDoubleN_Property.HasBeenSet)
            {
                if (UDoubleN != rhs.UDoubleN) return false;
            }
            if (UDoubleN_Ranged_Property.HasBeenSet != rhs.UDoubleN_Ranged_Property.HasBeenSet) return false;
            if (UDoubleN_Ranged_Property.HasBeenSet)
            {
                if (UDoubleN_Ranged != rhs.UDoubleN_Ranged) return false;
            }
            if (UDouble_Property.HasBeenSet != rhs.UDouble_Property.HasBeenSet) return false;
            if (UDouble_Property.HasBeenSet)
            {
                if (UDouble != rhs.UDouble) return false;
            }
            if (UDouble_Ranged_Property.HasBeenSet != rhs.UDouble_Ranged_Property.HasBeenSet) return false;
            if (UDouble_Ranged_Property.HasBeenSet)
            {
                if (UDouble_Ranged != rhs.UDouble_Ranged) return false;
            }
            if (UInt16N_Property.HasBeenSet != rhs.UInt16N_Property.HasBeenSet) return false;
            if (UInt16N_Property.HasBeenSet)
            {
                if (UInt16N != rhs.UInt16N) return false;
            }
            if (UInt16N_Ranged_Property.HasBeenSet != rhs.UInt16N_Ranged_Property.HasBeenSet) return false;
            if (UInt16N_Ranged_Property.HasBeenSet)
            {
                if (UInt16N_Ranged != rhs.UInt16N_Ranged) return false;
            }
            if (UInt16_Property.HasBeenSet != rhs.UInt16_Property.HasBeenSet) return false;
            if (UInt16_Property.HasBeenSet)
            {
                if (UInt16 != rhs.UInt16) return false;
            }
            if (UInt16_Ranged_Property.HasBeenSet != rhs.UInt16_Ranged_Property.HasBeenSet) return false;
            if (UInt16_Ranged_Property.HasBeenSet)
            {
                if (UInt16_Ranged != rhs.UInt16_Ranged) return false;
            }
            if (UInt32N_Property.HasBeenSet != rhs.UInt32N_Property.HasBeenSet) return false;
            if (UInt32N_Property.HasBeenSet)
            {
                if (UInt32N != rhs.UInt32N) return false;
            }
            if (UInt32N_Ranged_Property.HasBeenSet != rhs.UInt32N_Ranged_Property.HasBeenSet) return false;
            if (UInt32N_Ranged_Property.HasBeenSet)
            {
                if (UInt32N_Ranged != rhs.UInt32N_Ranged) return false;
            }
            if (UInt32_Property.HasBeenSet != rhs.UInt32_Property.HasBeenSet) return false;
            if (UInt32_Property.HasBeenSet)
            {
                if (UInt32 != rhs.UInt32) return false;
            }
            if (UInt32_Ranged_Property.HasBeenSet != rhs.UInt32_Ranged_Property.HasBeenSet) return false;
            if (UInt32_Ranged_Property.HasBeenSet)
            {
                if (UInt32_Ranged != rhs.UInt32_Ranged) return false;
            }
            if (UInt64N_Property.HasBeenSet != rhs.UInt64N_Property.HasBeenSet) return false;
            if (UInt64N_Property.HasBeenSet)
            {
                if (UInt64N != rhs.UInt64N) return false;
            }
            if (UInt64N_Ranged_Property.HasBeenSet != rhs.UInt64N_Ranged_Property.HasBeenSet) return false;
            if (UInt64N_Ranged_Property.HasBeenSet)
            {
                if (UInt64N_Ranged != rhs.UInt64N_Ranged) return false;
            }
            if (UInt64_Property.HasBeenSet != rhs.UInt64_Property.HasBeenSet) return false;
            if (UInt64_Property.HasBeenSet)
            {
                if (UInt64 != rhs.UInt64) return false;
            }
            if (UInt64_Ranged_Property.HasBeenSet != rhs.UInt64_Ranged_Property.HasBeenSet) return false;
            if (UInt64_Ranged_Property.HasBeenSet)
            {
                if (UInt64_Ranged != rhs.UInt64_Ranged) return false;
            }
            if (UInt8N_Property.HasBeenSet != rhs.UInt8N_Property.HasBeenSet) return false;
            if (UInt8N_Property.HasBeenSet)
            {
                if (UInt8N != rhs.UInt8N) return false;
            }
            if (UInt8N_Ranged_Property.HasBeenSet != rhs.UInt8N_Ranged_Property.HasBeenSet) return false;
            if (UInt8N_Ranged_Property.HasBeenSet)
            {
                if (UInt8N_Ranged != rhs.UInt8N_Ranged) return false;
            }
            if (UInt8_Property.HasBeenSet != rhs.UInt8_Property.HasBeenSet) return false;
            if (UInt8_Property.HasBeenSet)
            {
                if (UInt8 != rhs.UInt8) return false;
            }
            if (UInt8_Ranged_Property.HasBeenSet != rhs.UInt8_Ranged_Property.HasBeenSet) return false;
            if (UInt8_Ranged_Property.HasBeenSet)
            {
                if (UInt8_Ranged != rhs.UInt8_Ranged) return false;
            }
            if (Enum_Property.HasBeenSet != rhs.Enum_Property.HasBeenSet) return false;
            if (Enum_Property.HasBeenSet)
            {
                if (Enum != rhs.Enum) return false;
            }
            if (EnumNull_Property.HasBeenSet != rhs.EnumNull_Property.HasBeenSet) return false;
            if (EnumNull_Property.HasBeenSet)
            {
                if (EnumNull != rhs.EnumNull) return false;
            }
            if (WildCard_Property.HasBeenSet != rhs.WildCard_Property.HasBeenSet) return false;
            if (WildCard_Property.HasBeenSet)
            {
                if (!object.Equals(WildCard, rhs.WildCard)) return false;
            }
            if (WildCardLoqui_Property.HasBeenSet != rhs.WildCardLoqui_Property.HasBeenSet) return false;
            if (WildCardLoqui_Property.HasBeenSet)
            {
                if (!object.Equals(WildCardLoqui, rhs.WildCardLoqui)) return false;
            }
            if (WildCardNull_Property.HasBeenSet != rhs.WildCardNull_Property.HasBeenSet) return false;
            if (WildCardNull_Property.HasBeenSet)
            {
                if (!object.Equals(WildCardNull, rhs.WildCardNull)) return false;
            }
            if (Ref_Property.HasBeenSet != rhs.Ref_Property.HasBeenSet) return false;
            if (Ref_Property.HasBeenSet)
            {
                if (!object.Equals(Ref, rhs.Ref)) return false;
            }
            if (Ref_NotNull_Property.HasBeenSet != rhs.Ref_NotNull_Property.HasBeenSet) return false;
            if (Ref_NotNull_Property.HasBeenSet)
            {
                if (!object.Equals(Ref_NotNull, rhs.Ref_NotNull)) return false;
            }
            if (Ref_Singleton_Property.HasBeenSet != rhs.Ref_Singleton_Property.HasBeenSet) return false;
            if (Ref_Singleton_Property.HasBeenSet)
            {
                if (!object.Equals(Ref_Singleton, rhs.Ref_Singleton)) return false;
            }
            if (RefGetter_Property.HasBeenSet != rhs.RefGetter_Property.HasBeenSet) return false;
            if (RefGetter_Property.HasBeenSet)
            {
                if (!object.Equals(RefGetter, rhs.RefGetter)) return false;
            }
            if (RefGetter_NotNull_Property.HasBeenSet != rhs.RefGetter_NotNull_Property.HasBeenSet) return false;
            if (RefGetter_NotNull_Property.HasBeenSet)
            {
                if (!object.Equals(RefGetter_NotNull, rhs.RefGetter_NotNull)) return false;
            }
            if (RefGetter_Singleton_Property.HasBeenSet != rhs.RefGetter_Singleton_Property.HasBeenSet) return false;
            if (RefGetter_Singleton_Property.HasBeenSet)
            {
                if (!object.Equals(RefGetter_Singleton, rhs.RefGetter_Singleton)) return false;
            }
            if (RefSetter_Property.HasBeenSet != rhs.RefSetter_Property.HasBeenSet) return false;
            if (RefSetter_Property.HasBeenSet)
            {
                if (!object.Equals(RefSetter, rhs.RefSetter)) return false;
            }
            if (RefSetter_NotNull_Property.HasBeenSet != rhs.RefSetter_NotNull_Property.HasBeenSet) return false;
            if (RefSetter_NotNull_Property.HasBeenSet)
            {
                if (!object.Equals(RefSetter_NotNull, rhs.RefSetter_NotNull)) return false;
            }
            if (RefSetter_Singleton_Property.HasBeenSet != rhs.RefSetter_Singleton_Property.HasBeenSet) return false;
            if (RefSetter_Singleton_Property.HasBeenSet)
            {
                if (!object.Equals(RefSetter_Singleton, rhs.RefSetter_Singleton)) return false;
            }
            if (List.HasBeenSet != rhs.List.HasBeenSet) return false;
            if (List.HasBeenSet)
            {
                if (!List.SequenceEqual(rhs.List)) return false;
            }
            if (RefList.HasBeenSet != rhs.RefList.HasBeenSet) return false;
            if (RefList.HasBeenSet)
            {
                if (!RefList.SequenceEqual(rhs.RefList)) return false;
            }
            if (Dict.HasBeenSet != rhs.Dict.HasBeenSet) return false;
            if (Dict.HasBeenSet)
            {
                if (!Dict.SequenceEqual(rhs.Dict)) return false;
            }
            if (RefDict.HasBeenSet != rhs.RefDict.HasBeenSet) return false;
            if (RefDict.HasBeenSet)
            {
                if (!RefDict.SequenceEqual(rhs.RefDict)) return false;
            }
            if (KeyRefDict.HasBeenSet != rhs.KeyRefDict.HasBeenSet) return false;
            if (KeyRefDict.HasBeenSet)
            {
                if (!KeyRefDict.SequenceEqual(rhs.KeyRefDict)) return false;
            }
            if (ValRefDict.HasBeenSet != rhs.ValRefDict.HasBeenSet) return false;
            if (ValRefDict.HasBeenSet)
            {
                if (!ValRefDict.SequenceEqual(rhs.ValRefDict)) return false;
            }
            if (DictKeyedValue.HasBeenSet != rhs.DictKeyedValue.HasBeenSet) return false;
            if (DictKeyedValue.HasBeenSet)
            {
                if (!DictKeyedValue.SequenceEqual(rhs.DictKeyedValue)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (ByteArray_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ByteArray).CombineHashCode(ret);
            }
            if (ByteArrayNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ByteArrayNull).CombineHashCode(ret);
            }
            if (ByteArrayNotNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ByteArrayNotNull).CombineHashCode(ret);
            }
            if (ByteArraySingleton_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ByteArraySingleton).CombineHashCode(ret);
            }
            if (BoolN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BoolN).CombineHashCode(ret);
            }
            if (Bool_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Bool).CombineHashCode(ret);
            }
            if (CharN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CharN).CombineHashCode(ret);
            }
            if (Char_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Char).CombineHashCode(ret);
            }
            if (DateTimeNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DateTimeNull).CombineHashCode(ret);
            }
            if (DateTime_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DateTime).CombineHashCode(ret);
            }
            if (DoubleN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DoubleN).CombineHashCode(ret);
            }
            if (DoubleN_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DoubleN_Ranged).CombineHashCode(ret);
            }
            if (Double_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Double).CombineHashCode(ret);
            }
            if (Double_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Double_Ranged).CombineHashCode(ret);
            }
            if (FloatN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FloatN).CombineHashCode(ret);
            }
            if (FloatN_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FloatN_Ranged).CombineHashCode(ret);
            }
            if (Float_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Float).CombineHashCode(ret);
            }
            if (Float_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Float_Ranged).CombineHashCode(ret);
            }
            if (Int16N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int16N).CombineHashCode(ret);
            }
            if (Int16N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int16N_Ranged).CombineHashCode(ret);
            }
            if (Int16_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int16).CombineHashCode(ret);
            }
            if (Int16_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int16_Ranged).CombineHashCode(ret);
            }
            if (Int32N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int32N).CombineHashCode(ret);
            }
            if (Int32N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int32N_Ranged).CombineHashCode(ret);
            }
            if (Int32_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int32).CombineHashCode(ret);
            }
            if (Int32_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int32_Ranged).CombineHashCode(ret);
            }
            if (Int64N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int64N).CombineHashCode(ret);
            }
            if (Int64N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int64N_Ranged).CombineHashCode(ret);
            }
            if (Int64_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int64).CombineHashCode(ret);
            }
            if (Int64_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int64_Ranged).CombineHashCode(ret);
            }
            if (Int8N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int8N).CombineHashCode(ret);
            }
            if (Int8N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int8N_Ranged).CombineHashCode(ret);
            }
            if (Int8_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int8).CombineHashCode(ret);
            }
            if (Int8_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int8_Ranged).CombineHashCode(ret);
            }
            if (Unsafe_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Unsafe).CombineHashCode(ret);
            }
            if (UnsafeLoqui_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UnsafeLoqui).CombineHashCode(ret);
            }
            if (UnsafeNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UnsafeNull).CombineHashCode(ret);
            }
            if (P2IntN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P2IntN).CombineHashCode(ret);
            }
            if (P2Int_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P2Int).CombineHashCode(ret);
            }
            if (P3DoubleN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P3DoubleN).CombineHashCode(ret);
            }
            if (P3Double_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P3Double).CombineHashCode(ret);
            }
            if (P3IntN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P3IntN).CombineHashCode(ret);
            }
            if (P3Int_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P3Int).CombineHashCode(ret);
            }
            if (PercentN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(PercentN).CombineHashCode(ret);
            }
            if (Percent_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Percent).CombineHashCode(ret);
            }
            if (RangeInt8N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt8N).CombineHashCode(ret);
            }
            if (RangeInt8_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt8).CombineHashCode(ret);
            }
            if (RangeInt16N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt16N).CombineHashCode(ret);
            }
            if (RangeInt16_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt16).CombineHashCode(ret);
            }
            if (RangeInt32N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt32N).CombineHashCode(ret);
            }
            if (RangeInt32_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt32).CombineHashCode(ret);
            }
            if (RangeInt64N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt64N).CombineHashCode(ret);
            }
            if (RangeInt64_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt64).CombineHashCode(ret);
            }
            if (RangeUInt8N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt8N).CombineHashCode(ret);
            }
            if (RangeUInt8_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt8).CombineHashCode(ret);
            }
            if (RangeUInt16N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt16N).CombineHashCode(ret);
            }
            if (RangeUInt16_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt16).CombineHashCode(ret);
            }
            if (RangeUInt32N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt32N).CombineHashCode(ret);
            }
            if (RangeUInt32_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt32).CombineHashCode(ret);
            }
            if (RangeUInt64N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt64N).CombineHashCode(ret);
            }
            if (RangeUInt64_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt64).CombineHashCode(ret);
            }
            if (String_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(String).CombineHashCode(ret);
            }
            if (FilePath_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FilePath).CombineHashCode(ret);
            }
            if (FilePathNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FilePathNull).CombineHashCode(ret);
            }
            if (DirectoryPath_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DirectoryPath).CombineHashCode(ret);
            }
            if (DirectoryPathNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DirectoryPathNull).CombineHashCode(ret);
            }
            if (UDoubleN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UDoubleN).CombineHashCode(ret);
            }
            if (UDoubleN_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UDoubleN_Ranged).CombineHashCode(ret);
            }
            if (UDouble_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UDouble).CombineHashCode(ret);
            }
            if (UDouble_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UDouble_Ranged).CombineHashCode(ret);
            }
            if (UInt16N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt16N).CombineHashCode(ret);
            }
            if (UInt16N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt16N_Ranged).CombineHashCode(ret);
            }
            if (UInt16_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt16).CombineHashCode(ret);
            }
            if (UInt16_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt16_Ranged).CombineHashCode(ret);
            }
            if (UInt32N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt32N).CombineHashCode(ret);
            }
            if (UInt32N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt32N_Ranged).CombineHashCode(ret);
            }
            if (UInt32_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt32).CombineHashCode(ret);
            }
            if (UInt32_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt32_Ranged).CombineHashCode(ret);
            }
            if (UInt64N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt64N).CombineHashCode(ret);
            }
            if (UInt64N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt64N_Ranged).CombineHashCode(ret);
            }
            if (UInt64_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt64).CombineHashCode(ret);
            }
            if (UInt64_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt64_Ranged).CombineHashCode(ret);
            }
            if (UInt8N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt8N).CombineHashCode(ret);
            }
            if (UInt8N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt8N_Ranged).CombineHashCode(ret);
            }
            if (UInt8_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt8).CombineHashCode(ret);
            }
            if (UInt8_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt8_Ranged).CombineHashCode(ret);
            }
            if (Enum_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Enum).CombineHashCode(ret);
            }
            if (EnumNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnumNull).CombineHashCode(ret);
            }
            if (WildCard_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(WildCard).CombineHashCode(ret);
            }
            if (WildCardLoqui_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(WildCardLoqui).CombineHashCode(ret);
            }
            if (WildCardNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(WildCardNull).CombineHashCode(ret);
            }
            if (Ref_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ref).CombineHashCode(ret);
            }
            if (Ref_NotNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ref_NotNull).CombineHashCode(ret);
            }
            if (Ref_Singleton_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ref_Singleton).CombineHashCode(ret);
            }
            if (RefGetter_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefGetter).CombineHashCode(ret);
            }
            if (RefGetter_NotNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefGetter_NotNull).CombineHashCode(ret);
            }
            if (RefGetter_Singleton_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefGetter_Singleton).CombineHashCode(ret);
            }
            if (RefSetter_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefSetter).CombineHashCode(ret);
            }
            if (RefSetter_NotNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefSetter_NotNull).CombineHashCode(ret);
            }
            if (RefSetter_Singleton_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefSetter_Singleton).CombineHashCode(ret);
            }
            if (List.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(List).CombineHashCode(ret);
            }
            if (RefList.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefList).CombineHashCode(ret);
            }
            if (Dict.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Dict).CombineHashCode(ret);
            }
            if (RefDict.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefDict).CombineHashCode(ret);
            }
            if (KeyRefDict.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(KeyRefDict).CombineHashCode(ret);
            }
            if (ValRefDict.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ValRefDict).CombineHashCode(ret);
            }
            if (DictKeyedValue.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DictKeyedValue).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        public static TestObject_HasBeenSet_ReadOnly Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static TestObject_HasBeenSet_ReadOnly Create_XML(
            XElement root,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static TestObject_HasBeenSet_ReadOnly Create_XML(
            XElement root,
            bool doMasks,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        public static (TestObject_HasBeenSet_ReadOnly Object, TestObject_HasBeenSet_ReadOnly_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            TestObject_HasBeenSet_ReadOnly_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestObject_HasBeenSet_ReadOnly_ErrorMask()) : default(Func<TestObject_HasBeenSet_ReadOnly_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static TestObject_HasBeenSet_ReadOnly Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static TestObject_HasBeenSet_ReadOnly Create_XML(
            string path,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static TestObject_HasBeenSet_ReadOnly Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static TestObject_HasBeenSet_ReadOnly Create_XML(
            Stream stream,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject_HasBeenSet_ReadOnly, TestObject_HasBeenSet_ReadOnly_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject_HasBeenSet_ReadOnly, TestObject_HasBeenSet_ReadOnly_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
            string name = null)
        {
            TestObject_HasBeenSet_ReadOnlyCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_XML(
            string path,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            TestObject_HasBeenSet_ReadOnlyCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        #endregion

        private static TestObject_HasBeenSet_ReadOnly Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<TestObject_HasBeenSet_ReadOnly_ErrorMask> errorMask)
        {
            var ret = new TestObject_HasBeenSet_ReadOnly();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            TestObject_HasBeenSet_ReadOnly item,
            XElement root,
            string name,
            bool doMasks,
            Func<TestObject_HasBeenSet_ReadOnly_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "ByteArray":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._ByteArray.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ByteArray = subMask;
                        }
                    }
                    break;
                case "ByteArrayNull":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._ByteArrayNull.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ByteArrayNull = subMask;
                        }
                    }
                    break;
                case "ByteArrayNotNull":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._ByteArrayNotNull.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ByteArrayNotNull = subMask;
                        }
                    }
                    break;
                case "ByteArraySingleton":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._ByteArraySingleton.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ByteArraySingleton = subMask;
                        }
                    }
                    break;
                case "BoolN":
                    {
                        Exception subMask;
                        var tryGet = BooleanXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._BoolN.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().BoolN = subMask;
                        }
                    }
                    break;
                case "Bool":
                    {
                        Exception subMask;
                        var tryGet = BooleanXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Bool.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Bool = subMask;
                        }
                    }
                    break;
                case "CharN":
                    {
                        Exception subMask;
                        var tryGet = CharXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._CharN.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().CharN = subMask;
                        }
                    }
                    break;
                case "Char":
                    {
                        Exception subMask;
                        var tryGet = CharXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Char.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Char = subMask;
                        }
                    }
                    break;
                case "DateTimeNull":
                    {
                        Exception subMask;
                        var tryGet = DateTimeXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._DateTimeNull.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DateTimeNull = subMask;
                        }
                    }
                    break;
                case "DateTime":
                    {
                        Exception subMask;
                        var tryGet = DateTimeXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._DateTime.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DateTime = subMask;
                        }
                    }
                    break;
                case "DoubleN":
                    {
                        Exception subMask;
                        var tryGet = DoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._DoubleN.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DoubleN = subMask;
                        }
                    }
                    break;
                case "DoubleN_Ranged":
                    {
                        Exception subMask;
                        var tryGet = DoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._DoubleN_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DoubleN_Ranged = subMask;
                        }
                    }
                    break;
                case "Double":
                    {
                        Exception subMask;
                        var tryGet = DoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Double.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Double = subMask;
                        }
                    }
                    break;
                case "Double_Ranged":
                    {
                        Exception subMask;
                        var tryGet = DoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Double_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Double_Ranged = subMask;
                        }
                    }
                    break;
                case "FloatN":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._FloatN.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().FloatN = subMask;
                        }
                    }
                    break;
                case "FloatN_Ranged":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._FloatN_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().FloatN_Ranged = subMask;
                        }
                    }
                    break;
                case "Float":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Float.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Float = subMask;
                        }
                    }
                    break;
                case "Float_Ranged":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Float_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Float_Ranged = subMask;
                        }
                    }
                    break;
                case "Int16N":
                    {
                        Exception subMask;
                        var tryGet = Int16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int16N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int16N = subMask;
                        }
                    }
                    break;
                case "Int16N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int16N_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int16N_Ranged = subMask;
                        }
                    }
                    break;
                case "Int16":
                    {
                        Exception subMask;
                        var tryGet = Int16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int16.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int16 = subMask;
                        }
                    }
                    break;
                case "Int16_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int16_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int16_Ranged = subMask;
                        }
                    }
                    break;
                case "Int32N":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int32N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int32N = subMask;
                        }
                    }
                    break;
                case "Int32N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int32N_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int32N_Ranged = subMask;
                        }
                    }
                    break;
                case "Int32":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int32.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int32 = subMask;
                        }
                    }
                    break;
                case "Int32_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int32_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int32_Ranged = subMask;
                        }
                    }
                    break;
                case "Int64N":
                    {
                        Exception subMask;
                        var tryGet = Int64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int64N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int64N = subMask;
                        }
                    }
                    break;
                case "Int64N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int64N_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int64N_Ranged = subMask;
                        }
                    }
                    break;
                case "Int64":
                    {
                        Exception subMask;
                        var tryGet = Int64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int64.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int64 = subMask;
                        }
                    }
                    break;
                case "Int64_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int64_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int64_Ranged = subMask;
                        }
                    }
                    break;
                case "Int8N":
                    {
                        Exception subMask;
                        var tryGet = Int8XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int8N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int8N = subMask;
                        }
                    }
                    break;
                case "Int8N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int8XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int8N_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int8N_Ranged = subMask;
                        }
                    }
                    break;
                case "Int8":
                    {
                        Exception subMask;
                        var tryGet = Int8XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int8.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int8 = subMask;
                        }
                    }
                    break;
                case "Int8_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int8XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Int8_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int8_Ranged = subMask;
                        }
                    }
                    break;
                case "Unsafe":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask);
                        item._Unsafe.SetIfSucceeded(tryGet.Bubble<bool>(i => (bool)i));
                        if (doMasks && subMask != null)
                        {
                            errorMask().Unsafe = subMask;
                        }
                    }
                    break;
                case "UnsafeLoqui":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask);
                        item._UnsafeLoqui.SetIfSucceeded(tryGet.Bubble<ObjectToRef>(i => (ObjectToRef)i));
                        if (doMasks && subMask != null)
                        {
                            errorMask().UnsafeLoqui = subMask;
                        }
                    }
                    break;
                case "UnsafeNull":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask);
                        item._UnsafeNull.SetIfSucceeded(tryGet.Bubble<ObjectToRef>(i => (ObjectToRef)i));
                        if (doMasks && subMask != null)
                        {
                            errorMask().UnsafeNull = subMask;
                        }
                    }
                    break;
                case "P2IntN":
                    {
                        Exception subMask;
                        var tryGet = P2IntXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._P2IntN.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P2IntN = subMask;
                        }
                    }
                    break;
                case "P2Int":
                    {
                        Exception subMask;
                        var tryGet = P2IntXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._P2Int.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P2Int = subMask;
                        }
                    }
                    break;
                case "P3DoubleN":
                    {
                        Exception subMask;
                        var tryGet = P3DoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._P3DoubleN.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P3DoubleN = subMask;
                        }
                    }
                    break;
                case "P3Double":
                    {
                        Exception subMask;
                        var tryGet = P3DoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._P3Double.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P3Double = subMask;
                        }
                    }
                    break;
                case "P3IntN":
                    {
                        Exception subMask;
                        var tryGet = P3IntXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._P3IntN.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P3IntN = subMask;
                        }
                    }
                    break;
                case "P3Int":
                    {
                        Exception subMask;
                        var tryGet = P3IntXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._P3Int.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P3Int = subMask;
                        }
                    }
                    break;
                case "PercentN":
                    {
                        Exception subMask;
                        var tryGet = PercentXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._PercentN.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().PercentN = subMask;
                        }
                    }
                    break;
                case "Percent":
                    {
                        Exception subMask;
                        var tryGet = PercentXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Percent.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Percent = subMask;
                        }
                    }
                    break;
                case "RangeInt8N":
                    {
                        Exception subMask;
                        var tryGet = RangeInt8XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeInt8N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt8N = subMask;
                        }
                    }
                    break;
                case "RangeInt8":
                    {
                        Exception subMask;
                        var tryGet = RangeInt8XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeInt8.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt8 = subMask;
                        }
                    }
                    break;
                case "RangeInt16N":
                    {
                        Exception subMask;
                        var tryGet = RangeInt16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeInt16N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt16N = subMask;
                        }
                    }
                    break;
                case "RangeInt16":
                    {
                        Exception subMask;
                        var tryGet = RangeInt16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeInt16.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt16 = subMask;
                        }
                    }
                    break;
                case "RangeInt32N":
                    {
                        Exception subMask;
                        var tryGet = RangeInt32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeInt32N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt32N = subMask;
                        }
                    }
                    break;
                case "RangeInt32":
                    {
                        Exception subMask;
                        var tryGet = RangeInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeInt32.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt32 = subMask;
                        }
                    }
                    break;
                case "RangeInt64N":
                    {
                        Exception subMask;
                        var tryGet = RangeInt64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeInt64N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt64N = subMask;
                        }
                    }
                    break;
                case "RangeInt64":
                    {
                        Exception subMask;
                        var tryGet = RangeInt64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeInt64.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt64 = subMask;
                        }
                    }
                    break;
                case "RangeUInt8N":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt8XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeUInt8N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt8N = subMask;
                        }
                    }
                    break;
                case "RangeUInt8":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt8XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeUInt8.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt8 = subMask;
                        }
                    }
                    break;
                case "RangeUInt16N":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeUInt16N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt16N = subMask;
                        }
                    }
                    break;
                case "RangeUInt16":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeUInt16.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt16 = subMask;
                        }
                    }
                    break;
                case "RangeUInt32N":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeUInt32N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt32N = subMask;
                        }
                    }
                    break;
                case "RangeUInt32":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeUInt32.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt32 = subMask;
                        }
                    }
                    break;
                case "RangeUInt64N":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeUInt64N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt64N = subMask;
                        }
                    }
                    break;
                case "RangeUInt64":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._RangeUInt64.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt64 = subMask;
                        }
                    }
                    break;
                case "String":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._String.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().String = subMask;
                        }
                    }
                    break;
                case "FilePath":
                    {
                        Exception subMask;
                        var tryGet = FilePathXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._FilePath.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().FilePath = subMask;
                        }
                    }
                    break;
                case "FilePathNull":
                    {
                        Exception subMask;
                        var tryGet = FilePathXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._FilePathNull.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().FilePathNull = subMask;
                        }
                    }
                    break;
                case "DirectoryPath":
                    {
                        Exception subMask;
                        var tryGet = DirectoryPathXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._DirectoryPath.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DirectoryPath = subMask;
                        }
                    }
                    break;
                case "DirectoryPathNull":
                    {
                        Exception subMask;
                        var tryGet = DirectoryPathXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._DirectoryPathNull.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DirectoryPathNull = subMask;
                        }
                    }
                    break;
                case "UDoubleN":
                    {
                        Exception subMask;
                        var tryGet = UDoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UDoubleN.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UDoubleN = subMask;
                        }
                    }
                    break;
                case "UDoubleN_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UDoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UDoubleN_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UDoubleN_Ranged = subMask;
                        }
                    }
                    break;
                case "UDouble":
                    {
                        Exception subMask;
                        var tryGet = UDoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UDouble.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UDouble = subMask;
                        }
                    }
                    break;
                case "UDouble_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UDoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UDouble_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UDouble_Ranged = subMask;
                        }
                    }
                    break;
                case "UInt16N":
                    {
                        Exception subMask;
                        var tryGet = UInt16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt16N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt16N = subMask;
                        }
                    }
                    break;
                case "UInt16N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt16N_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt16N_Ranged = subMask;
                        }
                    }
                    break;
                case "UInt16":
                    {
                        Exception subMask;
                        var tryGet = UInt16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt16.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt16 = subMask;
                        }
                    }
                    break;
                case "UInt16_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt16_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt16_Ranged = subMask;
                        }
                    }
                    break;
                case "UInt32N":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt32N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt32N = subMask;
                        }
                    }
                    break;
                case "UInt32N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt32N_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt32N_Ranged = subMask;
                        }
                    }
                    break;
                case "UInt32":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt32.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt32 = subMask;
                        }
                    }
                    break;
                case "UInt32_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt32_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt32_Ranged = subMask;
                        }
                    }
                    break;
                case "UInt64N":
                    {
                        Exception subMask;
                        var tryGet = UInt64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt64N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt64N = subMask;
                        }
                    }
                    break;
                case "UInt64N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt64N_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt64N_Ranged = subMask;
                        }
                    }
                    break;
                case "UInt64":
                    {
                        Exception subMask;
                        var tryGet = UInt64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt64.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt64 = subMask;
                        }
                    }
                    break;
                case "UInt64_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt64_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt64_Ranged = subMask;
                        }
                    }
                    break;
                case "UInt8N":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt8N.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt8N = subMask;
                        }
                    }
                    break;
                case "UInt8N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.Parse(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt8N_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt8N_Ranged = subMask;
                        }
                    }
                    break;
                case "UInt8":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt8.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt8 = subMask;
                        }
                    }
                    break;
                case "UInt8_Ranged":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._UInt8_Ranged.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt8_Ranged = subMask;
                        }
                    }
                    break;
                case "Enum":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<TestEnum>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._Enum.SetIfSucceeded(tryGet.Bubble<TestEnum>((i) => i.Value));
                        if (doMasks && subMask != null)
                        {
                            errorMask().Enum = subMask;
                        }
                    }
                    break;
                case "EnumNull":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<TestEnum>.Instance.Parse(
                            root,
                            nullable: true,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        item._EnumNull.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().EnumNull = subMask;
                        }
                    }
                    break;
                case "WildCard":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask);
                        item._WildCard.SetIfSucceeded(tryGet.Bubble<Object>(i => (Object)i));
                        if (doMasks && subMask != null)
                        {
                            errorMask().WildCard = subMask;
                        }
                    }
                    break;
                case "WildCardLoqui":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask);
                        item._WildCardLoqui.SetIfSucceeded(tryGet.Bubble<Object>(i => (Object)i));
                        if (doMasks && subMask != null)
                        {
                            errorMask().WildCardLoqui = subMask;
                        }
                    }
                    break;
                case "WildCardNull":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask);
                        item._WildCardNull.SetIfSucceeded(tryGet.Bubble<Object>(i => (Object)i));
                        if (doMasks && subMask != null)
                        {
                            errorMask().WildCardNull = subMask;
                        }
                    }
                    break;
                case "Ref":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Ref.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Ref = subMask;
                        }
                    }
                    break;
                case "Ref_NotNull":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._Ref_NotNull.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Ref_NotNull = subMask;
                        }
                    }
                    break;
                case "Ref_Singleton":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tmp = ObjectToRef.Create_XML(
                            root: root,
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask createMask);
                        ObjectToRefCommon.CopyFieldsFrom(
                            item: item._Ref_Singleton_Object,
                            rhs: tmp,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            doErrorMask: doMasks,
                            errorMask: out ObjectToRef_ErrorMask copyMask);
                        var loquiMask = ObjectToRef_ErrorMask.Combine(createMask, copyMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Ref_Singleton = subMask;
                        }
                    }
                    break;
                case "RefGetter":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._RefGetter.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefGetter = subMask;
                        }
                    }
                    break;
                case "RefGetter_NotNull":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._RefGetter_NotNull.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefGetter_NotNull = subMask;
                        }
                    }
                    break;
                case "RefGetter_Singleton":
                    break;
                case "RefSetter":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._RefSetter.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefSetter = subMask;
                        }
                    }
                    break;
                case "RefSetter_NotNull":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            mask: out subMask);
                        item._RefSetter_NotNull.SetIfSucceeded(tryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefSetter_NotNull = subMask;
                        }
                    }
                    break;
                case "RefSetter_Singleton":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tmp = ObjectToRef.Create_XML(
                            root: root,
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask createMask);
                        ObjectToRefCommon.CopyFieldsFrom(
                            item: item._RefSetter_Singleton_Object,
                            rhs: tmp,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            doErrorMask: doMasks,
                            errorMask: out ObjectToRef_ErrorMask copyMask);
                        var loquiMask = ObjectToRef_ErrorMask.Combine(createMask, copyMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefSetter_Singleton = subMask;
                        }
                    }
                    break;
                case "List":
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        var listTryGet = ListXmlTranslation<Boolean, Exception>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                            {
                                return BooleanXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask).Bubble((o) => o.Value);
                            }
                            );
                        item._List.SetIfSucceeded(listTryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().List = subMask;
                        }
                    }
                    break;
                case "RefList":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    mask: out listSubMask);
                            }
                            );
                        item._RefList.SetIfSucceeded(listTryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefList = subMask;
                        }
                    }
                    break;
                case "Dict":
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> subMask;
                        var dictTryGet = DictXmlTranslation<String, Boolean, Exception, Exception>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            keyTransl: (XElement r, bool dictDoMasks, out Exception dictSubMask) =>
                            {
                                return StringXmlTranslation.Instance.Parse(
                                    r,
                                    doMasks: dictDoMasks,
                                    errorMask: out dictSubMask);
                            }
                            ,
                            valTransl: (XElement r, bool dictDoMasks, out Exception dictSubMask) =>
                            {
                                return BooleanXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: dictDoMasks,
                                    errorMask: out dictSubMask).Bubble((o) => o.Value);
                            }
                            );
                        item._Dict.SetIfSucceeded(dictTryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Dict = subMask;
                        }
                    }
                    break;
                case "RefDict":
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>> subMask;
                        var dictTryGet = DictXmlTranslation<ObjectToRef, ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            keyTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            ,
                            valTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            );
                        item._RefDict.SetIfSucceeded(dictTryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefDict = subMask;
                        }
                    }
                    break;
                case "KeyRefDict":
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>> subMask;
                        var dictTryGet = DictXmlTranslation<ObjectToRef, Boolean, MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            keyTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            ,
                            valTransl: (XElement r, bool dictDoMasks, out Exception dictSubMask) =>
                            {
                                return BooleanXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: dictDoMasks,
                                    errorMask: out dictSubMask).Bubble((o) => o.Value);
                            }
                            );
                        item._KeyRefDict.SetIfSucceeded(dictTryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().KeyRefDict = subMask;
                        }
                    }
                    break;
                case "ValRefDict":
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>> subMask;
                        var dictTryGet = DictXmlTranslation<String, ObjectToRef, Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            keyTransl: (XElement r, bool dictDoMasks, out Exception dictSubMask) =>
                            {
                                return StringXmlTranslation.Instance.Parse(
                                    r,
                                    doMasks: dictDoMasks,
                                    errorMask: out dictSubMask);
                            }
                            ,
                            valTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            );
                        item._ValRefDict.SetIfSucceeded(dictTryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ValRefDict = subMask;
                        }
                    }
                    break;
                case "DictKeyedValue":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> subMask;
                        var dictTryGet = KeyedDictXmlTranslation<Int32, ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            valTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            );
                        item._DictKeyedValue.SetIfSucceeded(dictTryGet);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DictKeyedValue = subMask;
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        public TestObject_HasBeenSet_ReadOnly Copy(
            TestObject_HasBeenSet_ReadOnly_CopyMask copyMask = null,
            ITestObject_HasBeenSet_ReadOnlyGetter def = null)
        {
            return TestObject_HasBeenSet_ReadOnly.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestObject_HasBeenSet_ReadOnly Copy(
            ITestObject_HasBeenSet_ReadOnly item,
            TestObject_HasBeenSet_ReadOnly_CopyMask copyMask = null,
            ITestObject_HasBeenSet_ReadOnlyGetter def = null)
        {
            TestObject_HasBeenSet_ReadOnly ret;
            if (item.GetType().Equals(typeof(TestObject_HasBeenSet_ReadOnly)))
            {
                ret = new TestObject_HasBeenSet_ReadOnly();
            }
            else
            {
                ret = (TestObject_HasBeenSet_ReadOnly)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            TestObject_HasBeenSet_ReadOnly_CopyMask copyMask = null,
            ITestObject_HasBeenSet_ReadOnlyGetter def = null)
            where CopyType : class, ITestObject_HasBeenSet_ReadOnly
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestObject_HasBeenSet_ReadOnly)))
            {
                ret = new TestObject_HasBeenSet_ReadOnly() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestObject_HasBeenSet_ReadOnly Copy_ToLoqui(
            ITestObject_HasBeenSet_ReadOnlyGetter item,
            TestObject_HasBeenSet_ReadOnly_CopyMask copyMask = null,
            ITestObject_HasBeenSet_ReadOnlyGetter def = null)
        {
            var ret = new TestObject_HasBeenSet_ReadOnly();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    this._ByteArray.Set((Byte[])obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    this._ByteArrayNull.Set((Byte[])obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    this._ByteArrayNotNull.Set((Byte[])obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    this._ByteArraySingleton.Set((Byte[])obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    this._BoolN.Set((Boolean?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    this._Bool.Set((Boolean)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    this._CharN.Set((Char?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    this._Char.Set((Char)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    this._DateTimeNull.Set((DateTime?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    this._DateTime.Set((DateTime)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    this._DoubleN.Set((Double?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    this._DoubleN_Ranged.Set((Double?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    this._Double.Set((Double)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    this._Double_Ranged.Set((Double)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    this._FloatN.Set((Single?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    this._FloatN_Ranged.Set((Single?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    this._Float.Set((Single)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    this._Float_Ranged.Set((Single)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    this._Int16N.Set((Int16?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    this._Int16N_Ranged.Set((Int16?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    this._Int16.Set((Int16)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    this._Int16_Ranged.Set((Int16)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    this._Int32N.Set((Int32?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    this._Int32N_Ranged.Set((Int32?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    this._Int32.Set((Int32)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    this._Int32_Ranged.Set((Int32)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    this._Int64N.Set((Int64?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    this._Int64N_Ranged.Set((Int64?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    this._Int64.Set((Int64)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    this._Int64_Ranged.Set((Int64)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    this._Int8N.Set((SByte?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    this._Int8N_Ranged.Set((SByte?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    this._Int8.Set((SByte)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    this._Int8_Ranged.Set((SByte)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    this._Unsafe.Set((bool)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    this._UnsafeLoqui.Set((ObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    this._UnsafeNull.Set((ObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    this._P2IntN.Set((P2Int?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    this._P2Int.Set((P2Int)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    this._P3DoubleN.Set((P3Double?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    this._P3Double.Set((P3Double)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    this._P3IntN.Set((P3Int?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    this._P3Int.Set((P3Int)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    this._PercentN.Set((Percent?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    this._Percent.Set((Percent)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    this._RangeInt8N.Set((RangeInt8?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    this._RangeInt8.Set((RangeInt8)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    this._RangeInt16N.Set((RangeInt16?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    this._RangeInt16.Set((RangeInt16)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    this._RangeInt32N.Set((RangeInt32?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    this._RangeInt32.Set((RangeInt32)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    this._RangeInt64N.Set((RangeInt64?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    this._RangeInt64.Set((RangeInt64)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    this._RangeUInt8N.Set((RangeUInt8?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    this._RangeUInt8.Set((RangeUInt8)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    this._RangeUInt16N.Set((RangeUInt16?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    this._RangeUInt16.Set((RangeUInt16)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    this._RangeUInt32N.Set((RangeUInt32?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    this._RangeUInt32.Set((RangeUInt32)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    this._RangeUInt64N.Set((RangeUInt64?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    this._RangeUInt64.Set((RangeUInt64)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    this._String.Set((String)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    this._FilePath.Set((FilePath)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    this._FilePathNull.Set((FilePath?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    this._DirectoryPath.Set((DirectoryPath)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    this._DirectoryPathNull.Set((DirectoryPath?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    this._UDoubleN.Set((UDouble?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    this._UDoubleN_Ranged.Set((UDouble?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    this._UDouble.Set((UDouble)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    this._UDouble_Ranged.Set((UDouble)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    this._UInt16N.Set((UInt16?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    this._UInt16N_Ranged.Set((UInt16?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    this._UInt16.Set((UInt16)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    this._UInt16_Ranged.Set((UInt16)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    this._UInt32N.Set((UInt32?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    this._UInt32N_Ranged.Set((UInt32?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    this._UInt32.Set((UInt32)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    this._UInt32_Ranged.Set((UInt32)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    this._UInt64N.Set((UInt64?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    this._UInt64N_Ranged.Set((UInt64?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    this._UInt64.Set((UInt64)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    this._UInt64_Ranged.Set((UInt64)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    this._UInt8N.Set((Byte?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    this._UInt8N_Ranged.Set((Byte?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    this._UInt8.Set((Byte)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    this._UInt8_Ranged.Set((Byte)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    this._Enum.Set((TestEnum)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    this._EnumNull.Set((TestEnum?)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    this._WildCard.Set((Object)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    this._WildCardLoqui.Set((Object)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    this._WildCardNull.Set((Object)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    this._Ref.Set((ObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    this._Ref_NotNull.Set((ObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    this._Ref_Singleton_Object.CopyFieldsFrom(rhs: (ObjectToRef)obj, cmds: cmds);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    this._RefGetter.Set((IObjectToRefGetter)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    this._RefGetter_NotNull.Set((IObjectToRefGetter)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot set singleton member RefGetter_Singleton");
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    this._RefSetter.Set((IObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    this._RefSetter_NotNull.Set((IObjectToRef)obj);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    this._RefSetter_Singleton_Object.CopyFieldsFrom(rhs: (IObjectToRef)obj, cmds: cmds);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    this._List.SetTo((IEnumerable<Boolean>)obj, cmds);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    this._RefList.SetTo((IEnumerable<ObjectToRef>)obj, cmds);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    this.Dict.SetTo(
                        ((NotifyingDictionary<String, Boolean>)obj).Select(
                            (i) => new KeyValuePair<String, Boolean>(
                                i.Key,
                                i.Value)),
                        cmds);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    this.RefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                i.Key.Copy(),
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    this.KeyRefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, Boolean>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, Boolean>(
                                i.Key.Copy(),
                                i.Value)),
                        cmds);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    this.ValRefDict.SetTo(
                        ((NotifyingDictionary<String, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<String, ObjectToRef>(
                                i.Key,
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)(NotifyingDictionary<Int32, ObjectToRef>)obj),
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestObject_HasBeenSet_ReadOnlyCommon.Clear(this, cmds);
        }


        public static TestObject_HasBeenSet_ReadOnly Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestObject_HasBeenSet_ReadOnly();
            foreach (var pair in fields)
            {
                CopyInInternal_TestObject_HasBeenSet_ReadOnly(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TestObject_HasBeenSet_ReadOnly(TestObject_HasBeenSet_ReadOnly obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestObject_HasBeenSet_ReadOnly_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    obj._ByteArray.Set((Byte[])pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    obj._ByteArrayNull.Set((Byte[])pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    obj._ByteArrayNotNull.Set((Byte[])pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    obj._ByteArraySingleton.Set((Byte[])pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    obj._BoolN.Set((Boolean?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    obj._Bool.Set((Boolean)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    obj._CharN.Set((Char?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    obj._Char.Set((Char)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    obj._DateTimeNull.Set((DateTime?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    obj._DateTime.Set((DateTime)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    obj._DoubleN.Set((Double?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    obj._DoubleN_Ranged.Set((Double?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    obj._Double.Set((Double)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    obj._Double_Ranged.Set((Double)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    obj._FloatN.Set((Single?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    obj._FloatN_Ranged.Set((Single?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    obj._Float.Set((Single)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    obj._Float_Ranged.Set((Single)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    obj._Int16N.Set((Int16?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    obj._Int16N_Ranged.Set((Int16?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    obj._Int16.Set((Int16)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    obj._Int16_Ranged.Set((Int16)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    obj._Int32N.Set((Int32?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    obj._Int32N_Ranged.Set((Int32?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    obj._Int32.Set((Int32)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    obj._Int32_Ranged.Set((Int32)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    obj._Int64N.Set((Int64?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    obj._Int64N_Ranged.Set((Int64?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    obj._Int64.Set((Int64)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    obj._Int64_Ranged.Set((Int64)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    obj._Int8N.Set((SByte?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    obj._Int8N_Ranged.Set((SByte?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    obj._Int8.Set((SByte)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    obj._Int8_Ranged.Set((SByte)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    obj._Unsafe.Set((bool)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    obj._UnsafeLoqui.Set((ObjectToRef)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    obj._UnsafeNull.Set((ObjectToRef)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    obj._P2IntN.Set((P2Int?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    obj._P2Int.Set((P2Int)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    obj._P3DoubleN.Set((P3Double?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    obj._P3Double.Set((P3Double)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    obj._P3IntN.Set((P3Int?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    obj._P3Int.Set((P3Int)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    obj._PercentN.Set((Percent?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    obj._Percent.Set((Percent)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    obj._RangeInt8N.Set((RangeInt8?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    obj._RangeInt8.Set((RangeInt8)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    obj._RangeInt16N.Set((RangeInt16?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    obj._RangeInt16.Set((RangeInt16)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    obj._RangeInt32N.Set((RangeInt32?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    obj._RangeInt32.Set((RangeInt32)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    obj._RangeInt64N.Set((RangeInt64?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    obj._RangeInt64.Set((RangeInt64)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    obj._RangeUInt8N.Set((RangeUInt8?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    obj._RangeUInt8.Set((RangeUInt8)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    obj._RangeUInt16N.Set((RangeUInt16?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    obj._RangeUInt16.Set((RangeUInt16)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    obj._RangeUInt32N.Set((RangeUInt32?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    obj._RangeUInt32.Set((RangeUInt32)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    obj._RangeUInt64N.Set((RangeUInt64?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    obj._RangeUInt64.Set((RangeUInt64)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    obj._String.Set((String)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    obj._FilePath.Set((FilePath)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    obj._FilePathNull.Set((FilePath?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    obj._DirectoryPath.Set((DirectoryPath)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    obj._DirectoryPathNull.Set((DirectoryPath?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    obj._UDoubleN.Set((UDouble?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    obj._UDoubleN_Ranged.Set((UDouble?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    obj._UDouble.Set((UDouble)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    obj._UDouble_Ranged.Set((UDouble)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    obj._UInt16N.Set((UInt16?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    obj._UInt16N_Ranged.Set((UInt16?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    obj._UInt16.Set((UInt16)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    obj._UInt16_Ranged.Set((UInt16)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    obj._UInt32N.Set((UInt32?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    obj._UInt32N_Ranged.Set((UInt32?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    obj._UInt32.Set((UInt32)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    obj._UInt32_Ranged.Set((UInt32)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    obj._UInt64N.Set((UInt64?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    obj._UInt64N_Ranged.Set((UInt64?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    obj._UInt64.Set((UInt64)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    obj._UInt64_Ranged.Set((UInt64)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    obj._UInt8N.Set((Byte?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    obj._UInt8N_Ranged.Set((Byte?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    obj._UInt8.Set((Byte)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    obj._UInt8_Ranged.Set((Byte)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    obj._Enum.Set((TestEnum)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    obj._EnumNull.Set((TestEnum?)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    obj._WildCard.Set((Object)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    obj._WildCardLoqui.Set((Object)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    obj._WildCardNull.Set((Object)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    obj._Ref.Set((ObjectToRef)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    obj._Ref_NotNull.Set((ObjectToRef)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    obj._Ref_Singleton_Object.CopyFieldsFrom(rhs: (ObjectToRef)pair.Value, cmds: null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    obj._RefGetter.Set((IObjectToRefGetter)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    obj._RefGetter_NotNull.Set((IObjectToRefGetter)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    obj._RefGetter_Singleton_Object.CopyFieldsFrom(rhs: (IObjectToRefGetter)pair.Value, cmds: null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    obj._RefSetter.Set((IObjectToRef)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    obj._RefSetter_NotNull.Set((IObjectToRef)pair.Value);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    obj._RefSetter_Singleton_Object.CopyFieldsFrom(rhs: (IObjectToRef)pair.Value, cmds: null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    obj._List.SetTo((IEnumerable<Boolean>)pair.Value, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    obj._RefList.SetTo((IEnumerable<ObjectToRef>)pair.Value, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    obj.Dict.SetTo(
                        ((NotifyingDictionary<String, Boolean>)pair.Value).Select(
                            (i) => new KeyValuePair<String, Boolean>(
                                i.Key,
                                i.Value)),
                        null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    obj.RefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, ObjectToRef>)pair.Value).Select(
                            (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                i.Key.Copy(),
                                i.Value.Copy())),
                        null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    obj.KeyRefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, Boolean>)pair.Value).Select(
                            (i) => new KeyValuePair<ObjectToRef, Boolean>(
                                i.Key.Copy(),
                                i.Value)),
                        null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    obj.ValRefDict.SetTo(
                        ((NotifyingDictionary<String, ObjectToRef>)pair.Value).Select(
                            (i) => new KeyValuePair<String, ObjectToRef>(
                                i.Key,
                                i.Value.Copy())),
                        null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)(NotifyingDictionary<Int32, ObjectToRef>)pair.Value),
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestObject_HasBeenSet_ReadOnly obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestObject_HasBeenSet_ReadOnly : ITestObject_HasBeenSet_ReadOnlyGetter, ILoquiClass<ITestObject_HasBeenSet_ReadOnly, ITestObject_HasBeenSet_ReadOnlyGetter>, ILoquiClass<TestObject_HasBeenSet_ReadOnly, ITestObject_HasBeenSet_ReadOnlyGetter>
    {
    }

    public interface ITestObject_HasBeenSet_ReadOnlyGetter : ILoquiObject
    {
        #region ByteArray
        Byte[] ByteArray { get; }
        IHasBeenSetItemGetter<Byte[]> ByteArray_Property { get; }

        #endregion
        #region ByteArrayNull
        Byte[] ByteArrayNull { get; }
        IHasBeenSetItemGetter<Byte[]> ByteArrayNull_Property { get; }

        #endregion
        #region ByteArrayNotNull
        Byte[] ByteArrayNotNull { get; }
        IHasBeenSetItemGetter<Byte[]> ByteArrayNotNull_Property { get; }

        #endregion
        #region ByteArraySingleton
        Byte[] ByteArraySingleton { get; }
        IHasBeenSetItemGetter<Byte[]> ByteArraySingleton_Property { get; }

        #endregion
        #region BoolN
        Boolean? BoolN { get; }
        IHasBeenSetItemGetter<Boolean?> BoolN_Property { get; }

        #endregion
        #region Bool
        Boolean Bool { get; }
        IHasBeenSetItemGetter<Boolean> Bool_Property { get; }

        #endregion
        #region CharN
        Char? CharN { get; }
        IHasBeenSetItemGetter<Char?> CharN_Property { get; }

        #endregion
        #region Char
        Char Char { get; }
        IHasBeenSetItemGetter<Char> Char_Property { get; }

        #endregion
        #region DateTimeNull
        DateTime? DateTimeNull { get; }
        IHasBeenSetItemGetter<DateTime?> DateTimeNull_Property { get; }

        #endregion
        #region DateTime
        DateTime DateTime { get; }
        IHasBeenSetItemGetter<DateTime> DateTime_Property { get; }

        #endregion
        #region DoubleN
        Double? DoubleN { get; }
        IHasBeenSetItemGetter<Double?> DoubleN_Property { get; }

        #endregion
        #region DoubleN_Ranged
        Double? DoubleN_Ranged { get; }
        IHasBeenSetItemGetter<Double?> DoubleN_Ranged_Property { get; }

        #endregion
        #region Double
        Double Double { get; }
        IHasBeenSetItemGetter<Double> Double_Property { get; }

        #endregion
        #region Double_Ranged
        Double Double_Ranged { get; }
        IHasBeenSetItemGetter<Double> Double_Ranged_Property { get; }

        #endregion
        #region FloatN
        Single? FloatN { get; }
        IHasBeenSetItemGetter<Single?> FloatN_Property { get; }

        #endregion
        #region FloatN_Ranged
        Single? FloatN_Ranged { get; }
        IHasBeenSetItemGetter<Single?> FloatN_Ranged_Property { get; }

        #endregion
        #region Float
        Single Float { get; }
        IHasBeenSetItemGetter<Single> Float_Property { get; }

        #endregion
        #region Float_Ranged
        Single Float_Ranged { get; }
        IHasBeenSetItemGetter<Single> Float_Ranged_Property { get; }

        #endregion
        #region Int16N
        Int16? Int16N { get; }
        IHasBeenSetItemGetter<Int16?> Int16N_Property { get; }

        #endregion
        #region Int16N_Ranged
        Int16? Int16N_Ranged { get; }
        IHasBeenSetItemGetter<Int16?> Int16N_Ranged_Property { get; }

        #endregion
        #region Int16
        Int16 Int16 { get; }
        IHasBeenSetItemGetter<Int16> Int16_Property { get; }

        #endregion
        #region Int16_Ranged
        Int16 Int16_Ranged { get; }
        IHasBeenSetItemGetter<Int16> Int16_Ranged_Property { get; }

        #endregion
        #region Int32N
        Int32? Int32N { get; }
        IHasBeenSetItemGetter<Int32?> Int32N_Property { get; }

        #endregion
        #region Int32N_Ranged
        Int32? Int32N_Ranged { get; }
        IHasBeenSetItemGetter<Int32?> Int32N_Ranged_Property { get; }

        #endregion
        #region Int32
        Int32 Int32 { get; }
        IHasBeenSetItemGetter<Int32> Int32_Property { get; }

        #endregion
        #region Int32_Ranged
        Int32 Int32_Ranged { get; }
        IHasBeenSetItemGetter<Int32> Int32_Ranged_Property { get; }

        #endregion
        #region Int64N
        Int64? Int64N { get; }
        IHasBeenSetItemGetter<Int64?> Int64N_Property { get; }

        #endregion
        #region Int64N_Ranged
        Int64? Int64N_Ranged { get; }
        IHasBeenSetItemGetter<Int64?> Int64N_Ranged_Property { get; }

        #endregion
        #region Int64
        Int64 Int64 { get; }
        IHasBeenSetItemGetter<Int64> Int64_Property { get; }

        #endregion
        #region Int64_Ranged
        Int64 Int64_Ranged { get; }
        IHasBeenSetItemGetter<Int64> Int64_Ranged_Property { get; }

        #endregion
        #region Int8N
        SByte? Int8N { get; }
        IHasBeenSetItemGetter<SByte?> Int8N_Property { get; }

        #endregion
        #region Int8N_Ranged
        SByte? Int8N_Ranged { get; }
        IHasBeenSetItemGetter<SByte?> Int8N_Ranged_Property { get; }

        #endregion
        #region Int8
        SByte Int8 { get; }
        IHasBeenSetItemGetter<SByte> Int8_Property { get; }

        #endregion
        #region Int8_Ranged
        SByte Int8_Ranged { get; }
        IHasBeenSetItemGetter<SByte> Int8_Ranged_Property { get; }

        #endregion
        #region Unsafe
        bool Unsafe { get; }
        IHasBeenSetItemGetter<bool> Unsafe_Property { get; }

        #endregion
        #region UnsafeLoqui
        ObjectToRef UnsafeLoqui { get; }
        IHasBeenSetItemGetter<ObjectToRef> UnsafeLoqui_Property { get; }

        #endregion
        #region UnsafeNull
        ObjectToRef UnsafeNull { get; }
        IHasBeenSetItemGetter<ObjectToRef> UnsafeNull_Property { get; }

        #endregion
        #region P2IntN
        P2Int? P2IntN { get; }
        IHasBeenSetItemGetter<P2Int?> P2IntN_Property { get; }

        #endregion
        #region P2Int
        P2Int P2Int { get; }
        IHasBeenSetItemGetter<P2Int> P2Int_Property { get; }

        #endregion
        #region P3DoubleN
        P3Double? P3DoubleN { get; }
        IHasBeenSetItemGetter<P3Double?> P3DoubleN_Property { get; }

        #endregion
        #region P3Double
        P3Double P3Double { get; }
        IHasBeenSetItemGetter<P3Double> P3Double_Property { get; }

        #endregion
        #region P3IntN
        P3Int? P3IntN { get; }
        IHasBeenSetItemGetter<P3Int?> P3IntN_Property { get; }

        #endregion
        #region P3Int
        P3Int P3Int { get; }
        IHasBeenSetItemGetter<P3Int> P3Int_Property { get; }

        #endregion
        #region PercentN
        Percent? PercentN { get; }
        IHasBeenSetItemGetter<Percent?> PercentN_Property { get; }

        #endregion
        #region Percent
        Percent Percent { get; }
        IHasBeenSetItemGetter<Percent> Percent_Property { get; }

        #endregion
        #region RangeInt8N
        RangeInt8? RangeInt8N { get; }
        IHasBeenSetItemGetter<RangeInt8?> RangeInt8N_Property { get; }

        #endregion
        #region RangeInt8
        RangeInt8 RangeInt8 { get; }
        IHasBeenSetItemGetter<RangeInt8> RangeInt8_Property { get; }

        #endregion
        #region RangeInt16N
        RangeInt16? RangeInt16N { get; }
        IHasBeenSetItemGetter<RangeInt16?> RangeInt16N_Property { get; }

        #endregion
        #region RangeInt16
        RangeInt16 RangeInt16 { get; }
        IHasBeenSetItemGetter<RangeInt16> RangeInt16_Property { get; }

        #endregion
        #region RangeInt32N
        RangeInt32? RangeInt32N { get; }
        IHasBeenSetItemGetter<RangeInt32?> RangeInt32N_Property { get; }

        #endregion
        #region RangeInt32
        RangeInt32 RangeInt32 { get; }
        IHasBeenSetItemGetter<RangeInt32> RangeInt32_Property { get; }

        #endregion
        #region RangeInt64N
        RangeInt64? RangeInt64N { get; }
        IHasBeenSetItemGetter<RangeInt64?> RangeInt64N_Property { get; }

        #endregion
        #region RangeInt64
        RangeInt64 RangeInt64 { get; }
        IHasBeenSetItemGetter<RangeInt64> RangeInt64_Property { get; }

        #endregion
        #region RangeUInt8N
        RangeUInt8? RangeUInt8N { get; }
        IHasBeenSetItemGetter<RangeUInt8?> RangeUInt8N_Property { get; }

        #endregion
        #region RangeUInt8
        RangeUInt8 RangeUInt8 { get; }
        IHasBeenSetItemGetter<RangeUInt8> RangeUInt8_Property { get; }

        #endregion
        #region RangeUInt16N
        RangeUInt16? RangeUInt16N { get; }
        IHasBeenSetItemGetter<RangeUInt16?> RangeUInt16N_Property { get; }

        #endregion
        #region RangeUInt16
        RangeUInt16 RangeUInt16 { get; }
        IHasBeenSetItemGetter<RangeUInt16> RangeUInt16_Property { get; }

        #endregion
        #region RangeUInt32N
        RangeUInt32? RangeUInt32N { get; }
        IHasBeenSetItemGetter<RangeUInt32?> RangeUInt32N_Property { get; }

        #endregion
        #region RangeUInt32
        RangeUInt32 RangeUInt32 { get; }
        IHasBeenSetItemGetter<RangeUInt32> RangeUInt32_Property { get; }

        #endregion
        #region RangeUInt64N
        RangeUInt64? RangeUInt64N { get; }
        IHasBeenSetItemGetter<RangeUInt64?> RangeUInt64N_Property { get; }

        #endregion
        #region RangeUInt64
        RangeUInt64 RangeUInt64 { get; }
        IHasBeenSetItemGetter<RangeUInt64> RangeUInt64_Property { get; }

        #endregion
        #region String
        String String { get; }
        IHasBeenSetItemGetter<String> String_Property { get; }

        #endregion
        #region FilePath
        FilePath FilePath { get; }
        IHasBeenSetItemGetter<FilePath> FilePath_Property { get; }

        #endregion
        #region FilePathNull
        FilePath? FilePathNull { get; }
        IHasBeenSetItemGetter<FilePath?> FilePathNull_Property { get; }

        #endregion
        #region DirectoryPath
        DirectoryPath DirectoryPath { get; }
        IHasBeenSetItemGetter<DirectoryPath> DirectoryPath_Property { get; }

        #endregion
        #region DirectoryPathNull
        DirectoryPath? DirectoryPathNull { get; }
        IHasBeenSetItemGetter<DirectoryPath?> DirectoryPathNull_Property { get; }

        #endregion
        #region UDoubleN
        UDouble? UDoubleN { get; }
        IHasBeenSetItemGetter<UDouble?> UDoubleN_Property { get; }

        #endregion
        #region UDoubleN_Ranged
        UDouble? UDoubleN_Ranged { get; }
        IHasBeenSetItemGetter<UDouble?> UDoubleN_Ranged_Property { get; }

        #endregion
        #region UDouble
        UDouble UDouble { get; }
        IHasBeenSetItemGetter<UDouble> UDouble_Property { get; }

        #endregion
        #region UDouble_Ranged
        UDouble UDouble_Ranged { get; }
        IHasBeenSetItemGetter<UDouble> UDouble_Ranged_Property { get; }

        #endregion
        #region UInt16N
        UInt16? UInt16N { get; }
        IHasBeenSetItemGetter<UInt16?> UInt16N_Property { get; }

        #endregion
        #region UInt16N_Ranged
        UInt16? UInt16N_Ranged { get; }
        IHasBeenSetItemGetter<UInt16?> UInt16N_Ranged_Property { get; }

        #endregion
        #region UInt16
        UInt16 UInt16 { get; }
        IHasBeenSetItemGetter<UInt16> UInt16_Property { get; }

        #endregion
        #region UInt16_Ranged
        UInt16 UInt16_Ranged { get; }
        IHasBeenSetItemGetter<UInt16> UInt16_Ranged_Property { get; }

        #endregion
        #region UInt32N
        UInt32? UInt32N { get; }
        IHasBeenSetItemGetter<UInt32?> UInt32N_Property { get; }

        #endregion
        #region UInt32N_Ranged
        UInt32? UInt32N_Ranged { get; }
        IHasBeenSetItemGetter<UInt32?> UInt32N_Ranged_Property { get; }

        #endregion
        #region UInt32
        UInt32 UInt32 { get; }
        IHasBeenSetItemGetter<UInt32> UInt32_Property { get; }

        #endregion
        #region UInt32_Ranged
        UInt32 UInt32_Ranged { get; }
        IHasBeenSetItemGetter<UInt32> UInt32_Ranged_Property { get; }

        #endregion
        #region UInt64N
        UInt64? UInt64N { get; }
        IHasBeenSetItemGetter<UInt64?> UInt64N_Property { get; }

        #endregion
        #region UInt64N_Ranged
        UInt64? UInt64N_Ranged { get; }
        IHasBeenSetItemGetter<UInt64?> UInt64N_Ranged_Property { get; }

        #endregion
        #region UInt64
        UInt64 UInt64 { get; }
        IHasBeenSetItemGetter<UInt64> UInt64_Property { get; }

        #endregion
        #region UInt64_Ranged
        UInt64 UInt64_Ranged { get; }
        IHasBeenSetItemGetter<UInt64> UInt64_Ranged_Property { get; }

        #endregion
        #region UInt8N
        Byte? UInt8N { get; }
        IHasBeenSetItemGetter<Byte?> UInt8N_Property { get; }

        #endregion
        #region UInt8N_Ranged
        Byte? UInt8N_Ranged { get; }
        IHasBeenSetItemGetter<Byte?> UInt8N_Ranged_Property { get; }

        #endregion
        #region UInt8
        Byte UInt8 { get; }
        IHasBeenSetItemGetter<Byte> UInt8_Property { get; }

        #endregion
        #region UInt8_Ranged
        Byte UInt8_Ranged { get; }
        IHasBeenSetItemGetter<Byte> UInt8_Ranged_Property { get; }

        #endregion
        #region Enum
        TestEnum Enum { get; }
        IHasBeenSetItemGetter<TestEnum> Enum_Property { get; }

        #endregion
        #region EnumNull
        TestEnum? EnumNull { get; }
        IHasBeenSetItemGetter<TestEnum?> EnumNull_Property { get; }

        #endregion
        #region WildCard
        Object WildCard { get; }
        IHasBeenSetItemGetter<Object> WildCard_Property { get; }

        #endregion
        #region WildCardLoqui
        Object WildCardLoqui { get; }
        IHasBeenSetItemGetter<Object> WildCardLoqui_Property { get; }

        #endregion
        #region WildCardNull
        Object WildCardNull { get; }
        IHasBeenSetItemGetter<Object> WildCardNull_Property { get; }

        #endregion
        #region Ref
        ObjectToRef Ref { get; }
        IHasBeenSetItemGetter<ObjectToRef> Ref_Property { get; }

        #endregion
        #region Ref_NotNull
        ObjectToRef Ref_NotNull { get; }
        IHasBeenSetItemGetter<ObjectToRef> Ref_NotNull_Property { get; }

        #endregion
        #region Ref_Singleton
        ObjectToRef Ref_Singleton { get; }
        IHasBeenSetItemGetter<ObjectToRef> Ref_Singleton_Property { get; }

        #endregion
        #region RefGetter
        IObjectToRefGetter RefGetter { get; }
        IHasBeenSetItemGetter<IObjectToRefGetter> RefGetter_Property { get; }

        #endregion
        #region RefGetter_NotNull
        IObjectToRefGetter RefGetter_NotNull { get; }
        IHasBeenSetItemGetter<IObjectToRefGetter> RefGetter_NotNull_Property { get; }

        #endregion
        #region RefGetter_Singleton
        IObjectToRefGetter RefGetter_Singleton { get; }
        IHasBeenSetItemGetter<IObjectToRefGetter> RefGetter_Singleton_Property { get; }

        #endregion
        #region RefSetter
        IObjectToRef RefSetter { get; }
        IHasBeenSetItemGetter<IObjectToRef> RefSetter_Property { get; }

        #endregion
        #region RefSetter_NotNull
        IObjectToRef RefSetter_NotNull { get; }
        IHasBeenSetItemGetter<IObjectToRef> RefSetter_NotNull_Property { get; }

        #endregion
        #region RefSetter_Singleton
        IObjectToRef RefSetter_Singleton { get; }
        IHasBeenSetItemGetter<IObjectToRef> RefSetter_Singleton_Property { get; }

        #endregion
        #region List
        INotifyingListGetter<Boolean> List { get; }
        #endregion
        #region RefList
        INotifyingListGetter<ObjectToRef> RefList { get; }
        #endregion
        #region Dict
        INotifyingDictionaryGetter<String, Boolean> Dict { get; }
        #endregion
        #region RefDict
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> RefDict { get; }
        #endregion
        #region KeyRefDict
        INotifyingDictionaryGetter<ObjectToRef, Boolean> KeyRefDict { get; }
        #endregion
        #region ValRefDict
        INotifyingDictionaryGetter<String, ObjectToRef> ValRefDict { get; }
        #endregion
        #region DictKeyedValue
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> DictKeyedValue { get; }
        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Internals
{
    #region Field Index
    public enum TestObject_HasBeenSet_ReadOnly_FieldIndex
    {
        ByteArray = 0,
        ByteArrayNull = 1,
        ByteArrayNotNull = 2,
        ByteArraySingleton = 3,
        BoolN = 4,
        Bool = 5,
        CharN = 6,
        Char = 7,
        DateTimeNull = 8,
        DateTime = 9,
        DoubleN = 10,
        DoubleN_Ranged = 11,
        Double = 12,
        Double_Ranged = 13,
        FloatN = 14,
        FloatN_Ranged = 15,
        Float = 16,
        Float_Ranged = 17,
        Int16N = 18,
        Int16N_Ranged = 19,
        Int16 = 20,
        Int16_Ranged = 21,
        Int32N = 22,
        Int32N_Ranged = 23,
        Int32 = 24,
        Int32_Ranged = 25,
        Int64N = 26,
        Int64N_Ranged = 27,
        Int64 = 28,
        Int64_Ranged = 29,
        Int8N = 30,
        Int8N_Ranged = 31,
        Int8 = 32,
        Int8_Ranged = 33,
        Unsafe = 34,
        UnsafeLoqui = 35,
        UnsafeNull = 36,
        P2IntN = 37,
        P2Int = 38,
        P3DoubleN = 39,
        P3Double = 40,
        P3IntN = 41,
        P3Int = 42,
        PercentN = 43,
        Percent = 44,
        RangeInt8N = 45,
        RangeInt8 = 46,
        RangeInt16N = 47,
        RangeInt16 = 48,
        RangeInt32N = 49,
        RangeInt32 = 50,
        RangeInt64N = 51,
        RangeInt64 = 52,
        RangeUInt8N = 53,
        RangeUInt8 = 54,
        RangeUInt16N = 55,
        RangeUInt16 = 56,
        RangeUInt32N = 57,
        RangeUInt32 = 58,
        RangeUInt64N = 59,
        RangeUInt64 = 60,
        String = 61,
        FilePath = 62,
        FilePathNull = 63,
        DirectoryPath = 64,
        DirectoryPathNull = 65,
        UDoubleN = 66,
        UDoubleN_Ranged = 67,
        UDouble = 68,
        UDouble_Ranged = 69,
        UInt16N = 70,
        UInt16N_Ranged = 71,
        UInt16 = 72,
        UInt16_Ranged = 73,
        UInt32N = 74,
        UInt32N_Ranged = 75,
        UInt32 = 76,
        UInt32_Ranged = 77,
        UInt64N = 78,
        UInt64N_Ranged = 79,
        UInt64 = 80,
        UInt64_Ranged = 81,
        UInt8N = 82,
        UInt8N_Ranged = 83,
        UInt8 = 84,
        UInt8_Ranged = 85,
        Enum = 86,
        EnumNull = 87,
        WildCard = 88,
        WildCardLoqui = 89,
        WildCardNull = 90,
        Ref = 91,
        Ref_NotNull = 92,
        Ref_Singleton = 93,
        RefGetter = 94,
        RefGetter_NotNull = 95,
        RefGetter_Singleton = 96,
        RefSetter = 97,
        RefSetter_NotNull = 98,
        RefSetter_Singleton = 99,
        List = 100,
        RefList = 101,
        Dict = 102,
        RefDict = 103,
        KeyRefDict = 104,
        ValRefDict = 105,
        DictKeyedValue = 106,
    }
    #endregion

    #region Registration
    public class TestObject_HasBeenSet_ReadOnly_Registration : ILoquiRegistration
    {
        public static readonly TestObject_HasBeenSet_ReadOnly_Registration Instance = new TestObject_HasBeenSet_ReadOnly_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTests.ProtocolKey,
            msgID: 11,
            version: 0);

        public const string GUID = "e5fa5ce2-b193-42a6-9fc1-c58c7f06b8c4";

        public const ushort FieldCount = 107;

        public static readonly Type MaskType = typeof(TestObject_HasBeenSet_ReadOnly_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestObject_HasBeenSet_ReadOnly_ErrorMask);

        public static readonly Type ClassType = typeof(TestObject_HasBeenSet_ReadOnly);

        public static readonly Type GetterType = typeof(ITestObject_HasBeenSet_ReadOnlyGetter);

        public static readonly Type SetterType = typeof(ITestObject_HasBeenSet_ReadOnly);

        public static readonly Type CommonType = typeof(TestObject_HasBeenSet_ReadOnlyCommon);

        public const string FullName = "Loqui.Tests.TestObject_HasBeenSet_ReadOnly";

        public const string Name = "TestObject_HasBeenSet_ReadOnly";

        public const string Namespace = "Loqui.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BYTEARRAY":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray;
                case "BYTEARRAYNULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull;
                case "BYTEARRAYNOTNULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull;
                case "BYTEARRAYSINGLETON":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton;
                case "BOOLN":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN;
                case "BOOL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool;
                case "CHARN":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN;
                case "CHAR":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Char;
                case "DATETIMENULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull;
                case "DATETIME":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime;
                case "DOUBLEN":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN;
                case "DOUBLEN_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged;
                case "DOUBLE":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Double;
                case "DOUBLE_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged;
                case "FLOATN":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN;
                case "FLOATN_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged;
                case "FLOAT":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Float;
                case "FLOAT_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged;
                case "INT16N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N;
                case "INT16N_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged;
                case "INT16":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16;
                case "INT16_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged;
                case "INT32N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N;
                case "INT32N_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged;
                case "INT32":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32;
                case "INT32_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged;
                case "INT64N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N;
                case "INT64N_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged;
                case "INT64":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64;
                case "INT64_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged;
                case "INT8N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N;
                case "INT8N_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged;
                case "INT8":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8;
                case "INT8_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged;
                case "UNSAFE":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe;
                case "UNSAFELOQUI":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui;
                case "UNSAFENULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull;
                case "P2INTN":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN;
                case "P2INT":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int;
                case "P3DOUBLEN":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN;
                case "P3DOUBLE":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double;
                case "P3INTN":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN;
                case "P3INT":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int;
                case "PERCENTN":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN;
                case "PERCENT":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent;
                case "RANGEINT8N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N;
                case "RANGEINT8":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8;
                case "RANGEINT16N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N;
                case "RANGEINT16":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16;
                case "RANGEINT32N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N;
                case "RANGEINT32":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32;
                case "RANGEINT64N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N;
                case "RANGEINT64":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64;
                case "RANGEUINT8N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N;
                case "RANGEUINT8":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8;
                case "RANGEUINT16N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N;
                case "RANGEUINT16":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16;
                case "RANGEUINT32N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N;
                case "RANGEUINT32":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32;
                case "RANGEUINT64N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N;
                case "RANGEUINT64":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64;
                case "STRING":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.String;
                case "FILEPATH":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath;
                case "FILEPATHNULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull;
                case "DIRECTORYPATH":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath;
                case "DIRECTORYPATHNULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull;
                case "UDOUBLEN":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN;
                case "UDOUBLEN_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged;
                case "UDOUBLE":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble;
                case "UDOUBLE_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged;
                case "UINT16N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N;
                case "UINT16N_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged;
                case "UINT16":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16;
                case "UINT16_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged;
                case "UINT32N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N;
                case "UINT32N_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged;
                case "UINT32":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32;
                case "UINT32_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged;
                case "UINT64N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N;
                case "UINT64N_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged;
                case "UINT64":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64;
                case "UINT64_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged;
                case "UINT8N":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N;
                case "UINT8N_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged;
                case "UINT8":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8;
                case "UINT8_RANGED":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged;
                case "ENUM":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum;
                case "ENUMNULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull;
                case "WILDCARD":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard;
                case "WILDCARDLOQUI":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui;
                case "WILDCARDNULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull;
                case "REF":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref;
                case "REF_NOTNULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull;
                case "REF_SINGLETON":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton;
                case "REFGETTER":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter;
                case "REFGETTER_NOTNULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull;
                case "REFGETTER_SINGLETON":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton;
                case "REFSETTER":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter;
                case "REFSETTER_NOTNULL":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull;
                case "REFSETTER_SINGLETON":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton;
                case "LIST":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.List;
                case "REFLIST":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList;
                case "DICT":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict;
                case "REFDICT":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict;
                case "KEYREFDICT":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict;
                case "VALREFDICT":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict;
                case "DICTKEYEDVALUE":
                    return (ushort)TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    return true;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    return true;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    return true;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    return "ByteArray";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    return "ByteArrayNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    return "ByteArrayNotNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    return "ByteArraySingleton";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    return "BoolN";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    return "Bool";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    return "CharN";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    return "Char";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    return "DateTimeNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    return "DateTime";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    return "DoubleN";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    return "DoubleN_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    return "Double";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    return "Double_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    return "FloatN";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    return "FloatN_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    return "Float";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    return "Float_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    return "Int16N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    return "Int16N_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    return "Int16";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    return "Int16_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    return "Int32N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    return "Int32N_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    return "Int32";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    return "Int32_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    return "Int64N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    return "Int64N_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    return "Int64";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    return "Int64_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    return "Int8N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    return "Int8N_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    return "Int8";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    return "Int8_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    return "Unsafe";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    return "UnsafeLoqui";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    return "UnsafeNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    return "P2IntN";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    return "P2Int";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    return "P3DoubleN";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    return "P3Double";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    return "P3IntN";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    return "P3Int";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    return "PercentN";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    return "Percent";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    return "RangeInt8N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    return "RangeInt8";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    return "RangeInt16N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    return "RangeInt16";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    return "RangeInt32N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    return "RangeInt32";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    return "RangeInt64N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    return "RangeInt64";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    return "RangeUInt8N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    return "RangeUInt8";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    return "RangeUInt16N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    return "RangeUInt16";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    return "RangeUInt32N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    return "RangeUInt32";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    return "RangeUInt64N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    return "RangeUInt64";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    return "String";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    return "FilePath";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    return "FilePathNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    return "DirectoryPath";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    return "DirectoryPathNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    return "UDoubleN";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    return "UDoubleN_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    return "UDouble";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    return "UDouble_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    return "UInt16N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    return "UInt16N_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    return "UInt16";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    return "UInt16_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    return "UInt32N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    return "UInt32N_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    return "UInt32";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    return "UInt32_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    return "UInt64N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    return "UInt64N_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    return "UInt64";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    return "UInt64_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    return "UInt8N";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    return "UInt8N_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    return "UInt8";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    return "UInt8_Ranged";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    return "Enum";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    return "EnumNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    return "WildCard";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    return "WildCardLoqui";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    return "WildCardNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    return "Ref";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    return "Ref_NotNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    return "Ref_Singleton";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    return "RefGetter";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    return "RefGetter_NotNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    return "RefGetter_Singleton";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    return "RefSetter";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    return "RefSetter_NotNull";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    return "RefSetter_Singleton";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    return "List";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    return "RefList";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    return "Dict";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    return "RefDict";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    return "KeyRefDict";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    return "ValRefDict";
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    return "DictKeyedValue";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    return typeof(Byte[]);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    return typeof(Byte[]);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    return typeof(Byte[]);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    return typeof(Byte[]);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    return typeof(Boolean?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    return typeof(Boolean);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    return typeof(Char?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    return typeof(Char);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    return typeof(DateTime?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    return typeof(DateTime);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    return typeof(Double?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    return typeof(Double?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    return typeof(Double);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    return typeof(Double);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    return typeof(Single?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    return typeof(Single?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    return typeof(Single);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    return typeof(Single);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    return typeof(Int16?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    return typeof(Int16?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    return typeof(Int16);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    return typeof(Int16);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    return typeof(Int32?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    return typeof(Int32?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    return typeof(Int32);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    return typeof(Int32);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    return typeof(Int64?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    return typeof(Int64?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    return typeof(Int64);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    return typeof(Int64);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    return typeof(SByte?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    return typeof(SByte?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    return typeof(SByte);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    return typeof(SByte);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    return typeof(bool);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    return typeof(ObjectToRef);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    return typeof(ObjectToRef);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    return typeof(P2Int?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    return typeof(P2Int);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    return typeof(P3Double?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    return typeof(P3Double);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    return typeof(P3Int?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    return typeof(P3Int);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    return typeof(Percent?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    return typeof(Percent);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    return typeof(RangeInt8?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    return typeof(RangeInt8);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    return typeof(RangeInt16?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    return typeof(RangeInt16);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    return typeof(RangeInt32?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    return typeof(RangeInt32);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    return typeof(RangeInt64?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    return typeof(RangeInt64);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    return typeof(RangeUInt8?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    return typeof(RangeUInt8);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    return typeof(RangeUInt16?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    return typeof(RangeUInt16);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    return typeof(RangeUInt32?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    return typeof(RangeUInt32);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    return typeof(RangeUInt64?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    return typeof(RangeUInt64);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    return typeof(String);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    return typeof(FilePath);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    return typeof(FilePath?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    return typeof(DirectoryPath);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    return typeof(DirectoryPath?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    return typeof(UDouble?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    return typeof(UDouble?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    return typeof(UDouble);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    return typeof(UDouble);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    return typeof(UInt16?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    return typeof(UInt16?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    return typeof(UInt16);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    return typeof(UInt16);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    return typeof(UInt32?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    return typeof(UInt32?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    return typeof(UInt32);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    return typeof(UInt32);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    return typeof(UInt64?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    return typeof(UInt64?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    return typeof(UInt64);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    return typeof(UInt64);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    return typeof(Byte?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    return typeof(Byte?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    return typeof(Byte);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    return typeof(Byte);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    return typeof(TestEnum);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    return typeof(TestEnum?);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    return typeof(Object);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    return typeof(Object);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    return typeof(Object);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    return typeof(ObjectToRef);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    return typeof(ObjectToRef);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    return typeof(ObjectToRef);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    return typeof(IObjectToRefGetter);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    return typeof(IObjectToRefGetter);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    return typeof(IObjectToRefGetter);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    return typeof(IObjectToRef);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    return typeof(IObjectToRef);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    return typeof(IObjectToRef);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    return typeof(NotifyingList<Boolean>);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    return typeof(NotifyingList<ObjectToRef>);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    return typeof(NotifyingDictionary<String, Boolean>);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, ObjectToRef>);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, Boolean>);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    return typeof(NotifyingDictionary<String, ObjectToRef>);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    return typeof(NotifyingDictionary<Int32, ObjectToRef>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class TestObject_HasBeenSet_ReadOnlyCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITestObject_HasBeenSet_ReadOnly item,
            ITestObject_HasBeenSet_ReadOnlyGetter rhs,
            TestObject_HasBeenSet_ReadOnly_CopyMask copyMask = null,
            ITestObject_HasBeenSet_ReadOnlyGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_HasBeenSet_ReadOnlyCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITestObject_HasBeenSet_ReadOnly item,
            ITestObject_HasBeenSet_ReadOnlyGetter rhs,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
            TestObject_HasBeenSet_ReadOnly_CopyMask copyMask = null,
            ITestObject_HasBeenSet_ReadOnlyGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_HasBeenSet_ReadOnlyCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITestObject_HasBeenSet_ReadOnly item,
            ITestObject_HasBeenSet_ReadOnlyGetter rhs,
            ITestObject_HasBeenSet_ReadOnlyGetter def,
            bool doErrorMask,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
            TestObject_HasBeenSet_ReadOnly_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            TestObject_HasBeenSet_ReadOnly_ErrorMask retErrorMask = null;
            Func<TestObject_HasBeenSet_ReadOnly_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestObject_HasBeenSet_ReadOnly_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ITestObject_HasBeenSet_ReadOnly item,
            ITestObject_HasBeenSet_ReadOnlyGetter rhs,
            ITestObject_HasBeenSet_ReadOnlyGetter def,
            bool doErrorMask,
            Func<TestObject_HasBeenSet_ReadOnly_ErrorMask> errorMask,
            TestObject_HasBeenSet_ReadOnly_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestObject_HasBeenSet_ReadOnly obj,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestObject_HasBeenSet_ReadOnly obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestObject_HasBeenSet_ReadOnly obj)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    return obj.ByteArray_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    return obj.ByteArrayNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    return obj.ByteArrayNotNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    return obj.ByteArraySingleton_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    return obj.BoolN_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    return obj.Bool_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    return obj.CharN_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    return obj.Char_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    return obj.DateTimeNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    return obj.DateTime_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    return obj.DoubleN_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    return obj.DoubleN_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    return obj.Double_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    return obj.Double_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    return obj.FloatN_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    return obj.FloatN_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    return obj.Float_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    return obj.Float_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    return obj.Int16N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    return obj.Int16N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    return obj.Int16_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    return obj.Int16_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    return obj.Int32N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    return obj.Int32N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    return obj.Int32_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    return obj.Int32_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    return obj.Int64N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    return obj.Int64N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    return obj.Int64_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    return obj.Int64_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    return obj.Int8N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    return obj.Int8N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    return obj.Int8_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    return obj.Int8_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    return obj.Unsafe_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    return obj.UnsafeLoqui_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    return obj.UnsafeNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    return obj.P2IntN_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    return obj.P2Int_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    return obj.P3Double_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    return obj.P3IntN_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    return obj.P3Int_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    return obj.PercentN_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    return obj.Percent_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    return obj.RangeInt8N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    return obj.RangeInt8_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    return obj.RangeInt16N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    return obj.RangeInt16_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    return obj.RangeInt32N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    return obj.RangeInt32_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    return obj.RangeInt64N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    return obj.RangeInt64_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    return obj.RangeUInt8N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    return obj.RangeUInt8_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    return obj.RangeUInt16N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    return obj.RangeUInt16_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    return obj.RangeUInt32N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    return obj.RangeUInt32_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    return obj.RangeUInt64N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    return obj.RangeUInt64_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    return obj.String_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    return obj.FilePath_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    return obj.FilePathNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    return obj.DirectoryPath_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    return obj.DirectoryPathNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    return obj.UDoubleN_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    return obj.UDoubleN_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    return obj.UDouble_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    return obj.UDouble_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    return obj.UInt16N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    return obj.UInt16N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    return obj.UInt16_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    return obj.UInt16_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    return obj.UInt32N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    return obj.UInt32N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    return obj.UInt32_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    return obj.UInt32_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    return obj.UInt64N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    return obj.UInt64N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    return obj.UInt64_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    return obj.UInt64_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    return obj.UInt8N_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    return obj.UInt8N_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    return obj.UInt8_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    return obj.UInt8_Ranged_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    return obj.Enum_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    return obj.EnumNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    return obj.WildCard_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    return obj.WildCardLoqui_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    return obj.WildCardNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    return obj.Ref_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    return obj.Ref_NotNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    return obj.Ref_Singleton_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    return obj.RefGetter_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    return obj.RefGetter_NotNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    return obj.RefGetter_Singleton_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    return obj.RefSetter_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    return obj.RefSetter_NotNull_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    return obj.RefSetter_Singleton_Property.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    return obj.List.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    return obj.RefList.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    return obj.Dict.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    return obj.RefDict.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    return obj.KeyRefDict.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    return obj.ValRefDict.HasBeenSet;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestObject_HasBeenSet_ReadOnlyGetter obj)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    return obj.ByteArray;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    return obj.ByteArrayNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    return obj.ByteArrayNotNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    return obj.ByteArraySingleton;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    return obj.BoolN;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    return obj.Bool;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    return obj.CharN;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    return obj.Char;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    return obj.DateTimeNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    return obj.DateTime;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    return obj.DoubleN;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    return obj.DoubleN_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    return obj.Double;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    return obj.Double_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    return obj.FloatN;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    return obj.FloatN_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    return obj.Float;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    return obj.Float_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    return obj.Int16N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    return obj.Int16N_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    return obj.Int16;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    return obj.Int16_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    return obj.Int32N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    return obj.Int32N_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    return obj.Int32;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    return obj.Int32_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    return obj.Int64N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    return obj.Int64N_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    return obj.Int64;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    return obj.Int64_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    return obj.Int8N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    return obj.Int8N_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    return obj.Int8;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    return obj.Int8_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    return obj.Unsafe;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    return obj.UnsafeLoqui;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    return obj.UnsafeNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    return obj.P2IntN;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    return obj.P2Int;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    return obj.P3Double;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    return obj.P3IntN;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    return obj.P3Int;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    return obj.PercentN;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    return obj.Percent;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    return obj.RangeInt8N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    return obj.RangeInt8;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    return obj.RangeInt16N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    return obj.RangeInt16;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    return obj.RangeInt32N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    return obj.RangeInt32;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    return obj.RangeInt64N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    return obj.RangeInt64;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    return obj.RangeUInt8N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    return obj.RangeUInt8;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    return obj.RangeUInt16N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    return obj.RangeUInt16;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    return obj.RangeUInt32N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    return obj.RangeUInt32;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    return obj.RangeUInt64N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    return obj.RangeUInt64;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    return obj.String;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    return obj.FilePath;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    return obj.FilePathNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    return obj.DirectoryPath;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    return obj.DirectoryPathNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    return obj.UDoubleN;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    return obj.UDoubleN_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    return obj.UDouble;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    return obj.UDouble_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    return obj.UInt16N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    return obj.UInt16N_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    return obj.UInt16;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    return obj.UInt16_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    return obj.UInt32N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    return obj.UInt32N_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    return obj.UInt32;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    return obj.UInt32_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    return obj.UInt64N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    return obj.UInt64N_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    return obj.UInt64;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    return obj.UInt64_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    return obj.UInt8N;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    return obj.UInt8N_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    return obj.UInt8;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    return obj.UInt8_Ranged;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    return obj.Enum;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    return obj.EnumNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    return obj.WildCard;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    return obj.WildCardLoqui;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    return obj.WildCardNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    return obj.Ref;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    return obj.Ref_NotNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    return obj.Ref_Singleton;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    return obj.RefGetter;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    return obj.RefGetter_NotNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    return obj.RefGetter_Singleton;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    return obj.RefSetter;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    return obj.RefSetter_NotNull;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    return obj.RefSetter_Singleton;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    return obj.List;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    return obj.RefList;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    return obj.Dict;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    return obj.RefDict;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    return obj.KeyRefDict;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    return obj.ValRefDict;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITestObject_HasBeenSet_ReadOnly item,
            NotifyingUnsetParameters? cmds = null)
        {
        }

        public static TestObject_HasBeenSet_ReadOnly_Mask<bool> GetEqualsMask(
            this ITestObject_HasBeenSet_ReadOnlyGetter item,
            ITestObject_HasBeenSet_ReadOnlyGetter rhs)
        {
            var ret = new TestObject_HasBeenSet_ReadOnly_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITestObject_HasBeenSet_ReadOnlyGetter item,
            ITestObject_HasBeenSet_ReadOnlyGetter rhs,
            TestObject_HasBeenSet_ReadOnly_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.ByteArray = item.ByteArray_Property.Equals(rhs.ByteArray_Property, (l, r) => l.EqualsFast(r));
            ret.ByteArrayNull = item.ByteArrayNull_Property.Equals(rhs.ByteArrayNull_Property, (l, r) => l.EqualsFast(r));
            ret.ByteArrayNotNull = item.ByteArrayNotNull_Property.Equals(rhs.ByteArrayNotNull_Property, (l, r) => l.EqualsFast(r));
            ret.ByteArraySingleton = item.ByteArraySingleton_Property.Equals(rhs.ByteArraySingleton_Property, (l, r) => l.EqualsFast(r));
            ret.BoolN = item.BoolN_Property.Equals(rhs.BoolN_Property, (l, r) => l == r);
            ret.Bool = item.Bool_Property.Equals(rhs.Bool_Property, (l, r) => l == r);
            ret.CharN = item.CharN_Property.Equals(rhs.CharN_Property, (l, r) => l == r);
            ret.Char = item.Char_Property.Equals(rhs.Char_Property, (l, r) => l == r);
            ret.DateTimeNull = item.DateTimeNull_Property.Equals(rhs.DateTimeNull_Property, (l, r) => l == r);
            ret.DateTime = item.DateTime_Property.Equals(rhs.DateTime_Property, (l, r) => l == r);
            ret.DoubleN = item.DoubleN_Property.Equals(rhs.DoubleN_Property, (l, r) => l == r);
            ret.DoubleN_Ranged = item.DoubleN_Ranged_Property.Equals(rhs.DoubleN_Ranged_Property, (l, r) => l == r);
            ret.Double = item.Double_Property.Equals(rhs.Double_Property, (l, r) => l == r);
            ret.Double_Ranged = item.Double_Ranged_Property.Equals(rhs.Double_Ranged_Property, (l, r) => l == r);
            ret.FloatN = item.FloatN_Property.Equals(rhs.FloatN_Property, (l, r) => l == r);
            ret.FloatN_Ranged = item.FloatN_Ranged_Property.Equals(rhs.FloatN_Ranged_Property, (l, r) => l == r);
            ret.Float = item.Float_Property.Equals(rhs.Float_Property, (l, r) => l == r);
            ret.Float_Ranged = item.Float_Ranged_Property.Equals(rhs.Float_Ranged_Property, (l, r) => l == r);
            ret.Int16N = item.Int16N_Property.Equals(rhs.Int16N_Property, (l, r) => l == r);
            ret.Int16N_Ranged = item.Int16N_Ranged_Property.Equals(rhs.Int16N_Ranged_Property, (l, r) => l == r);
            ret.Int16 = item.Int16_Property.Equals(rhs.Int16_Property, (l, r) => l == r);
            ret.Int16_Ranged = item.Int16_Ranged_Property.Equals(rhs.Int16_Ranged_Property, (l, r) => l == r);
            ret.Int32N = item.Int32N_Property.Equals(rhs.Int32N_Property, (l, r) => l == r);
            ret.Int32N_Ranged = item.Int32N_Ranged_Property.Equals(rhs.Int32N_Ranged_Property, (l, r) => l == r);
            ret.Int32 = item.Int32_Property.Equals(rhs.Int32_Property, (l, r) => l == r);
            ret.Int32_Ranged = item.Int32_Ranged_Property.Equals(rhs.Int32_Ranged_Property, (l, r) => l == r);
            ret.Int64N = item.Int64N_Property.Equals(rhs.Int64N_Property, (l, r) => l == r);
            ret.Int64N_Ranged = item.Int64N_Ranged_Property.Equals(rhs.Int64N_Ranged_Property, (l, r) => l == r);
            ret.Int64 = item.Int64_Property.Equals(rhs.Int64_Property, (l, r) => l == r);
            ret.Int64_Ranged = item.Int64_Ranged_Property.Equals(rhs.Int64_Ranged_Property, (l, r) => l == r);
            ret.Int8N = item.Int8N_Property.Equals(rhs.Int8N_Property, (l, r) => l == r);
            ret.Int8N_Ranged = item.Int8N_Ranged_Property.Equals(rhs.Int8N_Ranged_Property, (l, r) => l == r);
            ret.Int8 = item.Int8_Property.Equals(rhs.Int8_Property, (l, r) => l == r);
            ret.Int8_Ranged = item.Int8_Ranged_Property.Equals(rhs.Int8_Ranged_Property, (l, r) => l == r);
            ret.Unsafe = item.Unsafe_Property.Equals(rhs.Unsafe_Property, (l, r) => object.Equals(l, r));
            ret.UnsafeLoqui = item.UnsafeLoqui_Property.Equals(rhs.UnsafeLoqui_Property, (l, r) => object.Equals(l, r));
            ret.UnsafeNull = item.UnsafeNull_Property.Equals(rhs.UnsafeNull_Property, (l, r) => object.Equals(l, r));
            ret.P2IntN = item.P2IntN_Property.Equals(rhs.P2IntN_Property, (l, r) => l == r);
            ret.P2Int = item.P2Int_Property.Equals(rhs.P2Int_Property, (l, r) => l == r);
            ret.P3DoubleN = item.P3DoubleN_Property.Equals(rhs.P3DoubleN_Property, (l, r) => l == r);
            ret.P3Double = item.P3Double_Property.Equals(rhs.P3Double_Property, (l, r) => l == r);
            ret.P3IntN = item.P3IntN_Property.Equals(rhs.P3IntN_Property, (l, r) => l == r);
            ret.P3Int = item.P3Int_Property.Equals(rhs.P3Int_Property, (l, r) => l == r);
            ret.PercentN = item.PercentN_Property.Equals(rhs.PercentN_Property, (l, r) => l == r);
            ret.Percent = item.Percent_Property.Equals(rhs.Percent_Property, (l, r) => l == r);
            ret.RangeInt8N = item.RangeInt8N_Property.Equals(rhs.RangeInt8N_Property, (l, r) => l == r);
            ret.RangeInt8 = item.RangeInt8_Property.Equals(rhs.RangeInt8_Property, (l, r) => l == r);
            ret.RangeInt16N = item.RangeInt16N_Property.Equals(rhs.RangeInt16N_Property, (l, r) => l == r);
            ret.RangeInt16 = item.RangeInt16_Property.Equals(rhs.RangeInt16_Property, (l, r) => l == r);
            ret.RangeInt32N = item.RangeInt32N_Property.Equals(rhs.RangeInt32N_Property, (l, r) => l == r);
            ret.RangeInt32 = item.RangeInt32_Property.Equals(rhs.RangeInt32_Property, (l, r) => l == r);
            ret.RangeInt64N = item.RangeInt64N_Property.Equals(rhs.RangeInt64N_Property, (l, r) => l == r);
            ret.RangeInt64 = item.RangeInt64_Property.Equals(rhs.RangeInt64_Property, (l, r) => l == r);
            ret.RangeUInt8N = item.RangeUInt8N_Property.Equals(rhs.RangeUInt8N_Property, (l, r) => l == r);
            ret.RangeUInt8 = item.RangeUInt8_Property.Equals(rhs.RangeUInt8_Property, (l, r) => l == r);
            ret.RangeUInt16N = item.RangeUInt16N_Property.Equals(rhs.RangeUInt16N_Property, (l, r) => l == r);
            ret.RangeUInt16 = item.RangeUInt16_Property.Equals(rhs.RangeUInt16_Property, (l, r) => l == r);
            ret.RangeUInt32N = item.RangeUInt32N_Property.Equals(rhs.RangeUInt32N_Property, (l, r) => l == r);
            ret.RangeUInt32 = item.RangeUInt32_Property.Equals(rhs.RangeUInt32_Property, (l, r) => l == r);
            ret.RangeUInt64N = item.RangeUInt64N_Property.Equals(rhs.RangeUInt64N_Property, (l, r) => l == r);
            ret.RangeUInt64 = item.RangeUInt64_Property.Equals(rhs.RangeUInt64_Property, (l, r) => l == r);
            ret.String = item.String_Property.Equals(rhs.String_Property, (l, r) => object.Equals(l, r));
            ret.FilePath = item.FilePath_Property.Equals(rhs.FilePath_Property, (l, r) => object.Equals(l, r));
            ret.FilePathNull = item.FilePathNull_Property.Equals(rhs.FilePathNull_Property, (l, r) => object.Equals(l, r));
            ret.DirectoryPath = item.DirectoryPath_Property.Equals(rhs.DirectoryPath_Property, (l, r) => object.Equals(l, r));
            ret.DirectoryPathNull = item.DirectoryPathNull_Property.Equals(rhs.DirectoryPathNull_Property, (l, r) => object.Equals(l, r));
            ret.UDoubleN = item.UDoubleN_Property.Equals(rhs.UDoubleN_Property, (l, r) => l == r);
            ret.UDoubleN_Ranged = item.UDoubleN_Ranged_Property.Equals(rhs.UDoubleN_Ranged_Property, (l, r) => l == r);
            ret.UDouble = item.UDouble_Property.Equals(rhs.UDouble_Property, (l, r) => l == r);
            ret.UDouble_Ranged = item.UDouble_Ranged_Property.Equals(rhs.UDouble_Ranged_Property, (l, r) => l == r);
            ret.UInt16N = item.UInt16N_Property.Equals(rhs.UInt16N_Property, (l, r) => l == r);
            ret.UInt16N_Ranged = item.UInt16N_Ranged_Property.Equals(rhs.UInt16N_Ranged_Property, (l, r) => l == r);
            ret.UInt16 = item.UInt16_Property.Equals(rhs.UInt16_Property, (l, r) => l == r);
            ret.UInt16_Ranged = item.UInt16_Ranged_Property.Equals(rhs.UInt16_Ranged_Property, (l, r) => l == r);
            ret.UInt32N = item.UInt32N_Property.Equals(rhs.UInt32N_Property, (l, r) => l == r);
            ret.UInt32N_Ranged = item.UInt32N_Ranged_Property.Equals(rhs.UInt32N_Ranged_Property, (l, r) => l == r);
            ret.UInt32 = item.UInt32_Property.Equals(rhs.UInt32_Property, (l, r) => l == r);
            ret.UInt32_Ranged = item.UInt32_Ranged_Property.Equals(rhs.UInt32_Ranged_Property, (l, r) => l == r);
            ret.UInt64N = item.UInt64N_Property.Equals(rhs.UInt64N_Property, (l, r) => l == r);
            ret.UInt64N_Ranged = item.UInt64N_Ranged_Property.Equals(rhs.UInt64N_Ranged_Property, (l, r) => l == r);
            ret.UInt64 = item.UInt64_Property.Equals(rhs.UInt64_Property, (l, r) => l == r);
            ret.UInt64_Ranged = item.UInt64_Ranged_Property.Equals(rhs.UInt64_Ranged_Property, (l, r) => l == r);
            ret.UInt8N = item.UInt8N_Property.Equals(rhs.UInt8N_Property, (l, r) => l == r);
            ret.UInt8N_Ranged = item.UInt8N_Ranged_Property.Equals(rhs.UInt8N_Ranged_Property, (l, r) => l == r);
            ret.UInt8 = item.UInt8_Property.Equals(rhs.UInt8_Property, (l, r) => l == r);
            ret.UInt8_Ranged = item.UInt8_Ranged_Property.Equals(rhs.UInt8_Ranged_Property, (l, r) => l == r);
            ret.Enum = item.Enum_Property.Equals(rhs.Enum_Property, (l, r) => l == r);
            ret.EnumNull = item.EnumNull_Property.Equals(rhs.EnumNull_Property, (l, r) => l == r);
            ret.WildCard = item.WildCard_Property.Equals(rhs.WildCard_Property, (l, r) => object.Equals(l, r));
            ret.WildCardLoqui = item.WildCardLoqui_Property.Equals(rhs.WildCardLoqui_Property, (l, r) => object.Equals(l, r));
            ret.WildCardNull = item.WildCardNull_Property.Equals(rhs.WildCardNull_Property, (l, r) => object.Equals(l, r));
            ret.Ref = item.Ref_Property.LoquiEqualsHelper(rhs.Ref_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Ref_NotNull = item.Ref_NotNull_Property.LoquiEqualsHelper(rhs.Ref_NotNull_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Ref_Singleton = item.Ref_Singleton_Property.LoquiEqualsHelper(rhs.Ref_Singleton_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefGetter = item.RefGetter_Property.LoquiEqualsHelper(rhs.RefGetter_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefGetter_NotNull = item.RefGetter_NotNull_Property.LoquiEqualsHelper(rhs.RefGetter_NotNull_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefGetter_Singleton = item.RefGetter_Singleton_Property.LoquiEqualsHelper(rhs.RefGetter_Singleton_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefSetter = item.RefSetter_Property.LoquiEqualsHelper(rhs.RefSetter_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefSetter_NotNull = item.RefSetter_NotNull_Property.LoquiEqualsHelper(rhs.RefSetter_NotNull_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefSetter_Singleton = item.RefSetter_Singleton_Property.LoquiEqualsHelper(rhs.RefSetter_Singleton_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            if (item.List.HasBeenSet == rhs.List.HasBeenSet)
            {
                if (item.List.HasBeenSet)
                {
                    ret.List = new MaskItem<bool, IEnumerable<bool>>();
                    ret.List.Specific = item.List.SelectAgainst<Boolean, bool>(rhs.List, ((l, r) => object.Equals(l, r)), out ret.List.Overall);
                    ret.List.Overall = ret.List.Overall && ret.List.Specific.All((b) => b);
                }
                else
                {
                    ret.List = new MaskItem<bool, IEnumerable<bool>>();
                    ret.List.Overall = true;
                }
            }
            else
            {
                ret.List = new MaskItem<bool, IEnumerable<bool>>();
                ret.List.Overall = false;
            }
            if (item.RefList.HasBeenSet == rhs.RefList.HasBeenSet)
            {
                if (item.RefList.HasBeenSet)
                {
                    ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                    ret.RefList.Specific = item.RefList.SelectAgainst<ObjectToRef, MaskItem<bool, ObjectToRef_Mask<bool>>>(rhs.RefList, ((l, r) =>
                    {
                        MaskItem<bool, ObjectToRef_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.RefList.Overall);
                    ret.RefList.Overall = ret.RefList.Overall && ret.RefList.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                    ret.RefList.Overall = true;
                }
            }
            else
            {
                ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                ret.RefList.Overall = false;
            }
            if (item.Dict.HasBeenSet == rhs.Dict.HasBeenSet)
            {
                if (item.Dict.HasBeenSet)
                {
                    ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>();
                    ret.Dict.Specific = item.Dict.SelectAgainst<KeyValuePair<String, Boolean>, KeyValuePair<bool, bool>>(rhs.Dict, ((l, r) => new KeyValuePair<bool, bool>(object.Equals(l.Key, r.Key), object.Equals(l.Value, r.Value))), out ret.Dict.Overall);
                    ret.Dict.Overall = ret.Dict.Overall && ret.Dict.Specific.All((b) => b.Key && b.Value);
                }
                else
                {
                    ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>();
                    ret.Dict.Overall = true;
                }
            }
            else
            {
                ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>();
                ret.Dict.Overall = false;
            }
            if (item.RefDict.HasBeenSet == rhs.RefDict.HasBeenSet)
            {
                if (item.RefDict.HasBeenSet)
                {
                    ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                    ret.RefDict.Specific = item.RefDict.SelectAgainst<KeyValuePair<ObjectToRef, ObjectToRef>, KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>(rhs.RefDict, ((l, r) =>
                    {
                        MaskItem<bool, ObjectToRef_Mask<bool>> keyItemRet;
                        MaskItem<bool, ObjectToRef_Mask<bool>> valItemRet;
                        keyItemRet = l.Key.LoquiEqualsHelper(r.Key, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        valItemRet = l.Value.LoquiEqualsHelper(r.Value, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>(keyItemRet, valItemRet);
                    }
                    ), out ret.RefDict.Overall);
                    ret.RefDict.Overall = ret.RefDict.Overall && ret.RefDict.Specific.All((b) => b.Key.Overall && b.Value.Overall );
                }
                else
                {
                    ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                    ret.RefDict.Overall = true;
                }
            }
            else
            {
                ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                ret.RefDict.Overall = false;
            }
            if (item.KeyRefDict.HasBeenSet == rhs.KeyRefDict.HasBeenSet)
            {
                if (item.KeyRefDict.HasBeenSet)
                {
                    ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>();
                    ret.KeyRefDict.Specific = item.KeyRefDict.SelectAgainst<KeyValuePair<ObjectToRef, Boolean>, KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>(rhs.KeyRefDict, ((l, r) =>
                    {
                        MaskItem<bool, ObjectToRef_Mask<bool>> keyItemRet;
                        bool valItemRet = object.Equals(l.Value, r.Value);
                        keyItemRet = l.Key.LoquiEqualsHelper(r.Key, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>(keyItemRet, valItemRet);
                    }
                    ), out ret.KeyRefDict.Overall);
                    ret.KeyRefDict.Overall = ret.KeyRefDict.Overall && ret.KeyRefDict.Specific.All((b) => b.Key.Overall && b.Value);
                }
                else
                {
                    ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>();
                    ret.KeyRefDict.Overall = true;
                }
            }
            else
            {
                ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>();
                ret.KeyRefDict.Overall = false;
            }
            if (item.ValRefDict.HasBeenSet == rhs.ValRefDict.HasBeenSet)
            {
                if (item.ValRefDict.HasBeenSet)
                {
                    ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                    ret.ValRefDict.Specific = item.ValRefDict.SelectAgainst<KeyValuePair<String, ObjectToRef>, KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>(rhs.ValRefDict, ((l, r) =>
                    {
                        bool keyItemRet = object.Equals(l.Key, r.Key);
                        MaskItem<bool, ObjectToRef_Mask<bool>> valItemRet;
                        valItemRet = l.Value.LoquiEqualsHelper(r.Value, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return new KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>(keyItemRet, valItemRet);
                    }
                    ), out ret.ValRefDict.Overall);
                    ret.ValRefDict.Overall = ret.ValRefDict.Overall && ret.ValRefDict.Specific.All((b) => b.Key && b.Value.Overall);
                }
                else
                {
                    ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                    ret.ValRefDict.Overall = true;
                }
            }
            else
            {
                ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                ret.ValRefDict.Overall = false;
            }
            if (item.DictKeyedValue.HasBeenSet == rhs.DictKeyedValue.HasBeenSet)
            {
                if (item.DictKeyedValue.HasBeenSet)
                {
                    ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                    ret.DictKeyedValue.Specific = item.DictKeyedValue.Values.SelectAgainst<ObjectToRef, MaskItem<bool, ObjectToRef_Mask<bool>>>(rhs.DictKeyedValue.Values, ((l, r) =>
                    {
                        MaskItem<bool, ObjectToRef_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.DictKeyedValue.Overall);
                    ret.DictKeyedValue.Overall = ret.DictKeyedValue.Overall && ret.DictKeyedValue.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                    ret.DictKeyedValue.Overall = true;
                }
            }
            else
            {
                ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                ret.DictKeyedValue.Overall = false;
            }
        }

        public static string ToString(
            this ITestObject_HasBeenSet_ReadOnlyGetter item,
            string name = null,
            TestObject_HasBeenSet_ReadOnly_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITestObject_HasBeenSet_ReadOnlyGetter item,
            FileGeneration fg,
            string name = null,
            TestObject_HasBeenSet_ReadOnly_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestObject_HasBeenSet_ReadOnly)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestObject_HasBeenSet_ReadOnly)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ByteArray ?? true)
                {
                    fg.AppendLine($"ByteArray => {item.ByteArray}");
                }
                if (printMask?.ByteArrayNull ?? true)
                {
                    fg.AppendLine($"ByteArrayNull => {item.ByteArrayNull}");
                }
                if (printMask?.ByteArrayNotNull ?? true)
                {
                    fg.AppendLine($"ByteArrayNotNull => {item.ByteArrayNotNull}");
                }
                if (printMask?.ByteArraySingleton ?? true)
                {
                    fg.AppendLine($"ByteArraySingleton => {item.ByteArraySingleton}");
                }
                if (printMask?.BoolN ?? true)
                {
                    fg.AppendLine($"BoolN => {item.BoolN}");
                }
                if (printMask?.Bool ?? true)
                {
                    fg.AppendLine($"Bool => {item.Bool}");
                }
                if (printMask?.CharN ?? true)
                {
                    fg.AppendLine($"CharN => {item.CharN}");
                }
                if (printMask?.Char ?? true)
                {
                    fg.AppendLine($"Char => {item.Char}");
                }
                if (printMask?.DateTimeNull ?? true)
                {
                    fg.AppendLine($"DateTimeNull => {item.DateTimeNull}");
                }
                if (printMask?.DateTime ?? true)
                {
                    fg.AppendLine($"DateTime => {item.DateTime}");
                }
                if (printMask?.DoubleN ?? true)
                {
                    fg.AppendLine($"DoubleN => {item.DoubleN}");
                }
                if (printMask?.DoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"DoubleN_Ranged => {item.DoubleN_Ranged}");
                }
                if (printMask?.Double ?? true)
                {
                    fg.AppendLine($"Double => {item.Double}");
                }
                if (printMask?.Double_Ranged ?? true)
                {
                    fg.AppendLine($"Double_Ranged => {item.Double_Ranged}");
                }
                if (printMask?.FloatN ?? true)
                {
                    fg.AppendLine($"FloatN => {item.FloatN}");
                }
                if (printMask?.FloatN_Ranged ?? true)
                {
                    fg.AppendLine($"FloatN_Ranged => {item.FloatN_Ranged}");
                }
                if (printMask?.Float ?? true)
                {
                    fg.AppendLine($"Float => {item.Float}");
                }
                if (printMask?.Float_Ranged ?? true)
                {
                    fg.AppendLine($"Float_Ranged => {item.Float_Ranged}");
                }
                if (printMask?.Int16N ?? true)
                {
                    fg.AppendLine($"Int16N => {item.Int16N}");
                }
                if (printMask?.Int16N_Ranged ?? true)
                {
                    fg.AppendLine($"Int16N_Ranged => {item.Int16N_Ranged}");
                }
                if (printMask?.Int16 ?? true)
                {
                    fg.AppendLine($"Int16 => {item.Int16}");
                }
                if (printMask?.Int16_Ranged ?? true)
                {
                    fg.AppendLine($"Int16_Ranged => {item.Int16_Ranged}");
                }
                if (printMask?.Int32N ?? true)
                {
                    fg.AppendLine($"Int32N => {item.Int32N}");
                }
                if (printMask?.Int32N_Ranged ?? true)
                {
                    fg.AppendLine($"Int32N_Ranged => {item.Int32N_Ranged}");
                }
                if (printMask?.Int32 ?? true)
                {
                    fg.AppendLine($"Int32 => {item.Int32}");
                }
                if (printMask?.Int32_Ranged ?? true)
                {
                    fg.AppendLine($"Int32_Ranged => {item.Int32_Ranged}");
                }
                if (printMask?.Int64N ?? true)
                {
                    fg.AppendLine($"Int64N => {item.Int64N}");
                }
                if (printMask?.Int64N_Ranged ?? true)
                {
                    fg.AppendLine($"Int64N_Ranged => {item.Int64N_Ranged}");
                }
                if (printMask?.Int64 ?? true)
                {
                    fg.AppendLine($"Int64 => {item.Int64}");
                }
                if (printMask?.Int64_Ranged ?? true)
                {
                    fg.AppendLine($"Int64_Ranged => {item.Int64_Ranged}");
                }
                if (printMask?.Int8N ?? true)
                {
                    fg.AppendLine($"Int8N => {item.Int8N}");
                }
                if (printMask?.Int8N_Ranged ?? true)
                {
                    fg.AppendLine($"Int8N_Ranged => {item.Int8N_Ranged}");
                }
                if (printMask?.Int8 ?? true)
                {
                    fg.AppendLine($"Int8 => {item.Int8}");
                }
                if (printMask?.Int8_Ranged ?? true)
                {
                    fg.AppendLine($"Int8_Ranged => {item.Int8_Ranged}");
                }
                if (printMask?.Unsafe ?? true)
                {
                    fg.AppendLine($"Unsafe => {item.Unsafe}");
                }
                if (printMask?.UnsafeLoqui ?? true)
                {
                    fg.AppendLine($"UnsafeLoqui => {item.UnsafeLoqui}");
                }
                if (printMask?.UnsafeNull ?? true)
                {
                    fg.AppendLine($"UnsafeNull => {item.UnsafeNull}");
                }
                if (printMask?.P2IntN ?? true)
                {
                    fg.AppendLine($"P2IntN => {item.P2IntN}");
                }
                if (printMask?.P2Int ?? true)
                {
                    fg.AppendLine($"P2Int => {item.P2Int}");
                }
                if (printMask?.P3DoubleN ?? true)
                {
                    fg.AppendLine($"P3DoubleN => {item.P3DoubleN}");
                }
                if (printMask?.P3Double ?? true)
                {
                    fg.AppendLine($"P3Double => {item.P3Double}");
                }
                if (printMask?.P3IntN ?? true)
                {
                    fg.AppendLine($"P3IntN => {item.P3IntN}");
                }
                if (printMask?.P3Int ?? true)
                {
                    fg.AppendLine($"P3Int => {item.P3Int}");
                }
                if (printMask?.PercentN ?? true)
                {
                    fg.AppendLine($"PercentN => {item.PercentN}");
                }
                if (printMask?.Percent ?? true)
                {
                    fg.AppendLine($"Percent => {item.Percent}");
                }
                if (printMask?.RangeInt8N ?? true)
                {
                    fg.AppendLine($"RangeInt8N => {item.RangeInt8N}");
                }
                if (printMask?.RangeInt8 ?? true)
                {
                    fg.AppendLine($"RangeInt8 => {item.RangeInt8}");
                }
                if (printMask?.RangeInt16N ?? true)
                {
                    fg.AppendLine($"RangeInt16N => {item.RangeInt16N}");
                }
                if (printMask?.RangeInt16 ?? true)
                {
                    fg.AppendLine($"RangeInt16 => {item.RangeInt16}");
                }
                if (printMask?.RangeInt32N ?? true)
                {
                    fg.AppendLine($"RangeInt32N => {item.RangeInt32N}");
                }
                if (printMask?.RangeInt32 ?? true)
                {
                    fg.AppendLine($"RangeInt32 => {item.RangeInt32}");
                }
                if (printMask?.RangeInt64N ?? true)
                {
                    fg.AppendLine($"RangeInt64N => {item.RangeInt64N}");
                }
                if (printMask?.RangeInt64 ?? true)
                {
                    fg.AppendLine($"RangeInt64 => {item.RangeInt64}");
                }
                if (printMask?.RangeUInt8N ?? true)
                {
                    fg.AppendLine($"RangeUInt8N => {item.RangeUInt8N}");
                }
                if (printMask?.RangeUInt8 ?? true)
                {
                    fg.AppendLine($"RangeUInt8 => {item.RangeUInt8}");
                }
                if (printMask?.RangeUInt16N ?? true)
                {
                    fg.AppendLine($"RangeUInt16N => {item.RangeUInt16N}");
                }
                if (printMask?.RangeUInt16 ?? true)
                {
                    fg.AppendLine($"RangeUInt16 => {item.RangeUInt16}");
                }
                if (printMask?.RangeUInt32N ?? true)
                {
                    fg.AppendLine($"RangeUInt32N => {item.RangeUInt32N}");
                }
                if (printMask?.RangeUInt32 ?? true)
                {
                    fg.AppendLine($"RangeUInt32 => {item.RangeUInt32}");
                }
                if (printMask?.RangeUInt64N ?? true)
                {
                    fg.AppendLine($"RangeUInt64N => {item.RangeUInt64N}");
                }
                if (printMask?.RangeUInt64 ?? true)
                {
                    fg.AppendLine($"RangeUInt64 => {item.RangeUInt64}");
                }
                if (printMask?.String ?? true)
                {
                    fg.AppendLine($"String => {item.String}");
                }
                if (printMask?.FilePath ?? true)
                {
                    fg.AppendLine($"FilePath => {item.FilePath}");
                }
                if (printMask?.FilePathNull ?? true)
                {
                    fg.AppendLine($"FilePathNull => {item.FilePathNull}");
                }
                if (printMask?.DirectoryPath ?? true)
                {
                    fg.AppendLine($"DirectoryPath => {item.DirectoryPath}");
                }
                if (printMask?.DirectoryPathNull ?? true)
                {
                    fg.AppendLine($"DirectoryPathNull => {item.DirectoryPathNull}");
                }
                if (printMask?.UDoubleN ?? true)
                {
                    fg.AppendLine($"UDoubleN => {item.UDoubleN}");
                }
                if (printMask?.UDoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"UDoubleN_Ranged => {item.UDoubleN_Ranged}");
                }
                if (printMask?.UDouble ?? true)
                {
                    fg.AppendLine($"UDouble => {item.UDouble}");
                }
                if (printMask?.UDouble_Ranged ?? true)
                {
                    fg.AppendLine($"UDouble_Ranged => {item.UDouble_Ranged}");
                }
                if (printMask?.UInt16N ?? true)
                {
                    fg.AppendLine($"UInt16N => {item.UInt16N}");
                }
                if (printMask?.UInt16N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16N_Ranged => {item.UInt16N_Ranged}");
                }
                if (printMask?.UInt16 ?? true)
                {
                    fg.AppendLine($"UInt16 => {item.UInt16}");
                }
                if (printMask?.UInt16_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16_Ranged => {item.UInt16_Ranged}");
                }
                if (printMask?.UInt32N ?? true)
                {
                    fg.AppendLine($"UInt32N => {item.UInt32N}");
                }
                if (printMask?.UInt32N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32N_Ranged => {item.UInt32N_Ranged}");
                }
                if (printMask?.UInt32 ?? true)
                {
                    fg.AppendLine($"UInt32 => {item.UInt32}");
                }
                if (printMask?.UInt32_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32_Ranged => {item.UInt32_Ranged}");
                }
                if (printMask?.UInt64N ?? true)
                {
                    fg.AppendLine($"UInt64N => {item.UInt64N}");
                }
                if (printMask?.UInt64N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64N_Ranged => {item.UInt64N_Ranged}");
                }
                if (printMask?.UInt64 ?? true)
                {
                    fg.AppendLine($"UInt64 => {item.UInt64}");
                }
                if (printMask?.UInt64_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64_Ranged => {item.UInt64_Ranged}");
                }
                if (printMask?.UInt8N ?? true)
                {
                    fg.AppendLine($"UInt8N => {item.UInt8N}");
                }
                if (printMask?.UInt8N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8N_Ranged => {item.UInt8N_Ranged}");
                }
                if (printMask?.UInt8 ?? true)
                {
                    fg.AppendLine($"UInt8 => {item.UInt8}");
                }
                if (printMask?.UInt8_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8_Ranged => {item.UInt8_Ranged}");
                }
                if (printMask?.Enum ?? true)
                {
                    fg.AppendLine($"Enum => {item.Enum}");
                }
                if (printMask?.EnumNull ?? true)
                {
                    fg.AppendLine($"EnumNull => {item.EnumNull}");
                }
                if (printMask?.WildCard ?? true)
                {
                    fg.AppendLine($"WildCard => {item.WildCard}");
                }
                if (printMask?.WildCardLoqui ?? true)
                {
                    fg.AppendLine($"WildCardLoqui => {item.WildCardLoqui}");
                }
                if (printMask?.WildCardNull ?? true)
                {
                    fg.AppendLine($"WildCardNull => {item.WildCardNull}");
                }
                if (printMask?.Ref?.Overall ?? true)
                {
                    item.Ref?.ToString(fg, "Ref");
                }
                if (printMask?.Ref_NotNull?.Overall ?? true)
                {
                    item.Ref_NotNull?.ToString(fg, "Ref_NotNull");
                }
                if (printMask?.Ref_Singleton?.Overall ?? true)
                {
                    item.Ref_Singleton?.ToString(fg, "Ref_Singleton");
                }
                if (printMask?.RefGetter?.Overall ?? true)
                {
                    item.RefGetter?.ToString(fg, "RefGetter");
                }
                if (printMask?.RefGetter_NotNull?.Overall ?? true)
                {
                    item.RefGetter_NotNull?.ToString(fg, "RefGetter_NotNull");
                }
                if (printMask?.RefGetter_Singleton?.Overall ?? true)
                {
                    item.RefGetter_Singleton?.ToString(fg, "RefGetter_Singleton");
                }
                if (printMask?.RefSetter?.Overall ?? true)
                {
                    item.RefSetter?.ToString(fg, "RefSetter");
                }
                if (printMask?.RefSetter_NotNull?.Overall ?? true)
                {
                    item.RefSetter_NotNull?.ToString(fg, "RefSetter_NotNull");
                }
                if (printMask?.RefSetter_Singleton?.Overall ?? true)
                {
                    item.RefSetter_Singleton?.ToString(fg, "RefSetter_Singleton");
                }
                if (printMask?.List?.Overall ?? true)
                {
                    fg.AppendLine("List =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.List)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefList?.Overall ?? true)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.RefList)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Dict?.Overall ?? true)
                {
                    fg.AppendLine("Dict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Dict)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Key => {subItem.Key}");
                                fg.AppendLine($"Value => {subItem.Value}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefDict?.Overall ?? true)
                {
                    fg.AppendLine("RefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.RefDict)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.Key?.ToString(fg, "Key");
                                subItem.Value?.ToString(fg, "Value");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.KeyRefDict?.Overall ?? true)
                {
                    fg.AppendLine("KeyRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.KeyRefDict)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.Key?.ToString(fg, "Key");
                                fg.AppendLine($"Value => {subItem.Value}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.ValRefDict?.Overall ?? true)
                {
                    fg.AppendLine("ValRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.ValRefDict)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Key => {subItem.Key}");
                                subItem.Value?.ToString(fg, "Value");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DictKeyedValue?.Overall ?? true)
                {
                    fg.AppendLine("DictKeyedValue =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.DictKeyedValue.Values)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITestObject_HasBeenSet_ReadOnlyGetter item,
            TestObject_HasBeenSet_ReadOnly_Mask<bool?> checkMask)
        {
            if (checkMask.ByteArray.HasValue && checkMask.ByteArray.Value != item.ByteArray_Property.HasBeenSet) return false;
            if (checkMask.ByteArrayNull.HasValue && checkMask.ByteArrayNull.Value != item.ByteArrayNull_Property.HasBeenSet) return false;
            if (checkMask.ByteArrayNotNull.HasValue && checkMask.ByteArrayNotNull.Value != item.ByteArrayNotNull_Property.HasBeenSet) return false;
            if (checkMask.ByteArraySingleton.HasValue && checkMask.ByteArraySingleton.Value != item.ByteArraySingleton_Property.HasBeenSet) return false;
            if (checkMask.BoolN.HasValue && checkMask.BoolN.Value != item.BoolN_Property.HasBeenSet) return false;
            if (checkMask.Bool.HasValue && checkMask.Bool.Value != item.Bool_Property.HasBeenSet) return false;
            if (checkMask.CharN.HasValue && checkMask.CharN.Value != item.CharN_Property.HasBeenSet) return false;
            if (checkMask.Char.HasValue && checkMask.Char.Value != item.Char_Property.HasBeenSet) return false;
            if (checkMask.DateTimeNull.HasValue && checkMask.DateTimeNull.Value != item.DateTimeNull_Property.HasBeenSet) return false;
            if (checkMask.DateTime.HasValue && checkMask.DateTime.Value != item.DateTime_Property.HasBeenSet) return false;
            if (checkMask.DoubleN.HasValue && checkMask.DoubleN.Value != item.DoubleN_Property.HasBeenSet) return false;
            if (checkMask.DoubleN_Ranged.HasValue && checkMask.DoubleN_Ranged.Value != item.DoubleN_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Double.HasValue && checkMask.Double.Value != item.Double_Property.HasBeenSet) return false;
            if (checkMask.Double_Ranged.HasValue && checkMask.Double_Ranged.Value != item.Double_Ranged_Property.HasBeenSet) return false;
            if (checkMask.FloatN.HasValue && checkMask.FloatN.Value != item.FloatN_Property.HasBeenSet) return false;
            if (checkMask.FloatN_Ranged.HasValue && checkMask.FloatN_Ranged.Value != item.FloatN_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Float.HasValue && checkMask.Float.Value != item.Float_Property.HasBeenSet) return false;
            if (checkMask.Float_Ranged.HasValue && checkMask.Float_Ranged.Value != item.Float_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Int16N.HasValue && checkMask.Int16N.Value != item.Int16N_Property.HasBeenSet) return false;
            if (checkMask.Int16N_Ranged.HasValue && checkMask.Int16N_Ranged.Value != item.Int16N_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Int16.HasValue && checkMask.Int16.Value != item.Int16_Property.HasBeenSet) return false;
            if (checkMask.Int16_Ranged.HasValue && checkMask.Int16_Ranged.Value != item.Int16_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Int32N.HasValue && checkMask.Int32N.Value != item.Int32N_Property.HasBeenSet) return false;
            if (checkMask.Int32N_Ranged.HasValue && checkMask.Int32N_Ranged.Value != item.Int32N_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Int32.HasValue && checkMask.Int32.Value != item.Int32_Property.HasBeenSet) return false;
            if (checkMask.Int32_Ranged.HasValue && checkMask.Int32_Ranged.Value != item.Int32_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Int64N.HasValue && checkMask.Int64N.Value != item.Int64N_Property.HasBeenSet) return false;
            if (checkMask.Int64N_Ranged.HasValue && checkMask.Int64N_Ranged.Value != item.Int64N_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Int64.HasValue && checkMask.Int64.Value != item.Int64_Property.HasBeenSet) return false;
            if (checkMask.Int64_Ranged.HasValue && checkMask.Int64_Ranged.Value != item.Int64_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Int8N.HasValue && checkMask.Int8N.Value != item.Int8N_Property.HasBeenSet) return false;
            if (checkMask.Int8N_Ranged.HasValue && checkMask.Int8N_Ranged.Value != item.Int8N_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Int8.HasValue && checkMask.Int8.Value != item.Int8_Property.HasBeenSet) return false;
            if (checkMask.Int8_Ranged.HasValue && checkMask.Int8_Ranged.Value != item.Int8_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Unsafe.HasValue && checkMask.Unsafe.Value != item.Unsafe_Property.HasBeenSet) return false;
            if (checkMask.UnsafeLoqui.HasValue && checkMask.UnsafeLoqui.Value != item.UnsafeLoqui_Property.HasBeenSet) return false;
            if (checkMask.UnsafeNull.HasValue && checkMask.UnsafeNull.Value != item.UnsafeNull_Property.HasBeenSet) return false;
            if (checkMask.P2IntN.HasValue && checkMask.P2IntN.Value != item.P2IntN_Property.HasBeenSet) return false;
            if (checkMask.P2Int.HasValue && checkMask.P2Int.Value != item.P2Int_Property.HasBeenSet) return false;
            if (checkMask.P3DoubleN.HasValue && checkMask.P3DoubleN.Value != item.P3DoubleN_Property.HasBeenSet) return false;
            if (checkMask.P3Double.HasValue && checkMask.P3Double.Value != item.P3Double_Property.HasBeenSet) return false;
            if (checkMask.P3IntN.HasValue && checkMask.P3IntN.Value != item.P3IntN_Property.HasBeenSet) return false;
            if (checkMask.P3Int.HasValue && checkMask.P3Int.Value != item.P3Int_Property.HasBeenSet) return false;
            if (checkMask.PercentN.HasValue && checkMask.PercentN.Value != item.PercentN_Property.HasBeenSet) return false;
            if (checkMask.Percent.HasValue && checkMask.Percent.Value != item.Percent_Property.HasBeenSet) return false;
            if (checkMask.RangeInt8N.HasValue && checkMask.RangeInt8N.Value != item.RangeInt8N_Property.HasBeenSet) return false;
            if (checkMask.RangeInt8.HasValue && checkMask.RangeInt8.Value != item.RangeInt8_Property.HasBeenSet) return false;
            if (checkMask.RangeInt16N.HasValue && checkMask.RangeInt16N.Value != item.RangeInt16N_Property.HasBeenSet) return false;
            if (checkMask.RangeInt16.HasValue && checkMask.RangeInt16.Value != item.RangeInt16_Property.HasBeenSet) return false;
            if (checkMask.RangeInt32N.HasValue && checkMask.RangeInt32N.Value != item.RangeInt32N_Property.HasBeenSet) return false;
            if (checkMask.RangeInt32.HasValue && checkMask.RangeInt32.Value != item.RangeInt32_Property.HasBeenSet) return false;
            if (checkMask.RangeInt64N.HasValue && checkMask.RangeInt64N.Value != item.RangeInt64N_Property.HasBeenSet) return false;
            if (checkMask.RangeInt64.HasValue && checkMask.RangeInt64.Value != item.RangeInt64_Property.HasBeenSet) return false;
            if (checkMask.RangeUInt8N.HasValue && checkMask.RangeUInt8N.Value != item.RangeUInt8N_Property.HasBeenSet) return false;
            if (checkMask.RangeUInt8.HasValue && checkMask.RangeUInt8.Value != item.RangeUInt8_Property.HasBeenSet) return false;
            if (checkMask.RangeUInt16N.HasValue && checkMask.RangeUInt16N.Value != item.RangeUInt16N_Property.HasBeenSet) return false;
            if (checkMask.RangeUInt16.HasValue && checkMask.RangeUInt16.Value != item.RangeUInt16_Property.HasBeenSet) return false;
            if (checkMask.RangeUInt32N.HasValue && checkMask.RangeUInt32N.Value != item.RangeUInt32N_Property.HasBeenSet) return false;
            if (checkMask.RangeUInt32.HasValue && checkMask.RangeUInt32.Value != item.RangeUInt32_Property.HasBeenSet) return false;
            if (checkMask.RangeUInt64N.HasValue && checkMask.RangeUInt64N.Value != item.RangeUInt64N_Property.HasBeenSet) return false;
            if (checkMask.RangeUInt64.HasValue && checkMask.RangeUInt64.Value != item.RangeUInt64_Property.HasBeenSet) return false;
            if (checkMask.String.HasValue && checkMask.String.Value != item.String_Property.HasBeenSet) return false;
            if (checkMask.FilePath.HasValue && checkMask.FilePath.Value != item.FilePath_Property.HasBeenSet) return false;
            if (checkMask.FilePathNull.HasValue && checkMask.FilePathNull.Value != item.FilePathNull_Property.HasBeenSet) return false;
            if (checkMask.DirectoryPath.HasValue && checkMask.DirectoryPath.Value != item.DirectoryPath_Property.HasBeenSet) return false;
            if (checkMask.DirectoryPathNull.HasValue && checkMask.DirectoryPathNull.Value != item.DirectoryPathNull_Property.HasBeenSet) return false;
            if (checkMask.UDoubleN.HasValue && checkMask.UDoubleN.Value != item.UDoubleN_Property.HasBeenSet) return false;
            if (checkMask.UDoubleN_Ranged.HasValue && checkMask.UDoubleN_Ranged.Value != item.UDoubleN_Ranged_Property.HasBeenSet) return false;
            if (checkMask.UDouble.HasValue && checkMask.UDouble.Value != item.UDouble_Property.HasBeenSet) return false;
            if (checkMask.UDouble_Ranged.HasValue && checkMask.UDouble_Ranged.Value != item.UDouble_Ranged_Property.HasBeenSet) return false;
            if (checkMask.UInt16N.HasValue && checkMask.UInt16N.Value != item.UInt16N_Property.HasBeenSet) return false;
            if (checkMask.UInt16N_Ranged.HasValue && checkMask.UInt16N_Ranged.Value != item.UInt16N_Ranged_Property.HasBeenSet) return false;
            if (checkMask.UInt16.HasValue && checkMask.UInt16.Value != item.UInt16_Property.HasBeenSet) return false;
            if (checkMask.UInt16_Ranged.HasValue && checkMask.UInt16_Ranged.Value != item.UInt16_Ranged_Property.HasBeenSet) return false;
            if (checkMask.UInt32N.HasValue && checkMask.UInt32N.Value != item.UInt32N_Property.HasBeenSet) return false;
            if (checkMask.UInt32N_Ranged.HasValue && checkMask.UInt32N_Ranged.Value != item.UInt32N_Ranged_Property.HasBeenSet) return false;
            if (checkMask.UInt32.HasValue && checkMask.UInt32.Value != item.UInt32_Property.HasBeenSet) return false;
            if (checkMask.UInt32_Ranged.HasValue && checkMask.UInt32_Ranged.Value != item.UInt32_Ranged_Property.HasBeenSet) return false;
            if (checkMask.UInt64N.HasValue && checkMask.UInt64N.Value != item.UInt64N_Property.HasBeenSet) return false;
            if (checkMask.UInt64N_Ranged.HasValue && checkMask.UInt64N_Ranged.Value != item.UInt64N_Ranged_Property.HasBeenSet) return false;
            if (checkMask.UInt64.HasValue && checkMask.UInt64.Value != item.UInt64_Property.HasBeenSet) return false;
            if (checkMask.UInt64_Ranged.HasValue && checkMask.UInt64_Ranged.Value != item.UInt64_Ranged_Property.HasBeenSet) return false;
            if (checkMask.UInt8N.HasValue && checkMask.UInt8N.Value != item.UInt8N_Property.HasBeenSet) return false;
            if (checkMask.UInt8N_Ranged.HasValue && checkMask.UInt8N_Ranged.Value != item.UInt8N_Ranged_Property.HasBeenSet) return false;
            if (checkMask.UInt8.HasValue && checkMask.UInt8.Value != item.UInt8_Property.HasBeenSet) return false;
            if (checkMask.UInt8_Ranged.HasValue && checkMask.UInt8_Ranged.Value != item.UInt8_Ranged_Property.HasBeenSet) return false;
            if (checkMask.Enum.HasValue && checkMask.Enum.Value != item.Enum_Property.HasBeenSet) return false;
            if (checkMask.EnumNull.HasValue && checkMask.EnumNull.Value != item.EnumNull_Property.HasBeenSet) return false;
            if (checkMask.WildCard.HasValue && checkMask.WildCard.Value != item.WildCard_Property.HasBeenSet) return false;
            if (checkMask.WildCardLoqui.HasValue && checkMask.WildCardLoqui.Value != item.WildCardLoqui_Property.HasBeenSet) return false;
            if (checkMask.WildCardNull.HasValue && checkMask.WildCardNull.Value != item.WildCardNull_Property.HasBeenSet) return false;
            if (checkMask.Ref.Overall.HasValue && checkMask.Ref.Overall.Value != item.Ref_Property.HasBeenSet) return false;
            if (checkMask.Ref.Specific != null && (item.Ref_Property.Item == null || !item.Ref_Property.Item.HasBeenSet(checkMask.Ref.Specific))) return false;
            if (checkMask.Ref_NotNull.Overall.HasValue && checkMask.Ref_NotNull.Overall.Value != item.Ref_NotNull_Property.HasBeenSet) return false;
            if (checkMask.Ref_NotNull.Specific != null && (item.Ref_NotNull_Property.Item == null || !item.Ref_NotNull_Property.Item.HasBeenSet(checkMask.Ref_NotNull.Specific))) return false;
            if (checkMask.Ref_Singleton.Overall.HasValue && checkMask.Ref_Singleton.Overall.Value != item.Ref_Singleton_Property.HasBeenSet) return false;
            if (checkMask.Ref_Singleton.Specific != null && (item.Ref_Singleton_Property.Item == null || !item.Ref_Singleton_Property.Item.HasBeenSet(checkMask.Ref_Singleton.Specific))) return false;
            if (checkMask.RefGetter.Overall.HasValue && checkMask.RefGetter.Overall.Value != item.RefGetter_Property.HasBeenSet) return false;
            if (checkMask.RefGetter.Specific != null && (item.RefGetter_Property.Item == null || !item.RefGetter_Property.Item.HasBeenSet(checkMask.RefGetter.Specific))) return false;
            if (checkMask.RefGetter_NotNull.Overall.HasValue && checkMask.RefGetter_NotNull.Overall.Value != item.RefGetter_NotNull_Property.HasBeenSet) return false;
            if (checkMask.RefGetter_NotNull.Specific != null && (item.RefGetter_NotNull_Property.Item == null || !item.RefGetter_NotNull_Property.Item.HasBeenSet(checkMask.RefGetter_NotNull.Specific))) return false;
            if (checkMask.RefGetter_Singleton.Overall.HasValue && checkMask.RefGetter_Singleton.Overall.Value != item.RefGetter_Singleton_Property.HasBeenSet) return false;
            if (checkMask.RefGetter_Singleton.Specific != null && (item.RefGetter_Singleton_Property.Item == null || !item.RefGetter_Singleton_Property.Item.HasBeenSet(checkMask.RefGetter_Singleton.Specific))) return false;
            if (checkMask.RefSetter.Overall.HasValue && checkMask.RefSetter.Overall.Value != item.RefSetter_Property.HasBeenSet) return false;
            if (checkMask.RefSetter.Specific != null && (item.RefSetter_Property.Item == null || !item.RefSetter_Property.Item.HasBeenSet(checkMask.RefSetter.Specific))) return false;
            if (checkMask.RefSetter_NotNull.Overall.HasValue && checkMask.RefSetter_NotNull.Overall.Value != item.RefSetter_NotNull_Property.HasBeenSet) return false;
            if (checkMask.RefSetter_NotNull.Specific != null && (item.RefSetter_NotNull_Property.Item == null || !item.RefSetter_NotNull_Property.Item.HasBeenSet(checkMask.RefSetter_NotNull.Specific))) return false;
            if (checkMask.RefSetter_Singleton.Overall.HasValue && checkMask.RefSetter_Singleton.Overall.Value != item.RefSetter_Singleton_Property.HasBeenSet) return false;
            if (checkMask.RefSetter_Singleton.Specific != null && (item.RefSetter_Singleton_Property.Item == null || !item.RefSetter_Singleton_Property.Item.HasBeenSet(checkMask.RefSetter_Singleton.Specific))) return false;
            if (checkMask.List.Overall.HasValue && checkMask.List.Overall.Value != item.List.HasBeenSet) return false;
            if (checkMask.RefList.Overall.HasValue && checkMask.RefList.Overall.Value != item.RefList.HasBeenSet) return false;
            if (checkMask.Dict.Overall.HasValue && checkMask.Dict.Overall.Value != item.Dict.HasBeenSet) return false;
            if (checkMask.RefDict.Overall.HasValue && checkMask.RefDict.Overall.Value != item.RefDict.HasBeenSet) return false;
            if (checkMask.KeyRefDict.Overall.HasValue && checkMask.KeyRefDict.Overall.Value != item.KeyRefDict.HasBeenSet) return false;
            if (checkMask.ValRefDict.Overall.HasValue && checkMask.ValRefDict.Overall.Value != item.ValRefDict.HasBeenSet) return false;
            if (checkMask.DictKeyedValue.Overall.HasValue && checkMask.DictKeyedValue.Overall.Value != item.DictKeyedValue.HasBeenSet) return false;
            return true;
        }

        public static TestObject_HasBeenSet_ReadOnly_Mask<bool> GetHasBeenSetMask(ITestObject_HasBeenSet_ReadOnlyGetter item)
        {
            var ret = new TestObject_HasBeenSet_ReadOnly_Mask<bool>();
            ret.ByteArray = item.ByteArray_Property.HasBeenSet;
            ret.ByteArrayNull = item.ByteArrayNull_Property.HasBeenSet;
            ret.ByteArrayNotNull = item.ByteArrayNotNull_Property.HasBeenSet;
            ret.ByteArraySingleton = item.ByteArraySingleton_Property.HasBeenSet;
            ret.BoolN = item.BoolN_Property.HasBeenSet;
            ret.Bool = item.Bool_Property.HasBeenSet;
            ret.CharN = item.CharN_Property.HasBeenSet;
            ret.Char = item.Char_Property.HasBeenSet;
            ret.DateTimeNull = item.DateTimeNull_Property.HasBeenSet;
            ret.DateTime = item.DateTime_Property.HasBeenSet;
            ret.DoubleN = item.DoubleN_Property.HasBeenSet;
            ret.DoubleN_Ranged = item.DoubleN_Ranged_Property.HasBeenSet;
            ret.Double = item.Double_Property.HasBeenSet;
            ret.Double_Ranged = item.Double_Ranged_Property.HasBeenSet;
            ret.FloatN = item.FloatN_Property.HasBeenSet;
            ret.FloatN_Ranged = item.FloatN_Ranged_Property.HasBeenSet;
            ret.Float = item.Float_Property.HasBeenSet;
            ret.Float_Ranged = item.Float_Ranged_Property.HasBeenSet;
            ret.Int16N = item.Int16N_Property.HasBeenSet;
            ret.Int16N_Ranged = item.Int16N_Ranged_Property.HasBeenSet;
            ret.Int16 = item.Int16_Property.HasBeenSet;
            ret.Int16_Ranged = item.Int16_Ranged_Property.HasBeenSet;
            ret.Int32N = item.Int32N_Property.HasBeenSet;
            ret.Int32N_Ranged = item.Int32N_Ranged_Property.HasBeenSet;
            ret.Int32 = item.Int32_Property.HasBeenSet;
            ret.Int32_Ranged = item.Int32_Ranged_Property.HasBeenSet;
            ret.Int64N = item.Int64N_Property.HasBeenSet;
            ret.Int64N_Ranged = item.Int64N_Ranged_Property.HasBeenSet;
            ret.Int64 = item.Int64_Property.HasBeenSet;
            ret.Int64_Ranged = item.Int64_Ranged_Property.HasBeenSet;
            ret.Int8N = item.Int8N_Property.HasBeenSet;
            ret.Int8N_Ranged = item.Int8N_Ranged_Property.HasBeenSet;
            ret.Int8 = item.Int8_Property.HasBeenSet;
            ret.Int8_Ranged = item.Int8_Ranged_Property.HasBeenSet;
            ret.Unsafe = item.Unsafe_Property.HasBeenSet;
            ret.UnsafeLoqui = item.UnsafeLoqui_Property.HasBeenSet;
            ret.UnsafeNull = item.UnsafeNull_Property.HasBeenSet;
            ret.P2IntN = item.P2IntN_Property.HasBeenSet;
            ret.P2Int = item.P2Int_Property.HasBeenSet;
            ret.P3DoubleN = item.P3DoubleN_Property.HasBeenSet;
            ret.P3Double = item.P3Double_Property.HasBeenSet;
            ret.P3IntN = item.P3IntN_Property.HasBeenSet;
            ret.P3Int = item.P3Int_Property.HasBeenSet;
            ret.PercentN = item.PercentN_Property.HasBeenSet;
            ret.Percent = item.Percent_Property.HasBeenSet;
            ret.RangeInt8N = item.RangeInt8N_Property.HasBeenSet;
            ret.RangeInt8 = item.RangeInt8_Property.HasBeenSet;
            ret.RangeInt16N = item.RangeInt16N_Property.HasBeenSet;
            ret.RangeInt16 = item.RangeInt16_Property.HasBeenSet;
            ret.RangeInt32N = item.RangeInt32N_Property.HasBeenSet;
            ret.RangeInt32 = item.RangeInt32_Property.HasBeenSet;
            ret.RangeInt64N = item.RangeInt64N_Property.HasBeenSet;
            ret.RangeInt64 = item.RangeInt64_Property.HasBeenSet;
            ret.RangeUInt8N = item.RangeUInt8N_Property.HasBeenSet;
            ret.RangeUInt8 = item.RangeUInt8_Property.HasBeenSet;
            ret.RangeUInt16N = item.RangeUInt16N_Property.HasBeenSet;
            ret.RangeUInt16 = item.RangeUInt16_Property.HasBeenSet;
            ret.RangeUInt32N = item.RangeUInt32N_Property.HasBeenSet;
            ret.RangeUInt32 = item.RangeUInt32_Property.HasBeenSet;
            ret.RangeUInt64N = item.RangeUInt64N_Property.HasBeenSet;
            ret.RangeUInt64 = item.RangeUInt64_Property.HasBeenSet;
            ret.String = item.String_Property.HasBeenSet;
            ret.FilePath = item.FilePath_Property.HasBeenSet;
            ret.FilePathNull = item.FilePathNull_Property.HasBeenSet;
            ret.DirectoryPath = item.DirectoryPath_Property.HasBeenSet;
            ret.DirectoryPathNull = item.DirectoryPathNull_Property.HasBeenSet;
            ret.UDoubleN = item.UDoubleN_Property.HasBeenSet;
            ret.UDoubleN_Ranged = item.UDoubleN_Ranged_Property.HasBeenSet;
            ret.UDouble = item.UDouble_Property.HasBeenSet;
            ret.UDouble_Ranged = item.UDouble_Ranged_Property.HasBeenSet;
            ret.UInt16N = item.UInt16N_Property.HasBeenSet;
            ret.UInt16N_Ranged = item.UInt16N_Ranged_Property.HasBeenSet;
            ret.UInt16 = item.UInt16_Property.HasBeenSet;
            ret.UInt16_Ranged = item.UInt16_Ranged_Property.HasBeenSet;
            ret.UInt32N = item.UInt32N_Property.HasBeenSet;
            ret.UInt32N_Ranged = item.UInt32N_Ranged_Property.HasBeenSet;
            ret.UInt32 = item.UInt32_Property.HasBeenSet;
            ret.UInt32_Ranged = item.UInt32_Ranged_Property.HasBeenSet;
            ret.UInt64N = item.UInt64N_Property.HasBeenSet;
            ret.UInt64N_Ranged = item.UInt64N_Ranged_Property.HasBeenSet;
            ret.UInt64 = item.UInt64_Property.HasBeenSet;
            ret.UInt64_Ranged = item.UInt64_Ranged_Property.HasBeenSet;
            ret.UInt8N = item.UInt8N_Property.HasBeenSet;
            ret.UInt8N_Ranged = item.UInt8N_Ranged_Property.HasBeenSet;
            ret.UInt8 = item.UInt8_Property.HasBeenSet;
            ret.UInt8_Ranged = item.UInt8_Ranged_Property.HasBeenSet;
            ret.Enum = item.Enum_Property.HasBeenSet;
            ret.EnumNull = item.EnumNull_Property.HasBeenSet;
            ret.WildCard = item.WildCard_Property.HasBeenSet;
            ret.WildCardLoqui = item.WildCardLoqui_Property.HasBeenSet;
            ret.WildCardNull = item.WildCardNull_Property.HasBeenSet;
            ret.Ref = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.Ref_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.Ref_Property.Item));
            ret.Ref_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.Ref_NotNull_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.Ref_NotNull_Property.Item));
            ret.Ref_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.Ref_Singleton_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.Ref_Singleton_Property.Item));
            ret.RefGetter = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.RefGetter_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.RefGetter_Property.Item));
            ret.RefGetter_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.RefGetter_NotNull_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.RefGetter_NotNull_Property.Item));
            ret.RefGetter_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.RefGetter_Singleton_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.RefGetter_Singleton_Property.Item));
            ret.RefSetter = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.RefSetter_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.RefSetter_Property.Item));
            ret.RefSetter_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.RefSetter_NotNull_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.RefSetter_NotNull_Property.Item));
            ret.RefSetter_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>(item.RefSetter_Singleton_Property.HasBeenSet, ObjectToRefCommon.GetHasBeenSetMask(item.RefSetter_Singleton_Property.Item));
            ret.List = new MaskItem<bool, IEnumerable<bool>>(item.List.HasBeenSet, null);
            ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>(item.RefList.HasBeenSet, item.RefList.Select((i) => new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>(item.Dict.HasBeenSet, null);
            ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>(
                item.RefDict.HasBeenSet, item.RefDict.Select((i) => new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>(
                    new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.Key.GetHasBeenSetMask()),
                    new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.Value.GetHasBeenSetMask()))));
            ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>(
                item.KeyRefDict.HasBeenSet, item.KeyRefDict.Select((i) => new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>(
                    new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.Key.GetHasBeenSetMask()),
                    true)));
            ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>(
                item.ValRefDict.HasBeenSet, item.ValRefDict.Select((i) => new KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>(
                    true,
                    new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.Value.GetHasBeenSetMask()))));
            ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>(item.DictKeyedValue.HasBeenSet, item.DictKeyedValue.Values.Select((i) => new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ITestObject_HasBeenSet_ReadOnlyGetter item,
            bool doMasks,
            out TestObject_HasBeenSet_ReadOnly_ErrorMask errorMask,
            string name = null)
        {
            TestObject_HasBeenSet_ReadOnly_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestObject_HasBeenSet_ReadOnly_ErrorMask()) : default(Func<TestObject_HasBeenSet_ReadOnly_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ITestObject_HasBeenSet_ReadOnlyGetter item,
            bool doMasks,
            Func<TestObject_HasBeenSet_ReadOnly_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Loqui.Tests.TestObject_HasBeenSet_ReadOnly"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Loqui.Tests.TestObject_HasBeenSet_ReadOnly");
                    }
                    if (item.ByteArray_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ByteArray),
                            item.ByteArray,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ByteArray = subMask;
                        }
                    }
                    if (item.ByteArrayNull_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ByteArrayNull),
                            item.ByteArrayNull,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ByteArrayNull = subMask;
                        }
                    }
                    if (item.ByteArrayNotNull_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ByteArrayNotNull),
                            item.ByteArrayNotNull,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ByteArrayNotNull = subMask;
                        }
                    }
                    if (item.ByteArraySingleton_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ByteArraySingleton),
                            item.ByteArraySingleton,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().ByteArraySingleton = subMask;
                        }
                    }
                    if (item.BoolN_Property.HasBeenSet)
                    {
                        Exception subMask;
                        BooleanXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.BoolN),
                            item.BoolN,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().BoolN = subMask;
                        }
                    }
                    if (item.Bool_Property.HasBeenSet)
                    {
                        Exception subMask;
                        BooleanXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Bool),
                            item.Bool,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Bool = subMask;
                        }
                    }
                    if (item.CharN_Property.HasBeenSet)
                    {
                        Exception subMask;
                        CharXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.CharN),
                            item.CharN,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().CharN = subMask;
                        }
                    }
                    if (item.Char_Property.HasBeenSet)
                    {
                        Exception subMask;
                        CharXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Char),
                            item.Char,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Char = subMask;
                        }
                    }
                    if (item.DateTimeNull_Property.HasBeenSet)
                    {
                        Exception subMask;
                        DateTimeXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DateTimeNull),
                            item.DateTimeNull,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DateTimeNull = subMask;
                        }
                    }
                    if (item.DateTime_Property.HasBeenSet)
                    {
                        Exception subMask;
                        DateTimeXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DateTime),
                            item.DateTime,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DateTime = subMask;
                        }
                    }
                    if (item.DoubleN_Property.HasBeenSet)
                    {
                        Exception subMask;
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DoubleN),
                            item.DoubleN,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DoubleN = subMask;
                        }
                    }
                    if (item.DoubleN_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DoubleN_Ranged),
                            item.DoubleN_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DoubleN_Ranged = subMask;
                        }
                    }
                    if (item.Double_Property.HasBeenSet)
                    {
                        Exception subMask;
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Double),
                            item.Double,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Double = subMask;
                        }
                    }
                    if (item.Double_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Double_Ranged),
                            item.Double_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Double_Ranged = subMask;
                        }
                    }
                    if (item.FloatN_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FloatN),
                            item.FloatN,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().FloatN = subMask;
                        }
                    }
                    if (item.FloatN_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FloatN_Ranged),
                            item.FloatN_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().FloatN_Ranged = subMask;
                        }
                    }
                    if (item.Float_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Float),
                            item.Float,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Float = subMask;
                        }
                    }
                    if (item.Float_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Float_Ranged),
                            item.Float_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Float_Ranged = subMask;
                        }
                    }
                    if (item.Int16N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16N),
                            item.Int16N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int16N = subMask;
                        }
                    }
                    if (item.Int16N_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16N_Ranged),
                            item.Int16N_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int16N_Ranged = subMask;
                        }
                    }
                    if (item.Int16_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16),
                            item.Int16,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int16 = subMask;
                        }
                    }
                    if (item.Int16_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16_Ranged),
                            item.Int16_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int16_Ranged = subMask;
                        }
                    }
                    if (item.Int32N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32N),
                            item.Int32N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int32N = subMask;
                        }
                    }
                    if (item.Int32N_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32N_Ranged),
                            item.Int32N_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int32N_Ranged = subMask;
                        }
                    }
                    if (item.Int32_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32),
                            item.Int32,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int32 = subMask;
                        }
                    }
                    if (item.Int32_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32_Ranged),
                            item.Int32_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int32_Ranged = subMask;
                        }
                    }
                    if (item.Int64N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64N),
                            item.Int64N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int64N = subMask;
                        }
                    }
                    if (item.Int64N_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64N_Ranged),
                            item.Int64N_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int64N_Ranged = subMask;
                        }
                    }
                    if (item.Int64_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64),
                            item.Int64,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int64 = subMask;
                        }
                    }
                    if (item.Int64_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64_Ranged),
                            item.Int64_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int64_Ranged = subMask;
                        }
                    }
                    if (item.Int8N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8N),
                            item.Int8N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int8N = subMask;
                        }
                    }
                    if (item.Int8N_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8N_Ranged),
                            item.Int8N_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int8N_Ranged = subMask;
                        }
                    }
                    if (item.Int8_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8),
                            item.Int8,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int8 = subMask;
                        }
                    }
                    if (item.Int8_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8_Ranged),
                            item.Int8_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Int8_Ranged = subMask;
                        }
                    }
                    if (item.Unsafe_Property.HasBeenSet)
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Unsafe),
                            item: item.Unsafe,
                            doMasks: doMasks,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        if (doMasks && subMask != null)
                        {
                            errorMask().Unsafe = subMask;
                        }
                    }
                    if (item.UnsafeLoqui_Property.HasBeenSet)
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.UnsafeLoqui),
                            item: item.UnsafeLoqui,
                            doMasks: doMasks,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        if (doMasks && subMask != null)
                        {
                            errorMask().UnsafeLoqui = subMask;
                        }
                    }
                    if (item.UnsafeNull_Property.HasBeenSet)
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.UnsafeNull),
                            item: item.UnsafeNull,
                            doMasks: doMasks,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        if (doMasks && subMask != null)
                        {
                            errorMask().UnsafeNull = subMask;
                        }
                    }
                    if (item.P2IntN_Property.HasBeenSet)
                    {
                        Exception subMask;
                        P2IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P2IntN),
                            item.P2IntN,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P2IntN = subMask;
                        }
                    }
                    if (item.P2Int_Property.HasBeenSet)
                    {
                        Exception subMask;
                        P2IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P2Int),
                            item.P2Int,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P2Int = subMask;
                        }
                    }
                    if (item.P3DoubleN_Property.HasBeenSet)
                    {
                        Exception subMask;
                        P3DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3DoubleN),
                            item.P3DoubleN,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P3DoubleN = subMask;
                        }
                    }
                    if (item.P3Double_Property.HasBeenSet)
                    {
                        Exception subMask;
                        P3DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3Double),
                            item.P3Double,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P3Double = subMask;
                        }
                    }
                    if (item.P3IntN_Property.HasBeenSet)
                    {
                        Exception subMask;
                        P3IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3IntN),
                            item.P3IntN,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P3IntN = subMask;
                        }
                    }
                    if (item.P3Int_Property.HasBeenSet)
                    {
                        Exception subMask;
                        P3IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3Int),
                            item.P3Int,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().P3Int = subMask;
                        }
                    }
                    if (item.PercentN_Property.HasBeenSet)
                    {
                        Exception subMask;
                        PercentXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.PercentN),
                            item.PercentN,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().PercentN = subMask;
                        }
                    }
                    if (item.Percent_Property.HasBeenSet)
                    {
                        Exception subMask;
                        PercentXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Percent),
                            item.Percent,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Percent = subMask;
                        }
                    }
                    if (item.RangeInt8N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt8N),
                            item.RangeInt8N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt8N = subMask;
                        }
                    }
                    if (item.RangeInt8_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt8),
                            item.RangeInt8,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt8 = subMask;
                        }
                    }
                    if (item.RangeInt16N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt16N),
                            item.RangeInt16N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt16N = subMask;
                        }
                    }
                    if (item.RangeInt16_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt16),
                            item.RangeInt16,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt16 = subMask;
                        }
                    }
                    if (item.RangeInt32N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt32N),
                            item.RangeInt32N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt32N = subMask;
                        }
                    }
                    if (item.RangeInt32_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt32),
                            item.RangeInt32,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt32 = subMask;
                        }
                    }
                    if (item.RangeInt64N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt64N),
                            item.RangeInt64N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt64N = subMask;
                        }
                    }
                    if (item.RangeInt64_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt64),
                            item.RangeInt64,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeInt64 = subMask;
                        }
                    }
                    if (item.RangeUInt8N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeUInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt8N),
                            item.RangeUInt8N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt8N = subMask;
                        }
                    }
                    if (item.RangeUInt8_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeUInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt8),
                            item.RangeUInt8,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt8 = subMask;
                        }
                    }
                    if (item.RangeUInt16N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeUInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt16N),
                            item.RangeUInt16N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt16N = subMask;
                        }
                    }
                    if (item.RangeUInt16_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeUInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt16),
                            item.RangeUInt16,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt16 = subMask;
                        }
                    }
                    if (item.RangeUInt32N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeUInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt32N),
                            item.RangeUInt32N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt32N = subMask;
                        }
                    }
                    if (item.RangeUInt32_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeUInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt32),
                            item.RangeUInt32,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt32 = subMask;
                        }
                    }
                    if (item.RangeUInt64N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeUInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt64N),
                            item.RangeUInt64N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt64N = subMask;
                        }
                    }
                    if (item.RangeUInt64_Property.HasBeenSet)
                    {
                        Exception subMask;
                        RangeUInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt64),
                            item.RangeUInt64,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RangeUInt64 = subMask;
                        }
                    }
                    if (item.String_Property.HasBeenSet)
                    {
                        Exception subMask;
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.String),
                            item.String,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().String = subMask;
                        }
                    }
                    if (item.FilePath_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FilePathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FilePath),
                            item.FilePath,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().FilePath = subMask;
                        }
                    }
                    if (item.FilePathNull_Property.HasBeenSet)
                    {
                        Exception subMask;
                        FilePathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FilePathNull),
                            item.FilePathNull,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().FilePathNull = subMask;
                        }
                    }
                    if (item.DirectoryPath_Property.HasBeenSet)
                    {
                        Exception subMask;
                        DirectoryPathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DirectoryPath),
                            item.DirectoryPath,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DirectoryPath = subMask;
                        }
                    }
                    if (item.DirectoryPathNull_Property.HasBeenSet)
                    {
                        Exception subMask;
                        DirectoryPathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DirectoryPathNull),
                            item.DirectoryPathNull,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().DirectoryPathNull = subMask;
                        }
                    }
                    if (item.UDoubleN_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDoubleN),
                            item.UDoubleN,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UDoubleN = subMask;
                        }
                    }
                    if (item.UDoubleN_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDoubleN_Ranged),
                            item.UDoubleN_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UDoubleN_Ranged = subMask;
                        }
                    }
                    if (item.UDouble_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDouble),
                            item.UDouble,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UDouble = subMask;
                        }
                    }
                    if (item.UDouble_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDouble_Ranged),
                            item.UDouble_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UDouble_Ranged = subMask;
                        }
                    }
                    if (item.UInt16N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16N),
                            item.UInt16N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt16N = subMask;
                        }
                    }
                    if (item.UInt16N_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16N_Ranged),
                            item.UInt16N_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt16N_Ranged = subMask;
                        }
                    }
                    if (item.UInt16_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16),
                            item.UInt16,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt16 = subMask;
                        }
                    }
                    if (item.UInt16_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16_Ranged),
                            item.UInt16_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt16_Ranged = subMask;
                        }
                    }
                    if (item.UInt32N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32N),
                            item.UInt32N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt32N = subMask;
                        }
                    }
                    if (item.UInt32N_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32N_Ranged),
                            item.UInt32N_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt32N_Ranged = subMask;
                        }
                    }
                    if (item.UInt32_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32),
                            item.UInt32,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt32 = subMask;
                        }
                    }
                    if (item.UInt32_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32_Ranged),
                            item.UInt32_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt32_Ranged = subMask;
                        }
                    }
                    if (item.UInt64N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64N),
                            item.UInt64N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt64N = subMask;
                        }
                    }
                    if (item.UInt64N_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64N_Ranged),
                            item.UInt64N_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt64N_Ranged = subMask;
                        }
                    }
                    if (item.UInt64_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64),
                            item.UInt64,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt64 = subMask;
                        }
                    }
                    if (item.UInt64_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64_Ranged),
                            item.UInt64_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt64_Ranged = subMask;
                        }
                    }
                    if (item.UInt8N_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8N),
                            item.UInt8N,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt8N = subMask;
                        }
                    }
                    if (item.UInt8N_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8N_Ranged),
                            item.UInt8N_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt8N_Ranged = subMask;
                        }
                    }
                    if (item.UInt8_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8),
                            item.UInt8,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt8 = subMask;
                        }
                    }
                    if (item.UInt8_Ranged_Property.HasBeenSet)
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8_Ranged),
                            item.UInt8_Ranged,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().UInt8_Ranged = subMask;
                        }
                    }
                    if (item.Enum_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<TestEnum>.Instance.Write(
                            writer,
                            nameof(item.Enum),
                            item.Enum,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Enum = subMask;
                        }
                    }
                    if (item.EnumNull_Property.HasBeenSet)
                    {
                        Exception subMask;
                        EnumXmlTranslation<TestEnum>.Instance.Write(
                            writer,
                            nameof(item.EnumNull),
                            item.EnumNull,
                            doMasks: doMasks,
                            errorMask: out subMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().EnumNull = subMask;
                        }
                    }
                    if (item.WildCard_Property.HasBeenSet)
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.WildCard),
                            item: item.WildCard,
                            doMasks: doMasks,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        if (doMasks && subMask != null)
                        {
                            errorMask().WildCard = subMask;
                        }
                    }
                    if (item.WildCardLoqui_Property.HasBeenSet)
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.WildCardLoqui),
                            item: item.WildCardLoqui,
                            doMasks: doMasks,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        if (doMasks && subMask != null)
                        {
                            errorMask().WildCardLoqui = subMask;
                        }
                    }
                    if (item.WildCardNull_Property.HasBeenSet)
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.WildCardNull),
                            item: item.WildCardNull,
                            doMasks: doMasks,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        if (doMasks && subMask != null)
                        {
                            errorMask().WildCardNull = subMask;
                        }
                    }
                    if (item.Ref_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.Ref,
                            name: nameof(item.Ref),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Ref = subMask;
                        }
                    }
                    if (item.Ref_NotNull_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.Ref_NotNull,
                            name: nameof(item.Ref_NotNull),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Ref_NotNull = subMask;
                        }
                    }
                    if (item.Ref_Singleton_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.Ref_Singleton,
                            name: nameof(item.Ref_Singleton),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().Ref_Singleton = subMask;
                        }
                    }
                    if (item.RefGetter_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefGetter,
                            name: nameof(item.RefGetter),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefGetter = subMask;
                        }
                    }
                    if (item.RefGetter_NotNull_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefGetter_NotNull,
                            name: nameof(item.RefGetter_NotNull),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefGetter_NotNull = subMask;
                        }
                    }
                    if (item.RefGetter_Singleton_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefGetter_Singleton,
                            name: nameof(item.RefGetter_Singleton),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefGetter_Singleton = subMask;
                        }
                    }
                    if (item.RefSetter_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefSetter,
                            name: nameof(item.RefSetter),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefSetter = subMask;
                        }
                    }
                    if (item.RefSetter_NotNull_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefSetter_NotNull,
                            name: nameof(item.RefSetter_NotNull),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefSetter_NotNull = subMask;
                        }
                    }
                    if (item.RefSetter_Singleton_Property.HasBeenSet)
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefSetter_Singleton,
                            name: nameof(item.RefSetter_Singleton),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefSetter_Singleton = subMask;
                        }
                    }
                    if (item.List.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        ListXmlTranslation<Boolean, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.List),
                            item: item.List,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (Boolean subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                BooleanXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: doMasks,
                                    errorMask: out listSubMask);
                            }
                            );
                        if (doMasks && subMask != null)
                        {
                            errorMask().List = subMask;
                        }
                    }
                    if (item.RefList.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> subMask;
                        ListXmlTranslation<ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.RefList),
                            item: item.RefList,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            transl: (ObjectToRef subItem, bool listDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> listSubMask) =>
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask loquiMask);
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            );
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefList = subMask;
                        }
                    }
                    if (item.Dict.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> subMask;
                        DictXmlTranslation<String, Boolean, Exception, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Dict),
                            items: item.Dict,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            keyTransl: (String subItem, bool dictDoMask, out Exception dictSubMask) =>
                            {
                                StringXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: dictDoMask,
                                    errorMask: out dictSubMask);
                            }
                            ,
                            valTransl: (Boolean subItem, bool dictDoMask, out Exception dictSubMask) =>
                            {
                                BooleanXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: dictDoMask,
                                    errorMask: out dictSubMask);
                            }
                            );
                        if (doMasks && subMask != null)
                        {
                            errorMask().Dict = subMask;
                        }
                    }
                    if (item.RefDict.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>> subMask;
                        DictXmlTranslation<ObjectToRef, ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.RefDict),
                            items: item.RefDict,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            keyTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    errorMask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            ,
                            valTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    errorMask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            );
                        if (doMasks && subMask != null)
                        {
                            errorMask().RefDict = subMask;
                        }
                    }
                    if (item.KeyRefDict.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>> subMask;
                        DictXmlTranslation<ObjectToRef, Boolean, MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.KeyRefDict),
                            items: item.KeyRefDict,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            keyTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    errorMask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            ,
                            valTransl: (Boolean subItem, bool dictDoMask, out Exception dictSubMask) =>
                            {
                                BooleanXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: dictDoMask,
                                    errorMask: out dictSubMask);
                            }
                            );
                        if (doMasks && subMask != null)
                        {
                            errorMask().KeyRefDict = subMask;
                        }
                    }
                    if (item.ValRefDict.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>> subMask;
                        DictXmlTranslation<String, ObjectToRef, Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.ValRefDict),
                            items: item.ValRefDict,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            keyTransl: (String subItem, bool dictDoMask, out Exception dictSubMask) =>
                            {
                                StringXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: dictDoMask,
                                    errorMask: out dictSubMask);
                            }
                            ,
                            valTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    errorMask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            );
                        if (doMasks && subMask != null)
                        {
                            errorMask().ValRefDict = subMask;
                        }
                    }
                    if (item.DictKeyedValue.HasBeenSet)
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> subMask;
                        KeyedDictXmlTranslation<Int32, ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.DictKeyedValue),
                            items: item.DictKeyedValue.Values,
                            doMasks: doMasks,
                            maskObj: out subMask,
                            valTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    errorMask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            );
                        if (doMasks && subMask != null)
                        {
                            errorMask().DictKeyedValue = subMask;
                        }
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestObject_HasBeenSet_ReadOnly_Mask<T> : IMask<T>, IEquatable<TestObject_HasBeenSet_ReadOnly_Mask<T>>
    {
        #region Ctors
        public TestObject_HasBeenSet_ReadOnly_Mask()
        {
        }

        public TestObject_HasBeenSet_ReadOnly_Mask(T initialValue)
        {
            this.ByteArray = initialValue;
            this.ByteArrayNull = initialValue;
            this.ByteArrayNotNull = initialValue;
            this.ByteArraySingleton = initialValue;
            this.BoolN = initialValue;
            this.Bool = initialValue;
            this.CharN = initialValue;
            this.Char = initialValue;
            this.DateTimeNull = initialValue;
            this.DateTime = initialValue;
            this.DoubleN = initialValue;
            this.DoubleN_Ranged = initialValue;
            this.Double = initialValue;
            this.Double_Ranged = initialValue;
            this.FloatN = initialValue;
            this.FloatN_Ranged = initialValue;
            this.Float = initialValue;
            this.Float_Ranged = initialValue;
            this.Int16N = initialValue;
            this.Int16N_Ranged = initialValue;
            this.Int16 = initialValue;
            this.Int16_Ranged = initialValue;
            this.Int32N = initialValue;
            this.Int32N_Ranged = initialValue;
            this.Int32 = initialValue;
            this.Int32_Ranged = initialValue;
            this.Int64N = initialValue;
            this.Int64N_Ranged = initialValue;
            this.Int64 = initialValue;
            this.Int64_Ranged = initialValue;
            this.Int8N = initialValue;
            this.Int8N_Ranged = initialValue;
            this.Int8 = initialValue;
            this.Int8_Ranged = initialValue;
            this.Unsafe = initialValue;
            this.UnsafeLoqui = initialValue;
            this.UnsafeNull = initialValue;
            this.P2IntN = initialValue;
            this.P2Int = initialValue;
            this.P3DoubleN = initialValue;
            this.P3Double = initialValue;
            this.P3IntN = initialValue;
            this.P3Int = initialValue;
            this.PercentN = initialValue;
            this.Percent = initialValue;
            this.RangeInt8N = initialValue;
            this.RangeInt8 = initialValue;
            this.RangeInt16N = initialValue;
            this.RangeInt16 = initialValue;
            this.RangeInt32N = initialValue;
            this.RangeInt32 = initialValue;
            this.RangeInt64N = initialValue;
            this.RangeInt64 = initialValue;
            this.RangeUInt8N = initialValue;
            this.RangeUInt8 = initialValue;
            this.RangeUInt16N = initialValue;
            this.RangeUInt16 = initialValue;
            this.RangeUInt32N = initialValue;
            this.RangeUInt32 = initialValue;
            this.RangeUInt64N = initialValue;
            this.RangeUInt64 = initialValue;
            this.String = initialValue;
            this.FilePath = initialValue;
            this.FilePathNull = initialValue;
            this.DirectoryPath = initialValue;
            this.DirectoryPathNull = initialValue;
            this.UDoubleN = initialValue;
            this.UDoubleN_Ranged = initialValue;
            this.UDouble = initialValue;
            this.UDouble_Ranged = initialValue;
            this.UInt16N = initialValue;
            this.UInt16N_Ranged = initialValue;
            this.UInt16 = initialValue;
            this.UInt16_Ranged = initialValue;
            this.UInt32N = initialValue;
            this.UInt32N_Ranged = initialValue;
            this.UInt32 = initialValue;
            this.UInt32_Ranged = initialValue;
            this.UInt64N = initialValue;
            this.UInt64N_Ranged = initialValue;
            this.UInt64 = initialValue;
            this.UInt64_Ranged = initialValue;
            this.UInt8N = initialValue;
            this.UInt8N_Ranged = initialValue;
            this.UInt8 = initialValue;
            this.UInt8_Ranged = initialValue;
            this.Enum = initialValue;
            this.EnumNull = initialValue;
            this.WildCard = initialValue;
            this.WildCardLoqui = initialValue;
            this.WildCardNull = initialValue;
            this.Ref = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.Ref_NotNull = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.Ref_Singleton = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefGetter = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefGetter_NotNull = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefGetter_Singleton = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefSetter = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefSetter_NotNull = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefSetter_Singleton = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.List = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.RefList = new MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>>(initialValue, null);
            this.Dict = new MaskItem<T, IEnumerable<KeyValuePair<T, T>>>(initialValue, null);
            this.RefDict = new MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>>(initialValue, null);
            this.KeyRefDict = new MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, T>>>(initialValue, null);
            this.ValRefDict = new MaskItem<T, IEnumerable<KeyValuePair<T, MaskItem<T, ObjectToRef_Mask<T>>>>>(initialValue, null);
            this.DictKeyedValue = new MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T ByteArray;
        public T ByteArrayNull;
        public T ByteArrayNotNull;
        public T ByteArraySingleton;
        public T BoolN;
        public T Bool;
        public T CharN;
        public T Char;
        public T DateTimeNull;
        public T DateTime;
        public T DoubleN;
        public T DoubleN_Ranged;
        public T Double;
        public T Double_Ranged;
        public T FloatN;
        public T FloatN_Ranged;
        public T Float;
        public T Float_Ranged;
        public T Int16N;
        public T Int16N_Ranged;
        public T Int16;
        public T Int16_Ranged;
        public T Int32N;
        public T Int32N_Ranged;
        public T Int32;
        public T Int32_Ranged;
        public T Int64N;
        public T Int64N_Ranged;
        public T Int64;
        public T Int64_Ranged;
        public T Int8N;
        public T Int8N_Ranged;
        public T Int8;
        public T Int8_Ranged;
        public T Unsafe;
        public T UnsafeLoqui;
        public T UnsafeNull;
        public T P2IntN;
        public T P2Int;
        public T P3DoubleN;
        public T P3Double;
        public T P3IntN;
        public T P3Int;
        public T PercentN;
        public T Percent;
        public T RangeInt8N;
        public T RangeInt8;
        public T RangeInt16N;
        public T RangeInt16;
        public T RangeInt32N;
        public T RangeInt32;
        public T RangeInt64N;
        public T RangeInt64;
        public T RangeUInt8N;
        public T RangeUInt8;
        public T RangeUInt16N;
        public T RangeUInt16;
        public T RangeUInt32N;
        public T RangeUInt32;
        public T RangeUInt64N;
        public T RangeUInt64;
        public T String;
        public T FilePath;
        public T FilePathNull;
        public T DirectoryPath;
        public T DirectoryPathNull;
        public T UDoubleN;
        public T UDoubleN_Ranged;
        public T UDouble;
        public T UDouble_Ranged;
        public T UInt16N;
        public T UInt16N_Ranged;
        public T UInt16;
        public T UInt16_Ranged;
        public T UInt32N;
        public T UInt32N_Ranged;
        public T UInt32;
        public T UInt32_Ranged;
        public T UInt64N;
        public T UInt64N_Ranged;
        public T UInt64;
        public T UInt64_Ranged;
        public T UInt8N;
        public T UInt8N_Ranged;
        public T UInt8;
        public T UInt8_Ranged;
        public T Enum;
        public T EnumNull;
        public T WildCard;
        public T WildCardLoqui;
        public T WildCardNull;
        public MaskItem<T, ObjectToRef_Mask<T>> Ref { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_Singleton { get; set; }
        public MaskItem<T, IEnumerable<T>> List;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> RefList;
        public MaskItem<T, IEnumerable<KeyValuePair<T, T>>> Dict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>> RefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, T>>> KeyRefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<T, MaskItem<T, ObjectToRef_Mask<T>>>>> ValRefDict;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> DictKeyedValue;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_HasBeenSet_ReadOnly_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_HasBeenSet_ReadOnly_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ByteArray, rhs.ByteArray)) return false;
            if (!object.Equals(this.ByteArrayNull, rhs.ByteArrayNull)) return false;
            if (!object.Equals(this.ByteArrayNotNull, rhs.ByteArrayNotNull)) return false;
            if (!object.Equals(this.ByteArraySingleton, rhs.ByteArraySingleton)) return false;
            if (!object.Equals(this.BoolN, rhs.BoolN)) return false;
            if (!object.Equals(this.Bool, rhs.Bool)) return false;
            if (!object.Equals(this.CharN, rhs.CharN)) return false;
            if (!object.Equals(this.Char, rhs.Char)) return false;
            if (!object.Equals(this.DateTimeNull, rhs.DateTimeNull)) return false;
            if (!object.Equals(this.DateTime, rhs.DateTime)) return false;
            if (!object.Equals(this.DoubleN, rhs.DoubleN)) return false;
            if (!object.Equals(this.DoubleN_Ranged, rhs.DoubleN_Ranged)) return false;
            if (!object.Equals(this.Double, rhs.Double)) return false;
            if (!object.Equals(this.Double_Ranged, rhs.Double_Ranged)) return false;
            if (!object.Equals(this.FloatN, rhs.FloatN)) return false;
            if (!object.Equals(this.FloatN_Ranged, rhs.FloatN_Ranged)) return false;
            if (!object.Equals(this.Float, rhs.Float)) return false;
            if (!object.Equals(this.Float_Ranged, rhs.Float_Ranged)) return false;
            if (!object.Equals(this.Int16N, rhs.Int16N)) return false;
            if (!object.Equals(this.Int16N_Ranged, rhs.Int16N_Ranged)) return false;
            if (!object.Equals(this.Int16, rhs.Int16)) return false;
            if (!object.Equals(this.Int16_Ranged, rhs.Int16_Ranged)) return false;
            if (!object.Equals(this.Int32N, rhs.Int32N)) return false;
            if (!object.Equals(this.Int32N_Ranged, rhs.Int32N_Ranged)) return false;
            if (!object.Equals(this.Int32, rhs.Int32)) return false;
            if (!object.Equals(this.Int32_Ranged, rhs.Int32_Ranged)) return false;
            if (!object.Equals(this.Int64N, rhs.Int64N)) return false;
            if (!object.Equals(this.Int64N_Ranged, rhs.Int64N_Ranged)) return false;
            if (!object.Equals(this.Int64, rhs.Int64)) return false;
            if (!object.Equals(this.Int64_Ranged, rhs.Int64_Ranged)) return false;
            if (!object.Equals(this.Int8N, rhs.Int8N)) return false;
            if (!object.Equals(this.Int8N_Ranged, rhs.Int8N_Ranged)) return false;
            if (!object.Equals(this.Int8, rhs.Int8)) return false;
            if (!object.Equals(this.Int8_Ranged, rhs.Int8_Ranged)) return false;
            if (!object.Equals(this.Unsafe, rhs.Unsafe)) return false;
            if (!object.Equals(this.UnsafeLoqui, rhs.UnsafeLoqui)) return false;
            if (!object.Equals(this.UnsafeNull, rhs.UnsafeNull)) return false;
            if (!object.Equals(this.P2IntN, rhs.P2IntN)) return false;
            if (!object.Equals(this.P2Int, rhs.P2Int)) return false;
            if (!object.Equals(this.P3DoubleN, rhs.P3DoubleN)) return false;
            if (!object.Equals(this.P3Double, rhs.P3Double)) return false;
            if (!object.Equals(this.P3IntN, rhs.P3IntN)) return false;
            if (!object.Equals(this.P3Int, rhs.P3Int)) return false;
            if (!object.Equals(this.PercentN, rhs.PercentN)) return false;
            if (!object.Equals(this.Percent, rhs.Percent)) return false;
            if (!object.Equals(this.RangeInt8N, rhs.RangeInt8N)) return false;
            if (!object.Equals(this.RangeInt8, rhs.RangeInt8)) return false;
            if (!object.Equals(this.RangeInt16N, rhs.RangeInt16N)) return false;
            if (!object.Equals(this.RangeInt16, rhs.RangeInt16)) return false;
            if (!object.Equals(this.RangeInt32N, rhs.RangeInt32N)) return false;
            if (!object.Equals(this.RangeInt32, rhs.RangeInt32)) return false;
            if (!object.Equals(this.RangeInt64N, rhs.RangeInt64N)) return false;
            if (!object.Equals(this.RangeInt64, rhs.RangeInt64)) return false;
            if (!object.Equals(this.RangeUInt8N, rhs.RangeUInt8N)) return false;
            if (!object.Equals(this.RangeUInt8, rhs.RangeUInt8)) return false;
            if (!object.Equals(this.RangeUInt16N, rhs.RangeUInt16N)) return false;
            if (!object.Equals(this.RangeUInt16, rhs.RangeUInt16)) return false;
            if (!object.Equals(this.RangeUInt32N, rhs.RangeUInt32N)) return false;
            if (!object.Equals(this.RangeUInt32, rhs.RangeUInt32)) return false;
            if (!object.Equals(this.RangeUInt64N, rhs.RangeUInt64N)) return false;
            if (!object.Equals(this.RangeUInt64, rhs.RangeUInt64)) return false;
            if (!object.Equals(this.String, rhs.String)) return false;
            if (!object.Equals(this.FilePath, rhs.FilePath)) return false;
            if (!object.Equals(this.FilePathNull, rhs.FilePathNull)) return false;
            if (!object.Equals(this.DirectoryPath, rhs.DirectoryPath)) return false;
            if (!object.Equals(this.DirectoryPathNull, rhs.DirectoryPathNull)) return false;
            if (!object.Equals(this.UDoubleN, rhs.UDoubleN)) return false;
            if (!object.Equals(this.UDoubleN_Ranged, rhs.UDoubleN_Ranged)) return false;
            if (!object.Equals(this.UDouble, rhs.UDouble)) return false;
            if (!object.Equals(this.UDouble_Ranged, rhs.UDouble_Ranged)) return false;
            if (!object.Equals(this.UInt16N, rhs.UInt16N)) return false;
            if (!object.Equals(this.UInt16N_Ranged, rhs.UInt16N_Ranged)) return false;
            if (!object.Equals(this.UInt16, rhs.UInt16)) return false;
            if (!object.Equals(this.UInt16_Ranged, rhs.UInt16_Ranged)) return false;
            if (!object.Equals(this.UInt32N, rhs.UInt32N)) return false;
            if (!object.Equals(this.UInt32N_Ranged, rhs.UInt32N_Ranged)) return false;
            if (!object.Equals(this.UInt32, rhs.UInt32)) return false;
            if (!object.Equals(this.UInt32_Ranged, rhs.UInt32_Ranged)) return false;
            if (!object.Equals(this.UInt64N, rhs.UInt64N)) return false;
            if (!object.Equals(this.UInt64N_Ranged, rhs.UInt64N_Ranged)) return false;
            if (!object.Equals(this.UInt64, rhs.UInt64)) return false;
            if (!object.Equals(this.UInt64_Ranged, rhs.UInt64_Ranged)) return false;
            if (!object.Equals(this.UInt8N, rhs.UInt8N)) return false;
            if (!object.Equals(this.UInt8N_Ranged, rhs.UInt8N_Ranged)) return false;
            if (!object.Equals(this.UInt8, rhs.UInt8)) return false;
            if (!object.Equals(this.UInt8_Ranged, rhs.UInt8_Ranged)) return false;
            if (!object.Equals(this.Enum, rhs.Enum)) return false;
            if (!object.Equals(this.EnumNull, rhs.EnumNull)) return false;
            if (!object.Equals(this.WildCard, rhs.WildCard)) return false;
            if (!object.Equals(this.WildCardLoqui, rhs.WildCardLoqui)) return false;
            if (!object.Equals(this.WildCardNull, rhs.WildCardNull)) return false;
            if (!object.Equals(this.Ref, rhs.Ref)) return false;
            if (!object.Equals(this.Ref_NotNull, rhs.Ref_NotNull)) return false;
            if (!object.Equals(this.Ref_Singleton, rhs.Ref_Singleton)) return false;
            if (!object.Equals(this.RefGetter, rhs.RefGetter)) return false;
            if (!object.Equals(this.RefGetter_NotNull, rhs.RefGetter_NotNull)) return false;
            if (!object.Equals(this.RefGetter_Singleton, rhs.RefGetter_Singleton)) return false;
            if (!object.Equals(this.RefSetter, rhs.RefSetter)) return false;
            if (!object.Equals(this.RefSetter_NotNull, rhs.RefSetter_NotNull)) return false;
            if (!object.Equals(this.RefSetter_Singleton, rhs.RefSetter_Singleton)) return false;
            if (!object.Equals(this.List, rhs.List)) return false;
            if (!object.Equals(this.RefList, rhs.RefList)) return false;
            if (!object.Equals(this.Dict, rhs.Dict)) return false;
            if (!object.Equals(this.RefDict, rhs.RefDict)) return false;
            if (!object.Equals(this.KeyRefDict, rhs.KeyRefDict)) return false;
            if (!object.Equals(this.ValRefDict, rhs.ValRefDict)) return false;
            if (!object.Equals(this.DictKeyedValue, rhs.DictKeyedValue)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ByteArray?.GetHashCode());
            ret = ret.CombineHashCode(this.ByteArrayNull?.GetHashCode());
            ret = ret.CombineHashCode(this.ByteArrayNotNull?.GetHashCode());
            ret = ret.CombineHashCode(this.ByteArraySingleton?.GetHashCode());
            ret = ret.CombineHashCode(this.BoolN?.GetHashCode());
            ret = ret.CombineHashCode(this.Bool?.GetHashCode());
            ret = ret.CombineHashCode(this.CharN?.GetHashCode());
            ret = ret.CombineHashCode(this.Char?.GetHashCode());
            ret = ret.CombineHashCode(this.DateTimeNull?.GetHashCode());
            ret = ret.CombineHashCode(this.DateTime?.GetHashCode());
            ret = ret.CombineHashCode(this.DoubleN?.GetHashCode());
            ret = ret.CombineHashCode(this.DoubleN_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Double?.GetHashCode());
            ret = ret.CombineHashCode(this.Double_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.FloatN?.GetHashCode());
            ret = ret.CombineHashCode(this.FloatN_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Float?.GetHashCode());
            ret = ret.CombineHashCode(this.Float_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int16N?.GetHashCode());
            ret = ret.CombineHashCode(this.Int16N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int16?.GetHashCode());
            ret = ret.CombineHashCode(this.Int16_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int32N?.GetHashCode());
            ret = ret.CombineHashCode(this.Int32N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int32?.GetHashCode());
            ret = ret.CombineHashCode(this.Int32_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int64N?.GetHashCode());
            ret = ret.CombineHashCode(this.Int64N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int64?.GetHashCode());
            ret = ret.CombineHashCode(this.Int64_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int8N?.GetHashCode());
            ret = ret.CombineHashCode(this.Int8N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int8?.GetHashCode());
            ret = ret.CombineHashCode(this.Int8_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Unsafe?.GetHashCode());
            ret = ret.CombineHashCode(this.UnsafeLoqui?.GetHashCode());
            ret = ret.CombineHashCode(this.UnsafeNull?.GetHashCode());
            ret = ret.CombineHashCode(this.P2IntN?.GetHashCode());
            ret = ret.CombineHashCode(this.P2Int?.GetHashCode());
            ret = ret.CombineHashCode(this.P3DoubleN?.GetHashCode());
            ret = ret.CombineHashCode(this.P3Double?.GetHashCode());
            ret = ret.CombineHashCode(this.P3IntN?.GetHashCode());
            ret = ret.CombineHashCode(this.P3Int?.GetHashCode());
            ret = ret.CombineHashCode(this.PercentN?.GetHashCode());
            ret = ret.CombineHashCode(this.Percent?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt8N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt8?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt16N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt16?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt32N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt32?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt64N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt64?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt8N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt8?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt16N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt16?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt32N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt32?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt64N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt64?.GetHashCode());
            ret = ret.CombineHashCode(this.String?.GetHashCode());
            ret = ret.CombineHashCode(this.FilePath?.GetHashCode());
            ret = ret.CombineHashCode(this.FilePathNull?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectoryPath?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectoryPathNull?.GetHashCode());
            ret = ret.CombineHashCode(this.UDoubleN?.GetHashCode());
            ret = ret.CombineHashCode(this.UDoubleN_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UDouble?.GetHashCode());
            ret = ret.CombineHashCode(this.UDouble_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt16N?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt16N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt16?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt16_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt32N?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt32N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt32?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt32_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt64N?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt64N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt64?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt64_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt8N?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt8N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt8?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt8_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Enum?.GetHashCode());
            ret = ret.CombineHashCode(this.EnumNull?.GetHashCode());
            ret = ret.CombineHashCode(this.WildCard?.GetHashCode());
            ret = ret.CombineHashCode(this.WildCardLoqui?.GetHashCode());
            ret = ret.CombineHashCode(this.WildCardNull?.GetHashCode());
            ret = ret.CombineHashCode(this.Ref?.GetHashCode());
            ret = ret.CombineHashCode(this.Ref_NotNull?.GetHashCode());
            ret = ret.CombineHashCode(this.Ref_Singleton?.GetHashCode());
            ret = ret.CombineHashCode(this.RefGetter?.GetHashCode());
            ret = ret.CombineHashCode(this.RefGetter_NotNull?.GetHashCode());
            ret = ret.CombineHashCode(this.RefGetter_Singleton?.GetHashCode());
            ret = ret.CombineHashCode(this.RefSetter?.GetHashCode());
            ret = ret.CombineHashCode(this.RefSetter_NotNull?.GetHashCode());
            ret = ret.CombineHashCode(this.RefSetter_Singleton?.GetHashCode());
            ret = ret.CombineHashCode(this.List?.GetHashCode());
            ret = ret.CombineHashCode(this.RefList?.GetHashCode());
            ret = ret.CombineHashCode(this.Dict?.GetHashCode());
            ret = ret.CombineHashCode(this.RefDict?.GetHashCode());
            ret = ret.CombineHashCode(this.KeyRefDict?.GetHashCode());
            ret = ret.CombineHashCode(this.ValRefDict?.GetHashCode());
            ret = ret.CombineHashCode(this.DictKeyedValue?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ByteArray)) return false;
            if (!eval(this.ByteArrayNull)) return false;
            if (!eval(this.ByteArrayNotNull)) return false;
            if (!eval(this.ByteArraySingleton)) return false;
            if (!eval(this.BoolN)) return false;
            if (!eval(this.Bool)) return false;
            if (!eval(this.CharN)) return false;
            if (!eval(this.Char)) return false;
            if (!eval(this.DateTimeNull)) return false;
            if (!eval(this.DateTime)) return false;
            if (!eval(this.DoubleN)) return false;
            if (!eval(this.DoubleN_Ranged)) return false;
            if (!eval(this.Double)) return false;
            if (!eval(this.Double_Ranged)) return false;
            if (!eval(this.FloatN)) return false;
            if (!eval(this.FloatN_Ranged)) return false;
            if (!eval(this.Float)) return false;
            if (!eval(this.Float_Ranged)) return false;
            if (!eval(this.Int16N)) return false;
            if (!eval(this.Int16N_Ranged)) return false;
            if (!eval(this.Int16)) return false;
            if (!eval(this.Int16_Ranged)) return false;
            if (!eval(this.Int32N)) return false;
            if (!eval(this.Int32N_Ranged)) return false;
            if (!eval(this.Int32)) return false;
            if (!eval(this.Int32_Ranged)) return false;
            if (!eval(this.Int64N)) return false;
            if (!eval(this.Int64N_Ranged)) return false;
            if (!eval(this.Int64)) return false;
            if (!eval(this.Int64_Ranged)) return false;
            if (!eval(this.Int8N)) return false;
            if (!eval(this.Int8N_Ranged)) return false;
            if (!eval(this.Int8)) return false;
            if (!eval(this.Int8_Ranged)) return false;
            if (!eval(this.Unsafe)) return false;
            if (!eval(this.UnsafeLoqui)) return false;
            if (!eval(this.UnsafeNull)) return false;
            if (!eval(this.P2IntN)) return false;
            if (!eval(this.P2Int)) return false;
            if (!eval(this.P3DoubleN)) return false;
            if (!eval(this.P3Double)) return false;
            if (!eval(this.P3IntN)) return false;
            if (!eval(this.P3Int)) return false;
            if (!eval(this.PercentN)) return false;
            if (!eval(this.Percent)) return false;
            if (!eval(this.RangeInt8N)) return false;
            if (!eval(this.RangeInt8)) return false;
            if (!eval(this.RangeInt16N)) return false;
            if (!eval(this.RangeInt16)) return false;
            if (!eval(this.RangeInt32N)) return false;
            if (!eval(this.RangeInt32)) return false;
            if (!eval(this.RangeInt64N)) return false;
            if (!eval(this.RangeInt64)) return false;
            if (!eval(this.RangeUInt8N)) return false;
            if (!eval(this.RangeUInt8)) return false;
            if (!eval(this.RangeUInt16N)) return false;
            if (!eval(this.RangeUInt16)) return false;
            if (!eval(this.RangeUInt32N)) return false;
            if (!eval(this.RangeUInt32)) return false;
            if (!eval(this.RangeUInt64N)) return false;
            if (!eval(this.RangeUInt64)) return false;
            if (!eval(this.String)) return false;
            if (!eval(this.FilePath)) return false;
            if (!eval(this.FilePathNull)) return false;
            if (!eval(this.DirectoryPath)) return false;
            if (!eval(this.DirectoryPathNull)) return false;
            if (!eval(this.UDoubleN)) return false;
            if (!eval(this.UDoubleN_Ranged)) return false;
            if (!eval(this.UDouble)) return false;
            if (!eval(this.UDouble_Ranged)) return false;
            if (!eval(this.UInt16N)) return false;
            if (!eval(this.UInt16N_Ranged)) return false;
            if (!eval(this.UInt16)) return false;
            if (!eval(this.UInt16_Ranged)) return false;
            if (!eval(this.UInt32N)) return false;
            if (!eval(this.UInt32N_Ranged)) return false;
            if (!eval(this.UInt32)) return false;
            if (!eval(this.UInt32_Ranged)) return false;
            if (!eval(this.UInt64N)) return false;
            if (!eval(this.UInt64N_Ranged)) return false;
            if (!eval(this.UInt64)) return false;
            if (!eval(this.UInt64_Ranged)) return false;
            if (!eval(this.UInt8N)) return false;
            if (!eval(this.UInt8N_Ranged)) return false;
            if (!eval(this.UInt8)) return false;
            if (!eval(this.UInt8_Ranged)) return false;
            if (!eval(this.Enum)) return false;
            if (!eval(this.EnumNull)) return false;
            if (!eval(this.WildCard)) return false;
            if (!eval(this.WildCardLoqui)) return false;
            if (!eval(this.WildCardNull)) return false;
            if (Ref != null)
            {
                if (!eval(this.Ref.Overall)) return false;
                if (Ref.Specific != null && !Ref.Specific.AllEqual(eval)) return false;
            }
            if (Ref_NotNull != null)
            {
                if (!eval(this.Ref_NotNull.Overall)) return false;
                if (Ref_NotNull.Specific != null && !Ref_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (Ref_Singleton != null)
            {
                if (!eval(this.Ref_Singleton.Overall)) return false;
                if (Ref_Singleton.Specific != null && !Ref_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter != null)
            {
                if (!eval(this.RefGetter.Overall)) return false;
                if (RefGetter.Specific != null && !RefGetter.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter_NotNull != null)
            {
                if (!eval(this.RefGetter_NotNull.Overall)) return false;
                if (RefGetter_NotNull.Specific != null && !RefGetter_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter_Singleton != null)
            {
                if (!eval(this.RefGetter_Singleton.Overall)) return false;
                if (RefGetter_Singleton.Specific != null && !RefGetter_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter != null)
            {
                if (!eval(this.RefSetter.Overall)) return false;
                if (RefSetter.Specific != null && !RefSetter.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter_NotNull != null)
            {
                if (!eval(this.RefSetter_NotNull.Overall)) return false;
                if (RefSetter_NotNull.Specific != null && !RefSetter_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter_Singleton != null)
            {
                if (!eval(this.RefSetter_Singleton.Overall)) return false;
                if (RefSetter_Singleton.Specific != null && !RefSetter_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (List != null)
            {
                if (!eval(this.List.Overall)) return false;
                if (List.Specific != null)
                {
                    foreach (var item in List.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (RefList != null)
            {
                if (!eval(this.RefList.Overall)) return false;
                if (RefList.Specific != null)
                {
                    foreach (var item in RefList.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (Dict != null)
            {
                if (!eval(this.Dict.Overall)) return false;
                if (Dict.Specific != null)
                {
                    foreach (var item in Dict.Specific)
                    {
                        if (!eval(item.Key)) return false;
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (RefDict != null)
            {
                if (!eval(this.RefDict.Overall)) return false;
                if (RefDict.Specific != null)
                {
                    foreach (var item in RefDict.Specific)
                    {
                        if (item.Key != null)
                        {
                            if (!eval(item.Key.Overall)) return false;
                            if (!item.Key.Specific?.AllEqual(eval) ?? false) return false;
                        }
                        if (item.Value != null)
                        {
                            if (!eval(item.Value.Overall)) return false;
                            if (!item.Value.Specific?.AllEqual(eval) ?? false) return false;
                        }
                    }
                }
            }
            if (KeyRefDict != null)
            {
                if (!eval(this.KeyRefDict.Overall)) return false;
                if (KeyRefDict.Specific != null)
                {
                    foreach (var item in KeyRefDict.Specific)
                    {
                        if (item.Key != null)
                        {
                            if (!eval(item.Key.Overall)) return false;
                            if (!item.Key.Specific?.AllEqual(eval) ?? false) return false;
                        }
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (ValRefDict != null)
            {
                if (!eval(this.ValRefDict.Overall)) return false;
                if (ValRefDict.Specific != null)
                {
                    foreach (var item in ValRefDict.Specific)
                    {
                        if (!eval(item.Key)) return false;
                        if (item.Value != null)
                        {
                            if (!eval(item.Value.Overall)) return false;
                            if (!item.Value.Specific?.AllEqual(eval) ?? false) return false;
                        }
                    }
                }
            }
            if (DictKeyedValue != null)
            {
                if (!eval(this.DictKeyedValue.Overall)) return false;
                if (DictKeyedValue.Specific != null)
                {
                    foreach (var item in DictKeyedValue.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public TestObject_HasBeenSet_ReadOnly_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestObject_HasBeenSet_ReadOnly_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestObject_HasBeenSet_ReadOnly_Mask<R> obj, Func<T, R> eval)
        {
            obj.ByteArray = eval(this.ByteArray);
            obj.ByteArrayNull = eval(this.ByteArrayNull);
            obj.ByteArrayNotNull = eval(this.ByteArrayNotNull);
            obj.ByteArraySingleton = eval(this.ByteArraySingleton);
            obj.BoolN = eval(this.BoolN);
            obj.Bool = eval(this.Bool);
            obj.CharN = eval(this.CharN);
            obj.Char = eval(this.Char);
            obj.DateTimeNull = eval(this.DateTimeNull);
            obj.DateTime = eval(this.DateTime);
            obj.DoubleN = eval(this.DoubleN);
            obj.DoubleN_Ranged = eval(this.DoubleN_Ranged);
            obj.Double = eval(this.Double);
            obj.Double_Ranged = eval(this.Double_Ranged);
            obj.FloatN = eval(this.FloatN);
            obj.FloatN_Ranged = eval(this.FloatN_Ranged);
            obj.Float = eval(this.Float);
            obj.Float_Ranged = eval(this.Float_Ranged);
            obj.Int16N = eval(this.Int16N);
            obj.Int16N_Ranged = eval(this.Int16N_Ranged);
            obj.Int16 = eval(this.Int16);
            obj.Int16_Ranged = eval(this.Int16_Ranged);
            obj.Int32N = eval(this.Int32N);
            obj.Int32N_Ranged = eval(this.Int32N_Ranged);
            obj.Int32 = eval(this.Int32);
            obj.Int32_Ranged = eval(this.Int32_Ranged);
            obj.Int64N = eval(this.Int64N);
            obj.Int64N_Ranged = eval(this.Int64N_Ranged);
            obj.Int64 = eval(this.Int64);
            obj.Int64_Ranged = eval(this.Int64_Ranged);
            obj.Int8N = eval(this.Int8N);
            obj.Int8N_Ranged = eval(this.Int8N_Ranged);
            obj.Int8 = eval(this.Int8);
            obj.Int8_Ranged = eval(this.Int8_Ranged);
            obj.Unsafe = eval(this.Unsafe);
            obj.UnsafeLoqui = eval(this.UnsafeLoqui);
            obj.UnsafeNull = eval(this.UnsafeNull);
            obj.P2IntN = eval(this.P2IntN);
            obj.P2Int = eval(this.P2Int);
            obj.P3DoubleN = eval(this.P3DoubleN);
            obj.P3Double = eval(this.P3Double);
            obj.P3IntN = eval(this.P3IntN);
            obj.P3Int = eval(this.P3Int);
            obj.PercentN = eval(this.PercentN);
            obj.Percent = eval(this.Percent);
            obj.RangeInt8N = eval(this.RangeInt8N);
            obj.RangeInt8 = eval(this.RangeInt8);
            obj.RangeInt16N = eval(this.RangeInt16N);
            obj.RangeInt16 = eval(this.RangeInt16);
            obj.RangeInt32N = eval(this.RangeInt32N);
            obj.RangeInt32 = eval(this.RangeInt32);
            obj.RangeInt64N = eval(this.RangeInt64N);
            obj.RangeInt64 = eval(this.RangeInt64);
            obj.RangeUInt8N = eval(this.RangeUInt8N);
            obj.RangeUInt8 = eval(this.RangeUInt8);
            obj.RangeUInt16N = eval(this.RangeUInt16N);
            obj.RangeUInt16 = eval(this.RangeUInt16);
            obj.RangeUInt32N = eval(this.RangeUInt32N);
            obj.RangeUInt32 = eval(this.RangeUInt32);
            obj.RangeUInt64N = eval(this.RangeUInt64N);
            obj.RangeUInt64 = eval(this.RangeUInt64);
            obj.String = eval(this.String);
            obj.FilePath = eval(this.FilePath);
            obj.FilePathNull = eval(this.FilePathNull);
            obj.DirectoryPath = eval(this.DirectoryPath);
            obj.DirectoryPathNull = eval(this.DirectoryPathNull);
            obj.UDoubleN = eval(this.UDoubleN);
            obj.UDoubleN_Ranged = eval(this.UDoubleN_Ranged);
            obj.UDouble = eval(this.UDouble);
            obj.UDouble_Ranged = eval(this.UDouble_Ranged);
            obj.UInt16N = eval(this.UInt16N);
            obj.UInt16N_Ranged = eval(this.UInt16N_Ranged);
            obj.UInt16 = eval(this.UInt16);
            obj.UInt16_Ranged = eval(this.UInt16_Ranged);
            obj.UInt32N = eval(this.UInt32N);
            obj.UInt32N_Ranged = eval(this.UInt32N_Ranged);
            obj.UInt32 = eval(this.UInt32);
            obj.UInt32_Ranged = eval(this.UInt32_Ranged);
            obj.UInt64N = eval(this.UInt64N);
            obj.UInt64N_Ranged = eval(this.UInt64N_Ranged);
            obj.UInt64 = eval(this.UInt64);
            obj.UInt64_Ranged = eval(this.UInt64_Ranged);
            obj.UInt8N = eval(this.UInt8N);
            obj.UInt8N_Ranged = eval(this.UInt8N_Ranged);
            obj.UInt8 = eval(this.UInt8);
            obj.UInt8_Ranged = eval(this.UInt8_Ranged);
            obj.Enum = eval(this.Enum);
            obj.EnumNull = eval(this.EnumNull);
            obj.WildCard = eval(this.WildCard);
            obj.WildCardLoqui = eval(this.WildCardLoqui);
            obj.WildCardNull = eval(this.WildCardNull);
            if (this.Ref != null)
            {
                obj.Ref = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.Ref.Overall = eval(this.Ref.Overall);
                if (this.Ref.Specific != null)
                {
                    obj.Ref.Specific = this.Ref.Specific.Translate(eval);
                }
            }
            if (this.Ref_NotNull != null)
            {
                obj.Ref_NotNull = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.Ref_NotNull.Overall = eval(this.Ref_NotNull.Overall);
                if (this.Ref_NotNull.Specific != null)
                {
                    obj.Ref_NotNull.Specific = this.Ref_NotNull.Specific.Translate(eval);
                }
            }
            if (this.Ref_Singleton != null)
            {
                obj.Ref_Singleton = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.Ref_Singleton.Overall = eval(this.Ref_Singleton.Overall);
                if (this.Ref_Singleton.Specific != null)
                {
                    obj.Ref_Singleton.Specific = this.Ref_Singleton.Specific.Translate(eval);
                }
            }
            if (this.RefGetter != null)
            {
                obj.RefGetter = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefGetter.Overall = eval(this.RefGetter.Overall);
                if (this.RefGetter.Specific != null)
                {
                    obj.RefGetter.Specific = this.RefGetter.Specific.Translate(eval);
                }
            }
            if (this.RefGetter_NotNull != null)
            {
                obj.RefGetter_NotNull = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefGetter_NotNull.Overall = eval(this.RefGetter_NotNull.Overall);
                if (this.RefGetter_NotNull.Specific != null)
                {
                    obj.RefGetter_NotNull.Specific = this.RefGetter_NotNull.Specific.Translate(eval);
                }
            }
            if (this.RefGetter_Singleton != null)
            {
                obj.RefGetter_Singleton = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefGetter_Singleton.Overall = eval(this.RefGetter_Singleton.Overall);
                if (this.RefGetter_Singleton.Specific != null)
                {
                    obj.RefGetter_Singleton.Specific = this.RefGetter_Singleton.Specific.Translate(eval);
                }
            }
            if (this.RefSetter != null)
            {
                obj.RefSetter = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefSetter.Overall = eval(this.RefSetter.Overall);
                if (this.RefSetter.Specific != null)
                {
                    obj.RefSetter.Specific = this.RefSetter.Specific.Translate(eval);
                }
            }
            if (this.RefSetter_NotNull != null)
            {
                obj.RefSetter_NotNull = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefSetter_NotNull.Overall = eval(this.RefSetter_NotNull.Overall);
                if (this.RefSetter_NotNull.Specific != null)
                {
                    obj.RefSetter_NotNull.Specific = this.RefSetter_NotNull.Specific.Translate(eval);
                }
            }
            if (this.RefSetter_Singleton != null)
            {
                obj.RefSetter_Singleton = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefSetter_Singleton.Overall = eval(this.RefSetter_Singleton.Overall);
                if (this.RefSetter_Singleton.Specific != null)
                {
                    obj.RefSetter_Singleton.Specific = this.RefSetter_Singleton.Specific.Translate(eval);
                }
            }
            if (List != null)
            {
                obj.List = new MaskItem<R, IEnumerable<R>>();
                obj.List.Overall = eval(this.List.Overall);
                if (List.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.List.Specific = l;
                    foreach (var item in List.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (RefList != null)
            {
                obj.RefList = new MaskItem<R, IEnumerable<MaskItem<R, ObjectToRef_Mask<R>>>>();
                obj.RefList.Overall = eval(this.RefList.Overall);
                if (RefList.Specific != null)
                {
                    List<MaskItem<R, ObjectToRef_Mask<R>>> l = new List<MaskItem<R, ObjectToRef_Mask<R>>>();
                    obj.RefList.Specific = l;
                    foreach (var item in RefList.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> mask = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ObjectToRef_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Dict != null)
            {
                obj.Dict = new MaskItem<R, IEnumerable<KeyValuePair<R, R>>>();
                obj.Dict.Overall = eval(this.Dict.Overall);
                if (Dict.Specific != null)
                {
                    List<KeyValuePair<R, R>> l = new List<KeyValuePair<R, R>>();
                    obj.Dict.Specific = l;
                    foreach (var item in Dict.Specific)
                    {
                        R keyVal = eval(item.Key);
                        R valVal = eval(item.Value);
                        l.Add(new KeyValuePair<R, R>(keyVal, valVal));
                    }
                }
            }
            if (RefDict != null)
            {
                obj.RefDict = new MaskItem<R, IEnumerable<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>>>();
                obj.RefDict.Overall = eval(this.RefDict.Overall);
                if (RefDict.Specific != null)
                {
                    List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>> l = new List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>>();
                    obj.RefDict.Specific = l;
                    foreach (var item in RefDict.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> keyVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Key != null)
                        {
                            keyVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            keyVal.Overall = eval(item.Key.Overall);
                            if (item.Key.Specific != null)
                            {
                                keyVal.Specific = item.Key.Specific.Translate(eval);
                            }
                        }
                        MaskItem<R, ObjectToRef_Mask<R>> valVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Value != null)
                        {
                            valVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            valVal.Overall = eval(item.Value.Overall);
                            if (item.Value.Specific != null)
                            {
                                valVal.Specific = item.Value.Specific.Translate(eval);
                            }
                        }
                        l.Add(new KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>(keyVal, valVal));
                    }
                }
            }
            if (KeyRefDict != null)
            {
                obj.KeyRefDict = new MaskItem<R, IEnumerable<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>>>();
                obj.KeyRefDict.Overall = eval(this.KeyRefDict.Overall);
                if (KeyRefDict.Specific != null)
                {
                    List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>> l = new List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>>();
                    obj.KeyRefDict.Specific = l;
                    foreach (var item in KeyRefDict.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> keyVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Key != null)
                        {
                            keyVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            keyVal.Overall = eval(item.Key.Overall);
                            if (item.Key.Specific != null)
                            {
                                keyVal.Specific = item.Key.Specific.Translate(eval);
                            }
                        }
                        R valVal = eval(item.Value);
                        l.Add(new KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>(keyVal, valVal));
                    }
                }
            }
            if (ValRefDict != null)
            {
                obj.ValRefDict = new MaskItem<R, IEnumerable<KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>>>();
                obj.ValRefDict.Overall = eval(this.ValRefDict.Overall);
                if (ValRefDict.Specific != null)
                {
                    List<KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>> l = new List<KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>>();
                    obj.ValRefDict.Specific = l;
                    foreach (var item in ValRefDict.Specific)
                    {
                        R keyVal = eval(item.Key);
                        MaskItem<R, ObjectToRef_Mask<R>> valVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Value != null)
                        {
                            valVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            valVal.Overall = eval(item.Value.Overall);
                            if (item.Value.Specific != null)
                            {
                                valVal.Specific = item.Value.Specific.Translate(eval);
                            }
                        }
                        l.Add(new KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>(keyVal, valVal));
                    }
                }
            }
            if (DictKeyedValue != null)
            {
                obj.DictKeyedValue = new MaskItem<R, IEnumerable<MaskItem<R, ObjectToRef_Mask<R>>>>();
                obj.DictKeyedValue.Overall = eval(this.DictKeyedValue.Overall);
                if (DictKeyedValue.Specific != null)
                {
                    List<MaskItem<R, ObjectToRef_Mask<R>>> l = new List<MaskItem<R, ObjectToRef_Mask<R>>>();
                    obj.DictKeyedValue.Specific = l;
                    foreach (var item in DictKeyedValue.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> mask = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ObjectToRef_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.List.Specific = null;
            this.RefList.Specific = null;
            this.Dict.Specific = null;
            this.RefDict.Specific = null;
            this.KeyRefDict.Specific = null;
            this.ValRefDict.Specific = null;
            this.DictKeyedValue.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestObject_HasBeenSet_ReadOnly_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestObject_HasBeenSet_ReadOnly_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestObject_HasBeenSet_ReadOnly_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ByteArray ?? true)
                {
                    fg.AppendLine($"ByteArray => {ByteArray.ToStringSafe()}");
                }
                if (printMask?.ByteArrayNull ?? true)
                {
                    fg.AppendLine($"ByteArrayNull => {ByteArrayNull.ToStringSafe()}");
                }
                if (printMask?.ByteArrayNotNull ?? true)
                {
                    fg.AppendLine($"ByteArrayNotNull => {ByteArrayNotNull.ToStringSafe()}");
                }
                if (printMask?.ByteArraySingleton ?? true)
                {
                    fg.AppendLine($"ByteArraySingleton => {ByteArraySingleton.ToStringSafe()}");
                }
                if (printMask?.BoolN ?? true)
                {
                    fg.AppendLine($"BoolN => {BoolN.ToStringSafe()}");
                }
                if (printMask?.Bool ?? true)
                {
                    fg.AppendLine($"Bool => {Bool.ToStringSafe()}");
                }
                if (printMask?.CharN ?? true)
                {
                    fg.AppendLine($"CharN => {CharN.ToStringSafe()}");
                }
                if (printMask?.Char ?? true)
                {
                    fg.AppendLine($"Char => {Char.ToStringSafe()}");
                }
                if (printMask?.DateTimeNull ?? true)
                {
                    fg.AppendLine($"DateTimeNull => {DateTimeNull.ToStringSafe()}");
                }
                if (printMask?.DateTime ?? true)
                {
                    fg.AppendLine($"DateTime => {DateTime.ToStringSafe()}");
                }
                if (printMask?.DoubleN ?? true)
                {
                    fg.AppendLine($"DoubleN => {DoubleN.ToStringSafe()}");
                }
                if (printMask?.DoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"DoubleN_Ranged => {DoubleN_Ranged.ToStringSafe()}");
                }
                if (printMask?.Double ?? true)
                {
                    fg.AppendLine($"Double => {Double.ToStringSafe()}");
                }
                if (printMask?.Double_Ranged ?? true)
                {
                    fg.AppendLine($"Double_Ranged => {Double_Ranged.ToStringSafe()}");
                }
                if (printMask?.FloatN ?? true)
                {
                    fg.AppendLine($"FloatN => {FloatN.ToStringSafe()}");
                }
                if (printMask?.FloatN_Ranged ?? true)
                {
                    fg.AppendLine($"FloatN_Ranged => {FloatN_Ranged.ToStringSafe()}");
                }
                if (printMask?.Float ?? true)
                {
                    fg.AppendLine($"Float => {Float.ToStringSafe()}");
                }
                if (printMask?.Float_Ranged ?? true)
                {
                    fg.AppendLine($"Float_Ranged => {Float_Ranged.ToStringSafe()}");
                }
                if (printMask?.Int16N ?? true)
                {
                    fg.AppendLine($"Int16N => {Int16N.ToStringSafe()}");
                }
                if (printMask?.Int16N_Ranged ?? true)
                {
                    fg.AppendLine($"Int16N_Ranged => {Int16N_Ranged.ToStringSafe()}");
                }
                if (printMask?.Int16 ?? true)
                {
                    fg.AppendLine($"Int16 => {Int16.ToStringSafe()}");
                }
                if (printMask?.Int16_Ranged ?? true)
                {
                    fg.AppendLine($"Int16_Ranged => {Int16_Ranged.ToStringSafe()}");
                }
                if (printMask?.Int32N ?? true)
                {
                    fg.AppendLine($"Int32N => {Int32N.ToStringSafe()}");
                }
                if (printMask?.Int32N_Ranged ?? true)
                {
                    fg.AppendLine($"Int32N_Ranged => {Int32N_Ranged.ToStringSafe()}");
                }
                if (printMask?.Int32 ?? true)
                {
                    fg.AppendLine($"Int32 => {Int32.ToStringSafe()}");
                }
                if (printMask?.Int32_Ranged ?? true)
                {
                    fg.AppendLine($"Int32_Ranged => {Int32_Ranged.ToStringSafe()}");
                }
                if (printMask?.Int64N ?? true)
                {
                    fg.AppendLine($"Int64N => {Int64N.ToStringSafe()}");
                }
                if (printMask?.Int64N_Ranged ?? true)
                {
                    fg.AppendLine($"Int64N_Ranged => {Int64N_Ranged.ToStringSafe()}");
                }
                if (printMask?.Int64 ?? true)
                {
                    fg.AppendLine($"Int64 => {Int64.ToStringSafe()}");
                }
                if (printMask?.Int64_Ranged ?? true)
                {
                    fg.AppendLine($"Int64_Ranged => {Int64_Ranged.ToStringSafe()}");
                }
                if (printMask?.Int8N ?? true)
                {
                    fg.AppendLine($"Int8N => {Int8N.ToStringSafe()}");
                }
                if (printMask?.Int8N_Ranged ?? true)
                {
                    fg.AppendLine($"Int8N_Ranged => {Int8N_Ranged.ToStringSafe()}");
                }
                if (printMask?.Int8 ?? true)
                {
                    fg.AppendLine($"Int8 => {Int8.ToStringSafe()}");
                }
                if (printMask?.Int8_Ranged ?? true)
                {
                    fg.AppendLine($"Int8_Ranged => {Int8_Ranged.ToStringSafe()}");
                }
                if (printMask?.Unsafe ?? true)
                {
                    fg.AppendLine($"Unsafe => {Unsafe.ToStringSafe()}");
                }
                if (printMask?.UnsafeLoqui ?? true)
                {
                    fg.AppendLine($"UnsafeLoqui => {UnsafeLoqui.ToStringSafe()}");
                }
                if (printMask?.UnsafeNull ?? true)
                {
                    fg.AppendLine($"UnsafeNull => {UnsafeNull.ToStringSafe()}");
                }
                if (printMask?.P2IntN ?? true)
                {
                    fg.AppendLine($"P2IntN => {P2IntN.ToStringSafe()}");
                }
                if (printMask?.P2Int ?? true)
                {
                    fg.AppendLine($"P2Int => {P2Int.ToStringSafe()}");
                }
                if (printMask?.P3DoubleN ?? true)
                {
                    fg.AppendLine($"P3DoubleN => {P3DoubleN.ToStringSafe()}");
                }
                if (printMask?.P3Double ?? true)
                {
                    fg.AppendLine($"P3Double => {P3Double.ToStringSafe()}");
                }
                if (printMask?.P3IntN ?? true)
                {
                    fg.AppendLine($"P3IntN => {P3IntN.ToStringSafe()}");
                }
                if (printMask?.P3Int ?? true)
                {
                    fg.AppendLine($"P3Int => {P3Int.ToStringSafe()}");
                }
                if (printMask?.PercentN ?? true)
                {
                    fg.AppendLine($"PercentN => {PercentN.ToStringSafe()}");
                }
                if (printMask?.Percent ?? true)
                {
                    fg.AppendLine($"Percent => {Percent.ToStringSafe()}");
                }
                if (printMask?.RangeInt8N ?? true)
                {
                    fg.AppendLine($"RangeInt8N => {RangeInt8N.ToStringSafe()}");
                }
                if (printMask?.RangeInt8 ?? true)
                {
                    fg.AppendLine($"RangeInt8 => {RangeInt8.ToStringSafe()}");
                }
                if (printMask?.RangeInt16N ?? true)
                {
                    fg.AppendLine($"RangeInt16N => {RangeInt16N.ToStringSafe()}");
                }
                if (printMask?.RangeInt16 ?? true)
                {
                    fg.AppendLine($"RangeInt16 => {RangeInt16.ToStringSafe()}");
                }
                if (printMask?.RangeInt32N ?? true)
                {
                    fg.AppendLine($"RangeInt32N => {RangeInt32N.ToStringSafe()}");
                }
                if (printMask?.RangeInt32 ?? true)
                {
                    fg.AppendLine($"RangeInt32 => {RangeInt32.ToStringSafe()}");
                }
                if (printMask?.RangeInt64N ?? true)
                {
                    fg.AppendLine($"RangeInt64N => {RangeInt64N.ToStringSafe()}");
                }
                if (printMask?.RangeInt64 ?? true)
                {
                    fg.AppendLine($"RangeInt64 => {RangeInt64.ToStringSafe()}");
                }
                if (printMask?.RangeUInt8N ?? true)
                {
                    fg.AppendLine($"RangeUInt8N => {RangeUInt8N.ToStringSafe()}");
                }
                if (printMask?.RangeUInt8 ?? true)
                {
                    fg.AppendLine($"RangeUInt8 => {RangeUInt8.ToStringSafe()}");
                }
                if (printMask?.RangeUInt16N ?? true)
                {
                    fg.AppendLine($"RangeUInt16N => {RangeUInt16N.ToStringSafe()}");
                }
                if (printMask?.RangeUInt16 ?? true)
                {
                    fg.AppendLine($"RangeUInt16 => {RangeUInt16.ToStringSafe()}");
                }
                if (printMask?.RangeUInt32N ?? true)
                {
                    fg.AppendLine($"RangeUInt32N => {RangeUInt32N.ToStringSafe()}");
                }
                if (printMask?.RangeUInt32 ?? true)
                {
                    fg.AppendLine($"RangeUInt32 => {RangeUInt32.ToStringSafe()}");
                }
                if (printMask?.RangeUInt64N ?? true)
                {
                    fg.AppendLine($"RangeUInt64N => {RangeUInt64N.ToStringSafe()}");
                }
                if (printMask?.RangeUInt64 ?? true)
                {
                    fg.AppendLine($"RangeUInt64 => {RangeUInt64.ToStringSafe()}");
                }
                if (printMask?.String ?? true)
                {
                    fg.AppendLine($"String => {String.ToStringSafe()}");
                }
                if (printMask?.FilePath ?? true)
                {
                    fg.AppendLine($"FilePath => {FilePath.ToStringSafe()}");
                }
                if (printMask?.FilePathNull ?? true)
                {
                    fg.AppendLine($"FilePathNull => {FilePathNull.ToStringSafe()}");
                }
                if (printMask?.DirectoryPath ?? true)
                {
                    fg.AppendLine($"DirectoryPath => {DirectoryPath.ToStringSafe()}");
                }
                if (printMask?.DirectoryPathNull ?? true)
                {
                    fg.AppendLine($"DirectoryPathNull => {DirectoryPathNull.ToStringSafe()}");
                }
                if (printMask?.UDoubleN ?? true)
                {
                    fg.AppendLine($"UDoubleN => {UDoubleN.ToStringSafe()}");
                }
                if (printMask?.UDoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"UDoubleN_Ranged => {UDoubleN_Ranged.ToStringSafe()}");
                }
                if (printMask?.UDouble ?? true)
                {
                    fg.AppendLine($"UDouble => {UDouble.ToStringSafe()}");
                }
                if (printMask?.UDouble_Ranged ?? true)
                {
                    fg.AppendLine($"UDouble_Ranged => {UDouble_Ranged.ToStringSafe()}");
                }
                if (printMask?.UInt16N ?? true)
                {
                    fg.AppendLine($"UInt16N => {UInt16N.ToStringSafe()}");
                }
                if (printMask?.UInt16N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16N_Ranged => {UInt16N_Ranged.ToStringSafe()}");
                }
                if (printMask?.UInt16 ?? true)
                {
                    fg.AppendLine($"UInt16 => {UInt16.ToStringSafe()}");
                }
                if (printMask?.UInt16_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16_Ranged => {UInt16_Ranged.ToStringSafe()}");
                }
                if (printMask?.UInt32N ?? true)
                {
                    fg.AppendLine($"UInt32N => {UInt32N.ToStringSafe()}");
                }
                if (printMask?.UInt32N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32N_Ranged => {UInt32N_Ranged.ToStringSafe()}");
                }
                if (printMask?.UInt32 ?? true)
                {
                    fg.AppendLine($"UInt32 => {UInt32.ToStringSafe()}");
                }
                if (printMask?.UInt32_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32_Ranged => {UInt32_Ranged.ToStringSafe()}");
                }
                if (printMask?.UInt64N ?? true)
                {
                    fg.AppendLine($"UInt64N => {UInt64N.ToStringSafe()}");
                }
                if (printMask?.UInt64N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64N_Ranged => {UInt64N_Ranged.ToStringSafe()}");
                }
                if (printMask?.UInt64 ?? true)
                {
                    fg.AppendLine($"UInt64 => {UInt64.ToStringSafe()}");
                }
                if (printMask?.UInt64_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64_Ranged => {UInt64_Ranged.ToStringSafe()}");
                }
                if (printMask?.UInt8N ?? true)
                {
                    fg.AppendLine($"UInt8N => {UInt8N.ToStringSafe()}");
                }
                if (printMask?.UInt8N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8N_Ranged => {UInt8N_Ranged.ToStringSafe()}");
                }
                if (printMask?.UInt8 ?? true)
                {
                    fg.AppendLine($"UInt8 => {UInt8.ToStringSafe()}");
                }
                if (printMask?.UInt8_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8_Ranged => {UInt8_Ranged.ToStringSafe()}");
                }
                if (printMask?.Enum ?? true)
                {
                    fg.AppendLine($"Enum => {Enum.ToStringSafe()}");
                }
                if (printMask?.EnumNull ?? true)
                {
                    fg.AppendLine($"EnumNull => {EnumNull.ToStringSafe()}");
                }
                if (printMask?.WildCard ?? true)
                {
                    fg.AppendLine($"WildCard => {WildCard.ToStringSafe()}");
                }
                if (printMask?.WildCardLoqui ?? true)
                {
                    fg.AppendLine($"WildCardLoqui => {WildCardLoqui.ToStringSafe()}");
                }
                if (printMask?.WildCardNull ?? true)
                {
                    fg.AppendLine($"WildCardNull => {WildCardNull.ToStringSafe()}");
                }
                if (printMask?.Ref?.Overall ?? true)
                {
                    Ref.ToString(fg);
                }
                if (printMask?.Ref_NotNull?.Overall ?? true)
                {
                    Ref_NotNull.ToString(fg);
                }
                if (printMask?.Ref_Singleton?.Overall ?? true)
                {
                    Ref_Singleton.ToString(fg);
                }
                if (printMask?.RefGetter?.Overall ?? true)
                {
                    RefGetter.ToString(fg);
                }
                if (printMask?.RefGetter_NotNull?.Overall ?? true)
                {
                    RefGetter_NotNull.ToString(fg);
                }
                if (printMask?.RefGetter_Singleton?.Overall ?? true)
                {
                    RefGetter_Singleton.ToString(fg);
                }
                if (printMask?.RefSetter?.Overall ?? true)
                {
                    RefSetter.ToString(fg);
                }
                if (printMask?.RefSetter_NotNull?.Overall ?? true)
                {
                    RefSetter_NotNull.ToString(fg);
                }
                if (printMask?.RefSetter_Singleton?.Overall ?? true)
                {
                    RefSetter_Singleton.ToString(fg);
                }
                if (printMask?.List?.Overall ?? true)
                {
                    fg.AppendLine("List =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (List.Overall != null)
                        {
                            fg.AppendLine(List.Overall.ToString());
                        }
                        if (List.Specific != null)
                        {
                            foreach (var subItem in List.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefList?.Overall ?? true)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefList.Overall != null)
                        {
                            fg.AppendLine(RefList.Overall.ToString());
                        }
                        if (RefList.Specific != null)
                        {
                            foreach (var subItem in RefList.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Dict?.Overall ?? true)
                {
                    fg.AppendLine("Dict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Dict.Overall != null)
                        {
                            fg.AppendLine(Dict.Overall.ToString());
                        }
                        if (Dict.Specific != null)
                        {
                            foreach (var subItem in Dict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Key.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Value.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefDict?.Overall ?? true)
                {
                    fg.AppendLine("RefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefDict.Overall != null)
                        {
                            fg.AppendLine(RefDict.Overall.ToString());
                        }
                        if (RefDict.Specific != null)
                        {
                            foreach (var subItem in RefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Key.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Value.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.KeyRefDict?.Overall ?? true)
                {
                    fg.AppendLine("KeyRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (KeyRefDict.Overall != null)
                        {
                            fg.AppendLine(KeyRefDict.Overall.ToString());
                        }
                        if (KeyRefDict.Specific != null)
                        {
                            foreach (var subItem in KeyRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Key.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Value.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.ValRefDict?.Overall ?? true)
                {
                    fg.AppendLine("ValRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (ValRefDict.Overall != null)
                        {
                            fg.AppendLine(ValRefDict.Overall.ToString());
                        }
                        if (ValRefDict.Specific != null)
                        {
                            foreach (var subItem in ValRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Key.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Value.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DictKeyedValue?.Overall ?? true)
                {
                    fg.AppendLine("DictKeyedValue =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (DictKeyedValue.Overall != null)
                        {
                            fg.AppendLine(DictKeyedValue.Overall.ToString());
                        }
                        if (DictKeyedValue.Specific != null)
                        {
                            foreach (var subItem in DictKeyedValue.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($"KeyField => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestObject_HasBeenSet_ReadOnly_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ByteArray;
        public Exception ByteArrayNull;
        public Exception ByteArrayNotNull;
        public Exception ByteArraySingleton;
        public Exception BoolN;
        public Exception Bool;
        public Exception CharN;
        public Exception Char;
        public Exception DateTimeNull;
        public Exception DateTime;
        public Exception DoubleN;
        public Exception DoubleN_Ranged;
        public Exception Double;
        public Exception Double_Ranged;
        public Exception FloatN;
        public Exception FloatN_Ranged;
        public Exception Float;
        public Exception Float_Ranged;
        public Exception Int16N;
        public Exception Int16N_Ranged;
        public Exception Int16;
        public Exception Int16_Ranged;
        public Exception Int32N;
        public Exception Int32N_Ranged;
        public Exception Int32;
        public Exception Int32_Ranged;
        public Exception Int64N;
        public Exception Int64N_Ranged;
        public Exception Int64;
        public Exception Int64_Ranged;
        public Exception Int8N;
        public Exception Int8N_Ranged;
        public Exception Int8;
        public Exception Int8_Ranged;
        public object Unsafe;
        public object UnsafeLoqui;
        public object UnsafeNull;
        public Exception P2IntN;
        public Exception P2Int;
        public Exception P3DoubleN;
        public Exception P3Double;
        public Exception P3IntN;
        public Exception P3Int;
        public Exception PercentN;
        public Exception Percent;
        public Exception RangeInt8N;
        public Exception RangeInt8;
        public Exception RangeInt16N;
        public Exception RangeInt16;
        public Exception RangeInt32N;
        public Exception RangeInt32;
        public Exception RangeInt64N;
        public Exception RangeInt64;
        public Exception RangeUInt8N;
        public Exception RangeUInt8;
        public Exception RangeUInt16N;
        public Exception RangeUInt16;
        public Exception RangeUInt32N;
        public Exception RangeUInt32;
        public Exception RangeUInt64N;
        public Exception RangeUInt64;
        public Exception String;
        public Exception FilePath;
        public Exception FilePathNull;
        public Exception DirectoryPath;
        public Exception DirectoryPathNull;
        public Exception UDoubleN;
        public Exception UDoubleN_Ranged;
        public Exception UDouble;
        public Exception UDouble_Ranged;
        public Exception UInt16N;
        public Exception UInt16N_Ranged;
        public Exception UInt16;
        public Exception UInt16_Ranged;
        public Exception UInt32N;
        public Exception UInt32N_Ranged;
        public Exception UInt32;
        public Exception UInt32_Ranged;
        public Exception UInt64N;
        public Exception UInt64N_Ranged;
        public Exception UInt64;
        public Exception UInt64_Ranged;
        public Exception UInt8N;
        public Exception UInt8N_Ranged;
        public Exception UInt8;
        public Exception UInt8_Ranged;
        public Exception Enum;
        public Exception EnumNull;
        public object WildCard;
        public object WildCardLoqui;
        public object WildCardNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_Singleton;
        public MaskItem<Exception, IEnumerable<Exception>> List;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> RefList;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> Dict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>> RefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>> KeyRefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>> ValRefDict;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> DictKeyedValue;
        #endregion

        #region IErrorMask
        public void SetNthException(ushort index, Exception ex)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    this.ByteArray = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    this.ByteArrayNull = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    this.ByteArrayNotNull = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    this.ByteArraySingleton = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    this.BoolN = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    this.Bool = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    this.CharN = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    this.Char = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    this.DateTimeNull = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    this.DateTime = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    this.DoubleN = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    this.Double = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    this.Double_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    this.FloatN = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    this.Float = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    this.Float_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    this.Int16N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    this.Int16 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    this.Int32N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    this.Int32 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    this.Int64N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    this.Int64 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    this.Int8N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    this.Int8 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    this.Unsafe = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    this.UnsafeLoqui = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    this.UnsafeNull = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    this.P2IntN = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    this.P2Int = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    this.P3DoubleN = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    this.P3Double = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    this.P3IntN = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    this.P3Int = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    this.PercentN = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    this.Percent = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    this.RangeInt8N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    this.RangeInt8 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    this.RangeInt16N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    this.RangeInt16 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    this.RangeInt32N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    this.RangeInt32 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    this.RangeInt64N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    this.RangeInt64 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    this.String = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    this.FilePath = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    this.FilePathNull = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    this.DirectoryPath = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    this.DirectoryPathNull = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    this.UDoubleN = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    this.UDouble = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    this.UInt16N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    this.UInt16 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    this.UInt32N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    this.UInt32 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    this.UInt64N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    this.UInt64 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    this.UInt8N = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    this.UInt8 = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    this.Enum = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    this.EnumNull = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    this.WildCard = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    this.WildCardLoqui = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    this.WildCardNull = ex;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    this.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    this.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    this.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    this.List = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    this.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    this.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    this.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    this.KeyRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    this.ValRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            TestObject_HasBeenSet_ReadOnly_FieldIndex enu = (TestObject_HasBeenSet_ReadOnly_FieldIndex)index;
            switch (enu)
            {
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArray:
                    this.ByteArray = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNull:
                    this.ByteArrayNull = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArrayNotNull:
                    this.ByteArrayNotNull = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ByteArraySingleton:
                    this.ByteArraySingleton = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.BoolN:
                    this.BoolN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Bool:
                    this.Bool = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.CharN:
                    this.CharN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Char:
                    this.Char = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTimeNull:
                    this.DateTimeNull = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DateTime:
                    this.DateTime = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN:
                    this.DoubleN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double:
                    this.Double = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Double_Ranged:
                    this.Double_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN:
                    this.FloatN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float:
                    this.Float = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Float_Ranged:
                    this.Float_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N:
                    this.Int16N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16:
                    this.Int16 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N:
                    this.Int32N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32:
                    this.Int32 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N:
                    this.Int64N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64:
                    this.Int64 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N:
                    this.Int8N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8:
                    this.Int8 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Unsafe:
                    this.Unsafe = obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeLoqui:
                    this.UnsafeLoqui = obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UnsafeNull:
                    this.UnsafeNull = obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2IntN:
                    this.P2IntN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P2Int:
                    this.P2Int = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3DoubleN:
                    this.P3DoubleN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Double:
                    this.P3Double = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3IntN:
                    this.P3IntN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.P3Int:
                    this.P3Int = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.PercentN:
                    this.PercentN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Percent:
                    this.Percent = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8N:
                    this.RangeInt8N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt8:
                    this.RangeInt8 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16N:
                    this.RangeInt16N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt16:
                    this.RangeInt16 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32N:
                    this.RangeInt32N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt32:
                    this.RangeInt32 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64N:
                    this.RangeInt64N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeInt64:
                    this.RangeInt64 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.String:
                    this.String = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePath:
                    this.FilePath = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.FilePathNull:
                    this.FilePathNull = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPath:
                    this.DirectoryPath = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DirectoryPathNull:
                    this.DirectoryPathNull = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN:
                    this.UDoubleN = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble:
                    this.UDouble = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N:
                    this.UInt16N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16:
                    this.UInt16 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N:
                    this.UInt32N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32:
                    this.UInt32 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N:
                    this.UInt64N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64:
                    this.UInt64 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N:
                    this.UInt8N = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8:
                    this.UInt8 = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Enum:
                    this.Enum = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.EnumNull:
                    this.EnumNull = (Exception)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCard:
                    this.WildCard = obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardLoqui:
                    this.WildCardLoqui = obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.WildCardNull:
                    this.WildCardNull = obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref:
                    this.Ref = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter:
                    this.RefGetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter:
                    this.RefSetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.List:
                    this.List = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefList:
                    this.RefList = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.Dict:
                    this.Dict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.RefDict:
                    this.RefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.KeyRefDict:
                    this.KeyRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.ValRefDict:
                    this.ValRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_HasBeenSet_ReadOnly_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestObject_HasBeenSet_ReadOnly_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (ByteArray != null)
            {
                fg.AppendLine($"ByteArray => {ByteArray.ToStringSafe()}");
            }
            if (ByteArrayNull != null)
            {
                fg.AppendLine($"ByteArrayNull => {ByteArrayNull.ToStringSafe()}");
            }
            if (ByteArrayNotNull != null)
            {
                fg.AppendLine($"ByteArrayNotNull => {ByteArrayNotNull.ToStringSafe()}");
            }
            if (ByteArraySingleton != null)
            {
                fg.AppendLine($"ByteArraySingleton => {ByteArraySingleton.ToStringSafe()}");
            }
            if (BoolN != null)
            {
                fg.AppendLine($"BoolN => {BoolN.ToStringSafe()}");
            }
            if (Bool != null)
            {
                fg.AppendLine($"Bool => {Bool.ToStringSafe()}");
            }
            if (CharN != null)
            {
                fg.AppendLine($"CharN => {CharN.ToStringSafe()}");
            }
            if (Char != null)
            {
                fg.AppendLine($"Char => {Char.ToStringSafe()}");
            }
            if (DateTimeNull != null)
            {
                fg.AppendLine($"DateTimeNull => {DateTimeNull.ToStringSafe()}");
            }
            if (DateTime != null)
            {
                fg.AppendLine($"DateTime => {DateTime.ToStringSafe()}");
            }
            if (DoubleN != null)
            {
                fg.AppendLine($"DoubleN => {DoubleN.ToStringSafe()}");
            }
            if (DoubleN_Ranged != null)
            {
                fg.AppendLine($"DoubleN_Ranged => {DoubleN_Ranged.ToStringSafe()}");
            }
            if (Double != null)
            {
                fg.AppendLine($"Double => {Double.ToStringSafe()}");
            }
            if (Double_Ranged != null)
            {
                fg.AppendLine($"Double_Ranged => {Double_Ranged.ToStringSafe()}");
            }
            if (FloatN != null)
            {
                fg.AppendLine($"FloatN => {FloatN.ToStringSafe()}");
            }
            if (FloatN_Ranged != null)
            {
                fg.AppendLine($"FloatN_Ranged => {FloatN_Ranged.ToStringSafe()}");
            }
            if (Float != null)
            {
                fg.AppendLine($"Float => {Float.ToStringSafe()}");
            }
            if (Float_Ranged != null)
            {
                fg.AppendLine($"Float_Ranged => {Float_Ranged.ToStringSafe()}");
            }
            if (Int16N != null)
            {
                fg.AppendLine($"Int16N => {Int16N.ToStringSafe()}");
            }
            if (Int16N_Ranged != null)
            {
                fg.AppendLine($"Int16N_Ranged => {Int16N_Ranged.ToStringSafe()}");
            }
            if (Int16 != null)
            {
                fg.AppendLine($"Int16 => {Int16.ToStringSafe()}");
            }
            if (Int16_Ranged != null)
            {
                fg.AppendLine($"Int16_Ranged => {Int16_Ranged.ToStringSafe()}");
            }
            if (Int32N != null)
            {
                fg.AppendLine($"Int32N => {Int32N.ToStringSafe()}");
            }
            if (Int32N_Ranged != null)
            {
                fg.AppendLine($"Int32N_Ranged => {Int32N_Ranged.ToStringSafe()}");
            }
            if (Int32 != null)
            {
                fg.AppendLine($"Int32 => {Int32.ToStringSafe()}");
            }
            if (Int32_Ranged != null)
            {
                fg.AppendLine($"Int32_Ranged => {Int32_Ranged.ToStringSafe()}");
            }
            if (Int64N != null)
            {
                fg.AppendLine($"Int64N => {Int64N.ToStringSafe()}");
            }
            if (Int64N_Ranged != null)
            {
                fg.AppendLine($"Int64N_Ranged => {Int64N_Ranged.ToStringSafe()}");
            }
            if (Int64 != null)
            {
                fg.AppendLine($"Int64 => {Int64.ToStringSafe()}");
            }
            if (Int64_Ranged != null)
            {
                fg.AppendLine($"Int64_Ranged => {Int64_Ranged.ToStringSafe()}");
            }
            if (Int8N != null)
            {
                fg.AppendLine($"Int8N => {Int8N.ToStringSafe()}");
            }
            if (Int8N_Ranged != null)
            {
                fg.AppendLine($"Int8N_Ranged => {Int8N_Ranged.ToStringSafe()}");
            }
            if (Int8 != null)
            {
                fg.AppendLine($"Int8 => {Int8.ToStringSafe()}");
            }
            if (Int8_Ranged != null)
            {
                fg.AppendLine($"Int8_Ranged => {Int8_Ranged.ToStringSafe()}");
            }
            if (Unsafe != null)
            {
                fg.AppendLine($"Unsafe => {Unsafe.ToStringSafe()}");
            }
            if (UnsafeLoqui != null)
            {
                fg.AppendLine($"UnsafeLoqui => {UnsafeLoqui.ToStringSafe()}");
            }
            if (UnsafeNull != null)
            {
                fg.AppendLine($"UnsafeNull => {UnsafeNull.ToStringSafe()}");
            }
            if (P2IntN != null)
            {
                fg.AppendLine($"P2IntN => {P2IntN.ToStringSafe()}");
            }
            if (P2Int != null)
            {
                fg.AppendLine($"P2Int => {P2Int.ToStringSafe()}");
            }
            if (P3DoubleN != null)
            {
                fg.AppendLine($"P3DoubleN => {P3DoubleN.ToStringSafe()}");
            }
            if (P3Double != null)
            {
                fg.AppendLine($"P3Double => {P3Double.ToStringSafe()}");
            }
            if (P3IntN != null)
            {
                fg.AppendLine($"P3IntN => {P3IntN.ToStringSafe()}");
            }
            if (P3Int != null)
            {
                fg.AppendLine($"P3Int => {P3Int.ToStringSafe()}");
            }
            if (PercentN != null)
            {
                fg.AppendLine($"PercentN => {PercentN.ToStringSafe()}");
            }
            if (Percent != null)
            {
                fg.AppendLine($"Percent => {Percent.ToStringSafe()}");
            }
            if (RangeInt8N != null)
            {
                fg.AppendLine($"RangeInt8N => {RangeInt8N.ToStringSafe()}");
            }
            if (RangeInt8 != null)
            {
                fg.AppendLine($"RangeInt8 => {RangeInt8.ToStringSafe()}");
            }
            if (RangeInt16N != null)
            {
                fg.AppendLine($"RangeInt16N => {RangeInt16N.ToStringSafe()}");
            }
            if (RangeInt16 != null)
            {
                fg.AppendLine($"RangeInt16 => {RangeInt16.ToStringSafe()}");
            }
            if (RangeInt32N != null)
            {
                fg.AppendLine($"RangeInt32N => {RangeInt32N.ToStringSafe()}");
            }
            if (RangeInt32 != null)
            {
                fg.AppendLine($"RangeInt32 => {RangeInt32.ToStringSafe()}");
            }
            if (RangeInt64N != null)
            {
                fg.AppendLine($"RangeInt64N => {RangeInt64N.ToStringSafe()}");
            }
            if (RangeInt64 != null)
            {
                fg.AppendLine($"RangeInt64 => {RangeInt64.ToStringSafe()}");
            }
            if (RangeUInt8N != null)
            {
                fg.AppendLine($"RangeUInt8N => {RangeUInt8N.ToStringSafe()}");
            }
            if (RangeUInt8 != null)
            {
                fg.AppendLine($"RangeUInt8 => {RangeUInt8.ToStringSafe()}");
            }
            if (RangeUInt16N != null)
            {
                fg.AppendLine($"RangeUInt16N => {RangeUInt16N.ToStringSafe()}");
            }
            if (RangeUInt16 != null)
            {
                fg.AppendLine($"RangeUInt16 => {RangeUInt16.ToStringSafe()}");
            }
            if (RangeUInt32N != null)
            {
                fg.AppendLine($"RangeUInt32N => {RangeUInt32N.ToStringSafe()}");
            }
            if (RangeUInt32 != null)
            {
                fg.AppendLine($"RangeUInt32 => {RangeUInt32.ToStringSafe()}");
            }
            if (RangeUInt64N != null)
            {
                fg.AppendLine($"RangeUInt64N => {RangeUInt64N.ToStringSafe()}");
            }
            if (RangeUInt64 != null)
            {
                fg.AppendLine($"RangeUInt64 => {RangeUInt64.ToStringSafe()}");
            }
            if (String != null)
            {
                fg.AppendLine($"String => {String.ToStringSafe()}");
            }
            if (FilePath != null)
            {
                fg.AppendLine($"FilePath => {FilePath.ToStringSafe()}");
            }
            if (FilePathNull != null)
            {
                fg.AppendLine($"FilePathNull => {FilePathNull.ToStringSafe()}");
            }
            if (DirectoryPath != null)
            {
                fg.AppendLine($"DirectoryPath => {DirectoryPath.ToStringSafe()}");
            }
            if (DirectoryPathNull != null)
            {
                fg.AppendLine($"DirectoryPathNull => {DirectoryPathNull.ToStringSafe()}");
            }
            if (UDoubleN != null)
            {
                fg.AppendLine($"UDoubleN => {UDoubleN.ToStringSafe()}");
            }
            if (UDoubleN_Ranged != null)
            {
                fg.AppendLine($"UDoubleN_Ranged => {UDoubleN_Ranged.ToStringSafe()}");
            }
            if (UDouble != null)
            {
                fg.AppendLine($"UDouble => {UDouble.ToStringSafe()}");
            }
            if (UDouble_Ranged != null)
            {
                fg.AppendLine($"UDouble_Ranged => {UDouble_Ranged.ToStringSafe()}");
            }
            if (UInt16N != null)
            {
                fg.AppendLine($"UInt16N => {UInt16N.ToStringSafe()}");
            }
            if (UInt16N_Ranged != null)
            {
                fg.AppendLine($"UInt16N_Ranged => {UInt16N_Ranged.ToStringSafe()}");
            }
            if (UInt16 != null)
            {
                fg.AppendLine($"UInt16 => {UInt16.ToStringSafe()}");
            }
            if (UInt16_Ranged != null)
            {
                fg.AppendLine($"UInt16_Ranged => {UInt16_Ranged.ToStringSafe()}");
            }
            if (UInt32N != null)
            {
                fg.AppendLine($"UInt32N => {UInt32N.ToStringSafe()}");
            }
            if (UInt32N_Ranged != null)
            {
                fg.AppendLine($"UInt32N_Ranged => {UInt32N_Ranged.ToStringSafe()}");
            }
            if (UInt32 != null)
            {
                fg.AppendLine($"UInt32 => {UInt32.ToStringSafe()}");
            }
            if (UInt32_Ranged != null)
            {
                fg.AppendLine($"UInt32_Ranged => {UInt32_Ranged.ToStringSafe()}");
            }
            if (UInt64N != null)
            {
                fg.AppendLine($"UInt64N => {UInt64N.ToStringSafe()}");
            }
            if (UInt64N_Ranged != null)
            {
                fg.AppendLine($"UInt64N_Ranged => {UInt64N_Ranged.ToStringSafe()}");
            }
            if (UInt64 != null)
            {
                fg.AppendLine($"UInt64 => {UInt64.ToStringSafe()}");
            }
            if (UInt64_Ranged != null)
            {
                fg.AppendLine($"UInt64_Ranged => {UInt64_Ranged.ToStringSafe()}");
            }
            if (UInt8N != null)
            {
                fg.AppendLine($"UInt8N => {UInt8N.ToStringSafe()}");
            }
            if (UInt8N_Ranged != null)
            {
                fg.AppendLine($"UInt8N_Ranged => {UInt8N_Ranged.ToStringSafe()}");
            }
            if (UInt8 != null)
            {
                fg.AppendLine($"UInt8 => {UInt8.ToStringSafe()}");
            }
            if (UInt8_Ranged != null)
            {
                fg.AppendLine($"UInt8_Ranged => {UInt8_Ranged.ToStringSafe()}");
            }
            if (Enum != null)
            {
                fg.AppendLine($"Enum => {Enum.ToStringSafe()}");
            }
            if (EnumNull != null)
            {
                fg.AppendLine($"EnumNull => {EnumNull.ToStringSafe()}");
            }
            if (WildCard != null)
            {
                fg.AppendLine($"WildCard => {WildCard.ToStringSafe()}");
            }
            if (WildCardLoqui != null)
            {
                fg.AppendLine($"WildCardLoqui => {WildCardLoqui.ToStringSafe()}");
            }
            if (WildCardNull != null)
            {
                fg.AppendLine($"WildCardNull => {WildCardNull.ToStringSafe()}");
            }
            if (Ref != null)
            {
                Ref.ToString(fg);
            }
            if (Ref_NotNull != null)
            {
                Ref_NotNull.ToString(fg);
            }
            if (Ref_Singleton != null)
            {
                Ref_Singleton.ToString(fg);
            }
            if (RefGetter != null)
            {
                RefGetter.ToString(fg);
            }
            if (RefGetter_NotNull != null)
            {
                RefGetter_NotNull.ToString(fg);
            }
            if (RefGetter_Singleton != null)
            {
                RefGetter_Singleton.ToString(fg);
            }
            if (RefSetter != null)
            {
                RefSetter.ToString(fg);
            }
            if (RefSetter_NotNull != null)
            {
                RefSetter_NotNull.ToString(fg);
            }
            if (RefSetter_Singleton != null)
            {
                RefSetter_Singleton.ToString(fg);
            }
            if (List != null)
            {
                fg.AppendLine("List =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (List.Overall != null)
                    {
                        fg.AppendLine(List.Overall.ToString());
                    }
                    if (List.Specific != null)
                    {
                        foreach (var subItem in List.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem.ToStringSafe()}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (RefList != null)
            {
                fg.AppendLine("RefList =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (RefList.Overall != null)
                    {
                        fg.AppendLine(RefList.Overall.ToString());
                    }
                    if (RefList.Specific != null)
                    {
                        foreach (var subItem in RefList.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (Dict != null)
            {
                fg.AppendLine("Dict =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (Dict.Overall != null)
                    {
                        fg.AppendLine(Dict.Overall.ToString());
                    }
                    if (Dict.Specific != null)
                    {
                        foreach (var subItem in Dict.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine("Key => [");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.Key.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                                fg.AppendLine("Value => [");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.Value.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (RefDict != null)
            {
                fg.AppendLine("RefDict =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (RefDict.Overall != null)
                    {
                        fg.AppendLine(RefDict.Overall.ToString());
                    }
                    if (RefDict.Specific != null)
                    {
                        foreach (var subItem in RefDict.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine("Key => [");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.Key.ToString(fg);
                                }
                                fg.AppendLine("]");
                                fg.AppendLine("Value => [");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.Value.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (KeyRefDict != null)
            {
                fg.AppendLine("KeyRefDict =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (KeyRefDict.Overall != null)
                    {
                        fg.AppendLine(KeyRefDict.Overall.ToString());
                    }
                    if (KeyRefDict.Specific != null)
                    {
                        foreach (var subItem in KeyRefDict.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine("Key => [");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.Key.ToString(fg);
                                }
                                fg.AppendLine("]");
                                fg.AppendLine("Value => [");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.Value.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (ValRefDict != null)
            {
                fg.AppendLine("ValRefDict =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (ValRefDict.Overall != null)
                    {
                        fg.AppendLine(ValRefDict.Overall.ToString());
                    }
                    if (ValRefDict.Specific != null)
                    {
                        foreach (var subItem in ValRefDict.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine("Key => [");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.Key.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                                fg.AppendLine("Value => [");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.Value.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
            if (DictKeyedValue != null)
            {
                fg.AppendLine("DictKeyedValue =>");
                fg.AppendLine("[");
                using (new DepthWrapper(fg))
                {
                    if (DictKeyedValue.Overall != null)
                    {
                        fg.AppendLine(DictKeyedValue.Overall.ToString());
                    }
                    if (DictKeyedValue.Specific != null)
                    {
                        foreach (var subItem in DictKeyedValue.Specific)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"KeyField => {subItem.ToStringSafe()}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                }
                fg.AppendLine("]");
            }
        }
        #endregion

        #region Combine
        public TestObject_HasBeenSet_ReadOnly_ErrorMask Combine(TestObject_HasBeenSet_ReadOnly_ErrorMask rhs)
        {
            var ret = new TestObject_HasBeenSet_ReadOnly_ErrorMask();
            ret.ByteArray = this.ByteArray.Combine(rhs.ByteArray);
            ret.ByteArrayNull = this.ByteArrayNull.Combine(rhs.ByteArrayNull);
            ret.ByteArrayNotNull = this.ByteArrayNotNull.Combine(rhs.ByteArrayNotNull);
            ret.ByteArraySingleton = this.ByteArraySingleton.Combine(rhs.ByteArraySingleton);
            ret.BoolN = this.BoolN.Combine(rhs.BoolN);
            ret.Bool = this.Bool.Combine(rhs.Bool);
            ret.CharN = this.CharN.Combine(rhs.CharN);
            ret.Char = this.Char.Combine(rhs.Char);
            ret.DateTimeNull = this.DateTimeNull.Combine(rhs.DateTimeNull);
            ret.DateTime = this.DateTime.Combine(rhs.DateTime);
            ret.DoubleN = this.DoubleN.Combine(rhs.DoubleN);
            ret.DoubleN_Ranged = this.DoubleN_Ranged.Combine(rhs.DoubleN_Ranged);
            ret.Double = this.Double.Combine(rhs.Double);
            ret.Double_Ranged = this.Double_Ranged.Combine(rhs.Double_Ranged);
            ret.FloatN = this.FloatN.Combine(rhs.FloatN);
            ret.FloatN_Ranged = this.FloatN_Ranged.Combine(rhs.FloatN_Ranged);
            ret.Float = this.Float.Combine(rhs.Float);
            ret.Float_Ranged = this.Float_Ranged.Combine(rhs.Float_Ranged);
            ret.Int16N = this.Int16N.Combine(rhs.Int16N);
            ret.Int16N_Ranged = this.Int16N_Ranged.Combine(rhs.Int16N_Ranged);
            ret.Int16 = this.Int16.Combine(rhs.Int16);
            ret.Int16_Ranged = this.Int16_Ranged.Combine(rhs.Int16_Ranged);
            ret.Int32N = this.Int32N.Combine(rhs.Int32N);
            ret.Int32N_Ranged = this.Int32N_Ranged.Combine(rhs.Int32N_Ranged);
            ret.Int32 = this.Int32.Combine(rhs.Int32);
            ret.Int32_Ranged = this.Int32_Ranged.Combine(rhs.Int32_Ranged);
            ret.Int64N = this.Int64N.Combine(rhs.Int64N);
            ret.Int64N_Ranged = this.Int64N_Ranged.Combine(rhs.Int64N_Ranged);
            ret.Int64 = this.Int64.Combine(rhs.Int64);
            ret.Int64_Ranged = this.Int64_Ranged.Combine(rhs.Int64_Ranged);
            ret.Int8N = this.Int8N.Combine(rhs.Int8N);
            ret.Int8N_Ranged = this.Int8N_Ranged.Combine(rhs.Int8N_Ranged);
            ret.Int8 = this.Int8.Combine(rhs.Int8);
            ret.Int8_Ranged = this.Int8_Ranged.Combine(rhs.Int8_Ranged);
            ret.Unsafe = this.Unsafe ?? rhs.Unsafe;
            ret.UnsafeLoqui = this.UnsafeLoqui ?? rhs.UnsafeLoqui;
            ret.UnsafeNull = this.UnsafeNull ?? rhs.UnsafeNull;
            ret.P2IntN = this.P2IntN.Combine(rhs.P2IntN);
            ret.P2Int = this.P2Int.Combine(rhs.P2Int);
            ret.P3DoubleN = this.P3DoubleN.Combine(rhs.P3DoubleN);
            ret.P3Double = this.P3Double.Combine(rhs.P3Double);
            ret.P3IntN = this.P3IntN.Combine(rhs.P3IntN);
            ret.P3Int = this.P3Int.Combine(rhs.P3Int);
            ret.PercentN = this.PercentN.Combine(rhs.PercentN);
            ret.Percent = this.Percent.Combine(rhs.Percent);
            ret.RangeInt8N = this.RangeInt8N.Combine(rhs.RangeInt8N);
            ret.RangeInt8 = this.RangeInt8.Combine(rhs.RangeInt8);
            ret.RangeInt16N = this.RangeInt16N.Combine(rhs.RangeInt16N);
            ret.RangeInt16 = this.RangeInt16.Combine(rhs.RangeInt16);
            ret.RangeInt32N = this.RangeInt32N.Combine(rhs.RangeInt32N);
            ret.RangeInt32 = this.RangeInt32.Combine(rhs.RangeInt32);
            ret.RangeInt64N = this.RangeInt64N.Combine(rhs.RangeInt64N);
            ret.RangeInt64 = this.RangeInt64.Combine(rhs.RangeInt64);
            ret.RangeUInt8N = this.RangeUInt8N.Combine(rhs.RangeUInt8N);
            ret.RangeUInt8 = this.RangeUInt8.Combine(rhs.RangeUInt8);
            ret.RangeUInt16N = this.RangeUInt16N.Combine(rhs.RangeUInt16N);
            ret.RangeUInt16 = this.RangeUInt16.Combine(rhs.RangeUInt16);
            ret.RangeUInt32N = this.RangeUInt32N.Combine(rhs.RangeUInt32N);
            ret.RangeUInt32 = this.RangeUInt32.Combine(rhs.RangeUInt32);
            ret.RangeUInt64N = this.RangeUInt64N.Combine(rhs.RangeUInt64N);
            ret.RangeUInt64 = this.RangeUInt64.Combine(rhs.RangeUInt64);
            ret.String = this.String.Combine(rhs.String);
            ret.FilePath = this.FilePath.Combine(rhs.FilePath);
            ret.FilePathNull = this.FilePathNull.Combine(rhs.FilePathNull);
            ret.DirectoryPath = this.DirectoryPath.Combine(rhs.DirectoryPath);
            ret.DirectoryPathNull = this.DirectoryPathNull.Combine(rhs.DirectoryPathNull);
            ret.UDoubleN = this.UDoubleN.Combine(rhs.UDoubleN);
            ret.UDoubleN_Ranged = this.UDoubleN_Ranged.Combine(rhs.UDoubleN_Ranged);
            ret.UDouble = this.UDouble.Combine(rhs.UDouble);
            ret.UDouble_Ranged = this.UDouble_Ranged.Combine(rhs.UDouble_Ranged);
            ret.UInt16N = this.UInt16N.Combine(rhs.UInt16N);
            ret.UInt16N_Ranged = this.UInt16N_Ranged.Combine(rhs.UInt16N_Ranged);
            ret.UInt16 = this.UInt16.Combine(rhs.UInt16);
            ret.UInt16_Ranged = this.UInt16_Ranged.Combine(rhs.UInt16_Ranged);
            ret.UInt32N = this.UInt32N.Combine(rhs.UInt32N);
            ret.UInt32N_Ranged = this.UInt32N_Ranged.Combine(rhs.UInt32N_Ranged);
            ret.UInt32 = this.UInt32.Combine(rhs.UInt32);
            ret.UInt32_Ranged = this.UInt32_Ranged.Combine(rhs.UInt32_Ranged);
            ret.UInt64N = this.UInt64N.Combine(rhs.UInt64N);
            ret.UInt64N_Ranged = this.UInt64N_Ranged.Combine(rhs.UInt64N_Ranged);
            ret.UInt64 = this.UInt64.Combine(rhs.UInt64);
            ret.UInt64_Ranged = this.UInt64_Ranged.Combine(rhs.UInt64_Ranged);
            ret.UInt8N = this.UInt8N.Combine(rhs.UInt8N);
            ret.UInt8N_Ranged = this.UInt8N_Ranged.Combine(rhs.UInt8N_Ranged);
            ret.UInt8 = this.UInt8.Combine(rhs.UInt8);
            ret.UInt8_Ranged = this.UInt8_Ranged.Combine(rhs.UInt8_Ranged);
            ret.Enum = this.Enum.Combine(rhs.Enum);
            ret.EnumNull = this.EnumNull.Combine(rhs.EnumNull);
            ret.WildCard = this.WildCard ?? rhs.WildCard;
            ret.WildCardLoqui = this.WildCardLoqui ?? rhs.WildCardLoqui;
            ret.WildCardNull = this.WildCardNull ?? rhs.WildCardNull;
            ret.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.Ref.Overall.Combine(rhs.Ref.Overall), this.Ref.Specific.Combine(rhs.Ref.Specific));
            ret.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.Ref_NotNull.Overall.Combine(rhs.Ref_NotNull.Overall), this.Ref_NotNull.Specific.Combine(rhs.Ref_NotNull.Specific));
            ret.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.Ref_Singleton.Overall.Combine(rhs.Ref_Singleton.Overall), this.Ref_Singleton.Specific.Combine(rhs.Ref_Singleton.Specific));
            ret.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefGetter.Overall.Combine(rhs.RefGetter.Overall), this.RefGetter.Specific.Combine(rhs.RefGetter.Specific));
            ret.RefGetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefGetter_NotNull.Overall.Combine(rhs.RefGetter_NotNull.Overall), this.RefGetter_NotNull.Specific.Combine(rhs.RefGetter_NotNull.Specific));
            ret.RefGetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefGetter_Singleton.Overall.Combine(rhs.RefGetter_Singleton.Overall), this.RefGetter_Singleton.Specific.Combine(rhs.RefGetter_Singleton.Specific));
            ret.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefSetter.Overall.Combine(rhs.RefSetter.Overall), this.RefSetter.Specific.Combine(rhs.RefSetter.Specific));
            ret.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefSetter_NotNull.Overall.Combine(rhs.RefSetter_NotNull.Overall), this.RefSetter_NotNull.Specific.Combine(rhs.RefSetter_NotNull.Specific));
            ret.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefSetter_Singleton.Overall.Combine(rhs.RefSetter_Singleton.Overall), this.RefSetter_Singleton.Specific.Combine(rhs.RefSetter_Singleton.Specific));
            ret.List = new MaskItem<Exception, IEnumerable<Exception>>(this.List.Overall.Combine(rhs.List.Overall), new List<Exception>(this.List.Specific.And(rhs.List.Specific)));
            ret.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.RefList.Overall.Combine(rhs.RefList.Overall), new List<MaskItem<Exception, ObjectToRef_ErrorMask>>(this.RefList.Specific.And(rhs.RefList.Specific)));
            ret.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(this.Dict.Overall.Combine(rhs.Dict.Overall), new List<KeyValuePair<Exception, Exception>>(this.Dict.Specific.And(rhs.Dict.Specific)));
            ret.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(this.RefDict.Overall.Combine(rhs.RefDict.Overall), new List<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.RefDict.Specific.And(rhs.RefDict.Specific)));
            ret.KeyRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>(this.KeyRefDict.Overall.Combine(rhs.KeyRefDict.Overall), new List<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>(this.KeyRefDict.Specific.And(rhs.KeyRefDict.Specific)));
            ret.ValRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(this.ValRefDict.Overall.Combine(rhs.ValRefDict.Overall), new List<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.ValRefDict.Specific.And(rhs.ValRefDict.Specific)));
            ret.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.DictKeyedValue.Overall.Combine(rhs.DictKeyedValue.Overall), new List<MaskItem<Exception, ObjectToRef_ErrorMask>>(this.DictKeyedValue.Specific.And(rhs.DictKeyedValue.Specific)));
            return ret;
        }
        public static TestObject_HasBeenSet_ReadOnly_ErrorMask Combine(TestObject_HasBeenSet_ReadOnly_ErrorMask lhs, TestObject_HasBeenSet_ReadOnly_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TestObject_HasBeenSet_ReadOnly_CopyMask
    {
        #region Members
        public bool ByteArray;
        public bool ByteArrayNull;
        public bool ByteArrayNotNull;
        public bool ByteArraySingleton;
        public bool BoolN;
        public bool Bool;
        public bool CharN;
        public bool Char;
        public bool DateTimeNull;
        public bool DateTime;
        public bool DoubleN;
        public bool DoubleN_Ranged;
        public bool Double;
        public bool Double_Ranged;
        public bool FloatN;
        public bool FloatN_Ranged;
        public bool Float;
        public bool Float_Ranged;
        public bool Int16N;
        public bool Int16N_Ranged;
        public bool Int16;
        public bool Int16_Ranged;
        public bool Int32N;
        public bool Int32N_Ranged;
        public bool Int32;
        public bool Int32_Ranged;
        public bool Int64N;
        public bool Int64N_Ranged;
        public bool Int64;
        public bool Int64_Ranged;
        public bool Int8N;
        public bool Int8N_Ranged;
        public bool Int8;
        public bool Int8_Ranged;
        public bool Unsafe;
        public bool UnsafeLoqui;
        public bool UnsafeNull;
        public bool P2IntN;
        public bool P2Int;
        public bool P3DoubleN;
        public bool P3Double;
        public bool P3IntN;
        public bool P3Int;
        public bool PercentN;
        public bool Percent;
        public bool RangeInt8N;
        public bool RangeInt8;
        public bool RangeInt16N;
        public bool RangeInt16;
        public bool RangeInt32N;
        public bool RangeInt32;
        public bool RangeInt64N;
        public bool RangeInt64;
        public bool RangeUInt8N;
        public bool RangeUInt8;
        public bool RangeUInt16N;
        public bool RangeUInt16;
        public bool RangeUInt32N;
        public bool RangeUInt32;
        public bool RangeUInt64N;
        public bool RangeUInt64;
        public bool String;
        public bool FilePath;
        public bool FilePathNull;
        public bool DirectoryPath;
        public bool DirectoryPathNull;
        public bool UDoubleN;
        public bool UDoubleN_Ranged;
        public bool UDouble;
        public bool UDouble_Ranged;
        public bool UInt16N;
        public bool UInt16N_Ranged;
        public bool UInt16;
        public bool UInt16_Ranged;
        public bool UInt32N;
        public bool UInt32N_Ranged;
        public bool UInt32;
        public bool UInt32_Ranged;
        public bool UInt64N;
        public bool UInt64N_Ranged;
        public bool UInt64;
        public bool UInt64_Ranged;
        public bool UInt8N;
        public bool UInt8N_Ranged;
        public bool UInt8;
        public bool UInt8_Ranged;
        public bool Enum;
        public bool EnumNull;
        public bool WildCard;
        public bool WildCardLoqui;
        public bool WildCardNull;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> Ref_Singleton;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter_NotNull;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> RefSetter_Singleton;
        public CopyOption List;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefList;
        public bool Dict;
        public MaskItem<bool, KeyValuePair<(RefCopyType Type, ObjectToRef_CopyMask Mask), (RefCopyType Type, ObjectToRef_CopyMask Mask)>> RefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> KeyRefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> ValRefDict;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> DictKeyedValue;
        #endregion

    }
    #endregion


    #endregion

}
