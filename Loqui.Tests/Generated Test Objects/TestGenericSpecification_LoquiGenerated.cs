/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Internals;
using Loqui.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;

namespace Loqui.Tests
{
    #region Class
    public partial class TestGenericSpecification<RBase, R> : ITestGenericSpecification<RBase, R>, ILoquiObjectSetter, IEquatable<TestGenericSpecification<RBase, R>>
        where RBase : ObjectToRef
        where R : ILoquiObjectGetter
    {
        ILoquiRegistration ILoquiObject.Registration => TestGenericSpecification_Registration.Instance;
        public static TestGenericSpecification_Registration Registration => TestGenericSpecification_Registration.Instance;

        #region Ctor
        public TestGenericSpecification()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TestGenericObjectSpecified
        public TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef> TestGenericObjectSpecified { get; set; }
        #endregion
        #region TestGenericObjectHalfSpecified
        public TestGenericObject<ObjectToRef, RBase, R> TestGenericObjectHalfSpecified { get; set; }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TestGenericSpecificationCommon.GetNthObject<RBase, R>(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestGenericSpecificationCommon.GetNthObjectHasBeenSet<RBase, R>(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestGenericSpecificationCommon.UnsetNthObject<RBase, R>(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestGenericSpecificationCommon.SetNthObjectHasBeenSet<RBase, R>(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return TestGenericSpecificationCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestGenericSpecification_Mask<bool> printMask = null)
        {
            return TestGenericSpecificationCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestGenericSpecificationCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public TestGenericSpecification_Mask<bool> GetHasBeenSetMask()
        {
            return TestGenericSpecificationCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericSpecification<RBase, R> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericSpecification<RBase, R> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(TestGenericObjectSpecified, rhs.TestGenericObjectSpecified)) return false;
            if (!object.Equals(TestGenericObjectHalfSpecified, rhs.TestGenericObjectHalfSpecified)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(TestGenericObjectSpecified).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(TestGenericObjectHalfSpecified).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static TestGenericSpecification<RBase, R> Create_XML(XElement root)
        {
            return Create_XML<ObjectToRef_ErrorMask>(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static TestGenericSpecification<RBase, R> Create_XML<RBase_ErrMask>(
            XElement root,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static TestGenericSpecification<RBase, R> Create_XML<RBase_ErrMask>(
            XElement root,
            bool doMasks,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var ret = Create_XML<RBase_ErrMask>(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (TestGenericSpecification<RBase, R> Object, TestGenericSpecification_ErrorMask<RBase_ErrMask> ErrorMask) Create_XML<RBase_ErrMask>(
            XElement root,
            bool doMasks)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            TestGenericSpecification_ErrorMask<RBase_ErrMask> errMaskRet = null;
            var ret = Create_XML_Internal<RBase_ErrMask>(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestGenericSpecification_ErrorMask<RBase_ErrMask>()) : default(Func<TestGenericSpecification_ErrorMask<RBase_ErrMask>>));
            return (ret, errMaskRet);
        }

        public static TestGenericSpecification<RBase, R> Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static TestGenericSpecification<RBase, R> Create_XML<RBase_ErrMask>(
            string path,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static TestGenericSpecification<RBase, R> Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static TestGenericSpecification<RBase, R> Create_XML<RBase_ErrMask>(
            Stream stream,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestGenericSpecification<RBase, R>, TestGenericSpecification_ErrorMask<ObjectToRef_ErrorMask>>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML<RBase_ErrMask>(
            XElement root,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask,
            NotifyingFireParameters? cmds = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            LoquiXmlTranslation<TestGenericSpecification<RBase, R>, TestGenericSpecification_ErrorMask<RBase_ErrMask>>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML<RBase_ErrMask>(
            string path,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask,
            NotifyingFireParameters? cmds = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML<RBase_ErrMask>(
            Stream stream,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask,
            NotifyingFireParameters? cmds = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML<RBase_ErrMask>(
            XmlWriter writer,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            errorMask = (TestGenericSpecification_ErrorMask<RBase_ErrMask>)this.Write_XML_Internal<RBase_ErrMask>(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML<RBase_ErrMask>(
            string path,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML<RBase_ErrMask>(
            Stream stream,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            Write_XML<ObjectToRef_ErrorMask>(
                writer: writer,
                name: name);
        }

        public void Write_XML<RBase_ErrMask>(
            XmlWriter writer,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            this.Write_XML_Internal<RBase_ErrMask>(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            Write_XML<ObjectToRef_ErrorMask>(
                path: path,
                name: name);
        }

        public void Write_XML<RBase_ErrMask>(
            string path,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            Write_XML<ObjectToRef_ErrorMask>(
                stream: stream,
                name: name);
        }

        public void Write_XML<RBase_ErrMask>(
            Stream stream,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal<RBase_ErrMask>(
            XmlWriter writer,
            bool doMasks,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            TestGenericSpecificationCommon.Write_XML<RBase, R, RBase_ErrMask>(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static TestGenericSpecification<RBase, R> Create_XML_Internal<RBase_ErrMask>(
            XElement root,
            Func<TestGenericSpecification_ErrorMask<RBase_ErrMask>> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var ret = new TestGenericSpecification<RBase, R>();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal<RBase_ErrMask>(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal<RBase_ErrMask>(
            TestGenericSpecification<RBase, R> item,
            XElement root,
            string name,
            Func<TestGenericSpecification_ErrorMask<RBase_ErrMask>> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            switch (name)
            {
                case "TestGenericObjectSpecified":
                    {
                        MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>> subMask;
                        var tryGet = LoquiXmlTranslation<TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            mask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.TestGenericObjectSpecified = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified,
                            subMask);
                    }
                    break;
                case "TestGenericObjectHalfSpecified":
                    {
                        MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask>> subMask;
                        var tryGet = LoquiXmlTranslation<TestGenericObject<ObjectToRef, RBase, R>, TestGenericObject_ErrorMask<RBase_ErrMask>>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            mask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.TestGenericObjectHalfSpecified = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        public TestGenericSpecification<RBase, R> Copy<RBase_CopyMask>(
            TestGenericSpecification_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            return TestGenericSpecification<RBase, R>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestGenericSpecification<RBase, R> Copy<RBase_CopyMask>(
            ITestGenericSpecification<RBase, R> item,
            TestGenericSpecification_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericSpecification<RBase, R> ret;
            if (item.GetType().Equals(typeof(TestGenericSpecification<RBase, R>)))
            {
                ret = new TestGenericSpecification<RBase, R>();
            }
            else
            {
                ret = (TestGenericSpecification<RBase, R>)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType, RBase_CopyMask>(
            CopyType item,
            TestGenericSpecification_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where CopyType : class, ITestGenericSpecification<RBase, R>
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestGenericSpecification<RBase, R>)))
            {
                ret = new TestGenericSpecification<RBase, R>() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<RBase, R, ObjectToRef_ErrorMask, RBase_CopyMask>(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestGenericSpecification<RBase, R> Copy_ToLoqui<RBase_CopyMask>(
            ITestGenericSpecificationGetter<RBase, R> item,
            TestGenericSpecification_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            var ret = new TestGenericSpecification<RBase, R>();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    this.TestGenericObjectSpecified = (TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>)obj;
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    this.TestGenericObjectHalfSpecified = (TestGenericObject<ObjectToRef, RBase, R>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestGenericSpecificationCommon.Clear(this, cmds);
        }


        public static TestGenericSpecification<RBase, R> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestGenericSpecification<RBase, R>();
            foreach (var pair in fields)
            {
                CopyInInternal_TestGenericSpecification(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TestGenericSpecification(TestGenericSpecification<RBase, R> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestGenericSpecification_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    obj.TestGenericObjectSpecified = (TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>)pair.Value;
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    obj.TestGenericObjectHalfSpecified = (TestGenericObject<ObjectToRef, RBase, R>)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestGenericSpecification<RBase, R> obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestGenericSpecification<RBase, R> : ITestGenericSpecificationGetter<RBase, R>, ILoquiClass<ITestGenericSpecification<RBase, R>, ITestGenericSpecificationGetter<RBase, R>>, ILoquiClass<TestGenericSpecification<RBase, R>, ITestGenericSpecificationGetter<RBase, R>>
        where RBase : ObjectToRef
        where R : ILoquiObjectGetter
    {
        new TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef> TestGenericObjectSpecified { get; set; }

        new TestGenericObject<ObjectToRef, RBase, R> TestGenericObjectHalfSpecified { get; set; }

    }

    public interface ITestGenericSpecificationGetter<RBase, R> : ILoquiObject
        where RBase : ObjectToRef
        where R : ILoquiObjectGetter
    {
        #region TestGenericObjectSpecified
        TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef> TestGenericObjectSpecified { get; }
        #endregion
        #region TestGenericObjectHalfSpecified
        TestGenericObject<ObjectToRef, RBase, R> TestGenericObjectHalfSpecified { get; }
        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Internals
{
    #region Field Index
    public enum TestGenericSpecification_FieldIndex
    {
        TestGenericObjectSpecified = 0,
        TestGenericObjectHalfSpecified = 1,
    }
    #endregion

    #region Registration
    public class TestGenericSpecification_Registration : ILoquiRegistration
    {
        public static readonly TestGenericSpecification_Registration Instance = new TestGenericSpecification_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTests.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "61cec4c5-3aba-449a-9d61-1bb5f6ef4f25";

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(TestGenericSpecification_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestGenericSpecification_ErrorMask<>);

        public static readonly Type ClassType = typeof(TestGenericSpecification<,>);

        public static readonly Type GetterType = typeof(ITestGenericSpecificationGetter<,>);

        public static readonly Type SetterType = typeof(ITestGenericSpecification<,>);

        public static readonly Type CommonType = typeof(TestGenericSpecificationCommon);

        public const string FullName = "Loqui.Tests.TestGenericSpecification";

        public const string Name = "TestGenericSpecification";

        public const string Namespace = "Loqui.Tests";

        public const byte GenericCount = 2;

        public static readonly Type GenericRegistrationType = typeof(TestGenericSpecification_Registration<,>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TESTGENERICOBJECTSPECIFIED":
                    return (ushort)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified;
                case "TESTGENERICOBJECTHALFSPECIFIED":
                    return (ushort)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    return "TestGenericObjectSpecified";
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return "TestGenericObjectHalfSpecified";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class TestGenericSpecification_Registration<RBase, R> : TestGenericSpecification_Registration
        where RBase : ObjectToRef
        where R : ILoquiObjectGetter
    {
        public static readonly TestGenericSpecification_Registration<RBase, R> GenericInstance = new TestGenericSpecification_Registration<RBase, R>();

        public new static Type GetNthType(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    return typeof(TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>);
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return typeof(TestGenericObject<ObjectToRef, RBase, R>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

    }
    #endregion

    #region Extensions
    public static partial class TestGenericSpecificationCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<RBase, R, RBase_CopyMask>(
            this ITestGenericSpecification<RBase, R> item,
            ITestGenericSpecificationGetter<RBase, R> rhs,
            TestGenericSpecification_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null,
            NotifyingFireParameters? cmds = null)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericSpecificationCommon.CopyFieldsFrom<RBase, R, ObjectToRef_ErrorMask, RBase_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<RBase, R, RBase_ErrMask, RBase_CopyMask>(
            this ITestGenericSpecification<RBase, R> item,
            ITestGenericSpecificationGetter<RBase, R> rhs,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask,
            TestGenericSpecification_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericSpecificationGetter<RBase, R> def = null,
            NotifyingFireParameters? cmds = null)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericSpecificationCommon.CopyFieldsFrom<RBase, R, RBase_ErrMask, RBase_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<RBase, R, RBase_ErrMask, RBase_CopyMask>(
            this ITestGenericSpecification<RBase, R> item,
            ITestGenericSpecificationGetter<RBase, R> rhs,
            ITestGenericSpecificationGetter<RBase, R> def,
            bool doMasks,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask,
            TestGenericSpecification_CopyMask<RBase_CopyMask> copyMask,
            NotifyingFireParameters? cmds)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericSpecification_ErrorMask<RBase_ErrMask> retErrorMask = null;
            Func<TestGenericSpecification_ErrorMask<RBase_ErrMask>> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestGenericSpecification_ErrorMask<RBase_ErrMask>();
                }
                return retErrorMask;
            };
            CopyFieldsFrom<RBase, R, RBase_ErrMask, RBase_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom<RBase, R, RBase_ErrMask, RBase_CopyMask>(
            this ITestGenericSpecification<RBase, R> item,
            ITestGenericSpecificationGetter<RBase, R> rhs,
            ITestGenericSpecificationGetter<RBase, R> def,
            bool doMasks,
            Func<TestGenericSpecification_ErrorMask<RBase_ErrMask>> errorMask,
            TestGenericSpecification_CopyMask<RBase_CopyMask> copyMask,
            NotifyingFireParameters? cmds)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            if (copyMask?.TestGenericObjectSpecified.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.TestGenericObjectSpecified?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.TestGenericObjectSpecified = rhs.TestGenericObjectSpecified;
                            break;
                        case CopyOption.CopyIn:
                            TestGenericObjectCommon.CopyFieldsFrom(
                                item: item.TestGenericObjectSpecified,
                                rhs: rhs.TestGenericObjectSpecified,
                                def: def?.TestGenericObjectSpecified,
                                doMasks: doMasks,
                                errorMask: (doMasks ? new Func<TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.TestGenericObjectSpecified.Specific == null)
                                    {
                                        baseMask.TestGenericObjectSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>>(null, new TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>());
                                    }
                                    return baseMask.TestGenericObjectSpecified.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.TestGenericObjectSpecified.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.TestGenericObjectSpecified == null)
                            {
                                item.TestGenericObjectSpecified = null;
                            }
                            else
                            {
                                item.TestGenericObjectSpecified = TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>.Copy(
                                    rhs.TestGenericObjectSpecified,
                                    copyMask?.TestGenericObjectSpecified?.Specific,
                                    def?.TestGenericObjectSpecified);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.TestGenericObjectSpecified?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified, ex);
                }
            }
            if (copyMask?.TestGenericObjectHalfSpecified.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.TestGenericObjectHalfSpecified?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.TestGenericObjectHalfSpecified = rhs.TestGenericObjectHalfSpecified;
                            break;
                        case CopyOption.CopyIn:
                            TestGenericObjectCommon.CopyFieldsFrom(
                                item: item.TestGenericObjectHalfSpecified,
                                rhs: rhs.TestGenericObjectHalfSpecified,
                                def: def?.TestGenericObjectHalfSpecified,
                                doMasks: doMasks,
                                errorMask: (doMasks ? new Func<TestGenericObject_ErrorMask<RBase_ErrMask>>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.TestGenericObjectHalfSpecified.Specific == null)
                                    {
                                        baseMask.TestGenericObjectHalfSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask>>(null, new TestGenericObject_ErrorMask<RBase_ErrMask>());
                                    }
                                    return baseMask.TestGenericObjectHalfSpecified.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.TestGenericObjectHalfSpecified.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.TestGenericObjectHalfSpecified == null)
                            {
                                item.TestGenericObjectHalfSpecified = null;
                            }
                            else
                            {
                                item.TestGenericObjectHalfSpecified = TestGenericObject<ObjectToRef, RBase, R>.Copy(
                                    rhs.TestGenericObjectHalfSpecified,
                                    copyMask?.TestGenericObjectHalfSpecified?.Specific,
                                    def?.TestGenericObjectHalfSpecified);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.TestGenericObjectHalfSpecified?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet<RBase, R>(
            ushort index,
            bool on,
            ITestGenericSpecification<RBase, R> obj,
            NotifyingFireParameters? cmds = null)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    if (on) break;
                    throw new ArgumentException("Tried to unset a field which does not have this functionality." + index);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject<RBase, R>(
            ushort index,
            ITestGenericSpecification<RBase, R> obj,
            NotifyingUnsetParameters? cmds = null)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    obj.TestGenericObjectSpecified = default(TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>);
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    obj.TestGenericObjectHalfSpecified = default(TestGenericObject<ObjectToRef, RBase, R>);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet<RBase, R>(
            ushort index,
            ITestGenericSpecification<RBase, R> obj)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject<RBase, R>(
            ushort index,
            ITestGenericSpecificationGetter<RBase, R> obj)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    return obj.TestGenericObjectSpecified;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    return obj.TestGenericObjectHalfSpecified;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear<RBase, R>(
            ITestGenericSpecification<RBase, R> item,
            NotifyingUnsetParameters? cmds = null)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            item.TestGenericObjectSpecified = default(TestGenericObject<ObjectToRef, ObjectToRef, ObjectToRef>);
            item.TestGenericObjectHalfSpecified = default(TestGenericObject<ObjectToRef, RBase, R>);
        }

        public static TestGenericSpecification_Mask<bool> GetEqualsMask<RBase, R>(
            this ITestGenericSpecificationGetter<RBase, R> item,
            ITestGenericSpecificationGetter<RBase, R> rhs)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            var ret = new TestGenericSpecification_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask<RBase, R>(
            ITestGenericSpecificationGetter<RBase, R> item,
            ITestGenericSpecificationGetter<RBase, R> rhs,
            TestGenericSpecification_Mask<bool> ret)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            if (rhs == null) return;
            ret.TestGenericObjectSpecified = new MaskItem<bool, TestGenericObject_Mask<bool>>();
            ret.TestGenericObjectSpecified.Specific = TestGenericObjectCommon.GetEqualsMask(item.TestGenericObjectSpecified, rhs.TestGenericObjectSpecified);
            ret.TestGenericObjectSpecified.Overall = ret.TestGenericObjectSpecified.Specific.AllEqual((b) => b);
            ret.TestGenericObjectHalfSpecified = new MaskItem<bool, TestGenericObject_Mask<bool>>();
            ret.TestGenericObjectHalfSpecified.Specific = TestGenericObjectCommon.GetEqualsMask(item.TestGenericObjectHalfSpecified, rhs.TestGenericObjectHalfSpecified);
            ret.TestGenericObjectHalfSpecified.Overall = ret.TestGenericObjectHalfSpecified.Specific.AllEqual((b) => b);
        }

        public static string ToString<RBase, R>(
            this ITestGenericSpecificationGetter<RBase, R> item,
            string name = null,
            TestGenericSpecification_Mask<bool> printMask = null)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString<RBase, R>(
            this ITestGenericSpecificationGetter<RBase, R> item,
            FileGeneration fg,
            string name = null,
            TestGenericSpecification_Mask<bool> printMask = null)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestGenericSpecification<RBase, R>)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestGenericSpecification<RBase, R>)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TestGenericObjectSpecified?.Overall ?? true)
                {
                    item.TestGenericObjectSpecified?.ToString(fg, "TestGenericObjectSpecified");
                }
                if (printMask?.TestGenericObjectHalfSpecified?.Overall ?? true)
                {
                    item.TestGenericObjectHalfSpecified?.ToString(fg, "TestGenericObjectHalfSpecified");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet<RBase, R>(
            this ITestGenericSpecificationGetter<RBase, R> item,
            TestGenericSpecification_Mask<bool?> checkMask)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            return true;
        }

        public static TestGenericSpecification_Mask<bool> GetHasBeenSetMask<RBase, R>(ITestGenericSpecificationGetter<RBase, R> item)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
        {
            var ret = new TestGenericSpecification_Mask<bool>();
            ret.TestGenericObjectSpecified = new MaskItem<bool, TestGenericObject_Mask<bool>>(true, TestGenericObjectCommon.GetHasBeenSetMask(item.TestGenericObjectSpecified));
            ret.TestGenericObjectHalfSpecified = new MaskItem<bool, TestGenericObject_Mask<bool>>(true, TestGenericObjectCommon.GetHasBeenSetMask(item.TestGenericObjectHalfSpecified));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML<RBase, R, RBase_ErrMask>(
            XmlWriter writer,
            ITestGenericSpecificationGetter<RBase, R> item,
            bool doMasks,
            out TestGenericSpecification_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            TestGenericSpecification_ErrorMask<RBase_ErrMask> errMaskRet = null;
            Write_XML_Internal<RBase, R, RBase_ErrMask>(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestGenericSpecification_ErrorMask<RBase_ErrMask>()) : default(Func<TestGenericSpecification_ErrorMask<RBase_ErrMask>>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal<RBase, R, RBase_ErrMask>(
            XmlWriter writer,
            ITestGenericSpecificationGetter<RBase, R> item,
            Func<TestGenericSpecification_ErrorMask<RBase_ErrMask>> errorMask,
            string name = null)
            where RBase : ObjectToRef
            where R : ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Loqui.Tests.TestGenericSpecification"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Loqui.Tests.TestGenericSpecification");
                    }
                    MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>> subMask;
                    LoquiXmlTranslation<ITestGenericObjectGetter<ObjectToRef, ObjectToRef, ObjectToRef>, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>>.Instance.Write(
                        writer: writer,
                        item: item.TestGenericObjectSpecified,
                        name: nameof(item.TestGenericObjectSpecified),
                        doMasks: errorMask != null,
                        mask: out TestGenericObject_ErrorMask<ObjectToRef_ErrorMask> loquiMask);
                    subMask = loquiMask == null ? null : new MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>>(null, loquiMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        (int)TestGenericSpecification_FieldIndex.TestGenericObjectSpecified,
                        subMask);
                    MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask>> subMask;
                    LoquiXmlTranslation<ITestGenericObjectGetter<ObjectToRef, RBase, R>, TestGenericObject_ErrorMask<RBase_ErrMask>>.Instance.Write(
                        writer: writer,
                        item: item.TestGenericObjectHalfSpecified,
                        name: nameof(item.TestGenericObjectHalfSpecified),
                        doMasks: errorMask != null,
                        mask: out TestGenericObject_ErrorMask<RBase_ErrMask> loquiMask);
                    subMask = loquiMask == null ? null : new MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask>>(null, loquiMask);
                    ErrorMask.HandleErrorMask(
                        errorMask,
                        (int)TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified,
                        subMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestGenericSpecification_Mask<T> : IMask<T>, IEquatable<TestGenericSpecification_Mask<T>>
    {
        #region Ctors
        public TestGenericSpecification_Mask()
        {
        }

        public TestGenericSpecification_Mask(T initialValue)
        {
            this.TestGenericObjectSpecified = new MaskItem<T, TestGenericObject_Mask<T>>(initialValue, new TestGenericObject_Mask<T>(initialValue));
            this.TestGenericObjectHalfSpecified = new MaskItem<T, TestGenericObject_Mask<T>>(initialValue, new TestGenericObject_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, TestGenericObject_Mask<T>> TestGenericObjectSpecified { get; set; }
        public MaskItem<T, TestGenericObject_Mask<T>> TestGenericObjectHalfSpecified { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericSpecification_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericSpecification_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TestGenericObjectSpecified, rhs.TestGenericObjectSpecified)) return false;
            if (!object.Equals(this.TestGenericObjectHalfSpecified, rhs.TestGenericObjectHalfSpecified)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TestGenericObjectSpecified?.GetHashCode());
            ret = ret.CombineHashCode(this.TestGenericObjectHalfSpecified?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (TestGenericObjectSpecified != null)
            {
                if (!eval(this.TestGenericObjectSpecified.Overall)) return false;
                if (TestGenericObjectSpecified.Specific != null && !TestGenericObjectSpecified.Specific.AllEqual(eval)) return false;
            }
            if (TestGenericObjectHalfSpecified != null)
            {
                if (!eval(this.TestGenericObjectHalfSpecified.Overall)) return false;
                if (TestGenericObjectHalfSpecified.Specific != null && !TestGenericObjectHalfSpecified.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public TestGenericSpecification_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestGenericSpecification_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestGenericSpecification_Mask<R> obj, Func<T, R> eval)
        {
            if (this.TestGenericObjectSpecified != null)
            {
                obj.TestGenericObjectSpecified = new MaskItem<R, TestGenericObject_Mask<R>>();
                obj.TestGenericObjectSpecified.Overall = eval(this.TestGenericObjectSpecified.Overall);
                if (this.TestGenericObjectSpecified.Specific != null)
                {
                    obj.TestGenericObjectSpecified.Specific = this.TestGenericObjectSpecified.Specific.Translate(eval);
                }
            }
            if (this.TestGenericObjectHalfSpecified != null)
            {
                obj.TestGenericObjectHalfSpecified = new MaskItem<R, TestGenericObject_Mask<R>>();
                obj.TestGenericObjectHalfSpecified.Overall = eval(this.TestGenericObjectHalfSpecified.Overall);
                if (this.TestGenericObjectHalfSpecified.Specific != null)
                {
                    obj.TestGenericObjectHalfSpecified.Specific = this.TestGenericObjectHalfSpecified.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestGenericSpecification_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestGenericSpecification_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestGenericSpecification_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TestGenericObjectSpecified?.Overall ?? true)
                {
                    TestGenericObjectSpecified?.ToString(fg);
                }
                if (printMask?.TestGenericObjectHalfSpecified?.Overall ?? true)
                {
                    TestGenericObjectHalfSpecified?.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestGenericSpecification_ErrorMask<RBase_ErrMask> : IErrorMask, IErrorMask<TestGenericSpecification_ErrorMask<RBase_ErrMask>>
        where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>> TestGenericObjectSpecified;
        public MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask>> TestGenericObjectHalfSpecified;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    this.TestGenericObjectSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>>(ex, null);
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    this.TestGenericObjectHalfSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObjectSpecified:
                    this.TestGenericObjectSpecified = (MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>>)obj;
                    break;
                case TestGenericSpecification_FieldIndex.TestGenericObjectHalfSpecified:
                    this.TestGenericObjectHalfSpecified = (MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestGenericSpecification_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            TestGenericObjectSpecified?.ToString(fg);
            TestGenericObjectHalfSpecified?.ToString(fg);
        }
        #endregion

        #region Combine
        public TestGenericSpecification_ErrorMask<RBase_ErrMask> Combine(TestGenericSpecification_ErrorMask<RBase_ErrMask> rhs)
        {
            var ret = new TestGenericSpecification_ErrorMask<RBase_ErrMask>();
            ret.TestGenericObjectSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>>(this.TestGenericObjectSpecified.Overall.Combine(rhs.TestGenericObjectSpecified.Overall), ((IErrorMask<TestGenericObject_ErrorMask<ObjectToRef_ErrorMask>>)this.TestGenericObjectSpecified.Specific).Combine(rhs.TestGenericObjectSpecified.Specific));
            ret.TestGenericObjectHalfSpecified = new MaskItem<Exception, TestGenericObject_ErrorMask<RBase_ErrMask>>(this.TestGenericObjectHalfSpecified.Overall.Combine(rhs.TestGenericObjectHalfSpecified.Overall), ((IErrorMask<TestGenericObject_ErrorMask<RBase_ErrMask>>)this.TestGenericObjectHalfSpecified.Specific).Combine(rhs.TestGenericObjectHalfSpecified.Specific));
            return ret;
        }
        public static TestGenericSpecification_ErrorMask<RBase_ErrMask> Combine(TestGenericSpecification_ErrorMask<RBase_ErrMask> lhs, TestGenericSpecification_ErrorMask<RBase_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TestGenericSpecification_CopyMask<RBase_CopyMask>
        where RBase_CopyMask : ObjectToRef_CopyMask, new()
    {
        #region Members
        public MaskItem<CopyOption, TestGenericObject_CopyMask<ObjectToRef_CopyMask>> TestGenericObjectSpecified;
        public MaskItem<CopyOption, TestGenericObject_CopyMask<RBase_CopyMask>> TestGenericObjectHalfSpecified;
        #endregion

    }
    #endregion


    #endregion

}
