/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Internals;
using Loqui.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;

namespace Loqui.Tests
{
    #region Class
    public partial class TestGenericSpecification : ITestGenericSpecification, ILoquiObjectSetter, IEquatable<TestGenericSpecification>
    {
        ILoquiRegistration ILoquiObject.Registration => TestGenericSpecification_Registration.Instance;
        public static TestGenericSpecification_Registration Registration => TestGenericSpecification_Registration.Instance;

        #region Ctor
        public TestGenericSpecification()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region TestGenericObject
        public TestGenericObject TestGenericObject { get; set; }
        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TestGenericSpecificationCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestGenericSpecificationCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestGenericSpecificationCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestGenericSpecificationCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return TestGenericSpecificationCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestGenericSpecification_Mask<bool> printMask = null)
        {
            return TestGenericSpecificationCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestGenericSpecificationCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public TestGenericSpecification_Mask<bool> GetHasBeenSetMask()
        {
            return TestGenericSpecificationCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericSpecification rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericSpecification rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(TestGenericObject, rhs.TestGenericObject)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(TestGenericObject).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        public static TestGenericSpecification Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static TestGenericSpecification Create_XML(
            XElement root,
            out TestGenericSpecification_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static TestGenericSpecification Create_XML(
            XElement root,
            bool doMasks,
            out TestGenericSpecification_ErrorMask errorMask)
        {
            TestGenericSpecification_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestGenericSpecification_ErrorMask()) : default(Func<TestGenericSpecification_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        public static TestGenericSpecification Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static TestGenericSpecification Create_XML(
            string path,
            out TestGenericSpecification_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static TestGenericSpecification Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static TestGenericSpecification Create_XML(
            Stream stream,
            out TestGenericSpecification_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestGenericSpecification, TestGenericSpecification_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TestGenericSpecification_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out TestGenericSpecification_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestGenericSpecification, TestGenericSpecification_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out TestGenericSpecification_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out TestGenericSpecification_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out TestGenericSpecification_ErrorMask errorMask,
            string name = null)
        {
            TestGenericSpecificationCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public virtual void Write_XML(
            string path,
            out TestGenericSpecification_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out TestGenericSpecification_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            TestGenericSpecificationCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out TestGenericSpecification_ErrorMask errorMask);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        #endregion

        private static TestGenericSpecification Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<TestGenericSpecification_ErrorMask> errorMask)
        {
            var ret = new TestGenericSpecification();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            TestGenericSpecification item,
            XElement root,
            string name,
            bool doMasks,
            Func<TestGenericSpecification_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "TestGenericObject":
                    {
                        MaskItem<Exception, TestGenericObject_ErrorMask> subMask;
                        TestGenericObject_ErrorMask loquiMask;
                        TryGet<TestGenericObject> tryGet;
                        var typeStr = root.GetAttribute(XmlConstants.TYPE_ATTRIBUTE);
                        if (typeStr != null
                            && typeStr.Equals("Loqui.Tests.TestGenericObject"))
                        {
                            tryGet = TryGet<TestGenericObject>.Succeed((TestGenericObject)TestGenericObject.Create_XML(
                                root: root,
                                doMasks: doMasks,
                                errorMask: out loquiMask));
                        }
                        else
                        {
                            var register = LoquiRegistration.GetRegisterByFullName(typeStr ?? root.Name.LocalName);
                            if (register == null)
                            {
                                var ex = new ArgumentException($"Unknown Loqui type: {root.Name.LocalName}");
                                if (!doMasks) throw ex;
                                subMask = new MaskItem<Exception, TestGenericObject_ErrorMask>(
                                    ex,
                                    null);
                                break;
                            }
                            tryGet = XmlTranslator.Instance.GetTranslator(register.ClassType).Item.Value.Parse(
                                root: root,
                                doMasks: doMasks,
                                maskObj: out var subErrorMaskObj).Bubble((o) => (TestGenericObject)o);
                            loquiMask = (TestGenericObject_ErrorMask)subErrorMaskObj;
                        }
                        subMask = loquiMask == null ? null : new MaskItem<Exception, TestGenericObject_ErrorMask>(null, loquiMask);
                        if (tryGet.Succeeded)
                        {
                            item.TestGenericObject = tryGet.Value;
                        }
                        if (doMasks && subMask != null)
                        {
                            errorMask().TestGenericObject = subMask;
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        public TestGenericSpecification Copy(
            TestGenericSpecification_CopyMask copyMask = null,
            ITestGenericSpecificationGetter def = null)
        {
            return TestGenericSpecification.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestGenericSpecification Copy(
            ITestGenericSpecification item,
            TestGenericSpecification_CopyMask copyMask = null,
            ITestGenericSpecificationGetter def = null)
        {
            TestGenericSpecification ret;
            if (item.GetType().Equals(typeof(TestGenericSpecification)))
            {
                ret = new TestGenericSpecification();
            }
            else
            {
                ret = (TestGenericSpecification)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            TestGenericSpecification_CopyMask copyMask = null,
            ITestGenericSpecificationGetter def = null)
            where CopyType : class, ITestGenericSpecification
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestGenericSpecification)))
            {
                ret = new TestGenericSpecification() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestGenericSpecification Copy_ToLoqui(
            ITestGenericSpecificationGetter item,
            TestGenericSpecification_CopyMask copyMask = null,
            ITestGenericSpecificationGetter def = null)
        {
            var ret = new TestGenericSpecification();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    this.TestGenericObject = (TestGenericObject)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestGenericSpecificationCommon.Clear(this, cmds);
        }


        public static TestGenericSpecification Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestGenericSpecification();
            foreach (var pair in fields)
            {
                CopyInInternal_TestGenericSpecification(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TestGenericSpecification(TestGenericSpecification obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestGenericSpecification_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    obj.TestGenericObject = (TestGenericObject)pair.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestGenericSpecification obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestGenericSpecification : ITestGenericSpecificationGetter, ILoquiClass<ITestGenericSpecification, ITestGenericSpecificationGetter>, ILoquiClass<TestGenericSpecification, ITestGenericSpecificationGetter>
    {
        new TestGenericObject TestGenericObject { get; set; }

    }

    public interface ITestGenericSpecificationGetter : ILoquiObject
    {
        #region TestGenericObject
        TestGenericObject TestGenericObject { get; }

        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Internals
{
    #region Field Index
    public enum TestGenericSpecification_FieldIndex
    {
        TestGenericObject = 0,
    }
    #endregion

    #region Registration
    public class TestGenericSpecification_Registration : ILoquiRegistration
    {
        public static readonly TestGenericSpecification_Registration Instance = new TestGenericSpecification_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTests.ProtocolKey,
            msgID: 25,
            version: 0);

        public const string GUID = "61cec4c5-3aba-449a-9d61-1bb5f6ef4f25";

        public const ushort FieldCount = 1;

        public static readonly Type MaskType = typeof(TestGenericSpecification_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestGenericSpecification_ErrorMask);

        public static readonly Type ClassType = typeof(TestGenericSpecification);

        public static readonly Type GetterType = typeof(ITestGenericSpecificationGetter);

        public static readonly Type SetterType = typeof(ITestGenericSpecification);

        public static readonly Type CommonType = typeof(TestGenericSpecificationCommon);

        public const string FullName = "Loqui.Tests.TestGenericSpecification";

        public const string Name = "TestGenericSpecification";

        public const string Namespace = "Loqui.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "TESTGENERICOBJECT":
                    return (ushort)TestGenericSpecification_FieldIndex.TestGenericObject;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    return "TestGenericObject";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    return typeof(TestGenericObject);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class TestGenericSpecificationCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITestGenericSpecification item,
            ITestGenericSpecificationGetter rhs,
            TestGenericSpecification_CopyMask copyMask = null,
            ITestGenericSpecificationGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestGenericSpecificationCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITestGenericSpecification item,
            ITestGenericSpecificationGetter rhs,
            out TestGenericSpecification_ErrorMask errorMask,
            TestGenericSpecification_CopyMask copyMask = null,
            ITestGenericSpecificationGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestGenericSpecificationCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITestGenericSpecification item,
            ITestGenericSpecificationGetter rhs,
            ITestGenericSpecificationGetter def,
            bool doErrorMask,
            out TestGenericSpecification_ErrorMask errorMask,
            TestGenericSpecification_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            TestGenericSpecification_ErrorMask retErrorMask = null;
            Func<TestGenericSpecification_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestGenericSpecification_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ITestGenericSpecification item,
            ITestGenericSpecificationGetter rhs,
            ITestGenericSpecificationGetter def,
            bool doErrorMask,
            Func<TestGenericSpecification_ErrorMask> errorMask,
            TestGenericSpecification_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.TestGenericObject.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.TestGenericObject.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.TestGenericObject = rhs.TestGenericObject;
                            break;
                        case CopyOption.CopyIn:
                            TestGenericObjectCommon.CopyFieldsFrom(
                                item: item.TestGenericObject,
                                rhs: rhs.TestGenericObject,
                                def: def?.TestGenericObject,
                                doErrorMask: doErrorMask,
                                errorMask: (doErrorMask ? new Func<TestGenericObject_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.TestGenericObject.Specific == null)
                                    {
                                        baseMask.TestGenericObject = new MaskItem<Exception, TestGenericObject_ErrorMask>(null, new TestGenericObject_ErrorMask());
                                    }
                                    return baseMask.TestGenericObject.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.TestGenericObject.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.TestGenericObject == null)
                            {
                                item.TestGenericObject = null;
                            }
                            else
                            {
                                item.TestGenericObject = TestGenericObject.Copy(
                                    rhs.TestGenericObject,
                                    copyMask?.TestGenericObject.Specific,
                                    def?.TestGenericObject);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.TestGenericObject.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doErrorMask)
                {
                    errorMask().SetNthException((ushort)TestGenericSpecification_FieldIndex.TestGenericObject, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestGenericSpecification obj,
            NotifyingFireParameters? cmds = null)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestGenericSpecification obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    obj.TestGenericObject = default(TestGenericObject);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestGenericSpecification obj)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestGenericSpecificationGetter obj)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    return obj.TestGenericObject;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITestGenericSpecification item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.TestGenericObject = default(TestGenericObject);
        }

        public static TestGenericSpecification_Mask<bool> GetEqualsMask(
            this ITestGenericSpecificationGetter item,
            ITestGenericSpecificationGetter rhs)
        {
            var ret = new TestGenericSpecification_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITestGenericSpecificationGetter item,
            ITestGenericSpecificationGetter rhs,
            TestGenericSpecification_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.TestGenericObject = new MaskItem<bool, TestGenericObject_Mask<bool>>();
            ret.TestGenericObject.Specific = TestGenericObjectCommon.GetEqualsMask(item.TestGenericObject, rhs.TestGenericObject);
            ret.TestGenericObject.Overall = ret.TestGenericObject.Specific.AllEqual((b) => b);
        }

        public static string ToString(
            this ITestGenericSpecificationGetter item,
            string name = null,
            TestGenericSpecification_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITestGenericSpecificationGetter item,
            FileGeneration fg,
            string name = null,
            TestGenericSpecification_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestGenericSpecification)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestGenericSpecification)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TestGenericObject?.Overall ?? true)
                {
                    item.TestGenericObject.ToString(fg, "TestGenericObject");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITestGenericSpecificationGetter item,
            TestGenericSpecification_Mask<bool?> checkMask)
        {
            return true;
        }

        public static TestGenericSpecification_Mask<bool> GetHasBeenSetMask(ITestGenericSpecificationGetter item)
        {
            var ret = new TestGenericSpecification_Mask<bool>();
            ret.TestGenericObject = new MaskItem<bool, TestGenericObject_Mask<bool>>(true, TestGenericObjectCommon.GetHasBeenSetMask(item.TestGenericObject));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ITestGenericSpecificationGetter item,
            bool doMasks,
            out TestGenericSpecification_ErrorMask errorMask,
            string name = null)
        {
            TestGenericSpecification_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestGenericSpecification_ErrorMask()) : default(Func<TestGenericSpecification_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ITestGenericSpecificationGetter item,
            bool doMasks,
            Func<TestGenericSpecification_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Loqui.Tests.TestGenericSpecification"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Loqui.Tests.TestGenericSpecification");
                    }
                    {
                        MaskItem<Exception, TestGenericObject_ErrorMask> subMask;
                        TestGenericObjectCommon.Write_XML(
                            writer: writer,
                            item: item.TestGenericObject,
                            name: nameof(item.TestGenericObject),
                            doMasks: doMasks,
                            errorMask: out TestGenericObject_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, TestGenericObject_ErrorMask>(null, loquiMask);
                        if (doMasks && subMask != null)
                        {
                            errorMask().TestGenericObject = subMask;
                        }
                    }
                }
            }
            catch (Exception ex)
            when (doMasks)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestGenericSpecification_Mask<T> : IMask<T>, IEquatable<TestGenericSpecification_Mask<T>>
    {
        #region Ctors
        public TestGenericSpecification_Mask()
        {
        }

        public TestGenericSpecification_Mask(T initialValue)
        {
            this.TestGenericObject = new MaskItem<T, TestGenericObject_Mask<T>>(initialValue, new TestGenericObject_Mask<T>(initialValue));
        }
        #endregion

        #region Members
        public MaskItem<T, TestGenericObject_Mask<T>> TestGenericObject { get; set; }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericSpecification_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericSpecification_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.TestGenericObject, rhs.TestGenericObject)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.TestGenericObject?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (TestGenericObject != null)
            {
                if (!eval(this.TestGenericObject.Overall)) return false;
                if (TestGenericObject.Specific != null && !TestGenericObject.Specific.AllEqual(eval)) return false;
            }
            return true;
        }
        #endregion

        #region Translate
        public TestGenericSpecification_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestGenericSpecification_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestGenericSpecification_Mask<R> obj, Func<T, R> eval)
        {
            if (this.TestGenericObject != null)
            {
                obj.TestGenericObject = new MaskItem<R, TestGenericObject_Mask<R>>();
                obj.TestGenericObject.Overall = eval(this.TestGenericObject.Overall);
                if (this.TestGenericObject.Specific != null)
                {
                    obj.TestGenericObject.Specific = this.TestGenericObject.Specific.Translate(eval);
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestGenericSpecification_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestGenericSpecification_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestGenericSpecification_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.TestGenericObject?.Overall ?? true)
                {
                    TestGenericObject.ToString(fg);
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestGenericSpecification_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public MaskItem<Exception, TestGenericObject_ErrorMask> TestGenericObject;
        #endregion

        #region IErrorMask
        public void SetNthException(ushort index, Exception ex)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    this.TestGenericObject = new MaskItem<Exception, TestGenericObject_ErrorMask>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            TestGenericSpecification_FieldIndex enu = (TestGenericSpecification_FieldIndex)index;
            switch (enu)
            {
                case TestGenericSpecification_FieldIndex.TestGenericObject:
                    this.TestGenericObject = (MaskItem<Exception, TestGenericObject_ErrorMask>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestGenericSpecification_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            if (TestGenericObject != null)
            {
                TestGenericObject.ToString(fg);
            }
        }
        #endregion

        #region Combine
        public TestGenericSpecification_ErrorMask Combine(TestGenericSpecification_ErrorMask rhs)
        {
            var ret = new TestGenericSpecification_ErrorMask();
            ret.TestGenericObject = new MaskItem<Exception, TestGenericObject_ErrorMask>(this.TestGenericObject.Overall.Combine(rhs.TestGenericObject.Overall), this.TestGenericObject.Specific.Combine(rhs.TestGenericObject.Specific));
            return ret;
        }
        public static TestGenericSpecification_ErrorMask Combine(TestGenericSpecification_ErrorMask lhs, TestGenericSpecification_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TestGenericSpecification_CopyMask
    {
        #region Members
        public MaskItem<CopyOption, TestGenericObject_CopyMask> TestGenericObject;
        #endregion

    }
    #endregion


    #endregion

}
