/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Internals;
using Loqui.Tests;
using System.ComponentModel;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;

namespace Loqui.Tests
{
    #region Class
    public partial class TestObject_RPC : ITestObject_RPC, ILoquiObjectSetter, INotifyPropertyChanged, IEquatable<TestObject_RPC>
    {
        ILoquiRegistration ILoquiObject.Registration => TestObject_RPC_Registration.Instance;
        public static TestObject_RPC_Registration Registration => TestObject_RPC_Registration.Instance;

        #region PropertyChangedHandler
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        public TestObject_RPC()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #region BoolN
        private Boolean? _BoolN;
        public Boolean? BoolN
        {
            get => _BoolN;
            set { this._BoolN = value; OnPropertyChanged(nameof(BoolN)); }
        }
        #endregion
        #region Bool
        private Boolean _Bool;
        public Boolean Bool
        {
            get => _Bool;
            set { this._Bool = value; OnPropertyChanged(nameof(Bool)); }
        }
        #endregion
        #region CharN
        private Char? _CharN;
        public Char? CharN
        {
            get => _CharN;
            set { this._CharN = value; OnPropertyChanged(nameof(CharN)); }
        }
        #endregion
        #region Char
        private Char _Char;
        public Char Char
        {
            get => _Char;
            set { this._Char = value; OnPropertyChanged(nameof(Char)); }
        }
        #endregion
        #region DateTimeNull
        private DateTime? _DateTimeNull;
        public DateTime? DateTimeNull
        {
            get => _DateTimeNull;
            set { this._DateTimeNull = value; OnPropertyChanged(nameof(DateTimeNull)); }
        }
        #endregion
        #region DateTime
        private DateTime _DateTime;
        public DateTime DateTime
        {
            get => _DateTime;
            set { this._DateTime = value; OnPropertyChanged(nameof(DateTime)); }
        }
        #endregion
        #region DoubleN
        private Double? _DoubleN;
        public Double? DoubleN
        {
            get => _DoubleN;
            set { this._DoubleN = value; OnPropertyChanged(nameof(DoubleN)); }
        }
        #endregion
        #region DoubleN_Ranged
        private Double? _DoubleN_Ranged;
        public Double? DoubleN_Ranged
        {
            get => _DoubleN_Ranged;
            set
            {
                this._DoubleN_Ranged = value?.PutInRange(DoubleN_Ranged_Range.Min, DoubleN_Ranged_Range.Max);
                OnPropertyChanged(nameof(DoubleN_Ranged));
            }
        }
        public static RangeDouble DoubleN_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region Double
        private Double _Double;
        public Double Double
        {
            get => _Double;
            set { this._Double = value; OnPropertyChanged(nameof(Double)); }
        }
        #endregion
        #region Double_Ranged
        private Double _Double_Ranged;
        public Double Double_Ranged
        {
            get => _Double_Ranged;
            set
            {
                this._Double_Ranged = value.PutInRange(Double_Ranged_Range.Min, Double_Ranged_Range.Max);
                OnPropertyChanged(nameof(Double_Ranged));
            }
        }
        public static RangeDouble Double_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region FloatN
        private Single? _FloatN;
        public Single? FloatN
        {
            get => _FloatN;
            set { this._FloatN = value; OnPropertyChanged(nameof(FloatN)); }
        }
        #endregion
        #region FloatN_Ranged
        private Single? _FloatN_Ranged;
        public Single? FloatN_Ranged
        {
            get => _FloatN_Ranged;
            set
            {
                this._FloatN_Ranged = value?.PutInRange(FloatN_Ranged_Range.Min, FloatN_Ranged_Range.Max);
                OnPropertyChanged(nameof(FloatN_Ranged));
            }
        }
        public static RangeFloat FloatN_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Float
        private Single _Float;
        public Single Float
        {
            get => _Float;
            set { this._Float = value; OnPropertyChanged(nameof(Float)); }
        }
        #endregion
        #region Float_Ranged
        private Single _Float_Ranged;
        public Single Float_Ranged
        {
            get => _Float_Ranged;
            set
            {
                this._Float_Ranged = value.PutInRange(Float_Ranged_Range.Min, Float_Ranged_Range.Max);
                OnPropertyChanged(nameof(Float_Ranged));
            }
        }
        public static RangeFloat Float_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Int16N
        private Int16? _Int16N;
        public Int16? Int16N
        {
            get => _Int16N;
            set { this._Int16N = value; OnPropertyChanged(nameof(Int16N)); }
        }
        #endregion
        #region Int16N_Ranged
        private Int16? _Int16N_Ranged;
        public Int16? Int16N_Ranged
        {
            get => _Int16N_Ranged;
            set
            {
                this._Int16N_Ranged = value?.PutInRange(Int16N_Ranged_Range.Min, Int16N_Ranged_Range.Max);
                OnPropertyChanged(nameof(Int16N_Ranged));
            }
        }
        public static RangeInt16 Int16N_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int16
        private Int16 _Int16;
        public Int16 Int16
        {
            get => _Int16;
            set { this._Int16 = value; OnPropertyChanged(nameof(Int16)); }
        }
        #endregion
        #region Int16_Ranged
        private Int16 _Int16_Ranged;
        public Int16 Int16_Ranged
        {
            get => _Int16_Ranged;
            set
            {
                this._Int16_Ranged = value.PutInRange(Int16_Ranged_Range.Min, Int16_Ranged_Range.Max);
                OnPropertyChanged(nameof(Int16_Ranged));
            }
        }
        public static RangeInt16 Int16_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int32N
        private Int32? _Int32N;
        public Int32? Int32N
        {
            get => _Int32N;
            set { this._Int32N = value; OnPropertyChanged(nameof(Int32N)); }
        }
        #endregion
        #region Int32N_Ranged
        private Int32? _Int32N_Ranged;
        public Int32? Int32N_Ranged
        {
            get => _Int32N_Ranged;
            set
            {
                this._Int32N_Ranged = value?.PutInRange(Int32N_Ranged_Range.Min, Int32N_Ranged_Range.Max);
                OnPropertyChanged(nameof(Int32N_Ranged));
            }
        }
        public static RangeInt32 Int32N_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int32
        private Int32 _Int32;
        public Int32 Int32
        {
            get => _Int32;
            set { this._Int32 = value; OnPropertyChanged(nameof(Int32)); }
        }
        #endregion
        #region Int32_Ranged
        private Int32 _Int32_Ranged;
        public Int32 Int32_Ranged
        {
            get => _Int32_Ranged;
            set
            {
                this._Int32_Ranged = value.PutInRange(Int32_Ranged_Range.Min, Int32_Ranged_Range.Max);
                OnPropertyChanged(nameof(Int32_Ranged));
            }
        }
        public static RangeInt32 Int32_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int64N
        private Int64? _Int64N;
        public Int64? Int64N
        {
            get => _Int64N;
            set { this._Int64N = value; OnPropertyChanged(nameof(Int64N)); }
        }
        #endregion
        #region Int64N_Ranged
        private Int64? _Int64N_Ranged;
        public Int64? Int64N_Ranged
        {
            get => _Int64N_Ranged;
            set
            {
                this._Int64N_Ranged = value?.PutInRange(Int64N_Ranged_Range.Min, Int64N_Ranged_Range.Max);
                OnPropertyChanged(nameof(Int64N_Ranged));
            }
        }
        public static RangeInt64 Int64N_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int64
        private Int64 _Int64;
        public Int64 Int64
        {
            get => _Int64;
            set { this._Int64 = value; OnPropertyChanged(nameof(Int64)); }
        }
        #endregion
        #region Int64_Ranged
        private Int64 _Int64_Ranged;
        public Int64 Int64_Ranged
        {
            get => _Int64_Ranged;
            set
            {
                this._Int64_Ranged = value.PutInRange(Int64_Ranged_Range.Min, Int64_Ranged_Range.Max);
                OnPropertyChanged(nameof(Int64_Ranged));
            }
        }
        public static RangeInt64 Int64_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int8N
        private SByte? _Int8N;
        public SByte? Int8N
        {
            get => _Int8N;
            set { this._Int8N = value; OnPropertyChanged(nameof(Int8N)); }
        }
        #endregion
        #region Int8N_Ranged
        private SByte? _Int8N_Ranged;
        public SByte? Int8N_Ranged
        {
            get => _Int8N_Ranged;
            set
            {
                this._Int8N_Ranged = value?.PutInRange(Int8N_Ranged_Range.Min, Int8N_Ranged_Range.Max);
                OnPropertyChanged(nameof(Int8N_Ranged));
            }
        }
        public static RangeInt8 Int8N_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Int8
        private SByte _Int8;
        public SByte Int8
        {
            get => _Int8;
            set { this._Int8 = value; OnPropertyChanged(nameof(Int8)); }
        }
        #endregion
        #region Int8_Ranged
        private SByte _Int8_Ranged;
        public SByte Int8_Ranged
        {
            get => _Int8_Ranged;
            set
            {
                this._Int8_Ranged = value.PutInRange(Int8_Ranged_Range.Min, Int8_Ranged_Range.Max);
                OnPropertyChanged(nameof(Int8_Ranged));
            }
        }
        public static RangeInt8 Int8_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Unsafe
        private bool _Unsafe;
        public bool Unsafe
        {
            get => _Unsafe;
            set { this._Unsafe = value; OnPropertyChanged(nameof(Unsafe)); }
        }
        #endregion
        #region P2IntN
        private P2Int? _P2IntN;
        public P2Int? P2IntN
        {
            get => _P2IntN;
            set { this._P2IntN = value; OnPropertyChanged(nameof(P2IntN)); }
        }
        #endregion
        #region P2Int
        private P2Int _P2Int;
        public P2Int P2Int
        {
            get => _P2Int;
            set { this._P2Int = value; OnPropertyChanged(nameof(P2Int)); }
        }
        #endregion
        #region P3DoubleN
        private P3Double? _P3DoubleN;
        public P3Double? P3DoubleN
        {
            get => _P3DoubleN;
            set { this._P3DoubleN = value; OnPropertyChanged(nameof(P3DoubleN)); }
        }
        #endregion
        #region P3Double
        private P3Double _P3Double;
        public P3Double P3Double
        {
            get => _P3Double;
            set { this._P3Double = value; OnPropertyChanged(nameof(P3Double)); }
        }
        #endregion
        #region P3IntN
        private P3Int? _P3IntN;
        public P3Int? P3IntN
        {
            get => _P3IntN;
            set { this._P3IntN = value; OnPropertyChanged(nameof(P3IntN)); }
        }
        #endregion
        #region P3Int
        private P3Int _P3Int;
        public P3Int P3Int
        {
            get => _P3Int;
            set { this._P3Int = value; OnPropertyChanged(nameof(P3Int)); }
        }
        #endregion
        #region PercentN
        private Percent? _PercentN;
        public Percent? PercentN
        {
            get => _PercentN;
            set { this._PercentN = value; OnPropertyChanged(nameof(PercentN)); }
        }
        #endregion
        #region Percent
        private Percent _Percent;
        public Percent Percent
        {
            get => _Percent;
            set { this._Percent = value; OnPropertyChanged(nameof(Percent)); }
        }
        #endregion
        #region RangeInt8N
        private RangeInt8? _RangeInt8N;
        public RangeInt8? RangeInt8N
        {
            get => _RangeInt8N;
            set { this._RangeInt8N = value; OnPropertyChanged(nameof(RangeInt8N)); }
        }
        #endregion
        #region RangeInt8
        private RangeInt8 _RangeInt8;
        public RangeInt8 RangeInt8
        {
            get => _RangeInt8;
            set { this._RangeInt8 = value; OnPropertyChanged(nameof(RangeInt8)); }
        }
        #endregion
        #region RangeInt16N
        private RangeInt16? _RangeInt16N;
        public RangeInt16? RangeInt16N
        {
            get => _RangeInt16N;
            set { this._RangeInt16N = value; OnPropertyChanged(nameof(RangeInt16N)); }
        }
        #endregion
        #region RangeInt16
        private RangeInt16 _RangeInt16;
        public RangeInt16 RangeInt16
        {
            get => _RangeInt16;
            set { this._RangeInt16 = value; OnPropertyChanged(nameof(RangeInt16)); }
        }
        #endregion
        #region RangeInt32N
        private RangeInt32? _RangeInt32N;
        public RangeInt32? RangeInt32N
        {
            get => _RangeInt32N;
            set { this._RangeInt32N = value; OnPropertyChanged(nameof(RangeInt32N)); }
        }
        #endregion
        #region RangeInt32
        private RangeInt32 _RangeInt32;
        public RangeInt32 RangeInt32
        {
            get => _RangeInt32;
            set { this._RangeInt32 = value; OnPropertyChanged(nameof(RangeInt32)); }
        }
        #endregion
        #region RangeInt64N
        private RangeInt64? _RangeInt64N;
        public RangeInt64? RangeInt64N
        {
            get => _RangeInt64N;
            set { this._RangeInt64N = value; OnPropertyChanged(nameof(RangeInt64N)); }
        }
        #endregion
        #region RangeInt64
        private RangeInt64 _RangeInt64;
        public RangeInt64 RangeInt64
        {
            get => _RangeInt64;
            set { this._RangeInt64 = value; OnPropertyChanged(nameof(RangeInt64)); }
        }
        #endregion
        #region RangeUInt8N
        private RangeUInt8? _RangeUInt8N;
        public RangeUInt8? RangeUInt8N
        {
            get => _RangeUInt8N;
            set { this._RangeUInt8N = value; OnPropertyChanged(nameof(RangeUInt8N)); }
        }
        #endregion
        #region RangeUInt8
        private RangeUInt8 _RangeUInt8;
        public RangeUInt8 RangeUInt8
        {
            get => _RangeUInt8;
            set { this._RangeUInt8 = value; OnPropertyChanged(nameof(RangeUInt8)); }
        }
        #endregion
        #region RangeUInt16N
        private RangeUInt16? _RangeUInt16N;
        public RangeUInt16? RangeUInt16N
        {
            get => _RangeUInt16N;
            set { this._RangeUInt16N = value; OnPropertyChanged(nameof(RangeUInt16N)); }
        }
        #endregion
        #region RangeUInt16
        private RangeUInt16 _RangeUInt16;
        public RangeUInt16 RangeUInt16
        {
            get => _RangeUInt16;
            set { this._RangeUInt16 = value; OnPropertyChanged(nameof(RangeUInt16)); }
        }
        #endregion
        #region RangeUInt32N
        private RangeUInt32? _RangeUInt32N;
        public RangeUInt32? RangeUInt32N
        {
            get => _RangeUInt32N;
            set { this._RangeUInt32N = value; OnPropertyChanged(nameof(RangeUInt32N)); }
        }
        #endregion
        #region RangeUInt32
        private RangeUInt32 _RangeUInt32;
        public RangeUInt32 RangeUInt32
        {
            get => _RangeUInt32;
            set { this._RangeUInt32 = value; OnPropertyChanged(nameof(RangeUInt32)); }
        }
        #endregion
        #region RangeUInt64N
        private RangeUInt64? _RangeUInt64N;
        public RangeUInt64? RangeUInt64N
        {
            get => _RangeUInt64N;
            set { this._RangeUInt64N = value; OnPropertyChanged(nameof(RangeUInt64N)); }
        }
        #endregion
        #region RangeUInt64
        private RangeUInt64 _RangeUInt64;
        public RangeUInt64 RangeUInt64
        {
            get => _RangeUInt64;
            set { this._RangeUInt64 = value; OnPropertyChanged(nameof(RangeUInt64)); }
        }
        #endregion
        #region String
        private String _String;
        public String String
        {
            get => _String;
            set { this._String = value; OnPropertyChanged(nameof(String)); }
        }
        #endregion
        #region UDoubleN
        private UDouble? _UDoubleN;
        public UDouble? UDoubleN
        {
            get => _UDoubleN;
            set { this._UDoubleN = value; OnPropertyChanged(nameof(UDoubleN)); }
        }
        #endregion
        #region UDoubleN_Ranged
        private UDouble? _UDoubleN_Ranged;
        public UDouble? UDoubleN_Ranged
        {
            get => _UDoubleN_Ranged;
            set
            {
                this._UDoubleN_Ranged = value?.PutInRange(UDoubleN_Ranged_Range.Min, UDoubleN_Ranged_Range.Max);
                OnPropertyChanged(nameof(UDoubleN_Ranged));
            }
        }
        public static RangeUDouble UDoubleN_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UDouble
        private UDouble _UDouble;
        public UDouble UDouble
        {
            get => _UDouble;
            set { this._UDouble = value; OnPropertyChanged(nameof(UDouble)); }
        }
        #endregion
        #region UDouble_Ranged
        private UDouble _UDouble_Ranged;
        public UDouble UDouble_Ranged
        {
            get => _UDouble_Ranged;
            set
            {
                this._UDouble_Ranged = value.PutInRange(UDouble_Ranged_Range.Min, UDouble_Ranged_Range.Max);
                OnPropertyChanged(nameof(UDouble_Ranged));
            }
        }
        public static RangeUDouble UDouble_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UInt16N
        private UInt16? _UInt16N;
        public UInt16? UInt16N
        {
            get => _UInt16N;
            set { this._UInt16N = value; OnPropertyChanged(nameof(UInt16N)); }
        }
        #endregion
        #region UInt16N_Ranged
        private UInt16? _UInt16N_Ranged;
        public UInt16? UInt16N_Ranged
        {
            get => _UInt16N_Ranged;
            set
            {
                this._UInt16N_Ranged = value?.PutInRange(UInt16N_Ranged_Range.Min, UInt16N_Ranged_Range.Max);
                OnPropertyChanged(nameof(UInt16N_Ranged));
            }
        }
        public static RangeUInt16 UInt16N_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt16
        private UInt16 _UInt16;
        public UInt16 UInt16
        {
            get => _UInt16;
            set { this._UInt16 = value; OnPropertyChanged(nameof(UInt16)); }
        }
        #endregion
        #region UInt16_Ranged
        private UInt16 _UInt16_Ranged;
        public UInt16 UInt16_Ranged
        {
            get => _UInt16_Ranged;
            set
            {
                this._UInt16_Ranged = value.PutInRange(UInt16_Ranged_Range.Min, UInt16_Ranged_Range.Max);
                OnPropertyChanged(nameof(UInt16_Ranged));
            }
        }
        public static RangeUInt16 UInt16_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt32N
        private UInt32? _UInt32N;
        public UInt32? UInt32N
        {
            get => _UInt32N;
            set { this._UInt32N = value; OnPropertyChanged(nameof(UInt32N)); }
        }
        #endregion
        #region UInt32N_Ranged
        private UInt32? _UInt32N_Ranged;
        public UInt32? UInt32N_Ranged
        {
            get => _UInt32N_Ranged;
            set
            {
                this._UInt32N_Ranged = value?.PutInRange(UInt32N_Ranged_Range.Min, UInt32N_Ranged_Range.Max);
                OnPropertyChanged(nameof(UInt32N_Ranged));
            }
        }
        public static RangeUInt32 UInt32N_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt32
        private UInt32 _UInt32;
        public UInt32 UInt32
        {
            get => _UInt32;
            set { this._UInt32 = value; OnPropertyChanged(nameof(UInt32)); }
        }
        #endregion
        #region UInt32_Ranged
        private UInt32 _UInt32_Ranged;
        public UInt32 UInt32_Ranged
        {
            get => _UInt32_Ranged;
            set
            {
                this._UInt32_Ranged = value.PutInRange(UInt32_Ranged_Range.Min, UInt32_Ranged_Range.Max);
                OnPropertyChanged(nameof(UInt32_Ranged));
            }
        }
        public static RangeUInt32 UInt32_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt64N
        private UInt64? _UInt64N;
        public UInt64? UInt64N
        {
            get => _UInt64N;
            set { this._UInt64N = value; OnPropertyChanged(nameof(UInt64N)); }
        }
        #endregion
        #region UInt64N_Ranged
        private UInt64? _UInt64N_Ranged;
        public UInt64? UInt64N_Ranged
        {
            get => _UInt64N_Ranged;
            set
            {
                this._UInt64N_Ranged = value?.PutInRange(UInt64N_Ranged_Range.Min, UInt64N_Ranged_Range.Max);
                OnPropertyChanged(nameof(UInt64N_Ranged));
            }
        }
        public static RangeUInt64 UInt64N_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt64
        private UInt64 _UInt64;
        public UInt64 UInt64
        {
            get => _UInt64;
            set { this._UInt64 = value; OnPropertyChanged(nameof(UInt64)); }
        }
        #endregion
        #region UInt64_Ranged
        private UInt64 _UInt64_Ranged;
        public UInt64 UInt64_Ranged
        {
            get => _UInt64_Ranged;
            set
            {
                this._UInt64_Ranged = value.PutInRange(UInt64_Ranged_Range.Min, UInt64_Ranged_Range.Max);
                OnPropertyChanged(nameof(UInt64_Ranged));
            }
        }
        public static RangeUInt64 UInt64_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt8N
        private Byte? _UInt8N;
        public Byte? UInt8N
        {
            get => _UInt8N;
            set { this._UInt8N = value; OnPropertyChanged(nameof(UInt8N)); }
        }
        #endregion
        #region UInt8N_Ranged
        private Byte? _UInt8N_Ranged;
        public Byte? UInt8N_Ranged
        {
            get => _UInt8N_Ranged;
            set
            {
                this._UInt8N_Ranged = value?.PutInRange(UInt8N_Ranged_Range.Min, UInt8N_Ranged_Range.Max);
                OnPropertyChanged(nameof(UInt8N_Ranged));
            }
        }
        public static RangeUInt8 UInt8N_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region UInt8
        private Byte _UInt8;
        public Byte UInt8
        {
            get => _UInt8;
            set { this._UInt8 = value; OnPropertyChanged(nameof(UInt8)); }
        }
        #endregion
        #region UInt8_Ranged
        private Byte _UInt8_Ranged;
        public Byte UInt8_Ranged
        {
            get => _UInt8_Ranged;
            set
            {
                this._UInt8_Ranged = value.PutInRange(UInt8_Ranged_Range.Min, UInt8_Ranged_Range.Max);
                OnPropertyChanged(nameof(UInt8_Ranged));
            }
        }
        public static RangeUInt8 UInt8_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region Enum
        private TestEnum _Enum;
        public TestEnum Enum
        {
            get => _Enum;
            set { this._Enum = value; OnPropertyChanged(nameof(Enum)); }
        }
        #endregion
        #region WildCard
        protected Object _WildCard;
        public Object WildCard
        {
            get => this._WildCard;
            set => this._WildCard = WildcardLink.Validate(value);
        }
        Object ITestObject_RPCGetter.WildCard => this.WildCard;
        #endregion
        #region Ref
        private ObjectToRef _Ref;
        public ObjectToRef Ref
        {
            get => _Ref;
            set { this._Ref = value; OnPropertyChanged(nameof(Ref)); }
        }
        #endregion
        #region Ref_NotNull
        private ObjectToRef _Ref_NotNull = new ObjectToRef();
        public ObjectToRef Ref_NotNull
        {
            get => _Ref_NotNull;
            set => _Ref_NotNull = value ?? new ObjectToRef();
        }
        #endregion
        #region Ref_Singleton
        public ObjectToRef Ref_Singleton { get; } = new ObjectToRef();
        #endregion
        #region RefGetter
        private IObjectToRefGetter _RefGetter;
        public IObjectToRefGetter RefGetter
        {
            get => _RefGetter;
            set { this._RefGetter = value; OnPropertyChanged(nameof(RefGetter)); }
        }
        #endregion
        #region RefGetter_NotNull
        private IObjectToRefGetter _RefGetter_NotNull = new ObjectToRef();
        public IObjectToRefGetter RefGetter_NotNull
        {
            get => _RefGetter_NotNull;
            set => _RefGetter_NotNull = value ?? new ObjectToRef();
        }
        #endregion
        #region RefGetter_Singleton
        public IObjectToRefGetter RefGetter_Singleton { get; } = new ObjectToRef();
        #endregion
        #region RefSetter
        private IObjectToRef _RefSetter;
        public IObjectToRef RefSetter
        {
            get => _RefSetter;
            set { this._RefSetter = value; OnPropertyChanged(nameof(RefSetter)); }
        }
        #endregion
        #region RefSetter_NotNull
        private IObjectToRef _RefSetter_NotNull = new ObjectToRef();
        public IObjectToRef RefSetter_NotNull
        {
            get => _RefSetter_NotNull;
            set => _RefSetter_NotNull = value ?? new ObjectToRef();
        }
        #endregion
        #region RefSetter_Singleton
        public IObjectToRef RefSetter_Singleton { get; } = new ObjectToRef();
        #endregion
        #region List
        private readonly INotifyingList<Boolean> _List = new NotifyingList<Boolean>();
        public INotifyingList<Boolean> List => _List;
        #region Interface Members
        INotifyingList<Boolean> ITestObject_RPC.List => _List;
        INotifyingListGetter<Boolean> ITestObject_RPCGetter.List => _List;
        #endregion

        #endregion
        #region RefList
        private readonly INotifyingList<ObjectToRef> _RefList = new NotifyingList<ObjectToRef>();
        public INotifyingList<ObjectToRef> RefList => _RefList;
        #region Interface Members
        INotifyingList<ObjectToRef> ITestObject_RPC.RefList => _RefList;
        INotifyingListGetter<ObjectToRef> ITestObject_RPCGetter.RefList => _RefList;
        #endregion

        #endregion
        #region Dict
        private readonly INotifyingDictionary<String, Boolean> _Dict = new NotifyingDictionary<String, Boolean>();
        public INotifyingDictionary<String, Boolean> Dict { get { return _Dict; } }
        #region Interface Members
        INotifyingDictionary<String, Boolean> ITestObject_RPC.Dict => _Dict;
        INotifyingDictionaryGetter<String, Boolean> ITestObject_RPCGetter.Dict => _Dict;
        #endregion

        #endregion
        #region RefDict
        private readonly INotifyingDictionary<ObjectToRef, ObjectToRef> _RefDict = new NotifyingDictionary<ObjectToRef, ObjectToRef>();
        public INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get { return _RefDict; } }
        #region Interface Members
        INotifyingDictionary<ObjectToRef, ObjectToRef> ITestObject_RPC.RefDict => _RefDict;
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> ITestObject_RPCGetter.RefDict => _RefDict;
        #endregion

        #endregion
        #region KeyRefDict
        private readonly INotifyingDictionary<ObjectToRef, Boolean> _KeyRefDict = new NotifyingDictionary<ObjectToRef, Boolean>();
        public INotifyingDictionary<ObjectToRef, Boolean> KeyRefDict { get { return _KeyRefDict; } }
        #region Interface Members
        INotifyingDictionary<ObjectToRef, Boolean> ITestObject_RPC.KeyRefDict => _KeyRefDict;
        INotifyingDictionaryGetter<ObjectToRef, Boolean> ITestObject_RPCGetter.KeyRefDict => _KeyRefDict;
        #endregion

        #endregion
        #region ValRefDict
        private readonly INotifyingDictionary<String, ObjectToRef> _ValRefDict = new NotifyingDictionary<String, ObjectToRef>();
        public INotifyingDictionary<String, ObjectToRef> ValRefDict { get { return _ValRefDict; } }
        #region Interface Members
        INotifyingDictionary<String, ObjectToRef> ITestObject_RPC.ValRefDict => _ValRefDict;
        INotifyingDictionaryGetter<String, ObjectToRef> ITestObject_RPCGetter.ValRefDict => _ValRefDict;
        #endregion

        #endregion
        #region DictKeyedValue
        private readonly INotifyingKeyedCollection<Int32, ObjectToRef> _DictKeyedValue = new NotifyingKeyedCollection<Int32, ObjectToRef>((item) => item.KeyField);
        public INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue => _DictKeyedValue;
        #region Interface Members
        INotifyingKeyedCollection<Int32, ObjectToRef> ITestObject_RPC.DictKeyedValue => _DictKeyedValue;
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> ITestObject_RPCGetter.DictKeyedValue => _DictKeyedValue;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TestObject_RPCCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestObject_RPCCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestObject_RPCCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestObject_RPCCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        public void CopyFieldsFrom(
            ITestObject_RPCGetter rhs,
            TestObject_RPC_CopyMask copyMask = null,
            ITestObject_RPCGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_RPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestObject_RPCGetter rhs,
            out TestObject_RPC_ErrorMask errorMask,
            TestObject_RPC_CopyMask copyMask = null,
            ITestObject_RPCGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_RPC_ErrorMask retErrorMask = null;
            Func<TestObject_RPC_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestObject_RPC_ErrorMask();
                }
                return retErrorMask;
            };
            TestObject_RPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return ILoquiObjectExt.PrintPretty(this);
        }
        #endregion


        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_RPC rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_RPC rhs)
        {
            if (BoolN != rhs.BoolN) return false;
            if (Bool != rhs.Bool) return false;
            if (CharN != rhs.CharN) return false;
            if (Char != rhs.Char) return false;
            if (DateTimeNull != rhs.DateTimeNull) return false;
            if (DateTime != rhs.DateTime) return false;
            if (DoubleN != rhs.DoubleN) return false;
            if (DoubleN_Ranged != rhs.DoubleN_Ranged) return false;
            if (Double != rhs.Double) return false;
            if (Double_Ranged != rhs.Double_Ranged) return false;
            if (FloatN != rhs.FloatN) return false;
            if (FloatN_Ranged != rhs.FloatN_Ranged) return false;
            if (Float != rhs.Float) return false;
            if (Float_Ranged != rhs.Float_Ranged) return false;
            if (Int16N != rhs.Int16N) return false;
            if (Int16N_Ranged != rhs.Int16N_Ranged) return false;
            if (Int16 != rhs.Int16) return false;
            if (Int16_Ranged != rhs.Int16_Ranged) return false;
            if (Int32N != rhs.Int32N) return false;
            if (Int32N_Ranged != rhs.Int32N_Ranged) return false;
            if (Int32 != rhs.Int32) return false;
            if (Int32_Ranged != rhs.Int32_Ranged) return false;
            if (Int64N != rhs.Int64N) return false;
            if (Int64N_Ranged != rhs.Int64N_Ranged) return false;
            if (Int64 != rhs.Int64) return false;
            if (Int64_Ranged != rhs.Int64_Ranged) return false;
            if (Int8N != rhs.Int8N) return false;
            if (Int8N_Ranged != rhs.Int8N_Ranged) return false;
            if (Int8 != rhs.Int8) return false;
            if (Int8_Ranged != rhs.Int8_Ranged) return false;
            if (Unsafe != rhs.Unsafe) return false;
            if (P2IntN != rhs.P2IntN) return false;
            if (P2Int != rhs.P2Int) return false;
            if (P3DoubleN != rhs.P3DoubleN) return false;
            if (P3Double != rhs.P3Double) return false;
            if (P3IntN != rhs.P3IntN) return false;
            if (P3Int != rhs.P3Int) return false;
            if (PercentN != rhs.PercentN) return false;
            if (Percent != rhs.Percent) return false;
            if (RangeInt8N != rhs.RangeInt8N) return false;
            if (RangeInt8 != rhs.RangeInt8) return false;
            if (RangeInt16N != rhs.RangeInt16N) return false;
            if (RangeInt16 != rhs.RangeInt16) return false;
            if (RangeInt32N != rhs.RangeInt32N) return false;
            if (RangeInt32 != rhs.RangeInt32) return false;
            if (RangeInt64N != rhs.RangeInt64N) return false;
            if (RangeInt64 != rhs.RangeInt64) return false;
            if (RangeUInt8N != rhs.RangeUInt8N) return false;
            if (RangeUInt8 != rhs.RangeUInt8) return false;
            if (RangeUInt16N != rhs.RangeUInt16N) return false;
            if (RangeUInt16 != rhs.RangeUInt16) return false;
            if (RangeUInt32N != rhs.RangeUInt32N) return false;
            if (RangeUInt32 != rhs.RangeUInt32) return false;
            if (RangeUInt64N != rhs.RangeUInt64N) return false;
            if (RangeUInt64 != rhs.RangeUInt64) return false;
            if (String != rhs.String) return false;
            if (UDoubleN != rhs.UDoubleN) return false;
            if (UDoubleN_Ranged != rhs.UDoubleN_Ranged) return false;
            if (UDouble != rhs.UDouble) return false;
            if (UDouble_Ranged != rhs.UDouble_Ranged) return false;
            if (UInt16N != rhs.UInt16N) return false;
            if (UInt16N_Ranged != rhs.UInt16N_Ranged) return false;
            if (UInt16 != rhs.UInt16) return false;
            if (UInt16_Ranged != rhs.UInt16_Ranged) return false;
            if (UInt32N != rhs.UInt32N) return false;
            if (UInt32N_Ranged != rhs.UInt32N_Ranged) return false;
            if (UInt32 != rhs.UInt32) return false;
            if (UInt32_Ranged != rhs.UInt32_Ranged) return false;
            if (UInt64N != rhs.UInt64N) return false;
            if (UInt64N_Ranged != rhs.UInt64N_Ranged) return false;
            if (UInt64 != rhs.UInt64) return false;
            if (UInt64_Ranged != rhs.UInt64_Ranged) return false;
            if (UInt8N != rhs.UInt8N) return false;
            if (UInt8N_Ranged != rhs.UInt8N_Ranged) return false;
            if (UInt8 != rhs.UInt8) return false;
            if (UInt8_Ranged != rhs.UInt8_Ranged) return false;
            if (Enum != rhs.Enum) return false;
            if (WildCard != rhs.WildCard) return false;
            if (object.Equals(Ref, rhs.Ref)) return false;
            if (object.Equals(Ref_NotNull, rhs.Ref_NotNull)) return false;
            if (object.Equals(Ref_Singleton, rhs.Ref_Singleton)) return false;
            if (object.Equals(RefGetter, rhs.RefGetter)) return false;
            if (object.Equals(RefGetter_NotNull, rhs.RefGetter_NotNull)) return false;
            if (object.Equals(RefGetter_Singleton, rhs.RefGetter_Singleton)) return false;
            if (object.Equals(RefSetter, rhs.RefSetter)) return false;
            if (object.Equals(RefSetter_NotNull, rhs.RefSetter_NotNull)) return false;
            if (object.Equals(RefSetter_Singleton, rhs.RefSetter_Singleton)) return false;
            if (List.SequenceEqual(rhs.List)) return false;
            if (RefList.SequenceEqual(rhs.RefList)) return false;
            if (Dict.SequenceEqual(rhs.Dict)) return false;
            if (RefDict.SequenceEqual(rhs.RefDict)) return false;
            if (KeyRefDict.SequenceEqual(rhs.KeyRefDict)) return false;
            if (ValRefDict.SequenceEqual(rhs.ValRefDict)) return false;
            if (DictKeyedValue.SequenceEqual(rhs.DictKeyedValue)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(BoolN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Bool).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CharN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Char).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DateTimeNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DateTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DoubleN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DoubleN_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Double).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Double_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FloatN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FloatN_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Float).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Float_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int16N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int16N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int16).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int16_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int32N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int32N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int32).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int32_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int64N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int64N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int64).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int64_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int8N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int8N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int8).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int8_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Unsafe).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P2IntN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P2Int).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P3DoubleN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P3Double).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P3IntN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P3Int).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PercentN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Percent).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt8N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt8).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt16N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt16).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt32N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt32).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt64N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt64).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt8N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt8).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt16N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt16).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt32N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt32).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt64N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt64).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(String).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UDoubleN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UDoubleN_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UDouble).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UDouble_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt16N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt16N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt16).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt16_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt32N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt32N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt32).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt32_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt64N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt64N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt64).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt64_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt8N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt8N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt8).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt8_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Enum).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WildCard).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ref).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ref_NotNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ref_Singleton).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefGetter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefGetter_NotNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefGetter_Singleton).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefSetter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefSetter_NotNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefSetter_Singleton).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(List).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefList).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Dict).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefDict).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(KeyRefDict).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ValRefDict).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DictKeyedValue).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        public static TestObject_RPC Create_XML(Stream stream)
        {
            using (var reader = new StreamReader(stream))
            {
                return Create_XML(XElement.Parse(reader.ReadToEnd()));
            }
        }

        public static TestObject_RPC Create_XML(XElement root)
        {
            var ret = new TestObject_RPC();
            LoquiXmlTranslation<TestObject_RPC, TestObject_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipProtected: false,
                doMasks: false,
                mask: out TestObject_RPC_ErrorMask errorMask,
                cmds: null);
            return ret;
        }

        public static TestObject_RPC Create_XML(XElement root, out TestObject_RPC_ErrorMask errorMask)
        {
            var ret = new TestObject_RPC();
            LoquiXmlTranslation<TestObject_RPC, TestObject_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipProtected: false,
                doMasks: true,
                mask: out errorMask,
                cmds: null);
            return ret;
        }

        public void CopyIn_XML(XElement root, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject_RPC, TestObject_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TestObject_RPC_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(XElement root, out TestObject_RPC_ErrorMask errorMask, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject_RPC, TestObject_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void Write_XML(Stream stream)
        {
            TestObject_RPCCommon.Write_XML(
                this,
                stream);
        }

        public void Write_XML(Stream stream, out TestObject_RPC_ErrorMask errorMask)
        {
            TestObject_RPCCommon.Write_XML(
                this,
                stream,
                out errorMask);
        }

        public void Write_XML(XmlWriter writer, out TestObject_RPC_ErrorMask errorMask, string name = null)
        {
            TestObject_RPCCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public void Write_XML(XmlWriter writer, string name = null)
        {
            TestObject_RPCCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out TestObject_RPC_ErrorMask errorMask);
        }

        #endregion

        public TestObject_RPC Copy(
            TestObject_RPC_CopyMask copyMask = null,
            ITestObject_RPCGetter def = null)
        {
            return TestObject_RPC.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestObject_RPC Copy(
            ITestObject_RPC item,
            TestObject_RPC_CopyMask copyMask = null,
            ITestObject_RPCGetter def = null)
        {
            TestObject_RPC ret;
            if (item.GetType().Equals(typeof(TestObject_RPC)))
            {
                ret = new TestObject_RPC();
            }
            else
            {
                ret = (TestObject_RPC)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType Copy<CopyType>(
            CopyType item,
            TestObject_RPC_CopyMask copyMask = null,
            ITestObject_RPCGetter def = null)
            where CopyType : class, ITestObject_RPC
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestObject_RPC)))
            {
                ret = new TestObject_RPC() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestObject_RPC Copy_ToLoqui(
            ITestObject_RPCGetter item,
            TestObject_RPC_CopyMask copyMask = null,
            ITestObject_RPCGetter def = null)
        {
            var ret = new TestObject_RPC();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                    this.BoolN = (Boolean?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Bool:
                    this.Bool = (Boolean)obj;
                    break;
                case TestObject_RPC_FieldIndex.CharN:
                    this.CharN = (Char?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Char:
                    this.Char = (Char)obj;
                    break;
                case TestObject_RPC_FieldIndex.DateTimeNull:
                    this.DateTimeNull = (DateTime?)obj;
                    break;
                case TestObject_RPC_FieldIndex.DateTime:
                    this.DateTime = (DateTime)obj;
                    break;
                case TestObject_RPC_FieldIndex.DoubleN:
                    this.DoubleN = (Double?)obj;
                    break;
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = (Double?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Double:
                    this.Double = (Double)obj;
                    break;
                case TestObject_RPC_FieldIndex.Double_Ranged:
                    this.Double_Ranged = (Double)obj;
                    break;
                case TestObject_RPC_FieldIndex.FloatN:
                    this.FloatN = (Single?)obj;
                    break;
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = (Single?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Float:
                    this.Float = (Single)obj;
                    break;
                case TestObject_RPC_FieldIndex.Float_Ranged:
                    this.Float_Ranged = (Single)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int16N:
                    this.Int16N = (Int16?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = (Int16?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int16:
                    this.Int16 = (Int16)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = (Int16)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int32N:
                    this.Int32N = (Int32?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = (Int32?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int32:
                    this.Int32 = (Int32)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = (Int32)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int64N:
                    this.Int64N = (Int64?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = (Int64?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int64:
                    this.Int64 = (Int64)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = (Int64)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int8N:
                    this.Int8N = (SByte?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = (SByte?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int8:
                    this.Int8 = (SByte)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = (SByte)obj;
                    break;
                case TestObject_RPC_FieldIndex.Unsafe:
                    this.Unsafe = (bool)obj;
                    break;
                case TestObject_RPC_FieldIndex.P2IntN:
                    this.P2IntN = (P2Int?)obj;
                    break;
                case TestObject_RPC_FieldIndex.P2Int:
                    this.P2Int = (P2Int)obj;
                    break;
                case TestObject_RPC_FieldIndex.P3DoubleN:
                    this.P3DoubleN = (P3Double?)obj;
                    break;
                case TestObject_RPC_FieldIndex.P3Double:
                    this.P3Double = (P3Double)obj;
                    break;
                case TestObject_RPC_FieldIndex.P3IntN:
                    this.P3IntN = (P3Int?)obj;
                    break;
                case TestObject_RPC_FieldIndex.P3Int:
                    this.P3Int = (P3Int)obj;
                    break;
                case TestObject_RPC_FieldIndex.PercentN:
                    this.PercentN = (Percent?)obj;
                    break;
                case TestObject_RPC_FieldIndex.Percent:
                    this.Percent = (Percent)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8N:
                    this.RangeInt8N = (RangeInt8?)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8:
                    this.RangeInt8 = (RangeInt8)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16N:
                    this.RangeInt16N = (RangeInt16?)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16:
                    this.RangeInt16 = (RangeInt16)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32N:
                    this.RangeInt32N = (RangeInt32?)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32:
                    this.RangeInt32 = (RangeInt32)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64N:
                    this.RangeInt64N = (RangeInt64?)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64:
                    this.RangeInt64 = (RangeInt64)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = (RangeUInt8?)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = (RangeUInt8)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = (RangeUInt16?)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = (RangeUInt16)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = (RangeUInt32?)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = (RangeUInt32)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = (RangeUInt64?)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = (RangeUInt64)obj;
                    break;
                case TestObject_RPC_FieldIndex.String:
                    this.String = (String)obj;
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN:
                    this.UDoubleN = (UDouble?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = (UDouble?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UDouble:
                    this.UDouble = (UDouble)obj;
                    break;
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = (UDouble)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt16N:
                    this.UInt16N = (UInt16?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = (UInt16?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt16:
                    this.UInt16 = (UInt16)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = (UInt16)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt32N:
                    this.UInt32N = (UInt32?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = (UInt32?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt32:
                    this.UInt32 = (UInt32)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = (UInt32)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt64N:
                    this.UInt64N = (UInt64?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = (UInt64?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt64:
                    this.UInt64 = (UInt64)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = (UInt64)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt8N:
                    this.UInt8N = (Byte?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = (Byte?)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt8:
                    this.UInt8 = (Byte)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = (Byte)obj;
                    break;
                case TestObject_RPC_FieldIndex.Enum:
                    this.Enum = (TestEnum)obj;
                    break;
                case TestObject_RPC_FieldIndex.WildCard:
                    this.WildCard = (Object)obj;
                    break;
                case TestObject_RPC_FieldIndex.Ref:
                    this.Ref = (ObjectToRef)obj;
                    break;
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = (ObjectToRef)obj;
                    break;
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Cannot set singleton member Ref_Singleton");
                case TestObject_RPC_FieldIndex.RefGetter:
                    this.RefGetter = (IObjectToRefGetter)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = (IObjectToRefGetter)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot set singleton member RefGetter_Singleton");
                case TestObject_RPC_FieldIndex.RefSetter:
                    this.RefSetter = (IObjectToRef)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = (IObjectToRef)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Cannot set singleton member RefSetter_Singleton");
                case TestObject_RPC_FieldIndex.List:
                    this._List.SetTo((IEnumerable<Boolean>)obj, cmds);
                    break;
                case TestObject_RPC_FieldIndex.RefList:
                    this._RefList.SetTo((IEnumerable<ObjectToRef>)obj, cmds);
                    break;
                case TestObject_RPC_FieldIndex.Dict:
                    this.Dict.SetTo(
                        ((NotifyingDictionary<String, Boolean>)obj).Select(
                            (i) => new KeyValuePair<String, Boolean>(
                                i.Key,
                                i.Value)),
                        cmds);
                    break;
                case TestObject_RPC_FieldIndex.RefDict:
                    this.RefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                i.Key.Copy(),
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_RPC_FieldIndex.KeyRefDict:
                    this.KeyRefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, Boolean>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, Boolean>(
                                i.Key.Copy(),
                                i.Value)),
                        cmds);
                    break;
                case TestObject_RPC_FieldIndex.ValRefDict:
                    this.ValRefDict.SetTo(
                        ((NotifyingDictionary<String, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<String, ObjectToRef>(
                                i.Key,
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)(NotifyingDictionary<Int32, ObjectToRef>)obj),
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestObject_RPCCommon.Clear(this, cmds);
        }


        public static TestObject_RPC Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestObject_RPC();
            ILoquiObjectExt.CopyFieldsIn(ret, fields, def: null, skipProtected: false, cmds: null);
            return ret;
        }

        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestObject_RPC obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestObject_RPC : ITestObject_RPCGetter, ILoquiClass<ITestObject_RPC, ITestObject_RPCGetter>, ILoquiClass<TestObject_RPC, ITestObject_RPCGetter>
    {
        new Boolean? BoolN { get; set; }

        new Boolean Bool { get; set; }

        new Char? CharN { get; set; }

        new Char Char { get; set; }

        new DateTime? DateTimeNull { get; set; }

        new DateTime DateTime { get; set; }

        new Double? DoubleN { get; set; }

        new Double? DoubleN_Ranged { get; set; }

        new Double Double { get; set; }

        new Double Double_Ranged { get; set; }

        new Single? FloatN { get; set; }

        new Single? FloatN_Ranged { get; set; }

        new Single Float { get; set; }

        new Single Float_Ranged { get; set; }

        new Int16? Int16N { get; set; }

        new Int16? Int16N_Ranged { get; set; }

        new Int16 Int16 { get; set; }

        new Int16 Int16_Ranged { get; set; }

        new Int32? Int32N { get; set; }

        new Int32? Int32N_Ranged { get; set; }

        new Int32 Int32 { get; set; }

        new Int32 Int32_Ranged { get; set; }

        new Int64? Int64N { get; set; }

        new Int64? Int64N_Ranged { get; set; }

        new Int64 Int64 { get; set; }

        new Int64 Int64_Ranged { get; set; }

        new SByte? Int8N { get; set; }

        new SByte? Int8N_Ranged { get; set; }

        new SByte Int8 { get; set; }

        new SByte Int8_Ranged { get; set; }

        new bool Unsafe { get; set; }

        new P2Int? P2IntN { get; set; }

        new P2Int P2Int { get; set; }

        new P3Double? P3DoubleN { get; set; }

        new P3Double P3Double { get; set; }

        new P3Int? P3IntN { get; set; }

        new P3Int P3Int { get; set; }

        new Percent? PercentN { get; set; }

        new Percent Percent { get; set; }

        new RangeInt8? RangeInt8N { get; set; }

        new RangeInt8 RangeInt8 { get; set; }

        new RangeInt16? RangeInt16N { get; set; }

        new RangeInt16 RangeInt16 { get; set; }

        new RangeInt32? RangeInt32N { get; set; }

        new RangeInt32 RangeInt32 { get; set; }

        new RangeInt64? RangeInt64N { get; set; }

        new RangeInt64 RangeInt64 { get; set; }

        new RangeUInt8? RangeUInt8N { get; set; }

        new RangeUInt8 RangeUInt8 { get; set; }

        new RangeUInt16? RangeUInt16N { get; set; }

        new RangeUInt16 RangeUInt16 { get; set; }

        new RangeUInt32? RangeUInt32N { get; set; }

        new RangeUInt32 RangeUInt32 { get; set; }

        new RangeUInt64? RangeUInt64N { get; set; }

        new RangeUInt64 RangeUInt64 { get; set; }

        new String String { get; set; }

        new UDouble? UDoubleN { get; set; }

        new UDouble? UDoubleN_Ranged { get; set; }

        new UDouble UDouble { get; set; }

        new UDouble UDouble_Ranged { get; set; }

        new UInt16? UInt16N { get; set; }

        new UInt16? UInt16N_Ranged { get; set; }

        new UInt16 UInt16 { get; set; }

        new UInt16 UInt16_Ranged { get; set; }

        new UInt32? UInt32N { get; set; }

        new UInt32? UInt32N_Ranged { get; set; }

        new UInt32 UInt32 { get; set; }

        new UInt32 UInt32_Ranged { get; set; }

        new UInt64? UInt64N { get; set; }

        new UInt64? UInt64N_Ranged { get; set; }

        new UInt64 UInt64 { get; set; }

        new UInt64 UInt64_Ranged { get; set; }

        new Byte? UInt8N { get; set; }

        new Byte? UInt8N_Ranged { get; set; }

        new Byte UInt8 { get; set; }

        new Byte UInt8_Ranged { get; set; }

        new TestEnum Enum { get; set; }

        new Object WildCard { get; set; }

        new ObjectToRef Ref { get; set; }

        new ObjectToRef Ref_NotNull { get; set; }

        new IObjectToRefGetter RefGetter { get; set; }

        new IObjectToRefGetter RefGetter_NotNull { get; set; }

        new IObjectToRef RefSetter { get; set; }

        new IObjectToRef RefSetter_NotNull { get; set; }

        new INotifyingList<Boolean> List { get; }
        new INotifyingList<ObjectToRef> RefList { get; }
        new INotifyingDictionary<String, Boolean> Dict { get; }
        new INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get; }
        new INotifyingDictionary<ObjectToRef, Boolean> KeyRefDict { get; }
        new INotifyingDictionary<String, ObjectToRef> ValRefDict { get; }
        new INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue { get; }
    }

    public interface ITestObject_RPCGetter : ILoquiObject
    {
        #region BoolN
        Boolean? BoolN { get; }

        #endregion
        #region Bool
        Boolean Bool { get; }

        #endregion
        #region CharN
        Char? CharN { get; }

        #endregion
        #region Char
        Char Char { get; }

        #endregion
        #region DateTimeNull
        DateTime? DateTimeNull { get; }

        #endregion
        #region DateTime
        DateTime DateTime { get; }

        #endregion
        #region DoubleN
        Double? DoubleN { get; }

        #endregion
        #region DoubleN_Ranged
        Double? DoubleN_Ranged { get; }

        #endregion
        #region Double
        Double Double { get; }

        #endregion
        #region Double_Ranged
        Double Double_Ranged { get; }

        #endregion
        #region FloatN
        Single? FloatN { get; }

        #endregion
        #region FloatN_Ranged
        Single? FloatN_Ranged { get; }

        #endregion
        #region Float
        Single Float { get; }

        #endregion
        #region Float_Ranged
        Single Float_Ranged { get; }

        #endregion
        #region Int16N
        Int16? Int16N { get; }

        #endregion
        #region Int16N_Ranged
        Int16? Int16N_Ranged { get; }

        #endregion
        #region Int16
        Int16 Int16 { get; }

        #endregion
        #region Int16_Ranged
        Int16 Int16_Ranged { get; }

        #endregion
        #region Int32N
        Int32? Int32N { get; }

        #endregion
        #region Int32N_Ranged
        Int32? Int32N_Ranged { get; }

        #endregion
        #region Int32
        Int32 Int32 { get; }

        #endregion
        #region Int32_Ranged
        Int32 Int32_Ranged { get; }

        #endregion
        #region Int64N
        Int64? Int64N { get; }

        #endregion
        #region Int64N_Ranged
        Int64? Int64N_Ranged { get; }

        #endregion
        #region Int64
        Int64 Int64 { get; }

        #endregion
        #region Int64_Ranged
        Int64 Int64_Ranged { get; }

        #endregion
        #region Int8N
        SByte? Int8N { get; }

        #endregion
        #region Int8N_Ranged
        SByte? Int8N_Ranged { get; }

        #endregion
        #region Int8
        SByte Int8 { get; }

        #endregion
        #region Int8_Ranged
        SByte Int8_Ranged { get; }

        #endregion
        #region Unsafe
        bool Unsafe { get; }

        #endregion
        #region P2IntN
        P2Int? P2IntN { get; }

        #endregion
        #region P2Int
        P2Int P2Int { get; }

        #endregion
        #region P3DoubleN
        P3Double? P3DoubleN { get; }

        #endregion
        #region P3Double
        P3Double P3Double { get; }

        #endregion
        #region P3IntN
        P3Int? P3IntN { get; }

        #endregion
        #region P3Int
        P3Int P3Int { get; }

        #endregion
        #region PercentN
        Percent? PercentN { get; }

        #endregion
        #region Percent
        Percent Percent { get; }

        #endregion
        #region RangeInt8N
        RangeInt8? RangeInt8N { get; }

        #endregion
        #region RangeInt8
        RangeInt8 RangeInt8 { get; }

        #endregion
        #region RangeInt16N
        RangeInt16? RangeInt16N { get; }

        #endregion
        #region RangeInt16
        RangeInt16 RangeInt16 { get; }

        #endregion
        #region RangeInt32N
        RangeInt32? RangeInt32N { get; }

        #endregion
        #region RangeInt32
        RangeInt32 RangeInt32 { get; }

        #endregion
        #region RangeInt64N
        RangeInt64? RangeInt64N { get; }

        #endregion
        #region RangeInt64
        RangeInt64 RangeInt64 { get; }

        #endregion
        #region RangeUInt8N
        RangeUInt8? RangeUInt8N { get; }

        #endregion
        #region RangeUInt8
        RangeUInt8 RangeUInt8 { get; }

        #endregion
        #region RangeUInt16N
        RangeUInt16? RangeUInt16N { get; }

        #endregion
        #region RangeUInt16
        RangeUInt16 RangeUInt16 { get; }

        #endregion
        #region RangeUInt32N
        RangeUInt32? RangeUInt32N { get; }

        #endregion
        #region RangeUInt32
        RangeUInt32 RangeUInt32 { get; }

        #endregion
        #region RangeUInt64N
        RangeUInt64? RangeUInt64N { get; }

        #endregion
        #region RangeUInt64
        RangeUInt64 RangeUInt64 { get; }

        #endregion
        #region String
        String String { get; }

        #endregion
        #region UDoubleN
        UDouble? UDoubleN { get; }

        #endregion
        #region UDoubleN_Ranged
        UDouble? UDoubleN_Ranged { get; }

        #endregion
        #region UDouble
        UDouble UDouble { get; }

        #endregion
        #region UDouble_Ranged
        UDouble UDouble_Ranged { get; }

        #endregion
        #region UInt16N
        UInt16? UInt16N { get; }

        #endregion
        #region UInt16N_Ranged
        UInt16? UInt16N_Ranged { get; }

        #endregion
        #region UInt16
        UInt16 UInt16 { get; }

        #endregion
        #region UInt16_Ranged
        UInt16 UInt16_Ranged { get; }

        #endregion
        #region UInt32N
        UInt32? UInt32N { get; }

        #endregion
        #region UInt32N_Ranged
        UInt32? UInt32N_Ranged { get; }

        #endregion
        #region UInt32
        UInt32 UInt32 { get; }

        #endregion
        #region UInt32_Ranged
        UInt32 UInt32_Ranged { get; }

        #endregion
        #region UInt64N
        UInt64? UInt64N { get; }

        #endregion
        #region UInt64N_Ranged
        UInt64? UInt64N_Ranged { get; }

        #endregion
        #region UInt64
        UInt64 UInt64 { get; }

        #endregion
        #region UInt64_Ranged
        UInt64 UInt64_Ranged { get; }

        #endregion
        #region UInt8N
        Byte? UInt8N { get; }

        #endregion
        #region UInt8N_Ranged
        Byte? UInt8N_Ranged { get; }

        #endregion
        #region UInt8
        Byte UInt8 { get; }

        #endregion
        #region UInt8_Ranged
        Byte UInt8_Ranged { get; }

        #endregion
        #region Enum
        TestEnum Enum { get; }

        #endregion
        #region WildCard
        Object WildCard { get; }

        #endregion
        #region Ref
        ObjectToRef Ref { get; }

        #endregion
        #region Ref_NotNull
        ObjectToRef Ref_NotNull { get; }

        #endregion
        #region Ref_Singleton
        ObjectToRef Ref_Singleton { get; }

        #endregion
        #region RefGetter
        IObjectToRefGetter RefGetter { get; }

        #endregion
        #region RefGetter_NotNull
        IObjectToRefGetter RefGetter_NotNull { get; }

        #endregion
        #region RefGetter_Singleton
        IObjectToRefGetter RefGetter_Singleton { get; }

        #endregion
        #region RefSetter
        IObjectToRef RefSetter { get; }

        #endregion
        #region RefSetter_NotNull
        IObjectToRef RefSetter_NotNull { get; }

        #endregion
        #region RefSetter_Singleton
        IObjectToRef RefSetter_Singleton { get; }

        #endregion
        #region List
        INotifyingListGetter<Boolean> List { get; }
        #endregion
        #region RefList
        INotifyingListGetter<ObjectToRef> RefList { get; }
        #endregion
        #region Dict
        INotifyingDictionaryGetter<String, Boolean> Dict { get; }
        #endregion
        #region RefDict
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> RefDict { get; }
        #endregion
        #region KeyRefDict
        INotifyingDictionaryGetter<ObjectToRef, Boolean> KeyRefDict { get; }
        #endregion
        #region ValRefDict
        INotifyingDictionaryGetter<String, ObjectToRef> ValRefDict { get; }
        #endregion
        #region DictKeyedValue
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> DictKeyedValue { get; }
        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Internals
{
    #region Field Index
    public enum TestObject_RPC_FieldIndex
    {
        BoolN = 0,
        Bool = 1,
        CharN = 2,
        Char = 3,
        DateTimeNull = 4,
        DateTime = 5,
        DoubleN = 6,
        DoubleN_Ranged = 7,
        Double = 8,
        Double_Ranged = 9,
        FloatN = 10,
        FloatN_Ranged = 11,
        Float = 12,
        Float_Ranged = 13,
        Int16N = 14,
        Int16N_Ranged = 15,
        Int16 = 16,
        Int16_Ranged = 17,
        Int32N = 18,
        Int32N_Ranged = 19,
        Int32 = 20,
        Int32_Ranged = 21,
        Int64N = 22,
        Int64N_Ranged = 23,
        Int64 = 24,
        Int64_Ranged = 25,
        Int8N = 26,
        Int8N_Ranged = 27,
        Int8 = 28,
        Int8_Ranged = 29,
        Unsafe = 30,
        P2IntN = 31,
        P2Int = 32,
        P3DoubleN = 33,
        P3Double = 34,
        P3IntN = 35,
        P3Int = 36,
        PercentN = 37,
        Percent = 38,
        RangeInt8N = 39,
        RangeInt8 = 40,
        RangeInt16N = 41,
        RangeInt16 = 42,
        RangeInt32N = 43,
        RangeInt32 = 44,
        RangeInt64N = 45,
        RangeInt64 = 46,
        RangeUInt8N = 47,
        RangeUInt8 = 48,
        RangeUInt16N = 49,
        RangeUInt16 = 50,
        RangeUInt32N = 51,
        RangeUInt32 = 52,
        RangeUInt64N = 53,
        RangeUInt64 = 54,
        String = 55,
        UDoubleN = 56,
        UDoubleN_Ranged = 57,
        UDouble = 58,
        UDouble_Ranged = 59,
        UInt16N = 60,
        UInt16N_Ranged = 61,
        UInt16 = 62,
        UInt16_Ranged = 63,
        UInt32N = 64,
        UInt32N_Ranged = 65,
        UInt32 = 66,
        UInt32_Ranged = 67,
        UInt64N = 68,
        UInt64N_Ranged = 69,
        UInt64 = 70,
        UInt64_Ranged = 71,
        UInt8N = 72,
        UInt8N_Ranged = 73,
        UInt8 = 74,
        UInt8_Ranged = 75,
        Enum = 76,
        WildCard = 77,
        Ref = 78,
        Ref_NotNull = 79,
        Ref_Singleton = 80,
        RefGetter = 81,
        RefGetter_NotNull = 82,
        RefGetter_Singleton = 83,
        RefSetter = 84,
        RefSetter_NotNull = 85,
        RefSetter_Singleton = 86,
        List = 87,
        RefList = 88,
        Dict = 89,
        RefDict = 90,
        KeyRefDict = 91,
        ValRefDict = 92,
        DictKeyedValue = 93,
    }
    #endregion

    #region Registration
    public class TestObject_RPC_Registration : ILoquiRegistration
    {
        public static readonly TestObject_RPC_Registration Instance = new TestObject_RPC_Registration();

        public static ProtocolDefinition ProtocolDefinition => ProtocolDefinition_LoquiTests.Definition;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTests.ProtocolKey,
            msgID: 16,
            version: 0);

        public const string GUID = "fa89d04c-a303-4fd2-880b-3ef3bc6883b8";

        public const ushort FieldCount = 94;

        public static readonly Type MaskType = typeof(TestObject_RPC_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestObject_RPC_ErrorMask);

        public static readonly Type ClassType = typeof(TestObject_RPC);

        public const string FullName = "Loqui.Tests.TestObject_RPC";

        public const string Name = "TestObject_RPC";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BOOLN":
                    return (ushort)TestObject_RPC_FieldIndex.BoolN;
                case "BOOL":
                    return (ushort)TestObject_RPC_FieldIndex.Bool;
                case "CHARN":
                    return (ushort)TestObject_RPC_FieldIndex.CharN;
                case "CHAR":
                    return (ushort)TestObject_RPC_FieldIndex.Char;
                case "DATETIMENULL":
                    return (ushort)TestObject_RPC_FieldIndex.DateTimeNull;
                case "DATETIME":
                    return (ushort)TestObject_RPC_FieldIndex.DateTime;
                case "DOUBLEN":
                    return (ushort)TestObject_RPC_FieldIndex.DoubleN;
                case "DOUBLEN_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.DoubleN_Ranged;
                case "DOUBLE":
                    return (ushort)TestObject_RPC_FieldIndex.Double;
                case "DOUBLE_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Double_Ranged;
                case "FLOATN":
                    return (ushort)TestObject_RPC_FieldIndex.FloatN;
                case "FLOATN_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.FloatN_Ranged;
                case "FLOAT":
                    return (ushort)TestObject_RPC_FieldIndex.Float;
                case "FLOAT_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Float_Ranged;
                case "INT16N":
                    return (ushort)TestObject_RPC_FieldIndex.Int16N;
                case "INT16N_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Int16N_Ranged;
                case "INT16":
                    return (ushort)TestObject_RPC_FieldIndex.Int16;
                case "INT16_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Int16_Ranged;
                case "INT32N":
                    return (ushort)TestObject_RPC_FieldIndex.Int32N;
                case "INT32N_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Int32N_Ranged;
                case "INT32":
                    return (ushort)TestObject_RPC_FieldIndex.Int32;
                case "INT32_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Int32_Ranged;
                case "INT64N":
                    return (ushort)TestObject_RPC_FieldIndex.Int64N;
                case "INT64N_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Int64N_Ranged;
                case "INT64":
                    return (ushort)TestObject_RPC_FieldIndex.Int64;
                case "INT64_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Int64_Ranged;
                case "INT8N":
                    return (ushort)TestObject_RPC_FieldIndex.Int8N;
                case "INT8N_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Int8N_Ranged;
                case "INT8":
                    return (ushort)TestObject_RPC_FieldIndex.Int8;
                case "INT8_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.Int8_Ranged;
                case "UNSAFE":
                    return (ushort)TestObject_RPC_FieldIndex.Unsafe;
                case "P2INTN":
                    return (ushort)TestObject_RPC_FieldIndex.P2IntN;
                case "P2INT":
                    return (ushort)TestObject_RPC_FieldIndex.P2Int;
                case "P3DOUBLEN":
                    return (ushort)TestObject_RPC_FieldIndex.P3DoubleN;
                case "P3DOUBLE":
                    return (ushort)TestObject_RPC_FieldIndex.P3Double;
                case "P3INTN":
                    return (ushort)TestObject_RPC_FieldIndex.P3IntN;
                case "P3INT":
                    return (ushort)TestObject_RPC_FieldIndex.P3Int;
                case "PERCENTN":
                    return (ushort)TestObject_RPC_FieldIndex.PercentN;
                case "PERCENT":
                    return (ushort)TestObject_RPC_FieldIndex.Percent;
                case "RANGEINT8N":
                    return (ushort)TestObject_RPC_FieldIndex.RangeInt8N;
                case "RANGEINT8":
                    return (ushort)TestObject_RPC_FieldIndex.RangeInt8;
                case "RANGEINT16N":
                    return (ushort)TestObject_RPC_FieldIndex.RangeInt16N;
                case "RANGEINT16":
                    return (ushort)TestObject_RPC_FieldIndex.RangeInt16;
                case "RANGEINT32N":
                    return (ushort)TestObject_RPC_FieldIndex.RangeInt32N;
                case "RANGEINT32":
                    return (ushort)TestObject_RPC_FieldIndex.RangeInt32;
                case "RANGEINT64N":
                    return (ushort)TestObject_RPC_FieldIndex.RangeInt64N;
                case "RANGEINT64":
                    return (ushort)TestObject_RPC_FieldIndex.RangeInt64;
                case "RANGEUINT8N":
                    return (ushort)TestObject_RPC_FieldIndex.RangeUInt8N;
                case "RANGEUINT8":
                    return (ushort)TestObject_RPC_FieldIndex.RangeUInt8;
                case "RANGEUINT16N":
                    return (ushort)TestObject_RPC_FieldIndex.RangeUInt16N;
                case "RANGEUINT16":
                    return (ushort)TestObject_RPC_FieldIndex.RangeUInt16;
                case "RANGEUINT32N":
                    return (ushort)TestObject_RPC_FieldIndex.RangeUInt32N;
                case "RANGEUINT32":
                    return (ushort)TestObject_RPC_FieldIndex.RangeUInt32;
                case "RANGEUINT64N":
                    return (ushort)TestObject_RPC_FieldIndex.RangeUInt64N;
                case "RANGEUINT64":
                    return (ushort)TestObject_RPC_FieldIndex.RangeUInt64;
                case "STRING":
                    return (ushort)TestObject_RPC_FieldIndex.String;
                case "UDOUBLEN":
                    return (ushort)TestObject_RPC_FieldIndex.UDoubleN;
                case "UDOUBLEN_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UDoubleN_Ranged;
                case "UDOUBLE":
                    return (ushort)TestObject_RPC_FieldIndex.UDouble;
                case "UDOUBLE_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UDouble_Ranged;
                case "UINT16N":
                    return (ushort)TestObject_RPC_FieldIndex.UInt16N;
                case "UINT16N_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UInt16N_Ranged;
                case "UINT16":
                    return (ushort)TestObject_RPC_FieldIndex.UInt16;
                case "UINT16_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UInt16_Ranged;
                case "UINT32N":
                    return (ushort)TestObject_RPC_FieldIndex.UInt32N;
                case "UINT32N_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UInt32N_Ranged;
                case "UINT32":
                    return (ushort)TestObject_RPC_FieldIndex.UInt32;
                case "UINT32_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UInt32_Ranged;
                case "UINT64N":
                    return (ushort)TestObject_RPC_FieldIndex.UInt64N;
                case "UINT64N_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UInt64N_Ranged;
                case "UINT64":
                    return (ushort)TestObject_RPC_FieldIndex.UInt64;
                case "UINT64_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UInt64_Ranged;
                case "UINT8N":
                    return (ushort)TestObject_RPC_FieldIndex.UInt8N;
                case "UINT8N_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UInt8N_Ranged;
                case "UINT8":
                    return (ushort)TestObject_RPC_FieldIndex.UInt8;
                case "UINT8_RANGED":
                    return (ushort)TestObject_RPC_FieldIndex.UInt8_Ranged;
                case "ENUM":
                    return (ushort)TestObject_RPC_FieldIndex.Enum;
                case "WILDCARD":
                    return (ushort)TestObject_RPC_FieldIndex.WildCard;
                case "REF":
                    return (ushort)TestObject_RPC_FieldIndex.Ref;
                case "REF_NOTNULL":
                    return (ushort)TestObject_RPC_FieldIndex.Ref_NotNull;
                case "REF_SINGLETON":
                    return (ushort)TestObject_RPC_FieldIndex.Ref_Singleton;
                case "REFGETTER":
                    return (ushort)TestObject_RPC_FieldIndex.RefGetter;
                case "REFGETTER_NOTNULL":
                    return (ushort)TestObject_RPC_FieldIndex.RefGetter_NotNull;
                case "REFGETTER_SINGLETON":
                    return (ushort)TestObject_RPC_FieldIndex.RefGetter_Singleton;
                case "REFSETTER":
                    return (ushort)TestObject_RPC_FieldIndex.RefSetter;
                case "REFSETTER_NOTNULL":
                    return (ushort)TestObject_RPC_FieldIndex.RefSetter_NotNull;
                case "REFSETTER_SINGLETON":
                    return (ushort)TestObject_RPC_FieldIndex.RefSetter_Singleton;
                case "LIST":
                    return (ushort)TestObject_RPC_FieldIndex.List;
                case "REFLIST":
                    return (ushort)TestObject_RPC_FieldIndex.RefList;
                case "DICT":
                    return (ushort)TestObject_RPC_FieldIndex.Dict;
                case "REFDICT":
                    return (ushort)TestObject_RPC_FieldIndex.RefDict;
                case "KEYREFDICT":
                    return (ushort)TestObject_RPC_FieldIndex.KeyRefDict;
                case "VALREFDICT":
                    return (ushort)TestObject_RPC_FieldIndex.ValRefDict;
                case "DICTKEYEDVALUE":
                    return (ushort)TestObject_RPC_FieldIndex.DictKeyedValue;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.List:
                case TestObject_RPC_FieldIndex.RefList:
                    return true;
                case TestObject_RPC_FieldIndex.BoolN:
                case TestObject_RPC_FieldIndex.Bool:
                case TestObject_RPC_FieldIndex.CharN:
                case TestObject_RPC_FieldIndex.Char:
                case TestObject_RPC_FieldIndex.DateTimeNull:
                case TestObject_RPC_FieldIndex.DateTime:
                case TestObject_RPC_FieldIndex.DoubleN:
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_RPC_FieldIndex.Double:
                case TestObject_RPC_FieldIndex.Double_Ranged:
                case TestObject_RPC_FieldIndex.FloatN:
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_RPC_FieldIndex.Float:
                case TestObject_RPC_FieldIndex.Float_Ranged:
                case TestObject_RPC_FieldIndex.Int16N:
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_RPC_FieldIndex.Int16:
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                case TestObject_RPC_FieldIndex.Int32N:
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_RPC_FieldIndex.Int32:
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                case TestObject_RPC_FieldIndex.Int64N:
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_RPC_FieldIndex.Int64:
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                case TestObject_RPC_FieldIndex.Int8N:
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_RPC_FieldIndex.Int8:
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                case TestObject_RPC_FieldIndex.Unsafe:
                case TestObject_RPC_FieldIndex.P2IntN:
                case TestObject_RPC_FieldIndex.P2Int:
                case TestObject_RPC_FieldIndex.P3DoubleN:
                case TestObject_RPC_FieldIndex.P3Double:
                case TestObject_RPC_FieldIndex.P3IntN:
                case TestObject_RPC_FieldIndex.P3Int:
                case TestObject_RPC_FieldIndex.PercentN:
                case TestObject_RPC_FieldIndex.Percent:
                case TestObject_RPC_FieldIndex.RangeInt8N:
                case TestObject_RPC_FieldIndex.RangeInt8:
                case TestObject_RPC_FieldIndex.RangeInt16N:
                case TestObject_RPC_FieldIndex.RangeInt16:
                case TestObject_RPC_FieldIndex.RangeInt32N:
                case TestObject_RPC_FieldIndex.RangeInt32:
                case TestObject_RPC_FieldIndex.RangeInt64N:
                case TestObject_RPC_FieldIndex.RangeInt64:
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                case TestObject_RPC_FieldIndex.RangeUInt8:
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                case TestObject_RPC_FieldIndex.RangeUInt16:
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                case TestObject_RPC_FieldIndex.RangeUInt32:
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                case TestObject_RPC_FieldIndex.RangeUInt64:
                case TestObject_RPC_FieldIndex.String:
                case TestObject_RPC_FieldIndex.UDoubleN:
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_RPC_FieldIndex.UDouble:
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_RPC_FieldIndex.UInt16N:
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_RPC_FieldIndex.UInt16:
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_RPC_FieldIndex.UInt32N:
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_RPC_FieldIndex.UInt32:
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_RPC_FieldIndex.UInt64N:
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_RPC_FieldIndex.UInt64:
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_RPC_FieldIndex.UInt8N:
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_RPC_FieldIndex.UInt8:
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_RPC_FieldIndex.Enum:
                case TestObject_RPC_FieldIndex.WildCard:
                case TestObject_RPC_FieldIndex.Ref:
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                case TestObject_RPC_FieldIndex.RefGetter:
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_RPC_FieldIndex.RefSetter:
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_RPC_FieldIndex.Dict:
                case TestObject_RPC_FieldIndex.RefDict:
                case TestObject_RPC_FieldIndex.KeyRefDict:
                case TestObject_RPC_FieldIndex.ValRefDict:
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.Ref:
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                case TestObject_RPC_FieldIndex.RefGetter:
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_RPC_FieldIndex.RefSetter:
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_RPC_FieldIndex.RefList:
                    return true;
                case TestObject_RPC_FieldIndex.BoolN:
                case TestObject_RPC_FieldIndex.Bool:
                case TestObject_RPC_FieldIndex.CharN:
                case TestObject_RPC_FieldIndex.Char:
                case TestObject_RPC_FieldIndex.DateTimeNull:
                case TestObject_RPC_FieldIndex.DateTime:
                case TestObject_RPC_FieldIndex.DoubleN:
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_RPC_FieldIndex.Double:
                case TestObject_RPC_FieldIndex.Double_Ranged:
                case TestObject_RPC_FieldIndex.FloatN:
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_RPC_FieldIndex.Float:
                case TestObject_RPC_FieldIndex.Float_Ranged:
                case TestObject_RPC_FieldIndex.Int16N:
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_RPC_FieldIndex.Int16:
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                case TestObject_RPC_FieldIndex.Int32N:
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_RPC_FieldIndex.Int32:
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                case TestObject_RPC_FieldIndex.Int64N:
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_RPC_FieldIndex.Int64:
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                case TestObject_RPC_FieldIndex.Int8N:
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_RPC_FieldIndex.Int8:
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                case TestObject_RPC_FieldIndex.Unsafe:
                case TestObject_RPC_FieldIndex.P2IntN:
                case TestObject_RPC_FieldIndex.P2Int:
                case TestObject_RPC_FieldIndex.P3DoubleN:
                case TestObject_RPC_FieldIndex.P3Double:
                case TestObject_RPC_FieldIndex.P3IntN:
                case TestObject_RPC_FieldIndex.P3Int:
                case TestObject_RPC_FieldIndex.PercentN:
                case TestObject_RPC_FieldIndex.Percent:
                case TestObject_RPC_FieldIndex.RangeInt8N:
                case TestObject_RPC_FieldIndex.RangeInt8:
                case TestObject_RPC_FieldIndex.RangeInt16N:
                case TestObject_RPC_FieldIndex.RangeInt16:
                case TestObject_RPC_FieldIndex.RangeInt32N:
                case TestObject_RPC_FieldIndex.RangeInt32:
                case TestObject_RPC_FieldIndex.RangeInt64N:
                case TestObject_RPC_FieldIndex.RangeInt64:
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                case TestObject_RPC_FieldIndex.RangeUInt8:
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                case TestObject_RPC_FieldIndex.RangeUInt16:
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                case TestObject_RPC_FieldIndex.RangeUInt32:
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                case TestObject_RPC_FieldIndex.RangeUInt64:
                case TestObject_RPC_FieldIndex.String:
                case TestObject_RPC_FieldIndex.UDoubleN:
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_RPC_FieldIndex.UDouble:
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_RPC_FieldIndex.UInt16N:
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_RPC_FieldIndex.UInt16:
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_RPC_FieldIndex.UInt32N:
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_RPC_FieldIndex.UInt32:
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_RPC_FieldIndex.UInt64N:
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_RPC_FieldIndex.UInt64:
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_RPC_FieldIndex.UInt8N:
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_RPC_FieldIndex.UInt8:
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_RPC_FieldIndex.Enum:
                case TestObject_RPC_FieldIndex.WildCard:
                case TestObject_RPC_FieldIndex.List:
                case TestObject_RPC_FieldIndex.Dict:
                case TestObject_RPC_FieldIndex.RefDict:
                case TestObject_RPC_FieldIndex.KeyRefDict:
                case TestObject_RPC_FieldIndex.ValRefDict:
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                    return true;
                case TestObject_RPC_FieldIndex.BoolN:
                case TestObject_RPC_FieldIndex.Bool:
                case TestObject_RPC_FieldIndex.CharN:
                case TestObject_RPC_FieldIndex.Char:
                case TestObject_RPC_FieldIndex.DateTimeNull:
                case TestObject_RPC_FieldIndex.DateTime:
                case TestObject_RPC_FieldIndex.DoubleN:
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_RPC_FieldIndex.Double:
                case TestObject_RPC_FieldIndex.Double_Ranged:
                case TestObject_RPC_FieldIndex.FloatN:
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_RPC_FieldIndex.Float:
                case TestObject_RPC_FieldIndex.Float_Ranged:
                case TestObject_RPC_FieldIndex.Int16N:
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_RPC_FieldIndex.Int16:
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                case TestObject_RPC_FieldIndex.Int32N:
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_RPC_FieldIndex.Int32:
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                case TestObject_RPC_FieldIndex.Int64N:
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_RPC_FieldIndex.Int64:
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                case TestObject_RPC_FieldIndex.Int8N:
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_RPC_FieldIndex.Int8:
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                case TestObject_RPC_FieldIndex.Unsafe:
                case TestObject_RPC_FieldIndex.P2IntN:
                case TestObject_RPC_FieldIndex.P2Int:
                case TestObject_RPC_FieldIndex.P3DoubleN:
                case TestObject_RPC_FieldIndex.P3Double:
                case TestObject_RPC_FieldIndex.P3IntN:
                case TestObject_RPC_FieldIndex.P3Int:
                case TestObject_RPC_FieldIndex.PercentN:
                case TestObject_RPC_FieldIndex.Percent:
                case TestObject_RPC_FieldIndex.RangeInt8N:
                case TestObject_RPC_FieldIndex.RangeInt8:
                case TestObject_RPC_FieldIndex.RangeInt16N:
                case TestObject_RPC_FieldIndex.RangeInt16:
                case TestObject_RPC_FieldIndex.RangeInt32N:
                case TestObject_RPC_FieldIndex.RangeInt32:
                case TestObject_RPC_FieldIndex.RangeInt64N:
                case TestObject_RPC_FieldIndex.RangeInt64:
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                case TestObject_RPC_FieldIndex.RangeUInt8:
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                case TestObject_RPC_FieldIndex.RangeUInt16:
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                case TestObject_RPC_FieldIndex.RangeUInt32:
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                case TestObject_RPC_FieldIndex.RangeUInt64:
                case TestObject_RPC_FieldIndex.String:
                case TestObject_RPC_FieldIndex.UDoubleN:
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_RPC_FieldIndex.UDouble:
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_RPC_FieldIndex.UInt16N:
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_RPC_FieldIndex.UInt16:
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_RPC_FieldIndex.UInt32N:
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_RPC_FieldIndex.UInt32:
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_RPC_FieldIndex.UInt64N:
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_RPC_FieldIndex.UInt64:
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_RPC_FieldIndex.UInt8N:
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_RPC_FieldIndex.UInt8:
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_RPC_FieldIndex.Enum:
                case TestObject_RPC_FieldIndex.WildCard:
                case TestObject_RPC_FieldIndex.Ref:
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                case TestObject_RPC_FieldIndex.RefGetter:
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_RPC_FieldIndex.RefSetter:
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_RPC_FieldIndex.List:
                case TestObject_RPC_FieldIndex.RefList:
                case TestObject_RPC_FieldIndex.Dict:
                case TestObject_RPC_FieldIndex.RefDict:
                case TestObject_RPC_FieldIndex.KeyRefDict:
                case TestObject_RPC_FieldIndex.ValRefDict:
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                    return "BoolN";
                case TestObject_RPC_FieldIndex.Bool:
                    return "Bool";
                case TestObject_RPC_FieldIndex.CharN:
                    return "CharN";
                case TestObject_RPC_FieldIndex.Char:
                    return "Char";
                case TestObject_RPC_FieldIndex.DateTimeNull:
                    return "DateTimeNull";
                case TestObject_RPC_FieldIndex.DateTime:
                    return "DateTime";
                case TestObject_RPC_FieldIndex.DoubleN:
                    return "DoubleN";
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                    return "DoubleN_Ranged";
                case TestObject_RPC_FieldIndex.Double:
                    return "Double";
                case TestObject_RPC_FieldIndex.Double_Ranged:
                    return "Double_Ranged";
                case TestObject_RPC_FieldIndex.FloatN:
                    return "FloatN";
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                    return "FloatN_Ranged";
                case TestObject_RPC_FieldIndex.Float:
                    return "Float";
                case TestObject_RPC_FieldIndex.Float_Ranged:
                    return "Float_Ranged";
                case TestObject_RPC_FieldIndex.Int16N:
                    return "Int16N";
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                    return "Int16N_Ranged";
                case TestObject_RPC_FieldIndex.Int16:
                    return "Int16";
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                    return "Int16_Ranged";
                case TestObject_RPC_FieldIndex.Int32N:
                    return "Int32N";
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                    return "Int32N_Ranged";
                case TestObject_RPC_FieldIndex.Int32:
                    return "Int32";
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                    return "Int32_Ranged";
                case TestObject_RPC_FieldIndex.Int64N:
                    return "Int64N";
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                    return "Int64N_Ranged";
                case TestObject_RPC_FieldIndex.Int64:
                    return "Int64";
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                    return "Int64_Ranged";
                case TestObject_RPC_FieldIndex.Int8N:
                    return "Int8N";
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                    return "Int8N_Ranged";
                case TestObject_RPC_FieldIndex.Int8:
                    return "Int8";
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                    return "Int8_Ranged";
                case TestObject_RPC_FieldIndex.Unsafe:
                    return "Unsafe";
                case TestObject_RPC_FieldIndex.P2IntN:
                    return "P2IntN";
                case TestObject_RPC_FieldIndex.P2Int:
                    return "P2Int";
                case TestObject_RPC_FieldIndex.P3DoubleN:
                    return "P3DoubleN";
                case TestObject_RPC_FieldIndex.P3Double:
                    return "P3Double";
                case TestObject_RPC_FieldIndex.P3IntN:
                    return "P3IntN";
                case TestObject_RPC_FieldIndex.P3Int:
                    return "P3Int";
                case TestObject_RPC_FieldIndex.PercentN:
                    return "PercentN";
                case TestObject_RPC_FieldIndex.Percent:
                    return "Percent";
                case TestObject_RPC_FieldIndex.RangeInt8N:
                    return "RangeInt8N";
                case TestObject_RPC_FieldIndex.RangeInt8:
                    return "RangeInt8";
                case TestObject_RPC_FieldIndex.RangeInt16N:
                    return "RangeInt16N";
                case TestObject_RPC_FieldIndex.RangeInt16:
                    return "RangeInt16";
                case TestObject_RPC_FieldIndex.RangeInt32N:
                    return "RangeInt32N";
                case TestObject_RPC_FieldIndex.RangeInt32:
                    return "RangeInt32";
                case TestObject_RPC_FieldIndex.RangeInt64N:
                    return "RangeInt64N";
                case TestObject_RPC_FieldIndex.RangeInt64:
                    return "RangeInt64";
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                    return "RangeUInt8N";
                case TestObject_RPC_FieldIndex.RangeUInt8:
                    return "RangeUInt8";
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                    return "RangeUInt16N";
                case TestObject_RPC_FieldIndex.RangeUInt16:
                    return "RangeUInt16";
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                    return "RangeUInt32N";
                case TestObject_RPC_FieldIndex.RangeUInt32:
                    return "RangeUInt32";
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                    return "RangeUInt64N";
                case TestObject_RPC_FieldIndex.RangeUInt64:
                    return "RangeUInt64";
                case TestObject_RPC_FieldIndex.String:
                    return "String";
                case TestObject_RPC_FieldIndex.UDoubleN:
                    return "UDoubleN";
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                    return "UDoubleN_Ranged";
                case TestObject_RPC_FieldIndex.UDouble:
                    return "UDouble";
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                    return "UDouble_Ranged";
                case TestObject_RPC_FieldIndex.UInt16N:
                    return "UInt16N";
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                    return "UInt16N_Ranged";
                case TestObject_RPC_FieldIndex.UInt16:
                    return "UInt16";
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                    return "UInt16_Ranged";
                case TestObject_RPC_FieldIndex.UInt32N:
                    return "UInt32N";
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                    return "UInt32N_Ranged";
                case TestObject_RPC_FieldIndex.UInt32:
                    return "UInt32";
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                    return "UInt32_Ranged";
                case TestObject_RPC_FieldIndex.UInt64N:
                    return "UInt64N";
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                    return "UInt64N_Ranged";
                case TestObject_RPC_FieldIndex.UInt64:
                    return "UInt64";
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                    return "UInt64_Ranged";
                case TestObject_RPC_FieldIndex.UInt8N:
                    return "UInt8N";
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                    return "UInt8N_Ranged";
                case TestObject_RPC_FieldIndex.UInt8:
                    return "UInt8";
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                    return "UInt8_Ranged";
                case TestObject_RPC_FieldIndex.Enum:
                    return "Enum";
                case TestObject_RPC_FieldIndex.WildCard:
                    return "WildCard";
                case TestObject_RPC_FieldIndex.Ref:
                    return "Ref";
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                    return "Ref_NotNull";
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                    return "Ref_Singleton";
                case TestObject_RPC_FieldIndex.RefGetter:
                    return "RefGetter";
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                    return "RefGetter_NotNull";
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                    return "RefGetter_Singleton";
                case TestObject_RPC_FieldIndex.RefSetter:
                    return "RefSetter";
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                    return "RefSetter_NotNull";
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                    return "RefSetter_Singleton";
                case TestObject_RPC_FieldIndex.List:
                    return "List";
                case TestObject_RPC_FieldIndex.RefList:
                    return "RefList";
                case TestObject_RPC_FieldIndex.Dict:
                    return "Dict";
                case TestObject_RPC_FieldIndex.RefDict:
                    return "RefDict";
                case TestObject_RPC_FieldIndex.KeyRefDict:
                    return "KeyRefDict";
                case TestObject_RPC_FieldIndex.ValRefDict:
                    return "ValRefDict";
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    return "DictKeyedValue";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                case TestObject_RPC_FieldIndex.Bool:
                case TestObject_RPC_FieldIndex.CharN:
                case TestObject_RPC_FieldIndex.Char:
                case TestObject_RPC_FieldIndex.DateTimeNull:
                case TestObject_RPC_FieldIndex.DateTime:
                case TestObject_RPC_FieldIndex.DoubleN:
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_RPC_FieldIndex.Double:
                case TestObject_RPC_FieldIndex.Double_Ranged:
                case TestObject_RPC_FieldIndex.FloatN:
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_RPC_FieldIndex.Float:
                case TestObject_RPC_FieldIndex.Float_Ranged:
                case TestObject_RPC_FieldIndex.Int16N:
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_RPC_FieldIndex.Int16:
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                case TestObject_RPC_FieldIndex.Int32N:
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_RPC_FieldIndex.Int32:
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                case TestObject_RPC_FieldIndex.Int64N:
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_RPC_FieldIndex.Int64:
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                case TestObject_RPC_FieldIndex.Int8N:
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_RPC_FieldIndex.Int8:
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                case TestObject_RPC_FieldIndex.Unsafe:
                case TestObject_RPC_FieldIndex.P2IntN:
                case TestObject_RPC_FieldIndex.P2Int:
                case TestObject_RPC_FieldIndex.P3DoubleN:
                case TestObject_RPC_FieldIndex.P3Double:
                case TestObject_RPC_FieldIndex.P3IntN:
                case TestObject_RPC_FieldIndex.P3Int:
                case TestObject_RPC_FieldIndex.PercentN:
                case TestObject_RPC_FieldIndex.Percent:
                case TestObject_RPC_FieldIndex.RangeInt8N:
                case TestObject_RPC_FieldIndex.RangeInt8:
                case TestObject_RPC_FieldIndex.RangeInt16N:
                case TestObject_RPC_FieldIndex.RangeInt16:
                case TestObject_RPC_FieldIndex.RangeInt32N:
                case TestObject_RPC_FieldIndex.RangeInt32:
                case TestObject_RPC_FieldIndex.RangeInt64N:
                case TestObject_RPC_FieldIndex.RangeInt64:
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                case TestObject_RPC_FieldIndex.RangeUInt8:
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                case TestObject_RPC_FieldIndex.RangeUInt16:
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                case TestObject_RPC_FieldIndex.RangeUInt32:
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                case TestObject_RPC_FieldIndex.RangeUInt64:
                case TestObject_RPC_FieldIndex.String:
                case TestObject_RPC_FieldIndex.UDoubleN:
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_RPC_FieldIndex.UDouble:
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_RPC_FieldIndex.UInt16N:
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_RPC_FieldIndex.UInt16:
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_RPC_FieldIndex.UInt32N:
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_RPC_FieldIndex.UInt32:
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_RPC_FieldIndex.UInt64N:
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_RPC_FieldIndex.UInt64:
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_RPC_FieldIndex.UInt8N:
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_RPC_FieldIndex.UInt8:
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_RPC_FieldIndex.Enum:
                case TestObject_RPC_FieldIndex.WildCard:
                case TestObject_RPC_FieldIndex.Ref:
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                case TestObject_RPC_FieldIndex.RefGetter:
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_RPC_FieldIndex.RefSetter:
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_RPC_FieldIndex.List:
                case TestObject_RPC_FieldIndex.RefList:
                case TestObject_RPC_FieldIndex.Dict:
                case TestObject_RPC_FieldIndex.RefDict:
                case TestObject_RPC_FieldIndex.KeyRefDict:
                case TestObject_RPC_FieldIndex.ValRefDict:
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                case TestObject_RPC_FieldIndex.Bool:
                case TestObject_RPC_FieldIndex.CharN:
                case TestObject_RPC_FieldIndex.Char:
                case TestObject_RPC_FieldIndex.DateTimeNull:
                case TestObject_RPC_FieldIndex.DateTime:
                case TestObject_RPC_FieldIndex.DoubleN:
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_RPC_FieldIndex.Double:
                case TestObject_RPC_FieldIndex.Double_Ranged:
                case TestObject_RPC_FieldIndex.FloatN:
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_RPC_FieldIndex.Float:
                case TestObject_RPC_FieldIndex.Float_Ranged:
                case TestObject_RPC_FieldIndex.Int16N:
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_RPC_FieldIndex.Int16:
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                case TestObject_RPC_FieldIndex.Int32N:
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_RPC_FieldIndex.Int32:
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                case TestObject_RPC_FieldIndex.Int64N:
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_RPC_FieldIndex.Int64:
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                case TestObject_RPC_FieldIndex.Int8N:
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_RPC_FieldIndex.Int8:
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                case TestObject_RPC_FieldIndex.Unsafe:
                case TestObject_RPC_FieldIndex.P2IntN:
                case TestObject_RPC_FieldIndex.P2Int:
                case TestObject_RPC_FieldIndex.P3DoubleN:
                case TestObject_RPC_FieldIndex.P3Double:
                case TestObject_RPC_FieldIndex.P3IntN:
                case TestObject_RPC_FieldIndex.P3Int:
                case TestObject_RPC_FieldIndex.PercentN:
                case TestObject_RPC_FieldIndex.Percent:
                case TestObject_RPC_FieldIndex.RangeInt8N:
                case TestObject_RPC_FieldIndex.RangeInt8:
                case TestObject_RPC_FieldIndex.RangeInt16N:
                case TestObject_RPC_FieldIndex.RangeInt16:
                case TestObject_RPC_FieldIndex.RangeInt32N:
                case TestObject_RPC_FieldIndex.RangeInt32:
                case TestObject_RPC_FieldIndex.RangeInt64N:
                case TestObject_RPC_FieldIndex.RangeInt64:
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                case TestObject_RPC_FieldIndex.RangeUInt8:
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                case TestObject_RPC_FieldIndex.RangeUInt16:
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                case TestObject_RPC_FieldIndex.RangeUInt32:
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                case TestObject_RPC_FieldIndex.RangeUInt64:
                case TestObject_RPC_FieldIndex.String:
                case TestObject_RPC_FieldIndex.UDoubleN:
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_RPC_FieldIndex.UDouble:
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_RPC_FieldIndex.UInt16N:
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_RPC_FieldIndex.UInt16:
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_RPC_FieldIndex.UInt32N:
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_RPC_FieldIndex.UInt32:
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_RPC_FieldIndex.UInt64N:
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_RPC_FieldIndex.UInt64:
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_RPC_FieldIndex.UInt8N:
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_RPC_FieldIndex.UInt8:
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_RPC_FieldIndex.Enum:
                case TestObject_RPC_FieldIndex.WildCard:
                case TestObject_RPC_FieldIndex.Ref:
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                case TestObject_RPC_FieldIndex.RefGetter:
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_RPC_FieldIndex.RefSetter:
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_RPC_FieldIndex.List:
                case TestObject_RPC_FieldIndex.RefList:
                case TestObject_RPC_FieldIndex.Dict:
                case TestObject_RPC_FieldIndex.RefDict:
                case TestObject_RPC_FieldIndex.KeyRefDict:
                case TestObject_RPC_FieldIndex.ValRefDict:
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                    return typeof(Boolean?);
                case TestObject_RPC_FieldIndex.Bool:
                    return typeof(Boolean);
                case TestObject_RPC_FieldIndex.CharN:
                    return typeof(Char?);
                case TestObject_RPC_FieldIndex.Char:
                    return typeof(Char);
                case TestObject_RPC_FieldIndex.DateTimeNull:
                    return typeof(DateTime?);
                case TestObject_RPC_FieldIndex.DateTime:
                    return typeof(DateTime);
                case TestObject_RPC_FieldIndex.DoubleN:
                    return typeof(Double?);
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                    return typeof(Double?);
                case TestObject_RPC_FieldIndex.Double:
                    return typeof(Double);
                case TestObject_RPC_FieldIndex.Double_Ranged:
                    return typeof(Double);
                case TestObject_RPC_FieldIndex.FloatN:
                    return typeof(Single?);
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                    return typeof(Single?);
                case TestObject_RPC_FieldIndex.Float:
                    return typeof(Single);
                case TestObject_RPC_FieldIndex.Float_Ranged:
                    return typeof(Single);
                case TestObject_RPC_FieldIndex.Int16N:
                    return typeof(Int16?);
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                    return typeof(Int16?);
                case TestObject_RPC_FieldIndex.Int16:
                    return typeof(Int16);
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                    return typeof(Int16);
                case TestObject_RPC_FieldIndex.Int32N:
                    return typeof(Int32?);
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                    return typeof(Int32?);
                case TestObject_RPC_FieldIndex.Int32:
                    return typeof(Int32);
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                    return typeof(Int32);
                case TestObject_RPC_FieldIndex.Int64N:
                    return typeof(Int64?);
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                    return typeof(Int64?);
                case TestObject_RPC_FieldIndex.Int64:
                    return typeof(Int64);
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                    return typeof(Int64);
                case TestObject_RPC_FieldIndex.Int8N:
                    return typeof(SByte?);
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                    return typeof(SByte?);
                case TestObject_RPC_FieldIndex.Int8:
                    return typeof(SByte);
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                    return typeof(SByte);
                case TestObject_RPC_FieldIndex.Unsafe:
                    return typeof(bool);
                case TestObject_RPC_FieldIndex.P2IntN:
                    return typeof(P2Int?);
                case TestObject_RPC_FieldIndex.P2Int:
                    return typeof(P2Int);
                case TestObject_RPC_FieldIndex.P3DoubleN:
                    return typeof(P3Double?);
                case TestObject_RPC_FieldIndex.P3Double:
                    return typeof(P3Double);
                case TestObject_RPC_FieldIndex.P3IntN:
                    return typeof(P3Int?);
                case TestObject_RPC_FieldIndex.P3Int:
                    return typeof(P3Int);
                case TestObject_RPC_FieldIndex.PercentN:
                    return typeof(Percent?);
                case TestObject_RPC_FieldIndex.Percent:
                    return typeof(Percent);
                case TestObject_RPC_FieldIndex.RangeInt8N:
                    return typeof(RangeInt8?);
                case TestObject_RPC_FieldIndex.RangeInt8:
                    return typeof(RangeInt8);
                case TestObject_RPC_FieldIndex.RangeInt16N:
                    return typeof(RangeInt16?);
                case TestObject_RPC_FieldIndex.RangeInt16:
                    return typeof(RangeInt16);
                case TestObject_RPC_FieldIndex.RangeInt32N:
                    return typeof(RangeInt32?);
                case TestObject_RPC_FieldIndex.RangeInt32:
                    return typeof(RangeInt32);
                case TestObject_RPC_FieldIndex.RangeInt64N:
                    return typeof(RangeInt64?);
                case TestObject_RPC_FieldIndex.RangeInt64:
                    return typeof(RangeInt64);
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                    return typeof(RangeUInt8?);
                case TestObject_RPC_FieldIndex.RangeUInt8:
                    return typeof(RangeUInt8);
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                    return typeof(RangeUInt16?);
                case TestObject_RPC_FieldIndex.RangeUInt16:
                    return typeof(RangeUInt16);
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                    return typeof(RangeUInt32?);
                case TestObject_RPC_FieldIndex.RangeUInt32:
                    return typeof(RangeUInt32);
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                    return typeof(RangeUInt64?);
                case TestObject_RPC_FieldIndex.RangeUInt64:
                    return typeof(RangeUInt64);
                case TestObject_RPC_FieldIndex.String:
                    return typeof(String);
                case TestObject_RPC_FieldIndex.UDoubleN:
                    return typeof(UDouble?);
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                    return typeof(UDouble?);
                case TestObject_RPC_FieldIndex.UDouble:
                    return typeof(UDouble);
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                    return typeof(UDouble);
                case TestObject_RPC_FieldIndex.UInt16N:
                    return typeof(UInt16?);
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                    return typeof(UInt16?);
                case TestObject_RPC_FieldIndex.UInt16:
                    return typeof(UInt16);
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                    return typeof(UInt16);
                case TestObject_RPC_FieldIndex.UInt32N:
                    return typeof(UInt32?);
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                    return typeof(UInt32?);
                case TestObject_RPC_FieldIndex.UInt32:
                    return typeof(UInt32);
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                    return typeof(UInt32);
                case TestObject_RPC_FieldIndex.UInt64N:
                    return typeof(UInt64?);
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                    return typeof(UInt64?);
                case TestObject_RPC_FieldIndex.UInt64:
                    return typeof(UInt64);
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                    return typeof(UInt64);
                case TestObject_RPC_FieldIndex.UInt8N:
                    return typeof(Byte?);
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                    return typeof(Byte?);
                case TestObject_RPC_FieldIndex.UInt8:
                    return typeof(Byte);
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                    return typeof(Byte);
                case TestObject_RPC_FieldIndex.Enum:
                    return typeof(TestEnum);
                case TestObject_RPC_FieldIndex.WildCard:
                    return typeof(Object);
                case TestObject_RPC_FieldIndex.Ref:
                    return typeof(ObjectToRef);
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                    return typeof(ObjectToRef);
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                    return typeof(ObjectToRef);
                case TestObject_RPC_FieldIndex.RefGetter:
                    return typeof(IObjectToRefGetter);
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                    return typeof(IObjectToRefGetter);
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                    return typeof(IObjectToRefGetter);
                case TestObject_RPC_FieldIndex.RefSetter:
                    return typeof(IObjectToRef);
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                    return typeof(IObjectToRef);
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                    return typeof(IObjectToRef);
                case TestObject_RPC_FieldIndex.List:
                    return typeof(NotifyingList<Boolean>);
                case TestObject_RPC_FieldIndex.RefList:
                    return typeof(NotifyingList<ObjectToRef>);
                case TestObject_RPC_FieldIndex.Dict:
                    return typeof(NotifyingDictionary<String, Boolean>);
                case TestObject_RPC_FieldIndex.RefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, ObjectToRef>);
                case TestObject_RPC_FieldIndex.KeyRefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, Boolean>);
                case TestObject_RPC_FieldIndex.ValRefDict:
                    return typeof(NotifyingDictionary<String, ObjectToRef>);
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    return typeof(NotifyingDictionary<Int32, ObjectToRef>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolDefinition ILoquiRegistration.ProtocolDefinition => ProtocolDefinition;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class TestObject_RPCCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITestObject_RPC item,
            ITestObject_RPCGetter rhs,
            ITestObject_RPCGetter def,
            bool doErrorMask,
            Func<TestObject_RPC_ErrorMask> errorMask,
            TestObject_RPC_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.BoolN ?? true)
            {
                item.BoolN = rhs.BoolN;
            }
            if (copyMask?.Bool ?? true)
            {
                item.Bool = rhs.Bool;
            }
            if (copyMask?.CharN ?? true)
            {
                item.CharN = rhs.CharN;
            }
            if (copyMask?.Char ?? true)
            {
                item.Char = rhs.Char;
            }
            if (copyMask?.DateTimeNull ?? true)
            {
                item.DateTimeNull = rhs.DateTimeNull;
            }
            if (copyMask?.DateTime ?? true)
            {
                item.DateTime = rhs.DateTime;
            }
            if (copyMask?.DoubleN ?? true)
            {
                item.DoubleN = rhs.DoubleN;
            }
            if (copyMask?.DoubleN_Ranged ?? true)
            {
                item.DoubleN_Ranged = rhs.DoubleN_Ranged;
            }
            if (copyMask?.Double ?? true)
            {
                item.Double = rhs.Double;
            }
            if (copyMask?.Double_Ranged ?? true)
            {
                item.Double_Ranged = rhs.Double_Ranged;
            }
            if (copyMask?.FloatN ?? true)
            {
                item.FloatN = rhs.FloatN;
            }
            if (copyMask?.FloatN_Ranged ?? true)
            {
                item.FloatN_Ranged = rhs.FloatN_Ranged;
            }
            if (copyMask?.Float ?? true)
            {
                item.Float = rhs.Float;
            }
            if (copyMask?.Float_Ranged ?? true)
            {
                item.Float_Ranged = rhs.Float_Ranged;
            }
            if (copyMask?.Int16N ?? true)
            {
                item.Int16N = rhs.Int16N;
            }
            if (copyMask?.Int16N_Ranged ?? true)
            {
                item.Int16N_Ranged = rhs.Int16N_Ranged;
            }
            if (copyMask?.Int16 ?? true)
            {
                item.Int16 = rhs.Int16;
            }
            if (copyMask?.Int16_Ranged ?? true)
            {
                item.Int16_Ranged = rhs.Int16_Ranged;
            }
            if (copyMask?.Int32N ?? true)
            {
                item.Int32N = rhs.Int32N;
            }
            if (copyMask?.Int32N_Ranged ?? true)
            {
                item.Int32N_Ranged = rhs.Int32N_Ranged;
            }
            if (copyMask?.Int32 ?? true)
            {
                item.Int32 = rhs.Int32;
            }
            if (copyMask?.Int32_Ranged ?? true)
            {
                item.Int32_Ranged = rhs.Int32_Ranged;
            }
            if (copyMask?.Int64N ?? true)
            {
                item.Int64N = rhs.Int64N;
            }
            if (copyMask?.Int64N_Ranged ?? true)
            {
                item.Int64N_Ranged = rhs.Int64N_Ranged;
            }
            if (copyMask?.Int64 ?? true)
            {
                item.Int64 = rhs.Int64;
            }
            if (copyMask?.Int64_Ranged ?? true)
            {
                item.Int64_Ranged = rhs.Int64_Ranged;
            }
            if (copyMask?.Int8N ?? true)
            {
                item.Int8N = rhs.Int8N;
            }
            if (copyMask?.Int8N_Ranged ?? true)
            {
                item.Int8N_Ranged = rhs.Int8N_Ranged;
            }
            if (copyMask?.Int8 ?? true)
            {
                item.Int8 = rhs.Int8;
            }
            if (copyMask?.Int8_Ranged ?? true)
            {
                item.Int8_Ranged = rhs.Int8_Ranged;
            }
            if (copyMask?.Unsafe ?? true)
            {
                item.Unsafe = rhs.Unsafe;
            }
            if (copyMask?.P2IntN ?? true)
            {
                item.P2IntN = rhs.P2IntN;
            }
            if (copyMask?.P2Int ?? true)
            {
                item.P2Int = rhs.P2Int;
            }
            if (copyMask?.P3DoubleN ?? true)
            {
                item.P3DoubleN = rhs.P3DoubleN;
            }
            if (copyMask?.P3Double ?? true)
            {
                item.P3Double = rhs.P3Double;
            }
            if (copyMask?.P3IntN ?? true)
            {
                item.P3IntN = rhs.P3IntN;
            }
            if (copyMask?.P3Int ?? true)
            {
                item.P3Int = rhs.P3Int;
            }
            if (copyMask?.PercentN ?? true)
            {
                item.PercentN = rhs.PercentN;
            }
            if (copyMask?.Percent ?? true)
            {
                item.Percent = rhs.Percent;
            }
            if (copyMask?.RangeInt8N ?? true)
            {
                item.RangeInt8N = rhs.RangeInt8N;
            }
            if (copyMask?.RangeInt8 ?? true)
            {
                item.RangeInt8 = rhs.RangeInt8;
            }
            if (copyMask?.RangeInt16N ?? true)
            {
                item.RangeInt16N = rhs.RangeInt16N;
            }
            if (copyMask?.RangeInt16 ?? true)
            {
                item.RangeInt16 = rhs.RangeInt16;
            }
            if (copyMask?.RangeInt32N ?? true)
            {
                item.RangeInt32N = rhs.RangeInt32N;
            }
            if (copyMask?.RangeInt32 ?? true)
            {
                item.RangeInt32 = rhs.RangeInt32;
            }
            if (copyMask?.RangeInt64N ?? true)
            {
                item.RangeInt64N = rhs.RangeInt64N;
            }
            if (copyMask?.RangeInt64 ?? true)
            {
                item.RangeInt64 = rhs.RangeInt64;
            }
            if (copyMask?.RangeUInt8N ?? true)
            {
                item.RangeUInt8N = rhs.RangeUInt8N;
            }
            if (copyMask?.RangeUInt8 ?? true)
            {
                item.RangeUInt8 = rhs.RangeUInt8;
            }
            if (copyMask?.RangeUInt16N ?? true)
            {
                item.RangeUInt16N = rhs.RangeUInt16N;
            }
            if (copyMask?.RangeUInt16 ?? true)
            {
                item.RangeUInt16 = rhs.RangeUInt16;
            }
            if (copyMask?.RangeUInt32N ?? true)
            {
                item.RangeUInt32N = rhs.RangeUInt32N;
            }
            if (copyMask?.RangeUInt32 ?? true)
            {
                item.RangeUInt32 = rhs.RangeUInt32;
            }
            if (copyMask?.RangeUInt64N ?? true)
            {
                item.RangeUInt64N = rhs.RangeUInt64N;
            }
            if (copyMask?.RangeUInt64 ?? true)
            {
                item.RangeUInt64 = rhs.RangeUInt64;
            }
            if (copyMask?.String ?? true)
            {
                item.String = rhs.String;
            }
            if (copyMask?.UDoubleN ?? true)
            {
                item.UDoubleN = rhs.UDoubleN;
            }
            if (copyMask?.UDoubleN_Ranged ?? true)
            {
                item.UDoubleN_Ranged = rhs.UDoubleN_Ranged;
            }
            if (copyMask?.UDouble ?? true)
            {
                item.UDouble = rhs.UDouble;
            }
            if (copyMask?.UDouble_Ranged ?? true)
            {
                item.UDouble_Ranged = rhs.UDouble_Ranged;
            }
            if (copyMask?.UInt16N ?? true)
            {
                item.UInt16N = rhs.UInt16N;
            }
            if (copyMask?.UInt16N_Ranged ?? true)
            {
                item.UInt16N_Ranged = rhs.UInt16N_Ranged;
            }
            if (copyMask?.UInt16 ?? true)
            {
                item.UInt16 = rhs.UInt16;
            }
            if (copyMask?.UInt16_Ranged ?? true)
            {
                item.UInt16_Ranged = rhs.UInt16_Ranged;
            }
            if (copyMask?.UInt32N ?? true)
            {
                item.UInt32N = rhs.UInt32N;
            }
            if (copyMask?.UInt32N_Ranged ?? true)
            {
                item.UInt32N_Ranged = rhs.UInt32N_Ranged;
            }
            if (copyMask?.UInt32 ?? true)
            {
                item.UInt32 = rhs.UInt32;
            }
            if (copyMask?.UInt32_Ranged ?? true)
            {
                item.UInt32_Ranged = rhs.UInt32_Ranged;
            }
            if (copyMask?.UInt64N ?? true)
            {
                item.UInt64N = rhs.UInt64N;
            }
            if (copyMask?.UInt64N_Ranged ?? true)
            {
                item.UInt64N_Ranged = rhs.UInt64N_Ranged;
            }
            if (copyMask?.UInt64 ?? true)
            {
                item.UInt64 = rhs.UInt64;
            }
            if (copyMask?.UInt64_Ranged ?? true)
            {
                item.UInt64_Ranged = rhs.UInt64_Ranged;
            }
            if (copyMask?.UInt8N ?? true)
            {
                item.UInt8N = rhs.UInt8N;
            }
            if (copyMask?.UInt8N_Ranged ?? true)
            {
                item.UInt8N_Ranged = rhs.UInt8N_Ranged;
            }
            if (copyMask?.UInt8 ?? true)
            {
                item.UInt8 = rhs.UInt8;
            }
            if (copyMask?.UInt8_Ranged ?? true)
            {
                item.UInt8_Ranged = rhs.UInt8_Ranged;
            }
            if (copyMask?.Enum ?? true)
            {
                item.Enum = rhs.Enum;
            }
            if (copyMask?.WildCard ?? true)
            {
                item.WildCard = rhs.WildCard;
            }
            if (copyMask?.Ref.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.Ref.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Ref = rhs.Ref;
                            break;
                        case CopyOption.CopyIn:
                            ObjectToRefCommon.CopyFieldsFrom(
                                item: item.Ref,
                                rhs: rhs.Ref,
                                def: def?.Ref,
                                doErrorMask: doErrorMask,
                                errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.Ref.Specific == null)
                                    {
                                        baseMask.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                    }
                                    return baseMask.Ref.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.Ref.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Ref == null)
                            {
                                item.Ref = null;
                            }
                            else
                            {
                                item.Ref = ObjectToRef.Copy(
                                    rhs.Ref,
                                    copyMask?.Ref.Specific,
                                    def?.Ref);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ref.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Ref, ex);
                }
            }
            if (copyMask?.Ref_NotNull.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.Ref_NotNull.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Ref_NotNull = rhs.Ref_NotNull;
                            break;
                        case CopyOption.CopyIn:
                            ObjectToRefCommon.CopyFieldsFrom(
                                item: item.Ref_NotNull,
                                rhs: rhs.Ref_NotNull,
                                def: def?.Ref_NotNull,
                                doErrorMask: doErrorMask,
                                errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.Ref_NotNull.Specific == null)
                                    {
                                        baseMask.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                    }
                                    return baseMask.Ref_NotNull.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.Ref_NotNull.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Ref_NotNull == null)
                            {
                                item.Ref_NotNull = null;
                            }
                            else
                            {
                                item.Ref_NotNull = ObjectToRef.Copy(
                                    rhs.Ref_NotNull,
                                    copyMask?.Ref_NotNull.Specific,
                                    def?.Ref_NotNull);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ref_NotNull.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Ref_NotNull, ex);
                }
            }
            if (copyMask?.Ref_Singleton.Overall ?? true)
            {
                try
                {
                    ObjectToRefCommon.CopyFieldsFrom(
                        item: item.Ref_Singleton,
                        rhs: rhs.Ref_Singleton,
                        def: def?.Ref_Singleton,
                        doErrorMask: doErrorMask,
                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Ref_Singleton.Specific == null)
                            {
                                baseMask.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                            }
                            return baseMask.Ref_Singleton.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Ref_Singleton.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Ref_Singleton, ex);
                }
            }
            if (copyMask?.RefGetter.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.RefGetter.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.RefGetter = rhs.RefGetter;
                            break;
                        case CopyOption.CopyIn:
                        case CopyOption.MakeCopy:
                            if (rhs.RefGetter == null)
                            {
                                item.RefGetter = null;
                            }
                            else
                            {
                                item.RefGetter = ObjectToRef.Copy_ToLoqui(
                                    rhs.RefGetter,
                                    copyMask?.RefGetter.Specific,
                                    def?.RefGetter);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefGetter.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefGetter, ex);
                }
            }
            if (copyMask?.RefGetter_NotNull.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.RefGetter_NotNull.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.RefGetter_NotNull = rhs.RefGetter_NotNull;
                            break;
                        case CopyOption.CopyIn:
                        case CopyOption.MakeCopy:
                            if (rhs.RefGetter_NotNull == null)
                            {
                                item.RefGetter_NotNull = null;
                            }
                            else
                            {
                                item.RefGetter_NotNull = ObjectToRef.Copy_ToLoqui(
                                    rhs.RefGetter_NotNull,
                                    copyMask?.RefGetter_NotNull.Specific,
                                    def?.RefGetter_NotNull);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefGetter_NotNull.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefGetter_NotNull, ex);
                }
            }
            if (copyMask?.RefSetter.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.RefSetter.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.RefSetter = rhs.RefSetter;
                            break;
                        case CopyOption.CopyIn:
                            ObjectToRefCommon.CopyFieldsFrom(
                                item: item.RefSetter,
                                rhs: rhs.RefSetter,
                                def: def?.RefSetter,
                                doErrorMask: doErrorMask,
                                errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.RefSetter.Specific == null)
                                    {
                                        baseMask.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                    }
                                    return baseMask.RefSetter.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.RefSetter.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.RefSetter == null)
                            {
                                item.RefSetter = null;
                            }
                            else
                            {
                                item.RefSetter = ObjectToRef.Copy(
                                    rhs.RefSetter,
                                    copyMask?.RefSetter.Specific,
                                    def?.RefSetter);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefSetter.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefSetter, ex);
                }
            }
            if (copyMask?.RefSetter_NotNull.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.RefSetter_NotNull.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.RefSetter_NotNull = rhs.RefSetter_NotNull;
                            break;
                        case CopyOption.CopyIn:
                            ObjectToRefCommon.CopyFieldsFrom(
                                item: item.RefSetter_NotNull,
                                rhs: rhs.RefSetter_NotNull,
                                def: def?.RefSetter_NotNull,
                                doErrorMask: doErrorMask,
                                errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.RefSetter_NotNull.Specific == null)
                                    {
                                        baseMask.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                    }
                                    return baseMask.RefSetter_NotNull.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.RefSetter_NotNull.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.RefSetter_NotNull == null)
                            {
                                item.RefSetter_NotNull = null;
                            }
                            else
                            {
                                item.RefSetter_NotNull = ObjectToRef.Copy(
                                    rhs.RefSetter_NotNull,
                                    copyMask?.RefSetter_NotNull.Specific,
                                    def?.RefSetter_NotNull);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefSetter_NotNull.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefSetter_NotNull, ex);
                }
            }
            if (copyMask?.RefSetter_Singleton.Overall ?? true)
            {
                try
                {
                    ObjectToRefCommon.CopyFieldsFrom(
                        item: item.RefSetter_Singleton,
                        rhs: rhs.RefSetter_Singleton,
                        def: def?.RefSetter_Singleton,
                        doErrorMask: doErrorMask,
                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.RefSetter_Singleton.Specific == null)
                            {
                                baseMask.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                            }
                            return baseMask.RefSetter_Singleton.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.RefSetter_Singleton.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefSetter_Singleton, ex);
                }
            }
            if (copyMask?.List != CopyOption.Skip)
            {
                try
                {
                    item.List.SetToWithDefault(
                        rhs.List,
                        def?.List,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.List, ex);
                }
            }
            if (copyMask?.RefList.Overall != CopyOption.Skip)
            {
                try
                {
                    item.RefList.SetToWithDefault(
                        rhs.RefList,
                        def?.RefList,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RefList.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return r.Copy(copyMask?.RefList.Specific, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefList.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefList, ex);
                }
            }
            if (copyMask?.Dict ?? true)
            {
                try
                {
                    item.Dict.SetToWithDefault(
                        rhs.Dict,
                        def?.Dict,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Dict, ex);
                }
            }
            if (copyMask?.RefDict.Overall ?? true)
            {
                try
                {
                    item.RefDict.SetToWithDefault(
                        rhs.RefDict,
                        def?.RefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef key;
                            switch (copyMask?.RefDict.Specific.Key.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    key = k;
                                    break;
                                case RefCopyType.MakeCopy:
                                    key = k.Copy(copyMask: copyMask?.RefDict.Specific.Key.Mask);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.RefDict.Overall}. Cannot execute copy.");
                            }
                            ObjectToRef val;
                            switch (copyMask?.RefDict.Specific.Value.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    val = v;
                                    break;
                                case RefCopyType.MakeCopy:
                                    val = v.Copy(copyMask?.RefDict.Specific.Value.Mask, d);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.RefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<ObjectToRef, ObjectToRef>(key, val);
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefDict, ex);
                }
            }
            if (copyMask?.KeyRefDict.Overall ?? true)
            {
                try
                {
                    item.KeyRefDict.SetToWithDefault(
                        rhs.KeyRefDict,
                        def?.KeyRefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef key;
                            switch (copyMask?.KeyRefDict.Specific.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    key = k;
                                    break;
                                case RefCopyType.MakeCopy:
                                    key = k.Copy(copyMask: copyMask?.KeyRefDict.Specific.Mask);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.KeyRefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<ObjectToRef, Boolean>(key, v);
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.KeyRefDict, ex);
                }
            }
            if (copyMask?.ValRefDict.Overall ?? true)
            {
                try
                {
                    item.ValRefDict.SetToWithDefault(
                        rhs.ValRefDict,
                        def?.ValRefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef val;
                            switch (copyMask?.ValRefDict.Specific.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    val = v;
                                    break;
                                case RefCopyType.MakeCopy:
                                    val = v.Copy(copyMask?.ValRefDict.Specific.Mask, d);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.ValRefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<String, ObjectToRef>(k, val);
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.ValRefDict, ex);
                }
            }
            if (copyMask?.DictKeyedValue.Overall != CopyOption.Skip)
            {
                try
                {
                    item.DictKeyedValue.SetToWithDefault(
                        rhs.DictKeyedValue,
                        def?.DictKeyedValue,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.DictKeyedValue.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return r.Copy(copyMask?.DictKeyedValue.Specific, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.DictKeyedValue.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.DictKeyedValue, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestObject_RPC obj,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                    break;
                case TestObject_RPC_FieldIndex.Bool:
                    break;
                case TestObject_RPC_FieldIndex.CharN:
                    break;
                case TestObject_RPC_FieldIndex.Char:
                    break;
                case TestObject_RPC_FieldIndex.DateTimeNull:
                    break;
                case TestObject_RPC_FieldIndex.DateTime:
                    break;
                case TestObject_RPC_FieldIndex.DoubleN:
                    break;
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Double:
                    break;
                case TestObject_RPC_FieldIndex.Double_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.FloatN:
                    break;
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Float:
                    break;
                case TestObject_RPC_FieldIndex.Float_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Int16N:
                    break;
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Int16:
                    break;
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Int32N:
                    break;
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Int32:
                    break;
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Int64N:
                    break;
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Int64:
                    break;
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Int8N:
                    break;
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Int8:
                    break;
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Unsafe:
                    break;
                case TestObject_RPC_FieldIndex.P2IntN:
                    break;
                case TestObject_RPC_FieldIndex.P2Int:
                    break;
                case TestObject_RPC_FieldIndex.P3DoubleN:
                    break;
                case TestObject_RPC_FieldIndex.P3Double:
                    break;
                case TestObject_RPC_FieldIndex.P3IntN:
                    break;
                case TestObject_RPC_FieldIndex.P3Int:
                    break;
                case TestObject_RPC_FieldIndex.PercentN:
                    break;
                case TestObject_RPC_FieldIndex.Percent:
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8N:
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8:
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16N:
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16:
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32N:
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32:
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64N:
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64:
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8:
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16:
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32:
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64:
                    break;
                case TestObject_RPC_FieldIndex.String:
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN:
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.UDouble:
                    break;
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.UInt16N:
                    break;
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.UInt16:
                    break;
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.UInt32N:
                    break;
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.UInt32:
                    break;
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.UInt64N:
                    break;
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.UInt64:
                    break;
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.UInt8N:
                    break;
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.UInt8:
                    break;
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                    break;
                case TestObject_RPC_FieldIndex.Enum:
                    break;
                case TestObject_RPC_FieldIndex.WildCard:
                    break;
                case TestObject_RPC_FieldIndex.Ref:
                    break;
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                    break;
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Cannot mark set status of a singleton: Ref_Singleton");
                case TestObject_RPC_FieldIndex.RefGetter:
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot mark set status of a singleton: RefGetter_Singleton");
                case TestObject_RPC_FieldIndex.RefSetter:
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Cannot mark set status of a singleton: RefSetter_Singleton");
                case TestObject_RPC_FieldIndex.List:
                    obj.List.HasBeenSet = on;
                    break;
                case TestObject_RPC_FieldIndex.RefList:
                    obj.RefList.HasBeenSet = on;
                    break;
                case TestObject_RPC_FieldIndex.Dict:
                    obj.Dict.HasBeenSet = on;
                    break;
                case TestObject_RPC_FieldIndex.RefDict:
                    obj.RefDict.HasBeenSet = on;
                    break;
                case TestObject_RPC_FieldIndex.KeyRefDict:
                    obj.KeyRefDict.HasBeenSet = on;
                    break;
                case TestObject_RPC_FieldIndex.ValRefDict:
                    obj.ValRefDict.HasBeenSet = on;
                    break;
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestObject_RPC obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                    obj.BoolN = default(Boolean?);
                    break;
                case TestObject_RPC_FieldIndex.Bool:
                    obj.Bool = default(Boolean);
                    break;
                case TestObject_RPC_FieldIndex.CharN:
                    obj.CharN = default(Char?);
                    break;
                case TestObject_RPC_FieldIndex.Char:
                    obj.Char = default(Char);
                    break;
                case TestObject_RPC_FieldIndex.DateTimeNull:
                    obj.DateTimeNull = default(DateTime?);
                    break;
                case TestObject_RPC_FieldIndex.DateTime:
                    obj.DateTime = default(DateTime);
                    break;
                case TestObject_RPC_FieldIndex.DoubleN:
                    obj.DoubleN = default(Double?);
                    break;
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                    obj.DoubleN_Ranged = default(Double?);
                    break;
                case TestObject_RPC_FieldIndex.Double:
                    obj.Double = default(Double);
                    break;
                case TestObject_RPC_FieldIndex.Double_Ranged:
                    obj.Double_Ranged = default(Double);
                    break;
                case TestObject_RPC_FieldIndex.FloatN:
                    obj.FloatN = default(Single?);
                    break;
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                    obj.FloatN_Ranged = default(Single?);
                    break;
                case TestObject_RPC_FieldIndex.Float:
                    obj.Float = default(Single);
                    break;
                case TestObject_RPC_FieldIndex.Float_Ranged:
                    obj.Float_Ranged = default(Single);
                    break;
                case TestObject_RPC_FieldIndex.Int16N:
                    obj.Int16N = default(Int16?);
                    break;
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                    obj.Int16N_Ranged = default(Int16?);
                    break;
                case TestObject_RPC_FieldIndex.Int16:
                    obj.Int16 = default(Int16);
                    break;
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                    obj.Int16_Ranged = default(Int16);
                    break;
                case TestObject_RPC_FieldIndex.Int32N:
                    obj.Int32N = default(Int32?);
                    break;
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                    obj.Int32N_Ranged = default(Int32?);
                    break;
                case TestObject_RPC_FieldIndex.Int32:
                    obj.Int32 = default(Int32);
                    break;
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                    obj.Int32_Ranged = default(Int32);
                    break;
                case TestObject_RPC_FieldIndex.Int64N:
                    obj.Int64N = default(Int64?);
                    break;
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                    obj.Int64N_Ranged = default(Int64?);
                    break;
                case TestObject_RPC_FieldIndex.Int64:
                    obj.Int64 = default(Int64);
                    break;
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                    obj.Int64_Ranged = default(Int64);
                    break;
                case TestObject_RPC_FieldIndex.Int8N:
                    obj.Int8N = default(SByte?);
                    break;
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                    obj.Int8N_Ranged = default(SByte?);
                    break;
                case TestObject_RPC_FieldIndex.Int8:
                    obj.Int8 = default(SByte);
                    break;
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                    obj.Int8_Ranged = default(SByte);
                    break;
                case TestObject_RPC_FieldIndex.Unsafe:
                    obj.Unsafe = default(bool);
                    break;
                case TestObject_RPC_FieldIndex.P2IntN:
                    obj.P2IntN = default(P2Int?);
                    break;
                case TestObject_RPC_FieldIndex.P2Int:
                    obj.P2Int = default(P2Int);
                    break;
                case TestObject_RPC_FieldIndex.P3DoubleN:
                    obj.P3DoubleN = default(P3Double?);
                    break;
                case TestObject_RPC_FieldIndex.P3Double:
                    obj.P3Double = default(P3Double);
                    break;
                case TestObject_RPC_FieldIndex.P3IntN:
                    obj.P3IntN = default(P3Int?);
                    break;
                case TestObject_RPC_FieldIndex.P3Int:
                    obj.P3Int = default(P3Int);
                    break;
                case TestObject_RPC_FieldIndex.PercentN:
                    obj.PercentN = default(Percent?);
                    break;
                case TestObject_RPC_FieldIndex.Percent:
                    obj.Percent = default(Percent);
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8N:
                    obj.RangeInt8N = default(RangeInt8?);
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8:
                    obj.RangeInt8 = default(RangeInt8);
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16N:
                    obj.RangeInt16N = default(RangeInt16?);
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16:
                    obj.RangeInt16 = default(RangeInt16);
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32N:
                    obj.RangeInt32N = default(RangeInt32?);
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32:
                    obj.RangeInt32 = default(RangeInt32);
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64N:
                    obj.RangeInt64N = default(RangeInt64?);
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64:
                    obj.RangeInt64 = default(RangeInt64);
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                    obj.RangeUInt8N = default(RangeUInt8?);
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8:
                    obj.RangeUInt8 = default(RangeUInt8);
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                    obj.RangeUInt16N = default(RangeUInt16?);
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16:
                    obj.RangeUInt16 = default(RangeUInt16);
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                    obj.RangeUInt32N = default(RangeUInt32?);
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32:
                    obj.RangeUInt32 = default(RangeUInt32);
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                    obj.RangeUInt64N = default(RangeUInt64?);
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64:
                    obj.RangeUInt64 = default(RangeUInt64);
                    break;
                case TestObject_RPC_FieldIndex.String:
                    obj.String = default(String);
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN:
                    obj.UDoubleN = default(UDouble?);
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                    obj.UDoubleN_Ranged = default(UDouble?);
                    break;
                case TestObject_RPC_FieldIndex.UDouble:
                    obj.UDouble = default(UDouble);
                    break;
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                    obj.UDouble_Ranged = default(UDouble);
                    break;
                case TestObject_RPC_FieldIndex.UInt16N:
                    obj.UInt16N = default(UInt16?);
                    break;
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                    obj.UInt16N_Ranged = default(UInt16?);
                    break;
                case TestObject_RPC_FieldIndex.UInt16:
                    obj.UInt16 = default(UInt16);
                    break;
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                    obj.UInt16_Ranged = default(UInt16);
                    break;
                case TestObject_RPC_FieldIndex.UInt32N:
                    obj.UInt32N = default(UInt32?);
                    break;
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                    obj.UInt32N_Ranged = default(UInt32?);
                    break;
                case TestObject_RPC_FieldIndex.UInt32:
                    obj.UInt32 = default(UInt32);
                    break;
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                    obj.UInt32_Ranged = default(UInt32);
                    break;
                case TestObject_RPC_FieldIndex.UInt64N:
                    obj.UInt64N = default(UInt64?);
                    break;
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                    obj.UInt64N_Ranged = default(UInt64?);
                    break;
                case TestObject_RPC_FieldIndex.UInt64:
                    obj.UInt64 = default(UInt64);
                    break;
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                    obj.UInt64_Ranged = default(UInt64);
                    break;
                case TestObject_RPC_FieldIndex.UInt8N:
                    obj.UInt8N = default(Byte?);
                    break;
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                    obj.UInt8N_Ranged = default(Byte?);
                    break;
                case TestObject_RPC_FieldIndex.UInt8:
                    obj.UInt8 = default(Byte);
                    break;
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                    obj.UInt8_Ranged = default(Byte);
                    break;
                case TestObject_RPC_FieldIndex.Enum:
                    obj.Enum = default(TestEnum);
                    break;
                case TestObject_RPC_FieldIndex.WildCard:
                    obj.WildCard = default(Object);
                    break;
                case TestObject_RPC_FieldIndex.Ref:
                    obj.Ref = default(ObjectToRef);
                    break;
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                    obj.Ref_NotNull = default(ObjectToRef);
                    break;
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                    ObjectToRefCommon.Clear(obj.Ref_Singleton, cmds.ToUnsetParams());
                    break;
                case TestObject_RPC_FieldIndex.RefGetter:
                    obj.RefGetter = default(IObjectToRefGetter);
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                    obj.RefGetter_NotNull = default(IObjectToRefGetter);
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot unset a get only singleton: RefGetter_Singleton");
                case TestObject_RPC_FieldIndex.RefSetter:
                    obj.RefSetter = default(IObjectToRef);
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                    obj.RefSetter_NotNull = default(IObjectToRef);
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                    ObjectToRefCommon.Clear(obj.RefSetter_Singleton, cmds.ToUnsetParams());
                    break;
                case TestObject_RPC_FieldIndex.List:
                    obj.List.Unset(cmds);
                    break;
                case TestObject_RPC_FieldIndex.RefList:
                    obj.RefList.Unset(cmds);
                    break;
                case TestObject_RPC_FieldIndex.Dict:
                    obj.Dict.Unset(cmds);
                    break;
                case TestObject_RPC_FieldIndex.RefDict:
                    obj.RefDict.Unset(cmds);
                    break;
                case TestObject_RPC_FieldIndex.KeyRefDict:
                    obj.KeyRefDict.Unset(cmds);
                    break;
                case TestObject_RPC_FieldIndex.ValRefDict:
                    obj.ValRefDict.Unset(cmds);
                    break;
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestObject_RPC obj)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                case TestObject_RPC_FieldIndex.Bool:
                case TestObject_RPC_FieldIndex.CharN:
                case TestObject_RPC_FieldIndex.Char:
                case TestObject_RPC_FieldIndex.DateTimeNull:
                case TestObject_RPC_FieldIndex.DateTime:
                case TestObject_RPC_FieldIndex.DoubleN:
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_RPC_FieldIndex.Double:
                case TestObject_RPC_FieldIndex.Double_Ranged:
                case TestObject_RPC_FieldIndex.FloatN:
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_RPC_FieldIndex.Float:
                case TestObject_RPC_FieldIndex.Float_Ranged:
                case TestObject_RPC_FieldIndex.Int16N:
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_RPC_FieldIndex.Int16:
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                case TestObject_RPC_FieldIndex.Int32N:
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_RPC_FieldIndex.Int32:
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                case TestObject_RPC_FieldIndex.Int64N:
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_RPC_FieldIndex.Int64:
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                case TestObject_RPC_FieldIndex.Int8N:
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_RPC_FieldIndex.Int8:
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                case TestObject_RPC_FieldIndex.Unsafe:
                case TestObject_RPC_FieldIndex.P2IntN:
                case TestObject_RPC_FieldIndex.P2Int:
                case TestObject_RPC_FieldIndex.P3DoubleN:
                case TestObject_RPC_FieldIndex.P3Double:
                case TestObject_RPC_FieldIndex.P3IntN:
                case TestObject_RPC_FieldIndex.P3Int:
                case TestObject_RPC_FieldIndex.PercentN:
                case TestObject_RPC_FieldIndex.Percent:
                case TestObject_RPC_FieldIndex.RangeInt8N:
                case TestObject_RPC_FieldIndex.RangeInt8:
                case TestObject_RPC_FieldIndex.RangeInt16N:
                case TestObject_RPC_FieldIndex.RangeInt16:
                case TestObject_RPC_FieldIndex.RangeInt32N:
                case TestObject_RPC_FieldIndex.RangeInt32:
                case TestObject_RPC_FieldIndex.RangeInt64N:
                case TestObject_RPC_FieldIndex.RangeInt64:
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                case TestObject_RPC_FieldIndex.RangeUInt8:
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                case TestObject_RPC_FieldIndex.RangeUInt16:
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                case TestObject_RPC_FieldIndex.RangeUInt32:
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                case TestObject_RPC_FieldIndex.RangeUInt64:
                case TestObject_RPC_FieldIndex.String:
                case TestObject_RPC_FieldIndex.UDoubleN:
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_RPC_FieldIndex.UDouble:
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_RPC_FieldIndex.UInt16N:
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_RPC_FieldIndex.UInt16:
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_RPC_FieldIndex.UInt32N:
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_RPC_FieldIndex.UInt32:
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_RPC_FieldIndex.UInt64N:
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_RPC_FieldIndex.UInt64:
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_RPC_FieldIndex.UInt8N:
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_RPC_FieldIndex.UInt8:
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_RPC_FieldIndex.Enum:
                case TestObject_RPC_FieldIndex.WildCard:
                case TestObject_RPC_FieldIndex.Ref:
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                case TestObject_RPC_FieldIndex.RefGetter:
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_RPC_FieldIndex.RefSetter:
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_RPC_FieldIndex.List:
                case TestObject_RPC_FieldIndex.RefList:
                case TestObject_RPC_FieldIndex.Dict:
                case TestObject_RPC_FieldIndex.RefDict:
                case TestObject_RPC_FieldIndex.KeyRefDict:
                case TestObject_RPC_FieldIndex.ValRefDict:
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestObject_RPCGetter obj)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                    return obj.BoolN;
                case TestObject_RPC_FieldIndex.Bool:
                    return obj.Bool;
                case TestObject_RPC_FieldIndex.CharN:
                    return obj.CharN;
                case TestObject_RPC_FieldIndex.Char:
                    return obj.Char;
                case TestObject_RPC_FieldIndex.DateTimeNull:
                    return obj.DateTimeNull;
                case TestObject_RPC_FieldIndex.DateTime:
                    return obj.DateTime;
                case TestObject_RPC_FieldIndex.DoubleN:
                    return obj.DoubleN;
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                    return obj.DoubleN_Ranged;
                case TestObject_RPC_FieldIndex.Double:
                    return obj.Double;
                case TestObject_RPC_FieldIndex.Double_Ranged:
                    return obj.Double_Ranged;
                case TestObject_RPC_FieldIndex.FloatN:
                    return obj.FloatN;
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                    return obj.FloatN_Ranged;
                case TestObject_RPC_FieldIndex.Float:
                    return obj.Float;
                case TestObject_RPC_FieldIndex.Float_Ranged:
                    return obj.Float_Ranged;
                case TestObject_RPC_FieldIndex.Int16N:
                    return obj.Int16N;
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                    return obj.Int16N_Ranged;
                case TestObject_RPC_FieldIndex.Int16:
                    return obj.Int16;
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                    return obj.Int16_Ranged;
                case TestObject_RPC_FieldIndex.Int32N:
                    return obj.Int32N;
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                    return obj.Int32N_Ranged;
                case TestObject_RPC_FieldIndex.Int32:
                    return obj.Int32;
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                    return obj.Int32_Ranged;
                case TestObject_RPC_FieldIndex.Int64N:
                    return obj.Int64N;
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                    return obj.Int64N_Ranged;
                case TestObject_RPC_FieldIndex.Int64:
                    return obj.Int64;
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                    return obj.Int64_Ranged;
                case TestObject_RPC_FieldIndex.Int8N:
                    return obj.Int8N;
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                    return obj.Int8N_Ranged;
                case TestObject_RPC_FieldIndex.Int8:
                    return obj.Int8;
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                    return obj.Int8_Ranged;
                case TestObject_RPC_FieldIndex.Unsafe:
                    return obj.Unsafe;
                case TestObject_RPC_FieldIndex.P2IntN:
                    return obj.P2IntN;
                case TestObject_RPC_FieldIndex.P2Int:
                    return obj.P2Int;
                case TestObject_RPC_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN;
                case TestObject_RPC_FieldIndex.P3Double:
                    return obj.P3Double;
                case TestObject_RPC_FieldIndex.P3IntN:
                    return obj.P3IntN;
                case TestObject_RPC_FieldIndex.P3Int:
                    return obj.P3Int;
                case TestObject_RPC_FieldIndex.PercentN:
                    return obj.PercentN;
                case TestObject_RPC_FieldIndex.Percent:
                    return obj.Percent;
                case TestObject_RPC_FieldIndex.RangeInt8N:
                    return obj.RangeInt8N;
                case TestObject_RPC_FieldIndex.RangeInt8:
                    return obj.RangeInt8;
                case TestObject_RPC_FieldIndex.RangeInt16N:
                    return obj.RangeInt16N;
                case TestObject_RPC_FieldIndex.RangeInt16:
                    return obj.RangeInt16;
                case TestObject_RPC_FieldIndex.RangeInt32N:
                    return obj.RangeInt32N;
                case TestObject_RPC_FieldIndex.RangeInt32:
                    return obj.RangeInt32;
                case TestObject_RPC_FieldIndex.RangeInt64N:
                    return obj.RangeInt64N;
                case TestObject_RPC_FieldIndex.RangeInt64:
                    return obj.RangeInt64;
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                    return obj.RangeUInt8N;
                case TestObject_RPC_FieldIndex.RangeUInt8:
                    return obj.RangeUInt8;
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                    return obj.RangeUInt16N;
                case TestObject_RPC_FieldIndex.RangeUInt16:
                    return obj.RangeUInt16;
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                    return obj.RangeUInt32N;
                case TestObject_RPC_FieldIndex.RangeUInt32:
                    return obj.RangeUInt32;
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                    return obj.RangeUInt64N;
                case TestObject_RPC_FieldIndex.RangeUInt64:
                    return obj.RangeUInt64;
                case TestObject_RPC_FieldIndex.String:
                    return obj.String;
                case TestObject_RPC_FieldIndex.UDoubleN:
                    return obj.UDoubleN;
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                    return obj.UDoubleN_Ranged;
                case TestObject_RPC_FieldIndex.UDouble:
                    return obj.UDouble;
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                    return obj.UDouble_Ranged;
                case TestObject_RPC_FieldIndex.UInt16N:
                    return obj.UInt16N;
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                    return obj.UInt16N_Ranged;
                case TestObject_RPC_FieldIndex.UInt16:
                    return obj.UInt16;
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                    return obj.UInt16_Ranged;
                case TestObject_RPC_FieldIndex.UInt32N:
                    return obj.UInt32N;
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                    return obj.UInt32N_Ranged;
                case TestObject_RPC_FieldIndex.UInt32:
                    return obj.UInt32;
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                    return obj.UInt32_Ranged;
                case TestObject_RPC_FieldIndex.UInt64N:
                    return obj.UInt64N;
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                    return obj.UInt64N_Ranged;
                case TestObject_RPC_FieldIndex.UInt64:
                    return obj.UInt64;
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                    return obj.UInt64_Ranged;
                case TestObject_RPC_FieldIndex.UInt8N:
                    return obj.UInt8N;
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                    return obj.UInt8N_Ranged;
                case TestObject_RPC_FieldIndex.UInt8:
                    return obj.UInt8;
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                    return obj.UInt8_Ranged;
                case TestObject_RPC_FieldIndex.Enum:
                    return obj.Enum;
                case TestObject_RPC_FieldIndex.WildCard:
                    return obj.WildCard;
                case TestObject_RPC_FieldIndex.Ref:
                    return obj.Ref;
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                    return obj.Ref_NotNull;
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                    return obj.Ref_Singleton;
                case TestObject_RPC_FieldIndex.RefGetter:
                    return obj.RefGetter;
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                    return obj.RefGetter_NotNull;
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                    return obj.RefGetter_Singleton;
                case TestObject_RPC_FieldIndex.RefSetter:
                    return obj.RefSetter;
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                    return obj.RefSetter_NotNull;
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                    return obj.RefSetter_Singleton;
                case TestObject_RPC_FieldIndex.List:
                    return obj.List;
                case TestObject_RPC_FieldIndex.RefList:
                    return obj.RefList;
                case TestObject_RPC_FieldIndex.Dict:
                    return obj.Dict;
                case TestObject_RPC_FieldIndex.RefDict:
                    return obj.RefDict;
                case TestObject_RPC_FieldIndex.KeyRefDict:
                    return obj.KeyRefDict;
                case TestObject_RPC_FieldIndex.ValRefDict:
                    return obj.ValRefDict;
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITestObject_RPC item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.BoolN = default(Boolean?);
            item.Bool = default(Boolean);
            item.CharN = default(Char?);
            item.Char = default(Char);
            item.DateTimeNull = default(DateTime?);
            item.DateTime = default(DateTime);
            item.DoubleN = default(Double?);
            item.DoubleN_Ranged = default(Double?);
            item.Double = default(Double);
            item.Double_Ranged = default(Double);
            item.FloatN = default(Single?);
            item.FloatN_Ranged = default(Single?);
            item.Float = default(Single);
            item.Float_Ranged = default(Single);
            item.Int16N = default(Int16?);
            item.Int16N_Ranged = default(Int16?);
            item.Int16 = default(Int16);
            item.Int16_Ranged = default(Int16);
            item.Int32N = default(Int32?);
            item.Int32N_Ranged = default(Int32?);
            item.Int32 = default(Int32);
            item.Int32_Ranged = default(Int32);
            item.Int64N = default(Int64?);
            item.Int64N_Ranged = default(Int64?);
            item.Int64 = default(Int64);
            item.Int64_Ranged = default(Int64);
            item.Int8N = default(SByte?);
            item.Int8N_Ranged = default(SByte?);
            item.Int8 = default(SByte);
            item.Int8_Ranged = default(SByte);
            item.Unsafe = default(bool);
            item.P2IntN = default(P2Int?);
            item.P2Int = default(P2Int);
            item.P3DoubleN = default(P3Double?);
            item.P3Double = default(P3Double);
            item.P3IntN = default(P3Int?);
            item.P3Int = default(P3Int);
            item.PercentN = default(Percent?);
            item.Percent = default(Percent);
            item.RangeInt8N = default(RangeInt8?);
            item.RangeInt8 = default(RangeInt8);
            item.RangeInt16N = default(RangeInt16?);
            item.RangeInt16 = default(RangeInt16);
            item.RangeInt32N = default(RangeInt32?);
            item.RangeInt32 = default(RangeInt32);
            item.RangeInt64N = default(RangeInt64?);
            item.RangeInt64 = default(RangeInt64);
            item.RangeUInt8N = default(RangeUInt8?);
            item.RangeUInt8 = default(RangeUInt8);
            item.RangeUInt16N = default(RangeUInt16?);
            item.RangeUInt16 = default(RangeUInt16);
            item.RangeUInt32N = default(RangeUInt32?);
            item.RangeUInt32 = default(RangeUInt32);
            item.RangeUInt64N = default(RangeUInt64?);
            item.RangeUInt64 = default(RangeUInt64);
            item.String = default(String);
            item.UDoubleN = default(UDouble?);
            item.UDoubleN_Ranged = default(UDouble?);
            item.UDouble = default(UDouble);
            item.UDouble_Ranged = default(UDouble);
            item.UInt16N = default(UInt16?);
            item.UInt16N_Ranged = default(UInt16?);
            item.UInt16 = default(UInt16);
            item.UInt16_Ranged = default(UInt16);
            item.UInt32N = default(UInt32?);
            item.UInt32N_Ranged = default(UInt32?);
            item.UInt32 = default(UInt32);
            item.UInt32_Ranged = default(UInt32);
            item.UInt64N = default(UInt64?);
            item.UInt64N_Ranged = default(UInt64?);
            item.UInt64 = default(UInt64);
            item.UInt64_Ranged = default(UInt64);
            item.UInt8N = default(Byte?);
            item.UInt8N_Ranged = default(Byte?);
            item.UInt8 = default(Byte);
            item.UInt8_Ranged = default(Byte);
            item.Enum = default(TestEnum);
            item.WildCard = default(Object);
            item.Ref = default(ObjectToRef);
            item.Ref_NotNull = default(ObjectToRef);
            item.RefGetter = default(IObjectToRefGetter);
            item.RefGetter_NotNull = default(IObjectToRefGetter);
            item.RefSetter = default(IObjectToRef);
            item.RefSetter_NotNull = default(IObjectToRef);
            item.List.Unset(cmds.ToUnsetParams());
            item.RefList.Unset(cmds.ToUnsetParams());
            item.Dict.Unset(cmds.ToUnsetParams());
            item.RefDict.Unset(cmds.ToUnsetParams());
            item.KeyRefDict.Unset(cmds.ToUnsetParams());
            item.ValRefDict.Unset(cmds.ToUnsetParams());
            item.DictKeyedValue.Unset(cmds.ToUnsetParams());
        }

        public static TestObject_RPC_Mask<bool> GetEqualsMask(
            this ITestObject_RPCGetter item,
            ITestObject_RPCGetter rhs)
        {
            var ret = new TestObject_RPC_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            this ITestObject_RPCGetter item,
            ITestObject_RPCGetter rhs,
            TestObject_RPC_Mask<bool> ret)
        {
            ret.BoolN = item.BoolN != rhs.BoolN;
            ret.Bool = item.Bool != rhs.Bool;
            ret.CharN = item.CharN != rhs.CharN;
            ret.Char = item.Char != rhs.Char;
            ret.DateTimeNull = item.DateTimeNull != rhs.DateTimeNull;
            ret.DateTime = item.DateTime != rhs.DateTime;
            ret.DoubleN = item.DoubleN != rhs.DoubleN;
            ret.DoubleN_Ranged = item.DoubleN_Ranged != rhs.DoubleN_Ranged;
            ret.Double = item.Double != rhs.Double;
            ret.Double_Ranged = item.Double_Ranged != rhs.Double_Ranged;
            ret.FloatN = item.FloatN != rhs.FloatN;
            ret.FloatN_Ranged = item.FloatN_Ranged != rhs.FloatN_Ranged;
            ret.Float = item.Float != rhs.Float;
            ret.Float_Ranged = item.Float_Ranged != rhs.Float_Ranged;
            ret.Int16N = item.Int16N != rhs.Int16N;
            ret.Int16N_Ranged = item.Int16N_Ranged != rhs.Int16N_Ranged;
            ret.Int16 = item.Int16 != rhs.Int16;
            ret.Int16_Ranged = item.Int16_Ranged != rhs.Int16_Ranged;
            ret.Int32N = item.Int32N != rhs.Int32N;
            ret.Int32N_Ranged = item.Int32N_Ranged != rhs.Int32N_Ranged;
            ret.Int32 = item.Int32 != rhs.Int32;
            ret.Int32_Ranged = item.Int32_Ranged != rhs.Int32_Ranged;
            ret.Int64N = item.Int64N != rhs.Int64N;
            ret.Int64N_Ranged = item.Int64N_Ranged != rhs.Int64N_Ranged;
            ret.Int64 = item.Int64 != rhs.Int64;
            ret.Int64_Ranged = item.Int64_Ranged != rhs.Int64_Ranged;
            ret.Int8N = item.Int8N != rhs.Int8N;
            ret.Int8N_Ranged = item.Int8N_Ranged != rhs.Int8N_Ranged;
            ret.Int8 = item.Int8 != rhs.Int8;
            ret.Int8_Ranged = item.Int8_Ranged != rhs.Int8_Ranged;
            ret.Unsafe = item.Unsafe != rhs.Unsafe;
            ret.P2IntN = item.P2IntN != rhs.P2IntN;
            ret.P2Int = item.P2Int != rhs.P2Int;
            ret.P3DoubleN = item.P3DoubleN != rhs.P3DoubleN;
            ret.P3Double = item.P3Double != rhs.P3Double;
            ret.P3IntN = item.P3IntN != rhs.P3IntN;
            ret.P3Int = item.P3Int != rhs.P3Int;
            ret.PercentN = item.PercentN != rhs.PercentN;
            ret.Percent = item.Percent != rhs.Percent;
            ret.RangeInt8N = item.RangeInt8N != rhs.RangeInt8N;
            ret.RangeInt8 = item.RangeInt8 != rhs.RangeInt8;
            ret.RangeInt16N = item.RangeInt16N != rhs.RangeInt16N;
            ret.RangeInt16 = item.RangeInt16 != rhs.RangeInt16;
            ret.RangeInt32N = item.RangeInt32N != rhs.RangeInt32N;
            ret.RangeInt32 = item.RangeInt32 != rhs.RangeInt32;
            ret.RangeInt64N = item.RangeInt64N != rhs.RangeInt64N;
            ret.RangeInt64 = item.RangeInt64 != rhs.RangeInt64;
            ret.RangeUInt8N = item.RangeUInt8N != rhs.RangeUInt8N;
            ret.RangeUInt8 = item.RangeUInt8 != rhs.RangeUInt8;
            ret.RangeUInt16N = item.RangeUInt16N != rhs.RangeUInt16N;
            ret.RangeUInt16 = item.RangeUInt16 != rhs.RangeUInt16;
            ret.RangeUInt32N = item.RangeUInt32N != rhs.RangeUInt32N;
            ret.RangeUInt32 = item.RangeUInt32 != rhs.RangeUInt32;
            ret.RangeUInt64N = item.RangeUInt64N != rhs.RangeUInt64N;
            ret.RangeUInt64 = item.RangeUInt64 != rhs.RangeUInt64;
            ret.String = item.String != rhs.String;
            ret.UDoubleN = item.UDoubleN != rhs.UDoubleN;
            ret.UDoubleN_Ranged = item.UDoubleN_Ranged != rhs.UDoubleN_Ranged;
            ret.UDouble = item.UDouble != rhs.UDouble;
            ret.UDouble_Ranged = item.UDouble_Ranged != rhs.UDouble_Ranged;
            ret.UInt16N = item.UInt16N != rhs.UInt16N;
            ret.UInt16N_Ranged = item.UInt16N_Ranged != rhs.UInt16N_Ranged;
            ret.UInt16 = item.UInt16 != rhs.UInt16;
            ret.UInt16_Ranged = item.UInt16_Ranged != rhs.UInt16_Ranged;
            ret.UInt32N = item.UInt32N != rhs.UInt32N;
            ret.UInt32N_Ranged = item.UInt32N_Ranged != rhs.UInt32N_Ranged;
            ret.UInt32 = item.UInt32 != rhs.UInt32;
            ret.UInt32_Ranged = item.UInt32_Ranged != rhs.UInt32_Ranged;
            ret.UInt64N = item.UInt64N != rhs.UInt64N;
            ret.UInt64N_Ranged = item.UInt64N_Ranged != rhs.UInt64N_Ranged;
            ret.UInt64 = item.UInt64 != rhs.UInt64;
            ret.UInt64_Ranged = item.UInt64_Ranged != rhs.UInt64_Ranged;
            ret.UInt8N = item.UInt8N != rhs.UInt8N;
            ret.UInt8N_Ranged = item.UInt8N_Ranged != rhs.UInt8N_Ranged;
            ret.UInt8 = item.UInt8 != rhs.UInt8;
            ret.UInt8_Ranged = item.UInt8_Ranged != rhs.UInt8_Ranged;
            ret.Enum = item.Enum != rhs.Enum;
            ret.WildCard = item.WildCard != rhs.WildCard;
            ret.Ref = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.Ref.Specific = ObjectToRefCommon.GetEqualsMask(item.Ref, rhs.Ref);
            ret.Ref.Overall = ret.Ref.Specific.AllEqual((b) => b);
            ret.Ref_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.Ref_NotNull.Specific = ObjectToRefCommon.GetEqualsMask(item.Ref_NotNull, rhs.Ref_NotNull);
            ret.Ref_NotNull.Overall = ret.Ref_NotNull.Specific.AllEqual((b) => b);
            ret.Ref_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.Ref_Singleton.Specific = ObjectToRefCommon.GetEqualsMask(item.Ref_Singleton, rhs.Ref_Singleton);
            ret.Ref_Singleton.Overall = ret.Ref_Singleton.Specific.AllEqual((b) => b);
            ret.RefGetter = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefGetter.Specific = ObjectToRefCommon.GetEqualsMask(item.RefGetter, rhs.RefGetter);
            ret.RefGetter.Overall = ret.RefGetter.Specific.AllEqual((b) => b);
            ret.RefGetter_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefGetter_NotNull.Specific = ObjectToRefCommon.GetEqualsMask(item.RefGetter_NotNull, rhs.RefGetter_NotNull);
            ret.RefGetter_NotNull.Overall = ret.RefGetter_NotNull.Specific.AllEqual((b) => b);
            ret.RefGetter_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefGetter_Singleton.Specific = ObjectToRefCommon.GetEqualsMask(item.RefGetter_Singleton, rhs.RefGetter_Singleton);
            ret.RefGetter_Singleton.Overall = ret.RefGetter_Singleton.Specific.AllEqual((b) => b);
            ret.RefSetter = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefSetter.Specific = ObjectToRefCommon.GetEqualsMask(item.RefSetter, rhs.RefSetter);
            ret.RefSetter.Overall = ret.RefSetter.Specific.AllEqual((b) => b);
            ret.RefSetter_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefSetter_NotNull.Specific = ObjectToRefCommon.GetEqualsMask(item.RefSetter_NotNull, rhs.RefSetter_NotNull);
            ret.RefSetter_NotNull.Overall = ret.RefSetter_NotNull.Specific.AllEqual((b) => b);
            ret.RefSetter_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefSetter_Singleton.Specific = ObjectToRefCommon.GetEqualsMask(item.RefSetter_Singleton, rhs.RefSetter_Singleton);
            ret.RefSetter_Singleton.Overall = ret.RefSetter_Singleton.Specific.AllEqual((b) => b);
            ret.List = new MaskItem<bool, IEnumerable<bool>>();
            ret.List.Specific = item.List.SelectAgainst<Boolean, bool>(rhs.List, ((l, r) => object.Equals(l, r)), out ret.List.Overall);
            ret.List.Overall = ret.List.Overall && ret.List.Specific.All((b) => b);
            ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
            ret.RefList.Specific = item.RefList.SelectAgainst<ObjectToRef, MaskItem<bool, ObjectToRef_Mask<bool>>>(rhs.RefList, ((l, r) =>
            {
                MaskItem<bool, ObjectToRef_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                itemRet.Specific = ObjectToRefCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.RefList.Overall);
            ret.RefList.Overall = ret.RefList.Overall && ret.RefList.Specific.All((b) => b.Overall);
            ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>();
            ret.Dict.Specific = item.Dict.SelectAgainst<KeyValuePair<String, Boolean>, KeyValuePair<bool, bool>>(rhs.Dict, ((l, r) => new KeyValuePair<bool, bool>(object.Equals(l.Key, r.Key), object.Equals(l.Value, r.Value))), out ret.Dict.Overall);
            ret.Dict.Overall = ret.Dict.Overall && ret.Dict.Specific.All((b) => b.Key && b.Value);
            ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
            ret.RefDict.Specific = item.RefDict.SelectAgainst<KeyValuePair<ObjectToRef, ObjectToRef>, KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>(rhs.RefDict, ((l, r) =>
            {
                MaskItem<bool, ObjectToRef_Mask<bool>> keyItemRet;
                MaskItem<bool, ObjectToRef_Mask<bool>> valItemRet;
                keyItemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                keyItemRet.Specific = ObjectToRefCommon.GetEqualsMask(l.Key, r.Key);
                keyItemRet.Overall = keyItemRet.Specific.AllEqual((b) => b);
                valItemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                valItemRet.Specific = ObjectToRefCommon.GetEqualsMask(l.Value, r.Value);
                valItemRet.Overall = valItemRet.Specific.AllEqual((b) => b);
                return new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>(keyItemRet, valItemRet);
            }
            ), out ret.RefDict.Overall);
            ret.RefDict.Overall = ret.RefDict.Overall && ret.RefDict.Specific.All((b) => b.Key.Overall && b.Value.Overall );
            ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>();
            ret.KeyRefDict.Specific = item.KeyRefDict.SelectAgainst<KeyValuePair<ObjectToRef, Boolean>, KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>(rhs.KeyRefDict, ((l, r) =>
            {
                MaskItem<bool, ObjectToRef_Mask<bool>> keyItemRet;
                bool valItemRet = object.Equals(l.Value, r.Value);
                keyItemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                keyItemRet.Specific = ObjectToRefCommon.GetEqualsMask(l.Key, r.Key);
                keyItemRet.Overall = keyItemRet.Specific.AllEqual((b) => b);
                return new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>(keyItemRet, valItemRet);
            }
            ), out ret.KeyRefDict.Overall);
            ret.KeyRefDict.Overall = ret.KeyRefDict.Overall && ret.KeyRefDict.Specific.All((b) => b.Key.Overall && b.Value);
            ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
            ret.ValRefDict.Specific = item.ValRefDict.SelectAgainst<KeyValuePair<String, ObjectToRef>, KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>(rhs.ValRefDict, ((l, r) =>
            {
                bool keyItemRet = object.Equals(l.Key, r.Key);
                MaskItem<bool, ObjectToRef_Mask<bool>> valItemRet;
                valItemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                valItemRet.Specific = ObjectToRefCommon.GetEqualsMask(l.Value, r.Value);
                valItemRet.Overall = valItemRet.Specific.AllEqual((b) => b);
                return new KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>(keyItemRet, valItemRet);
            }
            ), out ret.ValRefDict.Overall);
            ret.ValRefDict.Overall = ret.ValRefDict.Overall && ret.ValRefDict.Specific.All((b) => b.Key && b.Value.Overall);
            ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
            ret.DictKeyedValue.Specific = item.DictKeyedValue.Values.SelectAgainst<ObjectToRef, MaskItem<bool, ObjectToRef_Mask<bool>>>(rhs.DictKeyedValue.Values, ((l, r) =>
            {
                MaskItem<bool, ObjectToRef_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                itemRet.Specific = ObjectToRefCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.DictKeyedValue.Overall);
            ret.DictKeyedValue.Overall = ret.DictKeyedValue.Overall && ret.DictKeyedValue.Specific.All((b) => b.Overall);
        }

        #region XML Translation
        public static void Write_XML(
            ITestObject_RPCGetter item,
            Stream stream)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: false,
                    errorMask: out TestObject_RPC_ErrorMask errorMask);
            }
        }

        public static void Write_XML(
            ITestObject_RPCGetter item,
            Stream stream,
            out TestObject_RPC_ErrorMask errorMask)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: true,
                    errorMask: out errorMask);
            }
        }

        public static void Write_XML(
            ITestObject_RPCGetter item,
            XmlWriter writer,
            out TestObject_RPC_ErrorMask errorMask,
            string name = null)
        {
            Write_XML(
                writer: writer,
                name: name,
                item: item,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static void Write_XML(
            ITestObject_RPCGetter item,
            XmlWriter writer,
            string name)
        {
            Write_XML(
                writer: writer,
                name: name,
                item: item,
                doMasks: false,
                errorMask: out TestObject_RPC_ErrorMask errorMask);
        }

        public static void Write_XML(
            ITestObject_RPCGetter item,
            XmlWriter writer)
        {
            Write_XML(
                writer: writer,
                name: null,
                item: item,
                doMasks: false,
                errorMask: out TestObject_RPC_ErrorMask errorMask);
        }

        public static void Write_XML(
            XmlWriter writer,
            string name,
            ITestObject_RPCGetter item,
            bool doMasks,
            out TestObject_RPC_ErrorMask errorMask)
        {
            TestObject_RPC_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestObject_RPC_ErrorMask()) : default(Func<TestObject_RPC_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            string name,
            ITestObject_RPCGetter item,
            bool doMasks,
            Func<TestObject_RPC_ErrorMask> errorMask)
        {
            try
            {
                using (new ElementWrapper(writer, nameof(TestObject_RPC)))
                {
                    if (!string.IsNullOrEmpty(name))
                    {
                        writer.WriteAttributeString("name", name);
                    }
                    try
                    {
                        BooleanXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.BoolN),
                            item.BoolN);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.BoolN, ex);
                    }
                    try
                    {
                        BooleanXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Bool),
                            item.Bool);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Bool, ex);
                    }
                    try
                    {
                        CharXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.CharN),
                            item.CharN);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.CharN, ex);
                    }
                    try
                    {
                        CharXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Char),
                            item.Char);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Char, ex);
                    }
                    try
                    {
                        DateTimeXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DateTimeNull),
                            item.DateTimeNull);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.DateTimeNull, ex);
                    }
                    try
                    {
                        DateTimeXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DateTime),
                            item.DateTime);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.DateTime, ex);
                    }
                    try
                    {
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DoubleN),
                            item.DoubleN);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.DoubleN, ex);
                    }
                    try
                    {
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DoubleN_Ranged),
                            item.DoubleN_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.DoubleN_Ranged, ex);
                    }
                    try
                    {
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Double),
                            item.Double);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Double, ex);
                    }
                    try
                    {
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Double_Ranged),
                            item.Double_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Double_Ranged, ex);
                    }
                    try
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FloatN),
                            item.FloatN);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.FloatN, ex);
                    }
                    try
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FloatN_Ranged),
                            item.FloatN_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.FloatN_Ranged, ex);
                    }
                    try
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Float),
                            item.Float);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Float, ex);
                    }
                    try
                    {
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Float_Ranged),
                            item.Float_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Float_Ranged, ex);
                    }
                    try
                    {
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16N),
                            item.Int16N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int16N, ex);
                    }
                    try
                    {
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16N_Ranged),
                            item.Int16N_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int16N_Ranged, ex);
                    }
                    try
                    {
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16),
                            item.Int16);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int16, ex);
                    }
                    try
                    {
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16_Ranged),
                            item.Int16_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int16_Ranged, ex);
                    }
                    try
                    {
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32N),
                            item.Int32N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int32N, ex);
                    }
                    try
                    {
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32N_Ranged),
                            item.Int32N_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int32N_Ranged, ex);
                    }
                    try
                    {
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32),
                            item.Int32);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int32, ex);
                    }
                    try
                    {
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32_Ranged),
                            item.Int32_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int32_Ranged, ex);
                    }
                    try
                    {
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64N),
                            item.Int64N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int64N, ex);
                    }
                    try
                    {
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64N_Ranged),
                            item.Int64N_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int64N_Ranged, ex);
                    }
                    try
                    {
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64),
                            item.Int64);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int64, ex);
                    }
                    try
                    {
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64_Ranged),
                            item.Int64_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int64_Ranged, ex);
                    }
                    try
                    {
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8N),
                            item.Int8N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int8N, ex);
                    }
                    try
                    {
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8N_Ranged),
                            item.Int8N_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int8N_Ranged, ex);
                    }
                    try
                    {
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8),
                            item.Int8);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int8, ex);
                    }
                    try
                    {
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8_Ranged),
                            item.Int8_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Int8_Ranged, ex);
                    }
                    try
                    {
                        var wildType = item.Unsafe == null ? null : item.Unsafe.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Write(
                            writer,
                            nameof(item.Unsafe),
                            item.Unsafe,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.Unsafe, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Unsafe, ex);
                    }
                    try
                    {
                        P2IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P2IntN),
                            item.P2IntN);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.P2IntN, ex);
                    }
                    try
                    {
                        P2IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P2Int),
                            item.P2Int);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.P2Int, ex);
                    }
                    try
                    {
                        P3DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3DoubleN),
                            item.P3DoubleN);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.P3DoubleN, ex);
                    }
                    try
                    {
                        P3DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3Double),
                            item.P3Double);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.P3Double, ex);
                    }
                    try
                    {
                        P3IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3IntN),
                            item.P3IntN);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.P3IntN, ex);
                    }
                    try
                    {
                        P3IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3Int),
                            item.P3Int);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.P3Int, ex);
                    }
                    try
                    {
                        PercentXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.PercentN),
                            item.PercentN);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.PercentN, ex);
                    }
                    try
                    {
                        PercentXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Percent),
                            item.Percent);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Percent, ex);
                    }
                    try
                    {
                        RangeInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt8N),
                            item.RangeInt8N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeInt8N, ex);
                    }
                    try
                    {
                        RangeInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt8),
                            item.RangeInt8);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeInt8, ex);
                    }
                    try
                    {
                        RangeInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt16N),
                            item.RangeInt16N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeInt16N, ex);
                    }
                    try
                    {
                        RangeInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt16),
                            item.RangeInt16);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeInt16, ex);
                    }
                    try
                    {
                        RangeInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt32N),
                            item.RangeInt32N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeInt32N, ex);
                    }
                    try
                    {
                        RangeInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt32),
                            item.RangeInt32);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeInt32, ex);
                    }
                    try
                    {
                        RangeInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt64N),
                            item.RangeInt64N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeInt64N, ex);
                    }
                    try
                    {
                        RangeInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt64),
                            item.RangeInt64);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeInt64, ex);
                    }
                    try
                    {
                        RangeUInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt8N),
                            item.RangeUInt8N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeUInt8N, ex);
                    }
                    try
                    {
                        RangeUInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt8),
                            item.RangeUInt8);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeUInt8, ex);
                    }
                    try
                    {
                        RangeUInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt16N),
                            item.RangeUInt16N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeUInt16N, ex);
                    }
                    try
                    {
                        RangeUInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt16),
                            item.RangeUInt16);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeUInt16, ex);
                    }
                    try
                    {
                        RangeUInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt32N),
                            item.RangeUInt32N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeUInt32N, ex);
                    }
                    try
                    {
                        RangeUInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt32),
                            item.RangeUInt32);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeUInt32, ex);
                    }
                    try
                    {
                        RangeUInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt64N),
                            item.RangeUInt64N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeUInt64N, ex);
                    }
                    try
                    {
                        RangeUInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt64),
                            item.RangeUInt64);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RangeUInt64, ex);
                    }
                    try
                    {
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.String),
                            item.String);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.String, ex);
                    }
                    try
                    {
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDoubleN),
                            item.UDoubleN);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UDoubleN, ex);
                    }
                    try
                    {
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDoubleN_Ranged),
                            item.UDoubleN_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UDoubleN_Ranged, ex);
                    }
                    try
                    {
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDouble),
                            item.UDouble);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UDouble, ex);
                    }
                    try
                    {
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDouble_Ranged),
                            item.UDouble_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UDouble_Ranged, ex);
                    }
                    try
                    {
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16N),
                            item.UInt16N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt16N, ex);
                    }
                    try
                    {
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16N_Ranged),
                            item.UInt16N_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt16N_Ranged, ex);
                    }
                    try
                    {
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16),
                            item.UInt16);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt16, ex);
                    }
                    try
                    {
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16_Ranged),
                            item.UInt16_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt16_Ranged, ex);
                    }
                    try
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32N),
                            item.UInt32N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt32N, ex);
                    }
                    try
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32N_Ranged),
                            item.UInt32N_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt32N_Ranged, ex);
                    }
                    try
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32),
                            item.UInt32);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt32, ex);
                    }
                    try
                    {
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32_Ranged),
                            item.UInt32_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt32_Ranged, ex);
                    }
                    try
                    {
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64N),
                            item.UInt64N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt64N, ex);
                    }
                    try
                    {
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64N_Ranged),
                            item.UInt64N_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt64N_Ranged, ex);
                    }
                    try
                    {
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64),
                            item.UInt64);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt64, ex);
                    }
                    try
                    {
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64_Ranged),
                            item.UInt64_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt64_Ranged, ex);
                    }
                    try
                    {
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8N),
                            item.UInt8N);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt8N, ex);
                    }
                    try
                    {
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8N_Ranged),
                            item.UInt8N_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt8N_Ranged, ex);
                    }
                    try
                    {
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8),
                            item.UInt8);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt8, ex);
                    }
                    try
                    {
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8_Ranged),
                            item.UInt8_Ranged);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.UInt8_Ranged, ex);
                    }
                    try
                    {
                        EnumXmlTranslation<TestEnum>.Instance.Write(
                            writer,
                            nameof(item.Enum),
                            item.Enum);
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Enum, ex);
                    }
                    try
                    {
                        var wildType = item.WildCard == null ? null : item.WildCard.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Write(
                            writer,
                            nameof(item.WildCard),
                            item.WildCard,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.WildCard, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.WildCard, ex);
                    }
                    try
                    {
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.Ref,
                            name: nameof(item.Ref),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.Ref, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Ref, ex);
                    }
                    try
                    {
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.Ref_NotNull,
                            name: nameof(item.Ref_NotNull),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.Ref_NotNull, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Ref_NotNull, ex);
                    }
                    try
                    {
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.Ref_Singleton,
                            name: nameof(item.Ref_Singleton),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.Ref_Singleton, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Ref_Singleton, ex);
                    }
                    try
                    {
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefGetter,
                            name: nameof(item.RefGetter),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.RefGetter, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefGetter, ex);
                    }
                    try
                    {
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefGetter_NotNull,
                            name: nameof(item.RefGetter_NotNull),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.RefGetter_NotNull, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefGetter_NotNull, ex);
                    }
                    try
                    {
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefGetter_Singleton,
                            name: nameof(item.RefGetter_Singleton),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.RefGetter_Singleton, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefGetter_Singleton, ex);
                    }
                    try
                    {
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefSetter,
                            name: nameof(item.RefSetter),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.RefSetter, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefSetter, ex);
                    }
                    try
                    {
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefSetter_NotNull,
                            name: nameof(item.RefSetter_NotNull),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.RefSetter_NotNull, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefSetter_NotNull, ex);
                    }
                    try
                    {
                        ObjectToRefCommon.Write_XML(
                            writer: writer,
                            item: item.RefSetter_Singleton,
                            name: nameof(item.RefSetter_Singleton),
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.RefSetter_Singleton, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefSetter_Singleton, ex);
                    }
                    try
                    {
                        ListXmlTranslation<Boolean>.Instance.Write(
                            writer: writer,
                            name: nameof(item.List),
                            item: item.List,
                            doMasks: doMasks,
                            maskObj: out object errorMaskObj,
                            transl: (Boolean subitem, out object suberrorMask) =>
                            {
                                BooleanXmlTranslation.Instance.Write(
                                    writer,
                                    null,
                                    subitem);
                                suberrorMask = null;
                            }
                            );
                        if (errorMaskObj != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.List, errorMaskObj);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.List, ex);
                    }
                    try
                    {
                        ListXmlTranslation<ObjectToRef>.Instance.Write(
                            writer: writer,
                            name: nameof(item.RefList),
                            item: item.RefList,
                            doMasks: doMasks,
                            maskObj: out object errorMaskObj,
                            transl: (ObjectToRef subitem, out object suberrorMask) =>
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: subitem,
                                    name: null,
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask subsuberrorMask);
                                suberrorMask = subsuberrorMask;
                            }
                            );
                        if (errorMaskObj != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.RefList, errorMaskObj);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefList, ex);
                    }
                    try
                    {
                        var wildType = item.Dict == null ? null : item.Dict.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Write(
                            writer,
                            nameof(item.Dict),
                            item.Dict,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.Dict, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.Dict, ex);
                    }
                    try
                    {
                        var wildType = item.RefDict == null ? null : item.RefDict.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Write(
                            writer,
                            nameof(item.RefDict),
                            item.RefDict,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.RefDict, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.RefDict, ex);
                    }
                    try
                    {
                        var wildType = item.KeyRefDict == null ? null : item.KeyRefDict.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Write(
                            writer,
                            nameof(item.KeyRefDict),
                            item.KeyRefDict,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.KeyRefDict, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.KeyRefDict, ex);
                    }
                    try
                    {
                        var wildType = item.ValRefDict == null ? null : item.ValRefDict.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Write(
                            writer,
                            nameof(item.ValRefDict),
                            item.ValRefDict,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.ValRefDict, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.ValRefDict, ex);
                    }
                    try
                    {
                        var wildType = item.DictKeyedValue == null ? null : item.DictKeyedValue.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Write(
                            writer,
                            nameof(item.DictKeyedValue),
                            item.DictKeyedValue,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_RPC_FieldIndex.DictKeyedValue, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_RPC_FieldIndex.DictKeyedValue, ex);
                    }
                }
            }
            catch (Exception ex)
            {
                if (!doMasks) throw;
                errorMask().Overall = ex;
            }
        }
        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestObject_RPC_Mask<T> : IMask<T>
    {
        #region Members
        public T BoolN;
        public T Bool;
        public T CharN;
        public T Char;
        public T DateTimeNull;
        public T DateTime;
        public T DoubleN;
        public T DoubleN_Ranged;
        public T Double;
        public T Double_Ranged;
        public T FloatN;
        public T FloatN_Ranged;
        public T Float;
        public T Float_Ranged;
        public T Int16N;
        public T Int16N_Ranged;
        public T Int16;
        public T Int16_Ranged;
        public T Int32N;
        public T Int32N_Ranged;
        public T Int32;
        public T Int32_Ranged;
        public T Int64N;
        public T Int64N_Ranged;
        public T Int64;
        public T Int64_Ranged;
        public T Int8N;
        public T Int8N_Ranged;
        public T Int8;
        public T Int8_Ranged;
        public T Unsafe;
        public T P2IntN;
        public T P2Int;
        public T P3DoubleN;
        public T P3Double;
        public T P3IntN;
        public T P3Int;
        public T PercentN;
        public T Percent;
        public T RangeInt8N;
        public T RangeInt8;
        public T RangeInt16N;
        public T RangeInt16;
        public T RangeInt32N;
        public T RangeInt32;
        public T RangeInt64N;
        public T RangeInt64;
        public T RangeUInt8N;
        public T RangeUInt8;
        public T RangeUInt16N;
        public T RangeUInt16;
        public T RangeUInt32N;
        public T RangeUInt32;
        public T RangeUInt64N;
        public T RangeUInt64;
        public T String;
        public T UDoubleN;
        public T UDoubleN_Ranged;
        public T UDouble;
        public T UDouble_Ranged;
        public T UInt16N;
        public T UInt16N_Ranged;
        public T UInt16;
        public T UInt16_Ranged;
        public T UInt32N;
        public T UInt32N_Ranged;
        public T UInt32;
        public T UInt32_Ranged;
        public T UInt64N;
        public T UInt64N_Ranged;
        public T UInt64;
        public T UInt64_Ranged;
        public T UInt8N;
        public T UInt8N_Ranged;
        public T UInt8;
        public T UInt8_Ranged;
        public T Enum;
        public T WildCard;
        public MaskItem<T, ObjectToRef_Mask<T>> Ref { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_Singleton { get; set; }
        public MaskItem<T, IEnumerable<T>> List;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> RefList;
        public MaskItem<T, IEnumerable<KeyValuePair<T, T>>> Dict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>> RefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, T>>> KeyRefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<T, MaskItem<T, ObjectToRef_Mask<T>>>>> ValRefDict;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> DictKeyedValue;
        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.BoolN)) return false;
            if (!eval(this.Bool)) return false;
            if (!eval(this.CharN)) return false;
            if (!eval(this.Char)) return false;
            if (!eval(this.DateTimeNull)) return false;
            if (!eval(this.DateTime)) return false;
            if (!eval(this.DoubleN)) return false;
            if (!eval(this.DoubleN_Ranged)) return false;
            if (!eval(this.Double)) return false;
            if (!eval(this.Double_Ranged)) return false;
            if (!eval(this.FloatN)) return false;
            if (!eval(this.FloatN_Ranged)) return false;
            if (!eval(this.Float)) return false;
            if (!eval(this.Float_Ranged)) return false;
            if (!eval(this.Int16N)) return false;
            if (!eval(this.Int16N_Ranged)) return false;
            if (!eval(this.Int16)) return false;
            if (!eval(this.Int16_Ranged)) return false;
            if (!eval(this.Int32N)) return false;
            if (!eval(this.Int32N_Ranged)) return false;
            if (!eval(this.Int32)) return false;
            if (!eval(this.Int32_Ranged)) return false;
            if (!eval(this.Int64N)) return false;
            if (!eval(this.Int64N_Ranged)) return false;
            if (!eval(this.Int64)) return false;
            if (!eval(this.Int64_Ranged)) return false;
            if (!eval(this.Int8N)) return false;
            if (!eval(this.Int8N_Ranged)) return false;
            if (!eval(this.Int8)) return false;
            if (!eval(this.Int8_Ranged)) return false;
            if (!eval(this.Unsafe)) return false;
            if (!eval(this.P2IntN)) return false;
            if (!eval(this.P2Int)) return false;
            if (!eval(this.P3DoubleN)) return false;
            if (!eval(this.P3Double)) return false;
            if (!eval(this.P3IntN)) return false;
            if (!eval(this.P3Int)) return false;
            if (!eval(this.PercentN)) return false;
            if (!eval(this.Percent)) return false;
            if (!eval(this.RangeInt8N)) return false;
            if (!eval(this.RangeInt8)) return false;
            if (!eval(this.RangeInt16N)) return false;
            if (!eval(this.RangeInt16)) return false;
            if (!eval(this.RangeInt32N)) return false;
            if (!eval(this.RangeInt32)) return false;
            if (!eval(this.RangeInt64N)) return false;
            if (!eval(this.RangeInt64)) return false;
            if (!eval(this.RangeUInt8N)) return false;
            if (!eval(this.RangeUInt8)) return false;
            if (!eval(this.RangeUInt16N)) return false;
            if (!eval(this.RangeUInt16)) return false;
            if (!eval(this.RangeUInt32N)) return false;
            if (!eval(this.RangeUInt32)) return false;
            if (!eval(this.RangeUInt64N)) return false;
            if (!eval(this.RangeUInt64)) return false;
            if (!eval(this.String)) return false;
            if (!eval(this.UDoubleN)) return false;
            if (!eval(this.UDoubleN_Ranged)) return false;
            if (!eval(this.UDouble)) return false;
            if (!eval(this.UDouble_Ranged)) return false;
            if (!eval(this.UInt16N)) return false;
            if (!eval(this.UInt16N_Ranged)) return false;
            if (!eval(this.UInt16)) return false;
            if (!eval(this.UInt16_Ranged)) return false;
            if (!eval(this.UInt32N)) return false;
            if (!eval(this.UInt32N_Ranged)) return false;
            if (!eval(this.UInt32)) return false;
            if (!eval(this.UInt32_Ranged)) return false;
            if (!eval(this.UInt64N)) return false;
            if (!eval(this.UInt64N_Ranged)) return false;
            if (!eval(this.UInt64)) return false;
            if (!eval(this.UInt64_Ranged)) return false;
            if (!eval(this.UInt8N)) return false;
            if (!eval(this.UInt8N_Ranged)) return false;
            if (!eval(this.UInt8)) return false;
            if (!eval(this.UInt8_Ranged)) return false;
            if (!eval(this.Enum)) return false;
            if (!eval(this.WildCard)) return false;
            if (Ref != null)
            {
                if (!eval(this.Ref.Overall)) return false;
                if (Ref.Specific != null && !Ref.Specific.AllEqual(eval)) return false;
            }
            if (Ref_NotNull != null)
            {
                if (!eval(this.Ref_NotNull.Overall)) return false;
                if (Ref_NotNull.Specific != null && !Ref_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (Ref_Singleton != null)
            {
                if (!eval(this.Ref_Singleton.Overall)) return false;
                if (Ref_Singleton.Specific != null && !Ref_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter != null)
            {
                if (!eval(this.RefGetter.Overall)) return false;
                if (RefGetter.Specific != null && !RefGetter.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter_NotNull != null)
            {
                if (!eval(this.RefGetter_NotNull.Overall)) return false;
                if (RefGetter_NotNull.Specific != null && !RefGetter_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter_Singleton != null)
            {
                if (!eval(this.RefGetter_Singleton.Overall)) return false;
                if (RefGetter_Singleton.Specific != null && !RefGetter_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter != null)
            {
                if (!eval(this.RefSetter.Overall)) return false;
                if (RefSetter.Specific != null && !RefSetter.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter_NotNull != null)
            {
                if (!eval(this.RefSetter_NotNull.Overall)) return false;
                if (RefSetter_NotNull.Specific != null && !RefSetter_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter_Singleton != null)
            {
                if (!eval(this.RefSetter_Singleton.Overall)) return false;
                if (RefSetter_Singleton.Specific != null && !RefSetter_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (List != null)
            {
                if (!eval(this.List.Overall)) return false;
                if (List.Specific != null)
                {
                    foreach (var item in List.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (RefList != null)
            {
                if (!eval(this.RefList.Overall)) return false;
                if (RefList.Specific != null)
                {
                    foreach (var item in RefList.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (Dict != null)
            {
                if (!eval(this.Dict.Overall)) return false;
                if (Dict.Specific != null)
                {
                    foreach (var item in Dict.Specific)
                    {
                        if (!eval(item.Key)) return false;
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (RefDict != null)
            {
                if (!eval(this.RefDict.Overall)) return false;
                if (RefDict.Specific != null)
                {
                    foreach (var item in RefDict.Specific)
                    {
                        if (item.Key != null)
                        {
                            if (!eval(item.Key.Overall)) return false;
                            if (!item.Key.Specific?.AllEqual(eval) ?? false) return false;
                        }
                        if (item.Value != null)
                        {
                            if (!eval(item.Value.Overall)) return false;
                            if (!item.Value.Specific?.AllEqual(eval) ?? false) return false;
                        }
                    }
                }
            }
            if (KeyRefDict != null)
            {
                if (!eval(this.KeyRefDict.Overall)) return false;
                if (KeyRefDict.Specific != null)
                {
                    foreach (var item in KeyRefDict.Specific)
                    {
                        if (item.Key != null)
                        {
                            if (!eval(item.Key.Overall)) return false;
                            if (!item.Key.Specific?.AllEqual(eval) ?? false) return false;
                        }
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (ValRefDict != null)
            {
                if (!eval(this.ValRefDict.Overall)) return false;
                if (ValRefDict.Specific != null)
                {
                    foreach (var item in ValRefDict.Specific)
                    {
                        if (!eval(item.Key)) return false;
                        if (item.Value != null)
                        {
                            if (!eval(item.Value.Overall)) return false;
                            if (!item.Value.Specific?.AllEqual(eval) ?? false) return false;
                        }
                    }
                }
            }
            if (DictKeyedValue != null)
            {
                if (!eval(this.DictKeyedValue.Overall)) return false;
                if (DictKeyedValue.Specific != null)
                {
                    foreach (var item in DictKeyedValue.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestObject_RPC_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (BoolN != null)
                {
                    fg.AppendLine("BoolN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(BoolN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Bool != null)
                {
                    fg.AppendLine("Bool =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Bool.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (CharN != null)
                {
                    fg.AppendLine("CharN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(CharN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Char != null)
                {
                    fg.AppendLine("Char =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Char.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DateTimeNull != null)
                {
                    fg.AppendLine("DateTimeNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DateTimeNull.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DateTime != null)
                {
                    fg.AppendLine("DateTime =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DateTime.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DoubleN != null)
                {
                    fg.AppendLine("DoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DoubleN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DoubleN_Ranged != null)
                {
                    fg.AppendLine("DoubleN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DoubleN_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Double != null)
                {
                    fg.AppendLine("Double =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Double.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Double_Ranged != null)
                {
                    fg.AppendLine("Double_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Double_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (FloatN != null)
                {
                    fg.AppendLine("FloatN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(FloatN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (FloatN_Ranged != null)
                {
                    fg.AppendLine("FloatN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(FloatN_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Float != null)
                {
                    fg.AppendLine("Float =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Float.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Float_Ranged != null)
                {
                    fg.AppendLine("Float_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Float_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16N != null)
                {
                    fg.AppendLine("Int16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16N_Ranged != null)
                {
                    fg.AppendLine("Int16N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16 != null)
                {
                    fg.AppendLine("Int16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16_Ranged != null)
                {
                    fg.AppendLine("Int16_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32N != null)
                {
                    fg.AppendLine("Int32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32N_Ranged != null)
                {
                    fg.AppendLine("Int32N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32 != null)
                {
                    fg.AppendLine("Int32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32_Ranged != null)
                {
                    fg.AppendLine("Int32_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64N != null)
                {
                    fg.AppendLine("Int64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64N_Ranged != null)
                {
                    fg.AppendLine("Int64N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64 != null)
                {
                    fg.AppendLine("Int64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64_Ranged != null)
                {
                    fg.AppendLine("Int64_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8N != null)
                {
                    fg.AppendLine("Int8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8N_Ranged != null)
                {
                    fg.AppendLine("Int8N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8 != null)
                {
                    fg.AppendLine("Int8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8_Ranged != null)
                {
                    fg.AppendLine("Int8_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Unsafe != null)
                {
                    fg.AppendLine("Unsafe =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Unsafe.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P2IntN != null)
                {
                    fg.AppendLine("P2IntN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P2IntN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P2Int != null)
                {
                    fg.AppendLine("P2Int =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P2Int.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3DoubleN != null)
                {
                    fg.AppendLine("P3DoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3DoubleN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3Double != null)
                {
                    fg.AppendLine("P3Double =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3Double.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3IntN != null)
                {
                    fg.AppendLine("P3IntN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3IntN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3Int != null)
                {
                    fg.AppendLine("P3Int =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3Int.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (PercentN != null)
                {
                    fg.AppendLine("PercentN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(PercentN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Percent != null)
                {
                    fg.AppendLine("Percent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Percent.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt8N != null)
                {
                    fg.AppendLine("RangeInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt8 != null)
                {
                    fg.AppendLine("RangeInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt16N != null)
                {
                    fg.AppendLine("RangeInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt16 != null)
                {
                    fg.AppendLine("RangeInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt32N != null)
                {
                    fg.AppendLine("RangeInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt32 != null)
                {
                    fg.AppendLine("RangeInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt64N != null)
                {
                    fg.AppendLine("RangeInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt64 != null)
                {
                    fg.AppendLine("RangeInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt8N != null)
                {
                    fg.AppendLine("RangeUInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt8 != null)
                {
                    fg.AppendLine("RangeUInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt16N != null)
                {
                    fg.AppendLine("RangeUInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt16 != null)
                {
                    fg.AppendLine("RangeUInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt32N != null)
                {
                    fg.AppendLine("RangeUInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt32 != null)
                {
                    fg.AppendLine("RangeUInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt64N != null)
                {
                    fg.AppendLine("RangeUInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt64 != null)
                {
                    fg.AppendLine("RangeUInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (String != null)
                {
                    fg.AppendLine("String =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(String.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDoubleN != null)
                {
                    fg.AppendLine("UDoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDoubleN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDoubleN_Ranged != null)
                {
                    fg.AppendLine("UDoubleN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDoubleN_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDouble != null)
                {
                    fg.AppendLine("UDouble =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDouble.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDouble_Ranged != null)
                {
                    fg.AppendLine("UDouble_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDouble_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16N != null)
                {
                    fg.AppendLine("UInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16N_Ranged != null)
                {
                    fg.AppendLine("UInt16N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16 != null)
                {
                    fg.AppendLine("UInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16_Ranged != null)
                {
                    fg.AppendLine("UInt16_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32N != null)
                {
                    fg.AppendLine("UInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32N_Ranged != null)
                {
                    fg.AppendLine("UInt32N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32 != null)
                {
                    fg.AppendLine("UInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32_Ranged != null)
                {
                    fg.AppendLine("UInt32_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64N != null)
                {
                    fg.AppendLine("UInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64N_Ranged != null)
                {
                    fg.AppendLine("UInt64N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64 != null)
                {
                    fg.AppendLine("UInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64_Ranged != null)
                {
                    fg.AppendLine("UInt64_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8N != null)
                {
                    fg.AppendLine("UInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8N_Ranged != null)
                {
                    fg.AppendLine("UInt8N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8 != null)
                {
                    fg.AppendLine("UInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8_Ranged != null)
                {
                    fg.AppendLine("UInt8_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Enum != null)
                {
                    fg.AppendLine("Enum =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Enum.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (WildCard != null)
                {
                    fg.AppendLine("WildCard =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(WildCard.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Ref != null)
                {
                    fg.AppendLine("Ref =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref.Overall != null)
                        {
                            fg.AppendLine(Ref.Overall.ToString());
                        }
                        if (Ref.Specific != null)
                        {
                            Ref.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Ref_NotNull != null)
                {
                    fg.AppendLine("Ref_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref_NotNull.Overall != null)
                        {
                            fg.AppendLine(Ref_NotNull.Overall.ToString());
                        }
                        if (Ref_NotNull.Specific != null)
                        {
                            Ref_NotNull.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Ref_Singleton != null)
                {
                    fg.AppendLine("Ref_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref_Singleton.Overall != null)
                        {
                            fg.AppendLine(Ref_Singleton.Overall.ToString());
                        }
                        if (Ref_Singleton.Specific != null)
                        {
                            Ref_Singleton.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefGetter != null)
                {
                    fg.AppendLine("RefGetter =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefGetter.Overall != null)
                        {
                            fg.AppendLine(RefGetter.Overall.ToString());
                        }
                        if (RefGetter.Specific != null)
                        {
                            RefGetter.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefGetter_NotNull != null)
                {
                    fg.AppendLine("RefGetter_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefGetter_NotNull.Overall != null)
                        {
                            fg.AppendLine(RefGetter_NotNull.Overall.ToString());
                        }
                        if (RefGetter_NotNull.Specific != null)
                        {
                            RefGetter_NotNull.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefGetter_Singleton != null)
                {
                    fg.AppendLine("RefGetter_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefGetter_Singleton.Overall != null)
                        {
                            fg.AppendLine(RefGetter_Singleton.Overall.ToString());
                        }
                        if (RefGetter_Singleton.Specific != null)
                        {
                            RefGetter_Singleton.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefSetter != null)
                {
                    fg.AppendLine("RefSetter =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefSetter.Overall != null)
                        {
                            fg.AppendLine(RefSetter.Overall.ToString());
                        }
                        if (RefSetter.Specific != null)
                        {
                            RefSetter.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefSetter_NotNull != null)
                {
                    fg.AppendLine("RefSetter_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefSetter_NotNull.Overall != null)
                        {
                            fg.AppendLine(RefSetter_NotNull.Overall.ToString());
                        }
                        if (RefSetter_NotNull.Specific != null)
                        {
                            RefSetter_NotNull.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefSetter_Singleton != null)
                {
                    fg.AppendLine("RefSetter_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefSetter_Singleton.Overall != null)
                        {
                            fg.AppendLine(RefSetter_Singleton.Overall.ToString());
                        }
                        if (RefSetter_Singleton.Specific != null)
                        {
                            RefSetter_Singleton.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (List != null)
                {
                    fg.AppendLine("List =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (List.Overall != null)
                        {
                            fg.AppendLine(List.Overall.ToString());
                        }
                        if (List.Specific != null)
                        {
                            foreach (var subItem in List.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine(subItem.ToString());
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefList != null)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefList.Overall != null)
                        {
                            fg.AppendLine(RefList.Overall.ToString());
                        }
                        if (RefList.Specific != null)
                        {
                            foreach (var subItem in RefList.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    if (subItem.Overall != null)
                                    {
                                        fg.AppendLine(subItem.Overall.ToString());
                                    }
                                    if (subItem.Specific != null)
                                    {
                                        subItem.Specific.ToString(fg);
                                    }
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Dict != null)
                {
                    fg.AppendLine("Dict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Dict.Overall != null)
                        {
                            fg.AppendLine(Dict.Overall.ToString());
                        }
                        if (Dict.Specific != null)
                        {
                            foreach (var subItem in Dict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Key.ToString());
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Value.ToString());
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefDict != null)
                {
                    fg.AppendLine("RefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefDict.Overall != null)
                        {
                            fg.AppendLine(RefDict.Overall.ToString());
                        }
                        if (RefDict.Specific != null)
                        {
                            foreach (var subItem in RefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Key.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Key.Overall.ToString());
                                        }
                                        if (subItem.Key.Specific != null)
                                        {
                                            subItem.Key.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Value.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Value.Overall.ToString());
                                        }
                                        if (subItem.Value.Specific != null)
                                        {
                                            subItem.Value.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (KeyRefDict != null)
                {
                    fg.AppendLine("KeyRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (KeyRefDict.Overall != null)
                        {
                            fg.AppendLine(KeyRefDict.Overall.ToString());
                        }
                        if (KeyRefDict.Specific != null)
                        {
                            foreach (var subItem in KeyRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Key.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Key.Overall.ToString());
                                        }
                                        if (subItem.Key.Specific != null)
                                        {
                                            subItem.Key.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Value.ToString());
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (ValRefDict != null)
                {
                    fg.AppendLine("ValRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (ValRefDict.Overall != null)
                        {
                            fg.AppendLine(ValRefDict.Overall.ToString());
                        }
                        if (ValRefDict.Specific != null)
                        {
                            foreach (var subItem in ValRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Key.ToString());
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Value.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Value.Overall.ToString());
                                        }
                                        if (subItem.Value.Specific != null)
                                        {
                                            subItem.Value.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (DictKeyedValue != null)
                {
                    fg.AppendLine("DictKeyedValue =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (DictKeyedValue.Overall != null)
                        {
                            fg.AppendLine(DictKeyedValue.Overall.ToString());
                        }
                        if (DictKeyedValue.Specific != null)
                        {
                            foreach (var subItem in DictKeyedValue.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine(subItem.ToString());
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestObject_RPC_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception BoolN;
        public Exception Bool;
        public Exception CharN;
        public Exception Char;
        public Exception DateTimeNull;
        public Exception DateTime;
        public Exception DoubleN;
        public Exception DoubleN_Ranged;
        public Exception Double;
        public Exception Double_Ranged;
        public Exception FloatN;
        public Exception FloatN_Ranged;
        public Exception Float;
        public Exception Float_Ranged;
        public Exception Int16N;
        public Exception Int16N_Ranged;
        public Exception Int16;
        public Exception Int16_Ranged;
        public Exception Int32N;
        public Exception Int32N_Ranged;
        public Exception Int32;
        public Exception Int32_Ranged;
        public Exception Int64N;
        public Exception Int64N_Ranged;
        public Exception Int64;
        public Exception Int64_Ranged;
        public Exception Int8N;
        public Exception Int8N_Ranged;
        public Exception Int8;
        public Exception Int8_Ranged;
        public Exception Unsafe;
        public Exception P2IntN;
        public Exception P2Int;
        public Exception P3DoubleN;
        public Exception P3Double;
        public Exception P3IntN;
        public Exception P3Int;
        public Exception PercentN;
        public Exception Percent;
        public Exception RangeInt8N;
        public Exception RangeInt8;
        public Exception RangeInt16N;
        public Exception RangeInt16;
        public Exception RangeInt32N;
        public Exception RangeInt32;
        public Exception RangeInt64N;
        public Exception RangeInt64;
        public Exception RangeUInt8N;
        public Exception RangeUInt8;
        public Exception RangeUInt16N;
        public Exception RangeUInt16;
        public Exception RangeUInt32N;
        public Exception RangeUInt32;
        public Exception RangeUInt64N;
        public Exception RangeUInt64;
        public Exception String;
        public Exception UDoubleN;
        public Exception UDoubleN_Ranged;
        public Exception UDouble;
        public Exception UDouble_Ranged;
        public Exception UInt16N;
        public Exception UInt16N_Ranged;
        public Exception UInt16;
        public Exception UInt16_Ranged;
        public Exception UInt32N;
        public Exception UInt32N_Ranged;
        public Exception UInt32;
        public Exception UInt32_Ranged;
        public Exception UInt64N;
        public Exception UInt64N_Ranged;
        public Exception UInt64;
        public Exception UInt64_Ranged;
        public Exception UInt8N;
        public Exception UInt8N_Ranged;
        public Exception UInt8;
        public Exception UInt8_Ranged;
        public Exception Enum;
        public Exception WildCard;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_Singleton;
        public MaskItem<Exception, IEnumerable<Exception>> List;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> RefList;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> Dict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>> RefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>> KeyRefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>> ValRefDict;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> DictKeyedValue;
        #endregion

        #region IErrorMask
        public void SetNthException(ushort index, Exception ex)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                    this.BoolN = ex;
                    break;
                case TestObject_RPC_FieldIndex.Bool:
                    this.Bool = ex;
                    break;
                case TestObject_RPC_FieldIndex.CharN:
                    this.CharN = ex;
                    break;
                case TestObject_RPC_FieldIndex.Char:
                    this.Char = ex;
                    break;
                case TestObject_RPC_FieldIndex.DateTimeNull:
                    this.DateTimeNull = ex;
                    break;
                case TestObject_RPC_FieldIndex.DateTime:
                    this.DateTime = ex;
                    break;
                case TestObject_RPC_FieldIndex.DoubleN:
                    this.DoubleN = ex;
                    break;
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Double:
                    this.Double = ex;
                    break;
                case TestObject_RPC_FieldIndex.Double_Ranged:
                    this.Double_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.FloatN:
                    this.FloatN = ex;
                    break;
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Float:
                    this.Float = ex;
                    break;
                case TestObject_RPC_FieldIndex.Float_Ranged:
                    this.Float_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int16N:
                    this.Int16N = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int16:
                    this.Int16 = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int32N:
                    this.Int32N = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int32:
                    this.Int32 = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int64N:
                    this.Int64N = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int64:
                    this.Int64 = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int8N:
                    this.Int8N = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int8:
                    this.Int8 = ex;
                    break;
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Unsafe:
                    this.Unsafe = ex;
                    break;
                case TestObject_RPC_FieldIndex.P2IntN:
                    this.P2IntN = ex;
                    break;
                case TestObject_RPC_FieldIndex.P2Int:
                    this.P2Int = ex;
                    break;
                case TestObject_RPC_FieldIndex.P3DoubleN:
                    this.P3DoubleN = ex;
                    break;
                case TestObject_RPC_FieldIndex.P3Double:
                    this.P3Double = ex;
                    break;
                case TestObject_RPC_FieldIndex.P3IntN:
                    this.P3IntN = ex;
                    break;
                case TestObject_RPC_FieldIndex.P3Int:
                    this.P3Int = ex;
                    break;
                case TestObject_RPC_FieldIndex.PercentN:
                    this.PercentN = ex;
                    break;
                case TestObject_RPC_FieldIndex.Percent:
                    this.Percent = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8N:
                    this.RangeInt8N = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8:
                    this.RangeInt8 = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16N:
                    this.RangeInt16N = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16:
                    this.RangeInt16 = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32N:
                    this.RangeInt32N = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32:
                    this.RangeInt32 = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64N:
                    this.RangeInt64N = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64:
                    this.RangeInt64 = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = ex;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = ex;
                    break;
                case TestObject_RPC_FieldIndex.String:
                    this.String = ex;
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN:
                    this.UDoubleN = ex;
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.UDouble:
                    this.UDouble = ex;
                    break;
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt16N:
                    this.UInt16N = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt16:
                    this.UInt16 = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt32N:
                    this.UInt32N = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt32:
                    this.UInt32 = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt64N:
                    this.UInt64N = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt64:
                    this.UInt64 = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt8N:
                    this.UInt8N = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt8:
                    this.UInt8 = ex;
                    break;
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = ex;
                    break;
                case TestObject_RPC_FieldIndex.Enum:
                    this.Enum = ex;
                    break;
                case TestObject_RPC_FieldIndex.WildCard:
                    this.WildCard = ex;
                    break;
                case TestObject_RPC_FieldIndex.Ref:
                    this.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.RefGetter:
                    this.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.RefSetter:
                    this.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.List:
                    this.List = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.RefList:
                    this.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.Dict:
                    this.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.RefDict:
                    this.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.KeyRefDict:
                    this.KeyRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.ValRefDict:
                    this.ValRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            TestObject_RPC_FieldIndex enu = (TestObject_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_RPC_FieldIndex.BoolN:
                    this.BoolN = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Bool:
                    this.Bool = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.CharN:
                    this.CharN = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Char:
                    this.Char = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.DateTimeNull:
                    this.DateTimeNull = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.DateTime:
                    this.DateTime = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.DoubleN:
                    this.DoubleN = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Double:
                    this.Double = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Double_Ranged:
                    this.Double_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.FloatN:
                    this.FloatN = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Float:
                    this.Float = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Float_Ranged:
                    this.Float_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int16N:
                    this.Int16N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int16:
                    this.Int16 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int32N:
                    this.Int32N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int32:
                    this.Int32 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int64N:
                    this.Int64N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int64:
                    this.Int64 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int8N:
                    this.Int8N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int8:
                    this.Int8 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Unsafe:
                    this.Unsafe = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.P2IntN:
                    this.P2IntN = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.P2Int:
                    this.P2Int = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.P3DoubleN:
                    this.P3DoubleN = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.P3Double:
                    this.P3Double = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.P3IntN:
                    this.P3IntN = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.P3Int:
                    this.P3Int = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.PercentN:
                    this.PercentN = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Percent:
                    this.Percent = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8N:
                    this.RangeInt8N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt8:
                    this.RangeInt8 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16N:
                    this.RangeInt16N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt16:
                    this.RangeInt16 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32N:
                    this.RangeInt32N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt32:
                    this.RangeInt32 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64N:
                    this.RangeInt64N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeInt64:
                    this.RangeInt64 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.String:
                    this.String = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN:
                    this.UDoubleN = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UDouble:
                    this.UDouble = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt16N:
                    this.UInt16N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt16:
                    this.UInt16 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt32N:
                    this.UInt32N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt32:
                    this.UInt32 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt64N:
                    this.UInt64N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt64:
                    this.UInt64 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt8N:
                    this.UInt8N = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt8:
                    this.UInt8 = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Enum:
                    this.Enum = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.WildCard:
                    this.WildCard = (Exception)obj;
                    break;
                case TestObject_RPC_FieldIndex.Ref:
                    this.Ref = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_RPC_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_RPC_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefGetter:
                    this.RefGetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefSetter:
                    this.RefSetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_RPC_FieldIndex.List:
                    this.List = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefList:
                    this.RefList = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                case TestObject_RPC_FieldIndex.Dict:
                    this.Dict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>)obj;
                    break;
                case TestObject_RPC_FieldIndex.RefDict:
                    this.RefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_RPC_FieldIndex.KeyRefDict:
                    this.KeyRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>)obj;
                    break;
                case TestObject_RPC_FieldIndex.ValRefDict:
                    this.ValRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_RPC_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestObject_RPC_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (BoolN != null)
                {
                    fg.AppendLine("BoolN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(BoolN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Bool != null)
                {
                    fg.AppendLine("Bool =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Bool.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (CharN != null)
                {
                    fg.AppendLine("CharN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(CharN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Char != null)
                {
                    fg.AppendLine("Char =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Char.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DateTimeNull != null)
                {
                    fg.AppendLine("DateTimeNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DateTimeNull.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DateTime != null)
                {
                    fg.AppendLine("DateTime =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DateTime.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DoubleN != null)
                {
                    fg.AppendLine("DoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DoubleN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DoubleN_Ranged != null)
                {
                    fg.AppendLine("DoubleN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DoubleN_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Double != null)
                {
                    fg.AppendLine("Double =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Double.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Double_Ranged != null)
                {
                    fg.AppendLine("Double_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Double_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (FloatN != null)
                {
                    fg.AppendLine("FloatN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(FloatN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (FloatN_Ranged != null)
                {
                    fg.AppendLine("FloatN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(FloatN_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Float != null)
                {
                    fg.AppendLine("Float =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Float.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Float_Ranged != null)
                {
                    fg.AppendLine("Float_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Float_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16N != null)
                {
                    fg.AppendLine("Int16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16N_Ranged != null)
                {
                    fg.AppendLine("Int16N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16 != null)
                {
                    fg.AppendLine("Int16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16_Ranged != null)
                {
                    fg.AppendLine("Int16_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32N != null)
                {
                    fg.AppendLine("Int32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32N_Ranged != null)
                {
                    fg.AppendLine("Int32N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32 != null)
                {
                    fg.AppendLine("Int32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32_Ranged != null)
                {
                    fg.AppendLine("Int32_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64N != null)
                {
                    fg.AppendLine("Int64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64N_Ranged != null)
                {
                    fg.AppendLine("Int64N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64 != null)
                {
                    fg.AppendLine("Int64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64_Ranged != null)
                {
                    fg.AppendLine("Int64_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8N != null)
                {
                    fg.AppendLine("Int8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8N_Ranged != null)
                {
                    fg.AppendLine("Int8N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8 != null)
                {
                    fg.AppendLine("Int8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8_Ranged != null)
                {
                    fg.AppendLine("Int8_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Unsafe != null)
                {
                    fg.AppendLine("Unsafe =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Unsafe.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P2IntN != null)
                {
                    fg.AppendLine("P2IntN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P2IntN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P2Int != null)
                {
                    fg.AppendLine("P2Int =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P2Int.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3DoubleN != null)
                {
                    fg.AppendLine("P3DoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3DoubleN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3Double != null)
                {
                    fg.AppendLine("P3Double =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3Double.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3IntN != null)
                {
                    fg.AppendLine("P3IntN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3IntN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3Int != null)
                {
                    fg.AppendLine("P3Int =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3Int.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (PercentN != null)
                {
                    fg.AppendLine("PercentN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(PercentN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Percent != null)
                {
                    fg.AppendLine("Percent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Percent.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt8N != null)
                {
                    fg.AppendLine("RangeInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt8 != null)
                {
                    fg.AppendLine("RangeInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt16N != null)
                {
                    fg.AppendLine("RangeInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt16 != null)
                {
                    fg.AppendLine("RangeInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt32N != null)
                {
                    fg.AppendLine("RangeInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt32 != null)
                {
                    fg.AppendLine("RangeInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt64N != null)
                {
                    fg.AppendLine("RangeInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt64 != null)
                {
                    fg.AppendLine("RangeInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt8N != null)
                {
                    fg.AppendLine("RangeUInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt8 != null)
                {
                    fg.AppendLine("RangeUInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt16N != null)
                {
                    fg.AppendLine("RangeUInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt16 != null)
                {
                    fg.AppendLine("RangeUInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt32N != null)
                {
                    fg.AppendLine("RangeUInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt32 != null)
                {
                    fg.AppendLine("RangeUInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt64N != null)
                {
                    fg.AppendLine("RangeUInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt64 != null)
                {
                    fg.AppendLine("RangeUInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (String != null)
                {
                    fg.AppendLine("String =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(String.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDoubleN != null)
                {
                    fg.AppendLine("UDoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDoubleN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDoubleN_Ranged != null)
                {
                    fg.AppendLine("UDoubleN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDoubleN_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDouble != null)
                {
                    fg.AppendLine("UDouble =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDouble.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDouble_Ranged != null)
                {
                    fg.AppendLine("UDouble_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDouble_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16N != null)
                {
                    fg.AppendLine("UInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16N_Ranged != null)
                {
                    fg.AppendLine("UInt16N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16 != null)
                {
                    fg.AppendLine("UInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16_Ranged != null)
                {
                    fg.AppendLine("UInt16_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32N != null)
                {
                    fg.AppendLine("UInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32N_Ranged != null)
                {
                    fg.AppendLine("UInt32N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32 != null)
                {
                    fg.AppendLine("UInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32_Ranged != null)
                {
                    fg.AppendLine("UInt32_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64N != null)
                {
                    fg.AppendLine("UInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64N_Ranged != null)
                {
                    fg.AppendLine("UInt64N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64 != null)
                {
                    fg.AppendLine("UInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64_Ranged != null)
                {
                    fg.AppendLine("UInt64_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8N != null)
                {
                    fg.AppendLine("UInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8N_Ranged != null)
                {
                    fg.AppendLine("UInt8N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8 != null)
                {
                    fg.AppendLine("UInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8_Ranged != null)
                {
                    fg.AppendLine("UInt8_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Enum != null)
                {
                    fg.AppendLine("Enum =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Enum.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (WildCard != null)
                {
                    fg.AppendLine("WildCard =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(WildCard.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Ref != null)
                {
                    fg.AppendLine("Ref =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref.Overall != null)
                        {
                            fg.AppendLine(Ref.Overall.ToString());
                        }
                        if (Ref.Specific != null)
                        {
                            Ref.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Ref_NotNull != null)
                {
                    fg.AppendLine("Ref_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref_NotNull.Overall != null)
                        {
                            fg.AppendLine(Ref_NotNull.Overall.ToString());
                        }
                        if (Ref_NotNull.Specific != null)
                        {
                            Ref_NotNull.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Ref_Singleton != null)
                {
                    fg.AppendLine("Ref_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref_Singleton.Overall != null)
                        {
                            fg.AppendLine(Ref_Singleton.Overall.ToString());
                        }
                        if (Ref_Singleton.Specific != null)
                        {
                            Ref_Singleton.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefGetter != null)
                {
                    fg.AppendLine("RefGetter =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefGetter.Overall != null)
                        {
                            fg.AppendLine(RefGetter.Overall.ToString());
                        }
                        if (RefGetter.Specific != null)
                        {
                            RefGetter.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefGetter_NotNull != null)
                {
                    fg.AppendLine("RefGetter_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefGetter_NotNull.Overall != null)
                        {
                            fg.AppendLine(RefGetter_NotNull.Overall.ToString());
                        }
                        if (RefGetter_NotNull.Specific != null)
                        {
                            RefGetter_NotNull.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefGetter_Singleton != null)
                {
                    fg.AppendLine("RefGetter_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefGetter_Singleton.Overall != null)
                        {
                            fg.AppendLine(RefGetter_Singleton.Overall.ToString());
                        }
                        if (RefGetter_Singleton.Specific != null)
                        {
                            RefGetter_Singleton.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefSetter != null)
                {
                    fg.AppendLine("RefSetter =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefSetter.Overall != null)
                        {
                            fg.AppendLine(RefSetter.Overall.ToString());
                        }
                        if (RefSetter.Specific != null)
                        {
                            RefSetter.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefSetter_NotNull != null)
                {
                    fg.AppendLine("RefSetter_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefSetter_NotNull.Overall != null)
                        {
                            fg.AppendLine(RefSetter_NotNull.Overall.ToString());
                        }
                        if (RefSetter_NotNull.Specific != null)
                        {
                            RefSetter_NotNull.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefSetter_Singleton != null)
                {
                    fg.AppendLine("RefSetter_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefSetter_Singleton.Overall != null)
                        {
                            fg.AppendLine(RefSetter_Singleton.Overall.ToString());
                        }
                        if (RefSetter_Singleton.Specific != null)
                        {
                            RefSetter_Singleton.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (List != null)
                {
                    fg.AppendLine("List =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (List.Overall != null)
                        {
                            fg.AppendLine(List.Overall.ToString());
                        }
                        if (List.Specific != null)
                        {
                            foreach (var subItem in List.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine(subItem.ToString());
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefList != null)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefList.Overall != null)
                        {
                            fg.AppendLine(RefList.Overall.ToString());
                        }
                        if (RefList.Specific != null)
                        {
                            foreach (var subItem in RefList.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    if (subItem.Overall != null)
                                    {
                                        fg.AppendLine(subItem.Overall.ToString());
                                    }
                                    if (subItem.Specific != null)
                                    {
                                        subItem.Specific.ToString(fg);
                                    }
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Dict != null)
                {
                    fg.AppendLine("Dict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Dict.Overall != null)
                        {
                            fg.AppendLine(Dict.Overall.ToString());
                        }
                        if (Dict.Specific != null)
                        {
                            foreach (var subItem in Dict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Key.ToString());
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Value.ToString());
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefDict != null)
                {
                    fg.AppendLine("RefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefDict.Overall != null)
                        {
                            fg.AppendLine(RefDict.Overall.ToString());
                        }
                        if (RefDict.Specific != null)
                        {
                            foreach (var subItem in RefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Key.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Key.Overall.ToString());
                                        }
                                        if (subItem.Key.Specific != null)
                                        {
                                            subItem.Key.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Value.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Value.Overall.ToString());
                                        }
                                        if (subItem.Value.Specific != null)
                                        {
                                            subItem.Value.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (KeyRefDict != null)
                {
                    fg.AppendLine("KeyRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (KeyRefDict.Overall != null)
                        {
                            fg.AppendLine(KeyRefDict.Overall.ToString());
                        }
                        if (KeyRefDict.Specific != null)
                        {
                            foreach (var subItem in KeyRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Key.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Key.Overall.ToString());
                                        }
                                        if (subItem.Key.Specific != null)
                                        {
                                            subItem.Key.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Value.ToString());
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (ValRefDict != null)
                {
                    fg.AppendLine("ValRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (ValRefDict.Overall != null)
                        {
                            fg.AppendLine(ValRefDict.Overall.ToString());
                        }
                        if (ValRefDict.Specific != null)
                        {
                            foreach (var subItem in ValRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Key.ToString());
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Value.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Value.Overall.ToString());
                                        }
                                        if (subItem.Value.Specific != null)
                                        {
                                            subItem.Value.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (DictKeyedValue != null)
                {
                    fg.AppendLine("DictKeyedValue =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (DictKeyedValue.Overall != null)
                        {
                            fg.AppendLine(DictKeyedValue.Overall.ToString());
                        }
                        if (DictKeyedValue.Specific != null)
                        {
                            foreach (var subItem in DictKeyedValue.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine(subItem.ToString());
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }
    public class TestObject_RPC_CopyMask
    {
        #region Members
        public bool BoolN;
        public bool Bool;
        public bool CharN;
        public bool Char;
        public bool DateTimeNull;
        public bool DateTime;
        public bool DoubleN;
        public bool DoubleN_Ranged;
        public bool Double;
        public bool Double_Ranged;
        public bool FloatN;
        public bool FloatN_Ranged;
        public bool Float;
        public bool Float_Ranged;
        public bool Int16N;
        public bool Int16N_Ranged;
        public bool Int16;
        public bool Int16_Ranged;
        public bool Int32N;
        public bool Int32N_Ranged;
        public bool Int32;
        public bool Int32_Ranged;
        public bool Int64N;
        public bool Int64N_Ranged;
        public bool Int64;
        public bool Int64_Ranged;
        public bool Int8N;
        public bool Int8N_Ranged;
        public bool Int8;
        public bool Int8_Ranged;
        public bool Unsafe;
        public bool P2IntN;
        public bool P2Int;
        public bool P3DoubleN;
        public bool P3Double;
        public bool P3IntN;
        public bool P3Int;
        public bool PercentN;
        public bool Percent;
        public bool RangeInt8N;
        public bool RangeInt8;
        public bool RangeInt16N;
        public bool RangeInt16;
        public bool RangeInt32N;
        public bool RangeInt32;
        public bool RangeInt64N;
        public bool RangeInt64;
        public bool RangeUInt8N;
        public bool RangeUInt8;
        public bool RangeUInt16N;
        public bool RangeUInt16;
        public bool RangeUInt32N;
        public bool RangeUInt32;
        public bool RangeUInt64N;
        public bool RangeUInt64;
        public bool String;
        public bool UDoubleN;
        public bool UDoubleN_Ranged;
        public bool UDouble;
        public bool UDouble_Ranged;
        public bool UInt16N;
        public bool UInt16N_Ranged;
        public bool UInt16;
        public bool UInt16_Ranged;
        public bool UInt32N;
        public bool UInt32N_Ranged;
        public bool UInt32;
        public bool UInt32_Ranged;
        public bool UInt64N;
        public bool UInt64N_Ranged;
        public bool UInt64;
        public bool UInt64_Ranged;
        public bool UInt8N;
        public bool UInt8N_Ranged;
        public bool UInt8;
        public bool UInt8_Ranged;
        public bool Enum;
        public bool WildCard;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> Ref_Singleton;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter_NotNull;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> RefSetter_Singleton;
        public CopyOption List;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefList;
        public bool Dict;
        public MaskItem<bool, KeyValuePair<(RefCopyType Type, ObjectToRef_CopyMask Mask), (RefCopyType Type, ObjectToRef_CopyMask Mask)>> RefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> KeyRefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> ValRefDict;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> DictKeyedValue;
        #endregion

    }
    #endregion


    #endregion

}
