/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Internals;
using Loqui.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;

namespace Loqui.Tests
{
    #region Class
    public partial class TestObject_Derivative : ITestObject_Derivative, ILoquiObjectSetter, IEquatable<TestObject_Derivative>
    {
        ILoquiRegistration ILoquiObject.Registration => TestObject_Derivative_Registration.Instance;
        public static TestObject_Derivative_Registration Registration => TestObject_Derivative_Registration.Instance;

        public TestObject_Derivative()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #region BoolN
        public Boolean? BoolN { get; protected set; }
        #endregion
        #region Bool
        public Boolean Bool { get; protected set; }
        #endregion
        #region CharN
        public Char? CharN { get; protected set; }
        #endregion
        #region Char
        public Char Char { get; protected set; }
        #endregion
        #region DateTimeNull
        public DateTime? DateTimeNull { get; protected set; }
        #endregion
        #region DateTime
        public DateTime DateTime { get; protected set; }
        #endregion
        #region DoubleN
        public Double? DoubleN { get; protected set; }
        #endregion
        #region DoubleN_Ranged
        private Double? _DoubleN_Ranged;
        public Double? DoubleN_Ranged
        {
            get => _DoubleN_Ranged;
            protected set
            {
                this._DoubleN_Ranged = value?.PutInRange(DoubleN_Ranged_Range.Min, DoubleN_Ranged_Range.Max);
            }
        }
        public static RangeDouble DoubleN_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region Double
        public Double Double { get; protected set; }
        #endregion
        #region Double_Ranged
        private Double _Double_Ranged;
        public Double Double_Ranged
        {
            get => _Double_Ranged;
            protected set
            {
                this._Double_Ranged = value.PutInRange(Double_Ranged_Range.Min, Double_Ranged_Range.Max);
            }
        }
        public static RangeDouble Double_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region FloatN
        public Single? FloatN { get; protected set; }
        #endregion
        #region FloatN_Ranged
        private Single? _FloatN_Ranged;
        public Single? FloatN_Ranged
        {
            get => _FloatN_Ranged;
            protected set
            {
                this._FloatN_Ranged = value?.PutInRange(FloatN_Ranged_Range.Min, FloatN_Ranged_Range.Max);
            }
        }
        public static RangeFloat FloatN_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Float
        public Single Float { get; protected set; }
        #endregion
        #region Float_Ranged
        private Single _Float_Ranged;
        public Single Float_Ranged
        {
            get => _Float_Ranged;
            protected set
            {
                this._Float_Ranged = value.PutInRange(Float_Ranged_Range.Min, Float_Ranged_Range.Max);
            }
        }
        public static RangeFloat Float_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Int16N
        public Int16? Int16N { get; protected set; }
        #endregion
        #region Int16N_Ranged
        private Int16? _Int16N_Ranged;
        public Int16? Int16N_Ranged
        {
            get => _Int16N_Ranged;
            protected set
            {
                this._Int16N_Ranged = value?.PutInRange(Int16N_Ranged_Range.Min, Int16N_Ranged_Range.Max);
            }
        }
        public static RangeInt16 Int16N_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int16
        public Int16 Int16 { get; protected set; }
        #endregion
        #region Int16_Ranged
        private Int16 _Int16_Ranged;
        public Int16 Int16_Ranged
        {
            get => _Int16_Ranged;
            protected set
            {
                this._Int16_Ranged = value.PutInRange(Int16_Ranged_Range.Min, Int16_Ranged_Range.Max);
            }
        }
        public static RangeInt16 Int16_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int32N
        public Int32? Int32N { get; protected set; }
        #endregion
        #region Int32N_Ranged
        private Int32? _Int32N_Ranged;
        public Int32? Int32N_Ranged
        {
            get => _Int32N_Ranged;
            protected set
            {
                this._Int32N_Ranged = value?.PutInRange(Int32N_Ranged_Range.Min, Int32N_Ranged_Range.Max);
            }
        }
        public static RangeInt32 Int32N_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int32
        public Int32 Int32 { get; protected set; }
        #endregion
        #region Int32_Ranged
        private Int32 _Int32_Ranged;
        public Int32 Int32_Ranged
        {
            get => _Int32_Ranged;
            protected set
            {
                this._Int32_Ranged = value.PutInRange(Int32_Ranged_Range.Min, Int32_Ranged_Range.Max);
            }
        }
        public static RangeInt32 Int32_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int64N
        public Int64? Int64N { get; protected set; }
        #endregion
        #region Int64N_Ranged
        private Int64? _Int64N_Ranged;
        public Int64? Int64N_Ranged
        {
            get => _Int64N_Ranged;
            protected set
            {
                this._Int64N_Ranged = value?.PutInRange(Int64N_Ranged_Range.Min, Int64N_Ranged_Range.Max);
            }
        }
        public static RangeInt64 Int64N_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int64
        public Int64 Int64 { get; protected set; }
        #endregion
        #region Int64_Ranged
        private Int64 _Int64_Ranged;
        public Int64 Int64_Ranged
        {
            get => _Int64_Ranged;
            protected set
            {
                this._Int64_Ranged = value.PutInRange(Int64_Ranged_Range.Min, Int64_Ranged_Range.Max);
            }
        }
        public static RangeInt64 Int64_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int8N
        public SByte? Int8N { get; protected set; }
        #endregion
        #region Int8N_Ranged
        private SByte? _Int8N_Ranged;
        public SByte? Int8N_Ranged
        {
            get => _Int8N_Ranged;
            protected set
            {
                this._Int8N_Ranged = value?.PutInRange(Int8N_Ranged_Range.Min, Int8N_Ranged_Range.Max);
            }
        }
        public static RangeInt8 Int8N_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Int8
        public SByte Int8 { get; protected set; }
        #endregion
        #region Int8_Ranged
        private SByte _Int8_Ranged;
        public SByte Int8_Ranged
        {
            get => _Int8_Ranged;
            protected set
            {
                this._Int8_Ranged = value.PutInRange(Int8_Ranged_Range.Min, Int8_Ranged_Range.Max);
            }
        }
        public static RangeInt8 Int8_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Unsafe
        public bool Unsafe { get; protected set; }
        #endregion
        #region P2IntN
        public P2Int? P2IntN { get; protected set; }
        #endregion
        #region P2Int
        public P2Int P2Int { get; protected set; }
        #endregion
        #region P3DoubleN
        public P3Double? P3DoubleN { get; protected set; }
        #endregion
        #region P3Double
        public P3Double P3Double { get; protected set; }
        #endregion
        #region P3IntN
        public P3Int? P3IntN { get; protected set; }
        #endregion
        #region P3Int
        public P3Int P3Int { get; protected set; }
        #endregion
        #region PercentN
        public Percent? PercentN { get; protected set; }
        #endregion
        #region Percent
        public Percent Percent { get; protected set; }
        #endregion
        #region RangeInt8N
        public RangeInt8? RangeInt8N { get; protected set; }
        #endregion
        #region RangeInt8
        public RangeInt8 RangeInt8 { get; protected set; }
        #endregion
        #region RangeInt16N
        public RangeInt16? RangeInt16N { get; protected set; }
        #endregion
        #region RangeInt16
        public RangeInt16 RangeInt16 { get; protected set; }
        #endregion
        #region RangeInt32N
        public RangeInt32? RangeInt32N { get; protected set; }
        #endregion
        #region RangeInt32
        public RangeInt32 RangeInt32 { get; protected set; }
        #endregion
        #region RangeInt64N
        public RangeInt64? RangeInt64N { get; protected set; }
        #endregion
        #region RangeInt64
        public RangeInt64 RangeInt64 { get; protected set; }
        #endregion
        #region RangeUInt8N
        public RangeUInt8? RangeUInt8N { get; protected set; }
        #endregion
        #region RangeUInt8
        public RangeUInt8 RangeUInt8 { get; protected set; }
        #endregion
        #region RangeUInt16N
        public RangeUInt16? RangeUInt16N { get; protected set; }
        #endregion
        #region RangeUInt16
        public RangeUInt16 RangeUInt16 { get; protected set; }
        #endregion
        #region RangeUInt32N
        public RangeUInt32? RangeUInt32N { get; protected set; }
        #endregion
        #region RangeUInt32
        public RangeUInt32 RangeUInt32 { get; protected set; }
        #endregion
        #region RangeUInt64N
        public RangeUInt64? RangeUInt64N { get; protected set; }
        #endregion
        #region RangeUInt64
        public RangeUInt64 RangeUInt64 { get; protected set; }
        #endregion
        #region String
        public String String { get; protected set; }
        #endregion
        #region UDoubleN
        public UDouble? UDoubleN { get; protected set; }
        #endregion
        #region UDoubleN_Ranged
        private UDouble? _UDoubleN_Ranged;
        public UDouble? UDoubleN_Ranged
        {
            get => _UDoubleN_Ranged;
            protected set
            {
                this._UDoubleN_Ranged = value?.PutInRange(UDoubleN_Ranged_Range.Min, UDoubleN_Ranged_Range.Max);
            }
        }
        public static RangeUDouble UDoubleN_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UDouble
        public UDouble UDouble { get; protected set; }
        #endregion
        #region UDouble_Ranged
        private UDouble _UDouble_Ranged;
        public UDouble UDouble_Ranged
        {
            get => _UDouble_Ranged;
            protected set
            {
                this._UDouble_Ranged = value.PutInRange(UDouble_Ranged_Range.Min, UDouble_Ranged_Range.Max);
            }
        }
        public static RangeUDouble UDouble_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UInt16N
        public UInt16? UInt16N { get; protected set; }
        #endregion
        #region UInt16N_Ranged
        private UInt16? _UInt16N_Ranged;
        public UInt16? UInt16N_Ranged
        {
            get => _UInt16N_Ranged;
            protected set
            {
                this._UInt16N_Ranged = value?.PutInRange(UInt16N_Ranged_Range.Min, UInt16N_Ranged_Range.Max);
            }
        }
        public static RangeUInt16 UInt16N_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt16
        public UInt16 UInt16 { get; protected set; }
        #endregion
        #region UInt16_Ranged
        private UInt16 _UInt16_Ranged;
        public UInt16 UInt16_Ranged
        {
            get => _UInt16_Ranged;
            protected set
            {
                this._UInt16_Ranged = value.PutInRange(UInt16_Ranged_Range.Min, UInt16_Ranged_Range.Max);
            }
        }
        public static RangeUInt16 UInt16_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt32N
        public UInt32? UInt32N { get; protected set; }
        #endregion
        #region UInt32N_Ranged
        private UInt32? _UInt32N_Ranged;
        public UInt32? UInt32N_Ranged
        {
            get => _UInt32N_Ranged;
            protected set
            {
                this._UInt32N_Ranged = value?.PutInRange(UInt32N_Ranged_Range.Min, UInt32N_Ranged_Range.Max);
            }
        }
        public static RangeUInt32 UInt32N_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt32
        public UInt32 UInt32 { get; protected set; }
        #endregion
        #region UInt32_Ranged
        private UInt32 _UInt32_Ranged;
        public UInt32 UInt32_Ranged
        {
            get => _UInt32_Ranged;
            protected set
            {
                this._UInt32_Ranged = value.PutInRange(UInt32_Ranged_Range.Min, UInt32_Ranged_Range.Max);
            }
        }
        public static RangeUInt32 UInt32_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt64N
        public UInt64? UInt64N { get; protected set; }
        #endregion
        #region UInt64N_Ranged
        private UInt64? _UInt64N_Ranged;
        public UInt64? UInt64N_Ranged
        {
            get => _UInt64N_Ranged;
            protected set
            {
                this._UInt64N_Ranged = value?.PutInRange(UInt64N_Ranged_Range.Min, UInt64N_Ranged_Range.Max);
            }
        }
        public static RangeUInt64 UInt64N_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt64
        public UInt64 UInt64 { get; protected set; }
        #endregion
        #region UInt64_Ranged
        private UInt64 _UInt64_Ranged;
        public UInt64 UInt64_Ranged
        {
            get => _UInt64_Ranged;
            protected set
            {
                this._UInt64_Ranged = value.PutInRange(UInt64_Ranged_Range.Min, UInt64_Ranged_Range.Max);
            }
        }
        public static RangeUInt64 UInt64_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt8N
        public Byte? UInt8N { get; protected set; }
        #endregion
        #region UInt8N_Ranged
        private Byte? _UInt8N_Ranged;
        public Byte? UInt8N_Ranged
        {
            get => _UInt8N_Ranged;
            protected set
            {
                this._UInt8N_Ranged = value?.PutInRange(UInt8N_Ranged_Range.Min, UInt8N_Ranged_Range.Max);
            }
        }
        public static RangeUInt8 UInt8N_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region UInt8
        public Byte UInt8 { get; protected set; }
        #endregion
        #region UInt8_Ranged
        private Byte _UInt8_Ranged;
        public Byte UInt8_Ranged
        {
            get => _UInt8_Ranged;
            protected set
            {
                this._UInt8_Ranged = value.PutInRange(UInt8_Ranged_Range.Min, UInt8_Ranged_Range.Max);
            }
        }
        public static RangeUInt8 UInt8_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region Enum
        public TestEnum Enum { get; protected set; }
        #endregion
        #region WildCard
        protected Object _WildCard;
        public Object WildCard
        {
            get => this._WildCard;
            protected set => this._WildCard = WildcardLink.Validate(value);
        }
        Object ITestObject_DerivativeGetter.WildCard => this.WildCard;
        #endregion
        #region Ref
        public ObjectToRef Ref { get; protected set; }
        #endregion
        #region Ref_NotNull
        private ObjectToRef _Ref_NotNull = new ObjectToRef();
        public ObjectToRef Ref_NotNull
        {
            get => _Ref_NotNull;
            protected set => _Ref_NotNull = value ?? new ObjectToRef();
        }
        #endregion
        #region Ref_Singleton
        public ObjectToRef Ref_Singleton { get; } = new ObjectToRef();
        #endregion
        #region RefGetter
        public IObjectToRefGetter RefGetter { get; protected set; }
        #endregion
        #region RefGetter_NotNull
        private IObjectToRefGetter _RefGetter_NotNull = new ObjectToRef();
        public IObjectToRefGetter RefGetter_NotNull
        {
            get => _RefGetter_NotNull;
            protected set => _RefGetter_NotNull = value ?? new ObjectToRef();
        }
        #endregion
        #region RefGetter_Singleton
        public IObjectToRefGetter RefGetter_Singleton { get; } = new ObjectToRef();
        #endregion
        #region RefSetter
        public IObjectToRef RefSetter { get; protected set; }
        #endregion
        #region RefSetter_NotNull
        private IObjectToRef _RefSetter_NotNull = new ObjectToRef();
        public IObjectToRef RefSetter_NotNull
        {
            get => _RefSetter_NotNull;
            protected set => _RefSetter_NotNull = value ?? new ObjectToRef();
        }
        #endregion
        #region RefSetter_Singleton
        public IObjectToRef RefSetter_Singleton { get; } = new ObjectToRef();
        #endregion
        #region List
        private readonly INotifyingList<Boolean> _List = new NotifyingList<Boolean>();
        public INotifyingListGetter<Boolean> List => _List;
        #region Interface Members
        INotifyingListGetter<Boolean> ITestObject_DerivativeGetter.List => _List;
        #endregion

        #endregion
        #region RefList
        private readonly INotifyingList<ObjectToRef> _RefList = new NotifyingList<ObjectToRef>();
        public INotifyingListGetter<ObjectToRef> RefList => _RefList;
        #region Interface Members
        INotifyingListGetter<ObjectToRef> ITestObject_DerivativeGetter.RefList => _RefList;
        #endregion

        #endregion
        #region Dict
        private readonly INotifyingDictionary<String, Boolean> _Dict = new NotifyingDictionary<String, Boolean>();
        public INotifyingDictionary<String, Boolean> Dict { get { return _Dict; } }
        #region Interface Members
        INotifyingDictionaryGetter<String, Boolean> ITestObject_DerivativeGetter.Dict => _Dict;
        #endregion

        #endregion
        #region RefDict
        private readonly INotifyingDictionary<ObjectToRef, ObjectToRef> _RefDict = new NotifyingDictionary<ObjectToRef, ObjectToRef>();
        public INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get { return _RefDict; } }
        #region Interface Members
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> ITestObject_DerivativeGetter.RefDict => _RefDict;
        #endregion

        #endregion
        #region KeyRefDict
        private readonly INotifyingDictionary<ObjectToRef, Boolean> _KeyRefDict = new NotifyingDictionary<ObjectToRef, Boolean>();
        public INotifyingDictionary<ObjectToRef, Boolean> KeyRefDict { get { return _KeyRefDict; } }
        #region Interface Members
        INotifyingDictionaryGetter<ObjectToRef, Boolean> ITestObject_DerivativeGetter.KeyRefDict => _KeyRefDict;
        #endregion

        #endregion
        #region ValRefDict
        private readonly INotifyingDictionary<String, ObjectToRef> _ValRefDict = new NotifyingDictionary<String, ObjectToRef>();
        public INotifyingDictionary<String, ObjectToRef> ValRefDict { get { return _ValRefDict; } }
        #region Interface Members
        INotifyingDictionaryGetter<String, ObjectToRef> ITestObject_DerivativeGetter.ValRefDict => _ValRefDict;
        #endregion

        #endregion
        #region DictKeyedValue
        private readonly INotifyingKeyedCollection<Int32, ObjectToRef> _DictKeyedValue = new NotifyingKeyedCollection<Int32, ObjectToRef>((item) => item.KeyField);
        public INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue => _DictKeyedValue;
        #region Interface Members
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> ITestObject_DerivativeGetter.DictKeyedValue => _DictKeyedValue;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TestObject_DerivativeCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestObject_DerivativeCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestObject_DerivativeCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestObject_DerivativeCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        public void CopyFieldsFrom(
            ITestObject_DerivativeGetter rhs,
            TestObject_Derivative_CopyMask copyMask = null,
            ITestObject_DerivativeGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_DerivativeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestObject_DerivativeGetter rhs,
            out TestObject_Derivative_ErrorMask errorMask,
            TestObject_Derivative_CopyMask copyMask = null,
            ITestObject_DerivativeGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_Derivative_ErrorMask retErrorMask = null;
            Func<TestObject_Derivative_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestObject_Derivative_ErrorMask();
                }
                return retErrorMask;
            };
            TestObject_DerivativeCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return ILoquiObjectExt.PrintPretty(this);
        }
        #endregion


        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_Derivative rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_Derivative rhs)
        {
            if (!object.Equals(this.BoolN, rhs.BoolN)) return false;
            if (!object.Equals(this.Bool, rhs.Bool)) return false;
            if (!object.Equals(this.CharN, rhs.CharN)) return false;
            if (!object.Equals(this.Char, rhs.Char)) return false;
            if (!object.Equals(this.DateTimeNull, rhs.DateTimeNull)) return false;
            if (!object.Equals(this.DateTime, rhs.DateTime)) return false;
            if (!object.Equals(this.DoubleN, rhs.DoubleN)) return false;
            if (!object.Equals(this.DoubleN_Ranged, rhs.DoubleN_Ranged)) return false;
            if (!object.Equals(this.Double, rhs.Double)) return false;
            if (!object.Equals(this.Double_Ranged, rhs.Double_Ranged)) return false;
            if (!object.Equals(this.FloatN, rhs.FloatN)) return false;
            if (!object.Equals(this.FloatN_Ranged, rhs.FloatN_Ranged)) return false;
            if (!object.Equals(this.Float, rhs.Float)) return false;
            if (!object.Equals(this.Float_Ranged, rhs.Float_Ranged)) return false;
            if (!object.Equals(this.Int16N, rhs.Int16N)) return false;
            if (!object.Equals(this.Int16N_Ranged, rhs.Int16N_Ranged)) return false;
            if (!object.Equals(this.Int16, rhs.Int16)) return false;
            if (!object.Equals(this.Int16_Ranged, rhs.Int16_Ranged)) return false;
            if (!object.Equals(this.Int32N, rhs.Int32N)) return false;
            if (!object.Equals(this.Int32N_Ranged, rhs.Int32N_Ranged)) return false;
            if (!object.Equals(this.Int32, rhs.Int32)) return false;
            if (!object.Equals(this.Int32_Ranged, rhs.Int32_Ranged)) return false;
            if (!object.Equals(this.Int64N, rhs.Int64N)) return false;
            if (!object.Equals(this.Int64N_Ranged, rhs.Int64N_Ranged)) return false;
            if (!object.Equals(this.Int64, rhs.Int64)) return false;
            if (!object.Equals(this.Int64_Ranged, rhs.Int64_Ranged)) return false;
            if (!object.Equals(this.Int8N, rhs.Int8N)) return false;
            if (!object.Equals(this.Int8N_Ranged, rhs.Int8N_Ranged)) return false;
            if (!object.Equals(this.Int8, rhs.Int8)) return false;
            if (!object.Equals(this.Int8_Ranged, rhs.Int8_Ranged)) return false;
            if (!object.Equals(this.Unsafe, rhs.Unsafe)) return false;
            if (!object.Equals(this.P2IntN, rhs.P2IntN)) return false;
            if (!object.Equals(this.P2Int, rhs.P2Int)) return false;
            if (!object.Equals(this.P3DoubleN, rhs.P3DoubleN)) return false;
            if (!object.Equals(this.P3Double, rhs.P3Double)) return false;
            if (!object.Equals(this.P3IntN, rhs.P3IntN)) return false;
            if (!object.Equals(this.P3Int, rhs.P3Int)) return false;
            if (!object.Equals(this.PercentN, rhs.PercentN)) return false;
            if (!object.Equals(this.Percent, rhs.Percent)) return false;
            if (!object.Equals(this.RangeInt8N, rhs.RangeInt8N)) return false;
            if (!object.Equals(this.RangeInt8, rhs.RangeInt8)) return false;
            if (!object.Equals(this.RangeInt16N, rhs.RangeInt16N)) return false;
            if (!object.Equals(this.RangeInt16, rhs.RangeInt16)) return false;
            if (!object.Equals(this.RangeInt32N, rhs.RangeInt32N)) return false;
            if (!object.Equals(this.RangeInt32, rhs.RangeInt32)) return false;
            if (!object.Equals(this.RangeInt64N, rhs.RangeInt64N)) return false;
            if (!object.Equals(this.RangeInt64, rhs.RangeInt64)) return false;
            if (!object.Equals(this.RangeUInt8N, rhs.RangeUInt8N)) return false;
            if (!object.Equals(this.RangeUInt8, rhs.RangeUInt8)) return false;
            if (!object.Equals(this.RangeUInt16N, rhs.RangeUInt16N)) return false;
            if (!object.Equals(this.RangeUInt16, rhs.RangeUInt16)) return false;
            if (!object.Equals(this.RangeUInt32N, rhs.RangeUInt32N)) return false;
            if (!object.Equals(this.RangeUInt32, rhs.RangeUInt32)) return false;
            if (!object.Equals(this.RangeUInt64N, rhs.RangeUInt64N)) return false;
            if (!object.Equals(this.RangeUInt64, rhs.RangeUInt64)) return false;
            if (!object.Equals(this.String, rhs.String)) return false;
            if (!object.Equals(this.UDoubleN, rhs.UDoubleN)) return false;
            if (!object.Equals(this.UDoubleN_Ranged, rhs.UDoubleN_Ranged)) return false;
            if (!object.Equals(this.UDouble, rhs.UDouble)) return false;
            if (!object.Equals(this.UDouble_Ranged, rhs.UDouble_Ranged)) return false;
            if (!object.Equals(this.UInt16N, rhs.UInt16N)) return false;
            if (!object.Equals(this.UInt16N_Ranged, rhs.UInt16N_Ranged)) return false;
            if (!object.Equals(this.UInt16, rhs.UInt16)) return false;
            if (!object.Equals(this.UInt16_Ranged, rhs.UInt16_Ranged)) return false;
            if (!object.Equals(this.UInt32N, rhs.UInt32N)) return false;
            if (!object.Equals(this.UInt32N_Ranged, rhs.UInt32N_Ranged)) return false;
            if (!object.Equals(this.UInt32, rhs.UInt32)) return false;
            if (!object.Equals(this.UInt32_Ranged, rhs.UInt32_Ranged)) return false;
            if (!object.Equals(this.UInt64N, rhs.UInt64N)) return false;
            if (!object.Equals(this.UInt64N_Ranged, rhs.UInt64N_Ranged)) return false;
            if (!object.Equals(this.UInt64, rhs.UInt64)) return false;
            if (!object.Equals(this.UInt64_Ranged, rhs.UInt64_Ranged)) return false;
            if (!object.Equals(this.UInt8N, rhs.UInt8N)) return false;
            if (!object.Equals(this.UInt8N_Ranged, rhs.UInt8N_Ranged)) return false;
            if (!object.Equals(this.UInt8, rhs.UInt8)) return false;
            if (!object.Equals(this.UInt8_Ranged, rhs.UInt8_Ranged)) return false;
            if (!object.Equals(this.Enum, rhs.Enum)) return false;
            if (!object.Equals(this.WildCard, rhs.WildCard)) return false;
            if (!object.Equals(this.Ref, rhs.Ref)) return false;
            if (!object.Equals(this.Ref_NotNull, rhs.Ref_NotNull)) return false;
            if (!object.Equals(this.Ref_Singleton, rhs.Ref_Singleton)) return false;
            if (!object.Equals(this.RefGetter, rhs.RefGetter)) return false;
            if (!object.Equals(this.RefGetter_NotNull, rhs.RefGetter_NotNull)) return false;
            if (!object.Equals(this.RefGetter_Singleton, rhs.RefGetter_Singleton)) return false;
            if (!object.Equals(this.RefSetter, rhs.RefSetter)) return false;
            if (!object.Equals(this.RefSetter_NotNull, rhs.RefSetter_NotNull)) return false;
            if (!object.Equals(this.RefSetter_Singleton, rhs.RefSetter_Singleton)) return false;
            if (!object.Equals(this.List, rhs.List)) return false;
            if (!object.Equals(this.RefList, rhs.RefList)) return false;
            if (!object.Equals(this.Dict, rhs.Dict)) return false;
            if (!object.Equals(this.RefDict, rhs.RefDict)) return false;
            if (!object.Equals(this.KeyRefDict, rhs.KeyRefDict)) return false;
            if (!object.Equals(this.ValRefDict, rhs.ValRefDict)) return false;
            if (!object.Equals(this.DictKeyedValue, rhs.DictKeyedValue)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            return 
            HashHelper.GetHashCode(BoolN)
            .CombineHashCode(HashHelper.GetHashCode(Bool))
            .CombineHashCode(HashHelper.GetHashCode(CharN))
            .CombineHashCode(HashHelper.GetHashCode(Char))
            .CombineHashCode(HashHelper.GetHashCode(DateTimeNull))
            .CombineHashCode(HashHelper.GetHashCode(DateTime))
            .CombineHashCode(HashHelper.GetHashCode(DoubleN))
            .CombineHashCode(HashHelper.GetHashCode(DoubleN_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Double))
            .CombineHashCode(HashHelper.GetHashCode(Double_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(FloatN))
            .CombineHashCode(HashHelper.GetHashCode(FloatN_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Float))
            .CombineHashCode(HashHelper.GetHashCode(Float_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int16N))
            .CombineHashCode(HashHelper.GetHashCode(Int16N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int16))
            .CombineHashCode(HashHelper.GetHashCode(Int16_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int32N))
            .CombineHashCode(HashHelper.GetHashCode(Int32N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int32))
            .CombineHashCode(HashHelper.GetHashCode(Int32_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int64N))
            .CombineHashCode(HashHelper.GetHashCode(Int64N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int64))
            .CombineHashCode(HashHelper.GetHashCode(Int64_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int8N))
            .CombineHashCode(HashHelper.GetHashCode(Int8N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Int8))
            .CombineHashCode(HashHelper.GetHashCode(Int8_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Unsafe))
            .CombineHashCode(HashHelper.GetHashCode(P2IntN))
            .CombineHashCode(HashHelper.GetHashCode(P2Int))
            .CombineHashCode(HashHelper.GetHashCode(P3DoubleN))
            .CombineHashCode(HashHelper.GetHashCode(P3Double))
            .CombineHashCode(HashHelper.GetHashCode(P3IntN))
            .CombineHashCode(HashHelper.GetHashCode(P3Int))
            .CombineHashCode(HashHelper.GetHashCode(PercentN))
            .CombineHashCode(HashHelper.GetHashCode(Percent))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt8N))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt8))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt16N))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt16))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt32N))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt32))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt64N))
            .CombineHashCode(HashHelper.GetHashCode(RangeInt64))
            .CombineHashCode(HashHelper.GetHashCode(RangeUInt8N))
            .CombineHashCode(HashHelper.GetHashCode(RangeUInt8))
            .CombineHashCode(HashHelper.GetHashCode(RangeUInt16N))
            .CombineHashCode(HashHelper.GetHashCode(RangeUInt16))
            .CombineHashCode(HashHelper.GetHashCode(RangeUInt32N))
            .CombineHashCode(HashHelper.GetHashCode(RangeUInt32))
            .CombineHashCode(HashHelper.GetHashCode(RangeUInt64N))
            .CombineHashCode(HashHelper.GetHashCode(RangeUInt64))
            .CombineHashCode(HashHelper.GetHashCode(String))
            .CombineHashCode(HashHelper.GetHashCode(UDoubleN))
            .CombineHashCode(HashHelper.GetHashCode(UDoubleN_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UDouble))
            .CombineHashCode(HashHelper.GetHashCode(UDouble_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt16N))
            .CombineHashCode(HashHelper.GetHashCode(UInt16N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt16))
            .CombineHashCode(HashHelper.GetHashCode(UInt16_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt32N))
            .CombineHashCode(HashHelper.GetHashCode(UInt32N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt32))
            .CombineHashCode(HashHelper.GetHashCode(UInt32_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt64N))
            .CombineHashCode(HashHelper.GetHashCode(UInt64N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt64))
            .CombineHashCode(HashHelper.GetHashCode(UInt64_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt8N))
            .CombineHashCode(HashHelper.GetHashCode(UInt8N_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(UInt8))
            .CombineHashCode(HashHelper.GetHashCode(UInt8_Ranged))
            .CombineHashCode(HashHelper.GetHashCode(Enum))
            .CombineHashCode(HashHelper.GetHashCode(WildCard))
            .CombineHashCode(HashHelper.GetHashCode(Ref))
            .CombineHashCode(HashHelper.GetHashCode(Ref_NotNull))
            .CombineHashCode(HashHelper.GetHashCode(Ref_Singleton))
            .CombineHashCode(HashHelper.GetHashCode(RefGetter))
            .CombineHashCode(HashHelper.GetHashCode(RefGetter_NotNull))
            .CombineHashCode(HashHelper.GetHashCode(RefGetter_Singleton))
            .CombineHashCode(HashHelper.GetHashCode(RefSetter))
            .CombineHashCode(HashHelper.GetHashCode(RefSetter_NotNull))
            .CombineHashCode(HashHelper.GetHashCode(RefSetter_Singleton))
            .CombineHashCode(HashHelper.GetHashCode(List))
            .CombineHashCode(HashHelper.GetHashCode(RefList))
            .CombineHashCode(HashHelper.GetHashCode(Dict))
            .CombineHashCode(HashHelper.GetHashCode(RefDict))
            .CombineHashCode(HashHelper.GetHashCode(KeyRefDict))
            .CombineHashCode(HashHelper.GetHashCode(ValRefDict))
            .CombineHashCode(HashHelper.GetHashCode(DictKeyedValue))
            ;
        }

        #endregion


        #region XML Translation
        public static TestObject_Derivative Create_XML(Stream stream)
        {
            using (var reader = new StreamReader(stream))
            {
                return Create_XML(XElement.Parse(reader.ReadToEnd()));
            }
        }

        public static TestObject_Derivative Create_XML(XElement root)
        {
            var ret = new TestObject_Derivative();
            LoquiXmlTranslation<TestObject_Derivative, TestObject_Derivative_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipProtected: false,
                doMasks: false,
                mask: out TestObject_Derivative_ErrorMask errorMask,
                cmds: null);
            return ret;
        }

        public static TestObject_Derivative Create_XML(XElement root, out TestObject_Derivative_ErrorMask errorMask)
        {
            var ret = new TestObject_Derivative();
            LoquiXmlTranslation<TestObject_Derivative, TestObject_Derivative_ErrorMask>.Instance.CopyIn(
                root: root,
                item: ret,
                skipProtected: false,
                doMasks: true,
                mask: out errorMask,
                cmds: null);
            return ret;
        }

        public void CopyIn_XML(XElement root, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject_Derivative, TestObject_Derivative_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TestObject_Derivative_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(XElement root, out TestObject_Derivative_ErrorMask errorMask, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject_Derivative, TestObject_Derivative_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void Write_XML(Stream stream)
        {
            TestObject_DerivativeCommon.Write_XML(
                this,
                stream);
        }

        public void Write_XML(Stream stream, out TestObject_Derivative_ErrorMask errorMask)
        {
            TestObject_DerivativeCommon.Write_XML(
                this,
                stream,
                out errorMask);
        }

        public void Write_XML(XmlWriter writer, out TestObject_Derivative_ErrorMask errorMask, string name = null)
        {
            TestObject_DerivativeCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public void Write_XML(XmlWriter writer, string name = null)
        {
            TestObject_DerivativeCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out TestObject_Derivative_ErrorMask errorMask);
        }

        #endregion

        public TestObject_Derivative Copy(
            TestObject_Derivative_CopyMask copyMask = null,
            ITestObject_DerivativeGetter def = null)
        {
            return TestObject_Derivative.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestObject_Derivative Copy(
            ITestObject_Derivative item,
            TestObject_Derivative_CopyMask copyMask = null,
            ITestObject_DerivativeGetter def = null)
        {
            TestObject_Derivative ret;
            if (item.GetType().Equals(typeof(TestObject_Derivative)))
            {
                ret = new TestObject_Derivative();
            }
            else
            {
                ret = (TestObject_Derivative)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType Copy<CopyType>(
            CopyType item,
            TestObject_Derivative_CopyMask copyMask = null,
            ITestObject_DerivativeGetter def = null)
            where CopyType : class, ITestObject_Derivative
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestObject_Derivative)))
            {
                ret = new TestObject_Derivative() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestObject_Derivative Copy_ToLoqui(
            ITestObject_DerivativeGetter item,
            TestObject_Derivative_CopyMask copyMask = null,
            ITestObject_DerivativeGetter def = null)
        {
            var ret = new TestObject_Derivative();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                case TestObject_Derivative_FieldIndex.Bool:
                case TestObject_Derivative_FieldIndex.CharN:
                case TestObject_Derivative_FieldIndex.Char:
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                case TestObject_Derivative_FieldIndex.DateTime:
                case TestObject_Derivative_FieldIndex.DoubleN:
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.Double:
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                case TestObject_Derivative_FieldIndex.FloatN:
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                case TestObject_Derivative_FieldIndex.Float:
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                case TestObject_Derivative_FieldIndex.Int16N:
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                case TestObject_Derivative_FieldIndex.Int16:
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                case TestObject_Derivative_FieldIndex.Int32N:
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                case TestObject_Derivative_FieldIndex.Int32:
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                case TestObject_Derivative_FieldIndex.Int64N:
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                case TestObject_Derivative_FieldIndex.Int64:
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                case TestObject_Derivative_FieldIndex.Int8N:
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                case TestObject_Derivative_FieldIndex.Int8:
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                case TestObject_Derivative_FieldIndex.Unsafe:
                case TestObject_Derivative_FieldIndex.P2IntN:
                case TestObject_Derivative_FieldIndex.P2Int:
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                case TestObject_Derivative_FieldIndex.P3Double:
                case TestObject_Derivative_FieldIndex.P3IntN:
                case TestObject_Derivative_FieldIndex.P3Int:
                case TestObject_Derivative_FieldIndex.PercentN:
                case TestObject_Derivative_FieldIndex.Percent:
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                case TestObject_Derivative_FieldIndex.RangeInt8:
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                case TestObject_Derivative_FieldIndex.RangeInt16:
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                case TestObject_Derivative_FieldIndex.RangeInt32:
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                case TestObject_Derivative_FieldIndex.RangeInt64:
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                case TestObject_Derivative_FieldIndex.String:
                case TestObject_Derivative_FieldIndex.UDoubleN:
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.UDouble:
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16N:
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16:
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32N:
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32:
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64N:
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64:
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8N:
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8:
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                case TestObject_Derivative_FieldIndex.Enum:
                case TestObject_Derivative_FieldIndex.WildCard:
                case TestObject_Derivative_FieldIndex.Ref:
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                case TestObject_Derivative_FieldIndex.RefGetter:
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefSetter:
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                case TestObject_Derivative_FieldIndex.List:
                case TestObject_Derivative_FieldIndex.RefList:
                case TestObject_Derivative_FieldIndex.Dict:
                case TestObject_Derivative_FieldIndex.RefDict:
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                case TestObject_Derivative_FieldIndex.ValRefDict:
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestObject_DerivativeCommon.Clear(this, cmds);
        }


        public static TestObject_Derivative Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestObject_Derivative();
            ILoquiObjectExt.CopyFieldsIn(ret, fields, def: null, skipProtected: false, cmds: null);
            return ret;
        }

        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestObject_Derivative obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestObject_Derivative : ITestObject_DerivativeGetter, ILoquiClass<ITestObject_Derivative, ITestObject_DerivativeGetter>, ILoquiClass<TestObject_Derivative, ITestObject_DerivativeGetter>
    {
    }

    public interface ITestObject_DerivativeGetter : ILoquiObject
    {
        #region BoolN
        Boolean? BoolN { get; }

        #endregion
        #region Bool
        Boolean Bool { get; }

        #endregion
        #region CharN
        Char? CharN { get; }

        #endregion
        #region Char
        Char Char { get; }

        #endregion
        #region DateTimeNull
        DateTime? DateTimeNull { get; }

        #endregion
        #region DateTime
        DateTime DateTime { get; }

        #endregion
        #region DoubleN
        Double? DoubleN { get; }

        #endregion
        #region DoubleN_Ranged
        Double? DoubleN_Ranged { get; }

        #endregion
        #region Double
        Double Double { get; }

        #endregion
        #region Double_Ranged
        Double Double_Ranged { get; }

        #endregion
        #region FloatN
        Single? FloatN { get; }

        #endregion
        #region FloatN_Ranged
        Single? FloatN_Ranged { get; }

        #endregion
        #region Float
        Single Float { get; }

        #endregion
        #region Float_Ranged
        Single Float_Ranged { get; }

        #endregion
        #region Int16N
        Int16? Int16N { get; }

        #endregion
        #region Int16N_Ranged
        Int16? Int16N_Ranged { get; }

        #endregion
        #region Int16
        Int16 Int16 { get; }

        #endregion
        #region Int16_Ranged
        Int16 Int16_Ranged { get; }

        #endregion
        #region Int32N
        Int32? Int32N { get; }

        #endregion
        #region Int32N_Ranged
        Int32? Int32N_Ranged { get; }

        #endregion
        #region Int32
        Int32 Int32 { get; }

        #endregion
        #region Int32_Ranged
        Int32 Int32_Ranged { get; }

        #endregion
        #region Int64N
        Int64? Int64N { get; }

        #endregion
        #region Int64N_Ranged
        Int64? Int64N_Ranged { get; }

        #endregion
        #region Int64
        Int64 Int64 { get; }

        #endregion
        #region Int64_Ranged
        Int64 Int64_Ranged { get; }

        #endregion
        #region Int8N
        SByte? Int8N { get; }

        #endregion
        #region Int8N_Ranged
        SByte? Int8N_Ranged { get; }

        #endregion
        #region Int8
        SByte Int8 { get; }

        #endregion
        #region Int8_Ranged
        SByte Int8_Ranged { get; }

        #endregion
        #region Unsafe
        bool Unsafe { get; }

        #endregion
        #region P2IntN
        P2Int? P2IntN { get; }

        #endregion
        #region P2Int
        P2Int P2Int { get; }

        #endregion
        #region P3DoubleN
        P3Double? P3DoubleN { get; }

        #endregion
        #region P3Double
        P3Double P3Double { get; }

        #endregion
        #region P3IntN
        P3Int? P3IntN { get; }

        #endregion
        #region P3Int
        P3Int P3Int { get; }

        #endregion
        #region PercentN
        Percent? PercentN { get; }

        #endregion
        #region Percent
        Percent Percent { get; }

        #endregion
        #region RangeInt8N
        RangeInt8? RangeInt8N { get; }

        #endregion
        #region RangeInt8
        RangeInt8 RangeInt8 { get; }

        #endregion
        #region RangeInt16N
        RangeInt16? RangeInt16N { get; }

        #endregion
        #region RangeInt16
        RangeInt16 RangeInt16 { get; }

        #endregion
        #region RangeInt32N
        RangeInt32? RangeInt32N { get; }

        #endregion
        #region RangeInt32
        RangeInt32 RangeInt32 { get; }

        #endregion
        #region RangeInt64N
        RangeInt64? RangeInt64N { get; }

        #endregion
        #region RangeInt64
        RangeInt64 RangeInt64 { get; }

        #endregion
        #region RangeUInt8N
        RangeUInt8? RangeUInt8N { get; }

        #endregion
        #region RangeUInt8
        RangeUInt8 RangeUInt8 { get; }

        #endregion
        #region RangeUInt16N
        RangeUInt16? RangeUInt16N { get; }

        #endregion
        #region RangeUInt16
        RangeUInt16 RangeUInt16 { get; }

        #endregion
        #region RangeUInt32N
        RangeUInt32? RangeUInt32N { get; }

        #endregion
        #region RangeUInt32
        RangeUInt32 RangeUInt32 { get; }

        #endregion
        #region RangeUInt64N
        RangeUInt64? RangeUInt64N { get; }

        #endregion
        #region RangeUInt64
        RangeUInt64 RangeUInt64 { get; }

        #endregion
        #region String
        String String { get; }

        #endregion
        #region UDoubleN
        UDouble? UDoubleN { get; }

        #endregion
        #region UDoubleN_Ranged
        UDouble? UDoubleN_Ranged { get; }

        #endregion
        #region UDouble
        UDouble UDouble { get; }

        #endregion
        #region UDouble_Ranged
        UDouble UDouble_Ranged { get; }

        #endregion
        #region UInt16N
        UInt16? UInt16N { get; }

        #endregion
        #region UInt16N_Ranged
        UInt16? UInt16N_Ranged { get; }

        #endregion
        #region UInt16
        UInt16 UInt16 { get; }

        #endregion
        #region UInt16_Ranged
        UInt16 UInt16_Ranged { get; }

        #endregion
        #region UInt32N
        UInt32? UInt32N { get; }

        #endregion
        #region UInt32N_Ranged
        UInt32? UInt32N_Ranged { get; }

        #endregion
        #region UInt32
        UInt32 UInt32 { get; }

        #endregion
        #region UInt32_Ranged
        UInt32 UInt32_Ranged { get; }

        #endregion
        #region UInt64N
        UInt64? UInt64N { get; }

        #endregion
        #region UInt64N_Ranged
        UInt64? UInt64N_Ranged { get; }

        #endregion
        #region UInt64
        UInt64 UInt64 { get; }

        #endregion
        #region UInt64_Ranged
        UInt64 UInt64_Ranged { get; }

        #endregion
        #region UInt8N
        Byte? UInt8N { get; }

        #endregion
        #region UInt8N_Ranged
        Byte? UInt8N_Ranged { get; }

        #endregion
        #region UInt8
        Byte UInt8 { get; }

        #endregion
        #region UInt8_Ranged
        Byte UInt8_Ranged { get; }

        #endregion
        #region Enum
        TestEnum Enum { get; }

        #endregion
        #region WildCard
        Object WildCard { get; }

        #endregion
        #region Ref
        ObjectToRef Ref { get; }

        #endregion
        #region Ref_NotNull
        ObjectToRef Ref_NotNull { get; }

        #endregion
        #region Ref_Singleton
        ObjectToRef Ref_Singleton { get; }

        #endregion
        #region RefGetter
        IObjectToRefGetter RefGetter { get; }

        #endregion
        #region RefGetter_NotNull
        IObjectToRefGetter RefGetter_NotNull { get; }

        #endregion
        #region RefGetter_Singleton
        IObjectToRefGetter RefGetter_Singleton { get; }

        #endregion
        #region RefSetter
        IObjectToRef RefSetter { get; }

        #endregion
        #region RefSetter_NotNull
        IObjectToRef RefSetter_NotNull { get; }

        #endregion
        #region RefSetter_Singleton
        IObjectToRef RefSetter_Singleton { get; }

        #endregion
        #region List
        INotifyingListGetter<Boolean> List { get; }
        #endregion
        #region RefList
        INotifyingListGetter<ObjectToRef> RefList { get; }
        #endregion
        #region Dict
        INotifyingDictionaryGetter<String, Boolean> Dict { get; }
        #endregion
        #region RefDict
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> RefDict { get; }
        #endregion
        #region KeyRefDict
        INotifyingDictionaryGetter<ObjectToRef, Boolean> KeyRefDict { get; }
        #endregion
        #region ValRefDict
        INotifyingDictionaryGetter<String, ObjectToRef> ValRefDict { get; }
        #endregion
        #region DictKeyedValue
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> DictKeyedValue { get; }
        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Internals
{
    #region Field Index
    public enum TestObject_Derivative_FieldIndex
    {
        BoolN = 0,
        Bool = 1,
        CharN = 2,
        Char = 3,
        DateTimeNull = 4,
        DateTime = 5,
        DoubleN = 6,
        DoubleN_Ranged = 7,
        Double = 8,
        Double_Ranged = 9,
        FloatN = 10,
        FloatN_Ranged = 11,
        Float = 12,
        Float_Ranged = 13,
        Int16N = 14,
        Int16N_Ranged = 15,
        Int16 = 16,
        Int16_Ranged = 17,
        Int32N = 18,
        Int32N_Ranged = 19,
        Int32 = 20,
        Int32_Ranged = 21,
        Int64N = 22,
        Int64N_Ranged = 23,
        Int64 = 24,
        Int64_Ranged = 25,
        Int8N = 26,
        Int8N_Ranged = 27,
        Int8 = 28,
        Int8_Ranged = 29,
        Unsafe = 30,
        P2IntN = 31,
        P2Int = 32,
        P3DoubleN = 33,
        P3Double = 34,
        P3IntN = 35,
        P3Int = 36,
        PercentN = 37,
        Percent = 38,
        RangeInt8N = 39,
        RangeInt8 = 40,
        RangeInt16N = 41,
        RangeInt16 = 42,
        RangeInt32N = 43,
        RangeInt32 = 44,
        RangeInt64N = 45,
        RangeInt64 = 46,
        RangeUInt8N = 47,
        RangeUInt8 = 48,
        RangeUInt16N = 49,
        RangeUInt16 = 50,
        RangeUInt32N = 51,
        RangeUInt32 = 52,
        RangeUInt64N = 53,
        RangeUInt64 = 54,
        String = 55,
        UDoubleN = 56,
        UDoubleN_Ranged = 57,
        UDouble = 58,
        UDouble_Ranged = 59,
        UInt16N = 60,
        UInt16N_Ranged = 61,
        UInt16 = 62,
        UInt16_Ranged = 63,
        UInt32N = 64,
        UInt32N_Ranged = 65,
        UInt32 = 66,
        UInt32_Ranged = 67,
        UInt64N = 68,
        UInt64N_Ranged = 69,
        UInt64 = 70,
        UInt64_Ranged = 71,
        UInt8N = 72,
        UInt8N_Ranged = 73,
        UInt8 = 74,
        UInt8_Ranged = 75,
        Enum = 76,
        WildCard = 77,
        Ref = 78,
        Ref_NotNull = 79,
        Ref_Singleton = 80,
        RefGetter = 81,
        RefGetter_NotNull = 82,
        RefGetter_Singleton = 83,
        RefSetter = 84,
        RefSetter_NotNull = 85,
        RefSetter_Singleton = 86,
        List = 87,
        RefList = 88,
        Dict = 89,
        RefDict = 90,
        KeyRefDict = 91,
        ValRefDict = 92,
        DictKeyedValue = 93,
    }
    #endregion

    #region Registration
    public class TestObject_Derivative_Registration : ILoquiRegistration
    {
        public static readonly TestObject_Derivative_Registration Instance = new TestObject_Derivative_Registration();

        public static ProtocolDefinition ProtocolDefinition => ProtocolDefinition_LoquiTests.Definition;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTests.ProtocolKey,
            msgID: 12,
            version: 0);

        public const string GUID = "ec188280-ea8c-4490-b011-0940de80033f";

        public const ushort FieldCount = 94;

        public static readonly Type MaskType = typeof(TestObject_Derivative_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestObject_Derivative_ErrorMask);

        public static readonly Type ClassType = typeof(TestObject_Derivative);

        public const string FullName = "Loqui.Tests.TestObject_Derivative";

        public const string Name = "TestObject_Derivative";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BOOLN":
                    return (ushort)TestObject_Derivative_FieldIndex.BoolN;
                case "BOOL":
                    return (ushort)TestObject_Derivative_FieldIndex.Bool;
                case "CHARN":
                    return (ushort)TestObject_Derivative_FieldIndex.CharN;
                case "CHAR":
                    return (ushort)TestObject_Derivative_FieldIndex.Char;
                case "DATETIMENULL":
                    return (ushort)TestObject_Derivative_FieldIndex.DateTimeNull;
                case "DATETIME":
                    return (ushort)TestObject_Derivative_FieldIndex.DateTime;
                case "DOUBLEN":
                    return (ushort)TestObject_Derivative_FieldIndex.DoubleN;
                case "DOUBLEN_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.DoubleN_Ranged;
                case "DOUBLE":
                    return (ushort)TestObject_Derivative_FieldIndex.Double;
                case "DOUBLE_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Double_Ranged;
                case "FLOATN":
                    return (ushort)TestObject_Derivative_FieldIndex.FloatN;
                case "FLOATN_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.FloatN_Ranged;
                case "FLOAT":
                    return (ushort)TestObject_Derivative_FieldIndex.Float;
                case "FLOAT_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Float_Ranged;
                case "INT16N":
                    return (ushort)TestObject_Derivative_FieldIndex.Int16N;
                case "INT16N_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Int16N_Ranged;
                case "INT16":
                    return (ushort)TestObject_Derivative_FieldIndex.Int16;
                case "INT16_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Int16_Ranged;
                case "INT32N":
                    return (ushort)TestObject_Derivative_FieldIndex.Int32N;
                case "INT32N_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Int32N_Ranged;
                case "INT32":
                    return (ushort)TestObject_Derivative_FieldIndex.Int32;
                case "INT32_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Int32_Ranged;
                case "INT64N":
                    return (ushort)TestObject_Derivative_FieldIndex.Int64N;
                case "INT64N_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Int64N_Ranged;
                case "INT64":
                    return (ushort)TestObject_Derivative_FieldIndex.Int64;
                case "INT64_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Int64_Ranged;
                case "INT8N":
                    return (ushort)TestObject_Derivative_FieldIndex.Int8N;
                case "INT8N_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Int8N_Ranged;
                case "INT8":
                    return (ushort)TestObject_Derivative_FieldIndex.Int8;
                case "INT8_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.Int8_Ranged;
                case "UNSAFE":
                    return (ushort)TestObject_Derivative_FieldIndex.Unsafe;
                case "P2INTN":
                    return (ushort)TestObject_Derivative_FieldIndex.P2IntN;
                case "P2INT":
                    return (ushort)TestObject_Derivative_FieldIndex.P2Int;
                case "P3DOUBLEN":
                    return (ushort)TestObject_Derivative_FieldIndex.P3DoubleN;
                case "P3DOUBLE":
                    return (ushort)TestObject_Derivative_FieldIndex.P3Double;
                case "P3INTN":
                    return (ushort)TestObject_Derivative_FieldIndex.P3IntN;
                case "P3INT":
                    return (ushort)TestObject_Derivative_FieldIndex.P3Int;
                case "PERCENTN":
                    return (ushort)TestObject_Derivative_FieldIndex.PercentN;
                case "PERCENT":
                    return (ushort)TestObject_Derivative_FieldIndex.Percent;
                case "RANGEINT8N":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeInt8N;
                case "RANGEINT8":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeInt8;
                case "RANGEINT16N":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeInt16N;
                case "RANGEINT16":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeInt16;
                case "RANGEINT32N":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeInt32N;
                case "RANGEINT32":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeInt32;
                case "RANGEINT64N":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeInt64N;
                case "RANGEINT64":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeInt64;
                case "RANGEUINT8N":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeUInt8N;
                case "RANGEUINT8":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeUInt8;
                case "RANGEUINT16N":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeUInt16N;
                case "RANGEUINT16":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeUInt16;
                case "RANGEUINT32N":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeUInt32N;
                case "RANGEUINT32":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeUInt32;
                case "RANGEUINT64N":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeUInt64N;
                case "RANGEUINT64":
                    return (ushort)TestObject_Derivative_FieldIndex.RangeUInt64;
                case "STRING":
                    return (ushort)TestObject_Derivative_FieldIndex.String;
                case "UDOUBLEN":
                    return (ushort)TestObject_Derivative_FieldIndex.UDoubleN;
                case "UDOUBLEN_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UDoubleN_Ranged;
                case "UDOUBLE":
                    return (ushort)TestObject_Derivative_FieldIndex.UDouble;
                case "UDOUBLE_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UDouble_Ranged;
                case "UINT16N":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt16N;
                case "UINT16N_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt16N_Ranged;
                case "UINT16":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt16;
                case "UINT16_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt16_Ranged;
                case "UINT32N":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt32N;
                case "UINT32N_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt32N_Ranged;
                case "UINT32":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt32;
                case "UINT32_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt32_Ranged;
                case "UINT64N":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt64N;
                case "UINT64N_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt64N_Ranged;
                case "UINT64":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt64;
                case "UINT64_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt64_Ranged;
                case "UINT8N":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt8N;
                case "UINT8N_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt8N_Ranged;
                case "UINT8":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt8;
                case "UINT8_RANGED":
                    return (ushort)TestObject_Derivative_FieldIndex.UInt8_Ranged;
                case "ENUM":
                    return (ushort)TestObject_Derivative_FieldIndex.Enum;
                case "WILDCARD":
                    return (ushort)TestObject_Derivative_FieldIndex.WildCard;
                case "REF":
                    return (ushort)TestObject_Derivative_FieldIndex.Ref;
                case "REF_NOTNULL":
                    return (ushort)TestObject_Derivative_FieldIndex.Ref_NotNull;
                case "REF_SINGLETON":
                    return (ushort)TestObject_Derivative_FieldIndex.Ref_Singleton;
                case "REFGETTER":
                    return (ushort)TestObject_Derivative_FieldIndex.RefGetter;
                case "REFGETTER_NOTNULL":
                    return (ushort)TestObject_Derivative_FieldIndex.RefGetter_NotNull;
                case "REFGETTER_SINGLETON":
                    return (ushort)TestObject_Derivative_FieldIndex.RefGetter_Singleton;
                case "REFSETTER":
                    return (ushort)TestObject_Derivative_FieldIndex.RefSetter;
                case "REFSETTER_NOTNULL":
                    return (ushort)TestObject_Derivative_FieldIndex.RefSetter_NotNull;
                case "REFSETTER_SINGLETON":
                    return (ushort)TestObject_Derivative_FieldIndex.RefSetter_Singleton;
                case "LIST":
                    return (ushort)TestObject_Derivative_FieldIndex.List;
                case "REFLIST":
                    return (ushort)TestObject_Derivative_FieldIndex.RefList;
                case "DICT":
                    return (ushort)TestObject_Derivative_FieldIndex.Dict;
                case "REFDICT":
                    return (ushort)TestObject_Derivative_FieldIndex.RefDict;
                case "KEYREFDICT":
                    return (ushort)TestObject_Derivative_FieldIndex.KeyRefDict;
                case "VALREFDICT":
                    return (ushort)TestObject_Derivative_FieldIndex.ValRefDict;
                case "DICTKEYEDVALUE":
                    return (ushort)TestObject_Derivative_FieldIndex.DictKeyedValue;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.List:
                case TestObject_Derivative_FieldIndex.RefList:
                    return true;
                case TestObject_Derivative_FieldIndex.BoolN:
                case TestObject_Derivative_FieldIndex.Bool:
                case TestObject_Derivative_FieldIndex.CharN:
                case TestObject_Derivative_FieldIndex.Char:
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                case TestObject_Derivative_FieldIndex.DateTime:
                case TestObject_Derivative_FieldIndex.DoubleN:
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.Double:
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                case TestObject_Derivative_FieldIndex.FloatN:
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                case TestObject_Derivative_FieldIndex.Float:
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                case TestObject_Derivative_FieldIndex.Int16N:
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                case TestObject_Derivative_FieldIndex.Int16:
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                case TestObject_Derivative_FieldIndex.Int32N:
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                case TestObject_Derivative_FieldIndex.Int32:
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                case TestObject_Derivative_FieldIndex.Int64N:
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                case TestObject_Derivative_FieldIndex.Int64:
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                case TestObject_Derivative_FieldIndex.Int8N:
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                case TestObject_Derivative_FieldIndex.Int8:
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                case TestObject_Derivative_FieldIndex.Unsafe:
                case TestObject_Derivative_FieldIndex.P2IntN:
                case TestObject_Derivative_FieldIndex.P2Int:
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                case TestObject_Derivative_FieldIndex.P3Double:
                case TestObject_Derivative_FieldIndex.P3IntN:
                case TestObject_Derivative_FieldIndex.P3Int:
                case TestObject_Derivative_FieldIndex.PercentN:
                case TestObject_Derivative_FieldIndex.Percent:
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                case TestObject_Derivative_FieldIndex.RangeInt8:
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                case TestObject_Derivative_FieldIndex.RangeInt16:
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                case TestObject_Derivative_FieldIndex.RangeInt32:
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                case TestObject_Derivative_FieldIndex.RangeInt64:
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                case TestObject_Derivative_FieldIndex.String:
                case TestObject_Derivative_FieldIndex.UDoubleN:
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.UDouble:
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16N:
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16:
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32N:
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32:
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64N:
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64:
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8N:
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8:
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                case TestObject_Derivative_FieldIndex.Enum:
                case TestObject_Derivative_FieldIndex.WildCard:
                case TestObject_Derivative_FieldIndex.Ref:
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                case TestObject_Derivative_FieldIndex.RefGetter:
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefSetter:
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                case TestObject_Derivative_FieldIndex.Dict:
                case TestObject_Derivative_FieldIndex.RefDict:
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                case TestObject_Derivative_FieldIndex.ValRefDict:
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.Ref:
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                case TestObject_Derivative_FieldIndex.RefGetter:
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefSetter:
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefList:
                    return true;
                case TestObject_Derivative_FieldIndex.BoolN:
                case TestObject_Derivative_FieldIndex.Bool:
                case TestObject_Derivative_FieldIndex.CharN:
                case TestObject_Derivative_FieldIndex.Char:
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                case TestObject_Derivative_FieldIndex.DateTime:
                case TestObject_Derivative_FieldIndex.DoubleN:
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.Double:
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                case TestObject_Derivative_FieldIndex.FloatN:
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                case TestObject_Derivative_FieldIndex.Float:
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                case TestObject_Derivative_FieldIndex.Int16N:
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                case TestObject_Derivative_FieldIndex.Int16:
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                case TestObject_Derivative_FieldIndex.Int32N:
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                case TestObject_Derivative_FieldIndex.Int32:
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                case TestObject_Derivative_FieldIndex.Int64N:
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                case TestObject_Derivative_FieldIndex.Int64:
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                case TestObject_Derivative_FieldIndex.Int8N:
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                case TestObject_Derivative_FieldIndex.Int8:
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                case TestObject_Derivative_FieldIndex.Unsafe:
                case TestObject_Derivative_FieldIndex.P2IntN:
                case TestObject_Derivative_FieldIndex.P2Int:
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                case TestObject_Derivative_FieldIndex.P3Double:
                case TestObject_Derivative_FieldIndex.P3IntN:
                case TestObject_Derivative_FieldIndex.P3Int:
                case TestObject_Derivative_FieldIndex.PercentN:
                case TestObject_Derivative_FieldIndex.Percent:
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                case TestObject_Derivative_FieldIndex.RangeInt8:
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                case TestObject_Derivative_FieldIndex.RangeInt16:
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                case TestObject_Derivative_FieldIndex.RangeInt32:
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                case TestObject_Derivative_FieldIndex.RangeInt64:
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                case TestObject_Derivative_FieldIndex.String:
                case TestObject_Derivative_FieldIndex.UDoubleN:
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.UDouble:
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16N:
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16:
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32N:
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32:
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64N:
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64:
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8N:
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8:
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                case TestObject_Derivative_FieldIndex.Enum:
                case TestObject_Derivative_FieldIndex.WildCard:
                case TestObject_Derivative_FieldIndex.List:
                case TestObject_Derivative_FieldIndex.Dict:
                case TestObject_Derivative_FieldIndex.RefDict:
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                case TestObject_Derivative_FieldIndex.ValRefDict:
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                    return true;
                case TestObject_Derivative_FieldIndex.BoolN:
                case TestObject_Derivative_FieldIndex.Bool:
                case TestObject_Derivative_FieldIndex.CharN:
                case TestObject_Derivative_FieldIndex.Char:
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                case TestObject_Derivative_FieldIndex.DateTime:
                case TestObject_Derivative_FieldIndex.DoubleN:
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.Double:
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                case TestObject_Derivative_FieldIndex.FloatN:
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                case TestObject_Derivative_FieldIndex.Float:
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                case TestObject_Derivative_FieldIndex.Int16N:
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                case TestObject_Derivative_FieldIndex.Int16:
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                case TestObject_Derivative_FieldIndex.Int32N:
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                case TestObject_Derivative_FieldIndex.Int32:
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                case TestObject_Derivative_FieldIndex.Int64N:
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                case TestObject_Derivative_FieldIndex.Int64:
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                case TestObject_Derivative_FieldIndex.Int8N:
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                case TestObject_Derivative_FieldIndex.Int8:
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                case TestObject_Derivative_FieldIndex.Unsafe:
                case TestObject_Derivative_FieldIndex.P2IntN:
                case TestObject_Derivative_FieldIndex.P2Int:
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                case TestObject_Derivative_FieldIndex.P3Double:
                case TestObject_Derivative_FieldIndex.P3IntN:
                case TestObject_Derivative_FieldIndex.P3Int:
                case TestObject_Derivative_FieldIndex.PercentN:
                case TestObject_Derivative_FieldIndex.Percent:
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                case TestObject_Derivative_FieldIndex.RangeInt8:
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                case TestObject_Derivative_FieldIndex.RangeInt16:
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                case TestObject_Derivative_FieldIndex.RangeInt32:
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                case TestObject_Derivative_FieldIndex.RangeInt64:
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                case TestObject_Derivative_FieldIndex.String:
                case TestObject_Derivative_FieldIndex.UDoubleN:
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.UDouble:
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16N:
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16:
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32N:
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32:
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64N:
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64:
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8N:
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8:
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                case TestObject_Derivative_FieldIndex.Enum:
                case TestObject_Derivative_FieldIndex.WildCard:
                case TestObject_Derivative_FieldIndex.Ref:
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                case TestObject_Derivative_FieldIndex.RefGetter:
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefSetter:
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                case TestObject_Derivative_FieldIndex.List:
                case TestObject_Derivative_FieldIndex.RefList:
                case TestObject_Derivative_FieldIndex.Dict:
                case TestObject_Derivative_FieldIndex.RefDict:
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                case TestObject_Derivative_FieldIndex.ValRefDict:
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                    return "BoolN";
                case TestObject_Derivative_FieldIndex.Bool:
                    return "Bool";
                case TestObject_Derivative_FieldIndex.CharN:
                    return "CharN";
                case TestObject_Derivative_FieldIndex.Char:
                    return "Char";
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                    return "DateTimeNull";
                case TestObject_Derivative_FieldIndex.DateTime:
                    return "DateTime";
                case TestObject_Derivative_FieldIndex.DoubleN:
                    return "DoubleN";
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                    return "DoubleN_Ranged";
                case TestObject_Derivative_FieldIndex.Double:
                    return "Double";
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                    return "Double_Ranged";
                case TestObject_Derivative_FieldIndex.FloatN:
                    return "FloatN";
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                    return "FloatN_Ranged";
                case TestObject_Derivative_FieldIndex.Float:
                    return "Float";
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                    return "Float_Ranged";
                case TestObject_Derivative_FieldIndex.Int16N:
                    return "Int16N";
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                    return "Int16N_Ranged";
                case TestObject_Derivative_FieldIndex.Int16:
                    return "Int16";
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                    return "Int16_Ranged";
                case TestObject_Derivative_FieldIndex.Int32N:
                    return "Int32N";
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                    return "Int32N_Ranged";
                case TestObject_Derivative_FieldIndex.Int32:
                    return "Int32";
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                    return "Int32_Ranged";
                case TestObject_Derivative_FieldIndex.Int64N:
                    return "Int64N";
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                    return "Int64N_Ranged";
                case TestObject_Derivative_FieldIndex.Int64:
                    return "Int64";
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                    return "Int64_Ranged";
                case TestObject_Derivative_FieldIndex.Int8N:
                    return "Int8N";
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                    return "Int8N_Ranged";
                case TestObject_Derivative_FieldIndex.Int8:
                    return "Int8";
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                    return "Int8_Ranged";
                case TestObject_Derivative_FieldIndex.Unsafe:
                    return "Unsafe";
                case TestObject_Derivative_FieldIndex.P2IntN:
                    return "P2IntN";
                case TestObject_Derivative_FieldIndex.P2Int:
                    return "P2Int";
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                    return "P3DoubleN";
                case TestObject_Derivative_FieldIndex.P3Double:
                    return "P3Double";
                case TestObject_Derivative_FieldIndex.P3IntN:
                    return "P3IntN";
                case TestObject_Derivative_FieldIndex.P3Int:
                    return "P3Int";
                case TestObject_Derivative_FieldIndex.PercentN:
                    return "PercentN";
                case TestObject_Derivative_FieldIndex.Percent:
                    return "Percent";
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                    return "RangeInt8N";
                case TestObject_Derivative_FieldIndex.RangeInt8:
                    return "RangeInt8";
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                    return "RangeInt16N";
                case TestObject_Derivative_FieldIndex.RangeInt16:
                    return "RangeInt16";
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                    return "RangeInt32N";
                case TestObject_Derivative_FieldIndex.RangeInt32:
                    return "RangeInt32";
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                    return "RangeInt64N";
                case TestObject_Derivative_FieldIndex.RangeInt64:
                    return "RangeInt64";
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                    return "RangeUInt8N";
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                    return "RangeUInt8";
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                    return "RangeUInt16N";
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                    return "RangeUInt16";
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                    return "RangeUInt32N";
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                    return "RangeUInt32";
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                    return "RangeUInt64N";
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                    return "RangeUInt64";
                case TestObject_Derivative_FieldIndex.String:
                    return "String";
                case TestObject_Derivative_FieldIndex.UDoubleN:
                    return "UDoubleN";
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                    return "UDoubleN_Ranged";
                case TestObject_Derivative_FieldIndex.UDouble:
                    return "UDouble";
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                    return "UDouble_Ranged";
                case TestObject_Derivative_FieldIndex.UInt16N:
                    return "UInt16N";
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                    return "UInt16N_Ranged";
                case TestObject_Derivative_FieldIndex.UInt16:
                    return "UInt16";
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                    return "UInt16_Ranged";
                case TestObject_Derivative_FieldIndex.UInt32N:
                    return "UInt32N";
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                    return "UInt32N_Ranged";
                case TestObject_Derivative_FieldIndex.UInt32:
                    return "UInt32";
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                    return "UInt32_Ranged";
                case TestObject_Derivative_FieldIndex.UInt64N:
                    return "UInt64N";
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                    return "UInt64N_Ranged";
                case TestObject_Derivative_FieldIndex.UInt64:
                    return "UInt64";
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                    return "UInt64_Ranged";
                case TestObject_Derivative_FieldIndex.UInt8N:
                    return "UInt8N";
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                    return "UInt8N_Ranged";
                case TestObject_Derivative_FieldIndex.UInt8:
                    return "UInt8";
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                    return "UInt8_Ranged";
                case TestObject_Derivative_FieldIndex.Enum:
                    return "Enum";
                case TestObject_Derivative_FieldIndex.WildCard:
                    return "WildCard";
                case TestObject_Derivative_FieldIndex.Ref:
                    return "Ref";
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                    return "Ref_NotNull";
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                    return "Ref_Singleton";
                case TestObject_Derivative_FieldIndex.RefGetter:
                    return "RefGetter";
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                    return "RefGetter_NotNull";
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                    return "RefGetter_Singleton";
                case TestObject_Derivative_FieldIndex.RefSetter:
                    return "RefSetter";
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                    return "RefSetter_NotNull";
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                    return "RefSetter_Singleton";
                case TestObject_Derivative_FieldIndex.List:
                    return "List";
                case TestObject_Derivative_FieldIndex.RefList:
                    return "RefList";
                case TestObject_Derivative_FieldIndex.Dict:
                    return "Dict";
                case TestObject_Derivative_FieldIndex.RefDict:
                    return "RefDict";
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                    return "KeyRefDict";
                case TestObject_Derivative_FieldIndex.ValRefDict:
                    return "ValRefDict";
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    return "DictKeyedValue";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                case TestObject_Derivative_FieldIndex.Bool:
                case TestObject_Derivative_FieldIndex.CharN:
                case TestObject_Derivative_FieldIndex.Char:
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                case TestObject_Derivative_FieldIndex.DateTime:
                case TestObject_Derivative_FieldIndex.DoubleN:
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.Double:
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                case TestObject_Derivative_FieldIndex.FloatN:
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                case TestObject_Derivative_FieldIndex.Float:
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                case TestObject_Derivative_FieldIndex.Int16N:
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                case TestObject_Derivative_FieldIndex.Int16:
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                case TestObject_Derivative_FieldIndex.Int32N:
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                case TestObject_Derivative_FieldIndex.Int32:
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                case TestObject_Derivative_FieldIndex.Int64N:
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                case TestObject_Derivative_FieldIndex.Int64:
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                case TestObject_Derivative_FieldIndex.Int8N:
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                case TestObject_Derivative_FieldIndex.Int8:
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                case TestObject_Derivative_FieldIndex.Unsafe:
                case TestObject_Derivative_FieldIndex.P2IntN:
                case TestObject_Derivative_FieldIndex.P2Int:
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                case TestObject_Derivative_FieldIndex.P3Double:
                case TestObject_Derivative_FieldIndex.P3IntN:
                case TestObject_Derivative_FieldIndex.P3Int:
                case TestObject_Derivative_FieldIndex.PercentN:
                case TestObject_Derivative_FieldIndex.Percent:
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                case TestObject_Derivative_FieldIndex.RangeInt8:
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                case TestObject_Derivative_FieldIndex.RangeInt16:
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                case TestObject_Derivative_FieldIndex.RangeInt32:
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                case TestObject_Derivative_FieldIndex.RangeInt64:
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                case TestObject_Derivative_FieldIndex.String:
                case TestObject_Derivative_FieldIndex.UDoubleN:
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.UDouble:
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16N:
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16:
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32N:
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32:
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64N:
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64:
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8N:
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8:
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                case TestObject_Derivative_FieldIndex.Enum:
                case TestObject_Derivative_FieldIndex.WildCard:
                case TestObject_Derivative_FieldIndex.Ref:
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                case TestObject_Derivative_FieldIndex.RefGetter:
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefSetter:
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                case TestObject_Derivative_FieldIndex.List:
                case TestObject_Derivative_FieldIndex.RefList:
                case TestObject_Derivative_FieldIndex.Dict:
                case TestObject_Derivative_FieldIndex.RefDict:
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                case TestObject_Derivative_FieldIndex.ValRefDict:
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                case TestObject_Derivative_FieldIndex.Bool:
                case TestObject_Derivative_FieldIndex.CharN:
                case TestObject_Derivative_FieldIndex.Char:
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                case TestObject_Derivative_FieldIndex.DateTime:
                case TestObject_Derivative_FieldIndex.DoubleN:
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.Double:
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                case TestObject_Derivative_FieldIndex.FloatN:
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                case TestObject_Derivative_FieldIndex.Float:
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                case TestObject_Derivative_FieldIndex.Int16N:
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                case TestObject_Derivative_FieldIndex.Int16:
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                case TestObject_Derivative_FieldIndex.Int32N:
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                case TestObject_Derivative_FieldIndex.Int32:
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                case TestObject_Derivative_FieldIndex.Int64N:
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                case TestObject_Derivative_FieldIndex.Int64:
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                case TestObject_Derivative_FieldIndex.Int8N:
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                case TestObject_Derivative_FieldIndex.Int8:
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                case TestObject_Derivative_FieldIndex.Unsafe:
                case TestObject_Derivative_FieldIndex.P2IntN:
                case TestObject_Derivative_FieldIndex.P2Int:
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                case TestObject_Derivative_FieldIndex.P3Double:
                case TestObject_Derivative_FieldIndex.P3IntN:
                case TestObject_Derivative_FieldIndex.P3Int:
                case TestObject_Derivative_FieldIndex.PercentN:
                case TestObject_Derivative_FieldIndex.Percent:
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                case TestObject_Derivative_FieldIndex.RangeInt8:
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                case TestObject_Derivative_FieldIndex.RangeInt16:
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                case TestObject_Derivative_FieldIndex.RangeInt32:
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                case TestObject_Derivative_FieldIndex.RangeInt64:
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                case TestObject_Derivative_FieldIndex.String:
                case TestObject_Derivative_FieldIndex.UDoubleN:
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.UDouble:
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16N:
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16:
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32N:
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32:
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64N:
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64:
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8N:
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8:
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                case TestObject_Derivative_FieldIndex.Enum:
                case TestObject_Derivative_FieldIndex.WildCard:
                case TestObject_Derivative_FieldIndex.Ref:
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                case TestObject_Derivative_FieldIndex.RefGetter:
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefSetter:
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                case TestObject_Derivative_FieldIndex.List:
                case TestObject_Derivative_FieldIndex.RefList:
                case TestObject_Derivative_FieldIndex.Dict:
                case TestObject_Derivative_FieldIndex.RefDict:
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                case TestObject_Derivative_FieldIndex.ValRefDict:
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                    return typeof(Boolean?);
                case TestObject_Derivative_FieldIndex.Bool:
                    return typeof(Boolean);
                case TestObject_Derivative_FieldIndex.CharN:
                    return typeof(Char?);
                case TestObject_Derivative_FieldIndex.Char:
                    return typeof(Char);
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                    return typeof(DateTime?);
                case TestObject_Derivative_FieldIndex.DateTime:
                    return typeof(DateTime);
                case TestObject_Derivative_FieldIndex.DoubleN:
                    return typeof(Double?);
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                    return typeof(Double?);
                case TestObject_Derivative_FieldIndex.Double:
                    return typeof(Double);
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                    return typeof(Double);
                case TestObject_Derivative_FieldIndex.FloatN:
                    return typeof(Single?);
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                    return typeof(Single?);
                case TestObject_Derivative_FieldIndex.Float:
                    return typeof(Single);
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                    return typeof(Single);
                case TestObject_Derivative_FieldIndex.Int16N:
                    return typeof(Int16?);
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                    return typeof(Int16?);
                case TestObject_Derivative_FieldIndex.Int16:
                    return typeof(Int16);
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                    return typeof(Int16);
                case TestObject_Derivative_FieldIndex.Int32N:
                    return typeof(Int32?);
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                    return typeof(Int32?);
                case TestObject_Derivative_FieldIndex.Int32:
                    return typeof(Int32);
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                    return typeof(Int32);
                case TestObject_Derivative_FieldIndex.Int64N:
                    return typeof(Int64?);
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                    return typeof(Int64?);
                case TestObject_Derivative_FieldIndex.Int64:
                    return typeof(Int64);
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                    return typeof(Int64);
                case TestObject_Derivative_FieldIndex.Int8N:
                    return typeof(SByte?);
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                    return typeof(SByte?);
                case TestObject_Derivative_FieldIndex.Int8:
                    return typeof(SByte);
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                    return typeof(SByte);
                case TestObject_Derivative_FieldIndex.Unsafe:
                    return typeof(bool);
                case TestObject_Derivative_FieldIndex.P2IntN:
                    return typeof(P2Int?);
                case TestObject_Derivative_FieldIndex.P2Int:
                    return typeof(P2Int);
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                    return typeof(P3Double?);
                case TestObject_Derivative_FieldIndex.P3Double:
                    return typeof(P3Double);
                case TestObject_Derivative_FieldIndex.P3IntN:
                    return typeof(P3Int?);
                case TestObject_Derivative_FieldIndex.P3Int:
                    return typeof(P3Int);
                case TestObject_Derivative_FieldIndex.PercentN:
                    return typeof(Percent?);
                case TestObject_Derivative_FieldIndex.Percent:
                    return typeof(Percent);
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                    return typeof(RangeInt8?);
                case TestObject_Derivative_FieldIndex.RangeInt8:
                    return typeof(RangeInt8);
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                    return typeof(RangeInt16?);
                case TestObject_Derivative_FieldIndex.RangeInt16:
                    return typeof(RangeInt16);
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                    return typeof(RangeInt32?);
                case TestObject_Derivative_FieldIndex.RangeInt32:
                    return typeof(RangeInt32);
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                    return typeof(RangeInt64?);
                case TestObject_Derivative_FieldIndex.RangeInt64:
                    return typeof(RangeInt64);
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                    return typeof(RangeUInt8?);
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                    return typeof(RangeUInt8);
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                    return typeof(RangeUInt16?);
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                    return typeof(RangeUInt16);
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                    return typeof(RangeUInt32?);
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                    return typeof(RangeUInt32);
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                    return typeof(RangeUInt64?);
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                    return typeof(RangeUInt64);
                case TestObject_Derivative_FieldIndex.String:
                    return typeof(String);
                case TestObject_Derivative_FieldIndex.UDoubleN:
                    return typeof(UDouble?);
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                    return typeof(UDouble?);
                case TestObject_Derivative_FieldIndex.UDouble:
                    return typeof(UDouble);
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                    return typeof(UDouble);
                case TestObject_Derivative_FieldIndex.UInt16N:
                    return typeof(UInt16?);
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                    return typeof(UInt16?);
                case TestObject_Derivative_FieldIndex.UInt16:
                    return typeof(UInt16);
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                    return typeof(UInt16);
                case TestObject_Derivative_FieldIndex.UInt32N:
                    return typeof(UInt32?);
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                    return typeof(UInt32?);
                case TestObject_Derivative_FieldIndex.UInt32:
                    return typeof(UInt32);
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                    return typeof(UInt32);
                case TestObject_Derivative_FieldIndex.UInt64N:
                    return typeof(UInt64?);
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                    return typeof(UInt64?);
                case TestObject_Derivative_FieldIndex.UInt64:
                    return typeof(UInt64);
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                    return typeof(UInt64);
                case TestObject_Derivative_FieldIndex.UInt8N:
                    return typeof(Byte?);
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                    return typeof(Byte?);
                case TestObject_Derivative_FieldIndex.UInt8:
                    return typeof(Byte);
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                    return typeof(Byte);
                case TestObject_Derivative_FieldIndex.Enum:
                    return typeof(TestEnum);
                case TestObject_Derivative_FieldIndex.WildCard:
                    return typeof(Object);
                case TestObject_Derivative_FieldIndex.Ref:
                    return typeof(ObjectToRef);
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                    return typeof(ObjectToRef);
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                    return typeof(ObjectToRef);
                case TestObject_Derivative_FieldIndex.RefGetter:
                    return typeof(IObjectToRefGetter);
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                    return typeof(IObjectToRefGetter);
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                    return typeof(IObjectToRefGetter);
                case TestObject_Derivative_FieldIndex.RefSetter:
                    return typeof(IObjectToRef);
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                    return typeof(IObjectToRef);
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                    return typeof(IObjectToRef);
                case TestObject_Derivative_FieldIndex.List:
                    return typeof(NotifyingList<Boolean>);
                case TestObject_Derivative_FieldIndex.RefList:
                    return typeof(NotifyingList<ObjectToRef>);
                case TestObject_Derivative_FieldIndex.Dict:
                    return typeof(NotifyingDictionary<String, Boolean>);
                case TestObject_Derivative_FieldIndex.RefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, ObjectToRef>);
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, Boolean>);
                case TestObject_Derivative_FieldIndex.ValRefDict:
                    return typeof(NotifyingDictionary<String, ObjectToRef>);
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    return typeof(NotifyingDictionary<Int32, ObjectToRef>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolDefinition ILoquiRegistration.ProtocolDefinition => ProtocolDefinition;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class TestObject_DerivativeCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITestObject_Derivative item,
            ITestObject_DerivativeGetter rhs,
            ITestObject_DerivativeGetter def,
            bool doErrorMask,
            Func<TestObject_Derivative_ErrorMask> errorMask,
            TestObject_Derivative_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestObject_Derivative obj,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                case TestObject_Derivative_FieldIndex.Bool:
                case TestObject_Derivative_FieldIndex.CharN:
                case TestObject_Derivative_FieldIndex.Char:
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                case TestObject_Derivative_FieldIndex.DateTime:
                case TestObject_Derivative_FieldIndex.DoubleN:
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.Double:
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                case TestObject_Derivative_FieldIndex.FloatN:
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                case TestObject_Derivative_FieldIndex.Float:
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                case TestObject_Derivative_FieldIndex.Int16N:
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                case TestObject_Derivative_FieldIndex.Int16:
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                case TestObject_Derivative_FieldIndex.Int32N:
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                case TestObject_Derivative_FieldIndex.Int32:
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                case TestObject_Derivative_FieldIndex.Int64N:
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                case TestObject_Derivative_FieldIndex.Int64:
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                case TestObject_Derivative_FieldIndex.Int8N:
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                case TestObject_Derivative_FieldIndex.Int8:
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                case TestObject_Derivative_FieldIndex.Unsafe:
                case TestObject_Derivative_FieldIndex.P2IntN:
                case TestObject_Derivative_FieldIndex.P2Int:
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                case TestObject_Derivative_FieldIndex.P3Double:
                case TestObject_Derivative_FieldIndex.P3IntN:
                case TestObject_Derivative_FieldIndex.P3Int:
                case TestObject_Derivative_FieldIndex.PercentN:
                case TestObject_Derivative_FieldIndex.Percent:
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                case TestObject_Derivative_FieldIndex.RangeInt8:
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                case TestObject_Derivative_FieldIndex.RangeInt16:
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                case TestObject_Derivative_FieldIndex.RangeInt32:
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                case TestObject_Derivative_FieldIndex.RangeInt64:
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                case TestObject_Derivative_FieldIndex.String:
                case TestObject_Derivative_FieldIndex.UDoubleN:
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.UDouble:
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16N:
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16:
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32N:
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32:
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64N:
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64:
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8N:
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8:
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                case TestObject_Derivative_FieldIndex.Enum:
                case TestObject_Derivative_FieldIndex.WildCard:
                case TestObject_Derivative_FieldIndex.Ref:
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                case TestObject_Derivative_FieldIndex.RefGetter:
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefSetter:
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                case TestObject_Derivative_FieldIndex.List:
                case TestObject_Derivative_FieldIndex.RefList:
                case TestObject_Derivative_FieldIndex.Dict:
                case TestObject_Derivative_FieldIndex.RefDict:
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                case TestObject_Derivative_FieldIndex.ValRefDict:
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    throw new ArgumentException($"Tried to set at a derivative index {index}");
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestObject_Derivative obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                case TestObject_Derivative_FieldIndex.Bool:
                case TestObject_Derivative_FieldIndex.CharN:
                case TestObject_Derivative_FieldIndex.Char:
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                case TestObject_Derivative_FieldIndex.DateTime:
                case TestObject_Derivative_FieldIndex.DoubleN:
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.Double:
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                case TestObject_Derivative_FieldIndex.FloatN:
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                case TestObject_Derivative_FieldIndex.Float:
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                case TestObject_Derivative_FieldIndex.Int16N:
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                case TestObject_Derivative_FieldIndex.Int16:
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                case TestObject_Derivative_FieldIndex.Int32N:
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                case TestObject_Derivative_FieldIndex.Int32:
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                case TestObject_Derivative_FieldIndex.Int64N:
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                case TestObject_Derivative_FieldIndex.Int64:
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                case TestObject_Derivative_FieldIndex.Int8N:
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                case TestObject_Derivative_FieldIndex.Int8:
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                case TestObject_Derivative_FieldIndex.Unsafe:
                case TestObject_Derivative_FieldIndex.P2IntN:
                case TestObject_Derivative_FieldIndex.P2Int:
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                case TestObject_Derivative_FieldIndex.P3Double:
                case TestObject_Derivative_FieldIndex.P3IntN:
                case TestObject_Derivative_FieldIndex.P3Int:
                case TestObject_Derivative_FieldIndex.PercentN:
                case TestObject_Derivative_FieldIndex.Percent:
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                case TestObject_Derivative_FieldIndex.RangeInt8:
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                case TestObject_Derivative_FieldIndex.RangeInt16:
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                case TestObject_Derivative_FieldIndex.RangeInt32:
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                case TestObject_Derivative_FieldIndex.RangeInt64:
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                case TestObject_Derivative_FieldIndex.String:
                case TestObject_Derivative_FieldIndex.UDoubleN:
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.UDouble:
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16N:
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16:
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32N:
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32:
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64N:
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64:
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8N:
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8:
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                case TestObject_Derivative_FieldIndex.Enum:
                case TestObject_Derivative_FieldIndex.WildCard:
                case TestObject_Derivative_FieldIndex.Ref:
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                case TestObject_Derivative_FieldIndex.RefGetter:
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefSetter:
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                case TestObject_Derivative_FieldIndex.List:
                case TestObject_Derivative_FieldIndex.RefList:
                case TestObject_Derivative_FieldIndex.Dict:
                case TestObject_Derivative_FieldIndex.RefDict:
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                case TestObject_Derivative_FieldIndex.ValRefDict:
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    throw new ArgumentException($"Tried to unset at a derivative index {index}");
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestObject_Derivative obj)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                case TestObject_Derivative_FieldIndex.Bool:
                case TestObject_Derivative_FieldIndex.CharN:
                case TestObject_Derivative_FieldIndex.Char:
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                case TestObject_Derivative_FieldIndex.DateTime:
                case TestObject_Derivative_FieldIndex.DoubleN:
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.Double:
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                case TestObject_Derivative_FieldIndex.FloatN:
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                case TestObject_Derivative_FieldIndex.Float:
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                case TestObject_Derivative_FieldIndex.Int16N:
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                case TestObject_Derivative_FieldIndex.Int16:
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                case TestObject_Derivative_FieldIndex.Int32N:
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                case TestObject_Derivative_FieldIndex.Int32:
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                case TestObject_Derivative_FieldIndex.Int64N:
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                case TestObject_Derivative_FieldIndex.Int64:
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                case TestObject_Derivative_FieldIndex.Int8N:
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                case TestObject_Derivative_FieldIndex.Int8:
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                case TestObject_Derivative_FieldIndex.Unsafe:
                case TestObject_Derivative_FieldIndex.P2IntN:
                case TestObject_Derivative_FieldIndex.P2Int:
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                case TestObject_Derivative_FieldIndex.P3Double:
                case TestObject_Derivative_FieldIndex.P3IntN:
                case TestObject_Derivative_FieldIndex.P3Int:
                case TestObject_Derivative_FieldIndex.PercentN:
                case TestObject_Derivative_FieldIndex.Percent:
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                case TestObject_Derivative_FieldIndex.RangeInt8:
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                case TestObject_Derivative_FieldIndex.RangeInt16:
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                case TestObject_Derivative_FieldIndex.RangeInt32:
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                case TestObject_Derivative_FieldIndex.RangeInt64:
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                case TestObject_Derivative_FieldIndex.String:
                case TestObject_Derivative_FieldIndex.UDoubleN:
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                case TestObject_Derivative_FieldIndex.UDouble:
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16N:
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt16:
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32N:
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt32:
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64N:
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt64:
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8N:
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                case TestObject_Derivative_FieldIndex.UInt8:
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                case TestObject_Derivative_FieldIndex.Enum:
                case TestObject_Derivative_FieldIndex.WildCard:
                case TestObject_Derivative_FieldIndex.Ref:
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                case TestObject_Derivative_FieldIndex.RefGetter:
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                case TestObject_Derivative_FieldIndex.RefSetter:
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                case TestObject_Derivative_FieldIndex.List:
                case TestObject_Derivative_FieldIndex.RefList:
                case TestObject_Derivative_FieldIndex.Dict:
                case TestObject_Derivative_FieldIndex.RefDict:
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                case TestObject_Derivative_FieldIndex.ValRefDict:
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestObject_DerivativeGetter obj)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                    return obj.BoolN;
                case TestObject_Derivative_FieldIndex.Bool:
                    return obj.Bool;
                case TestObject_Derivative_FieldIndex.CharN:
                    return obj.CharN;
                case TestObject_Derivative_FieldIndex.Char:
                    return obj.Char;
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                    return obj.DateTimeNull;
                case TestObject_Derivative_FieldIndex.DateTime:
                    return obj.DateTime;
                case TestObject_Derivative_FieldIndex.DoubleN:
                    return obj.DoubleN;
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                    return obj.DoubleN_Ranged;
                case TestObject_Derivative_FieldIndex.Double:
                    return obj.Double;
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                    return obj.Double_Ranged;
                case TestObject_Derivative_FieldIndex.FloatN:
                    return obj.FloatN;
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                    return obj.FloatN_Ranged;
                case TestObject_Derivative_FieldIndex.Float:
                    return obj.Float;
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                    return obj.Float_Ranged;
                case TestObject_Derivative_FieldIndex.Int16N:
                    return obj.Int16N;
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                    return obj.Int16N_Ranged;
                case TestObject_Derivative_FieldIndex.Int16:
                    return obj.Int16;
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                    return obj.Int16_Ranged;
                case TestObject_Derivative_FieldIndex.Int32N:
                    return obj.Int32N;
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                    return obj.Int32N_Ranged;
                case TestObject_Derivative_FieldIndex.Int32:
                    return obj.Int32;
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                    return obj.Int32_Ranged;
                case TestObject_Derivative_FieldIndex.Int64N:
                    return obj.Int64N;
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                    return obj.Int64N_Ranged;
                case TestObject_Derivative_FieldIndex.Int64:
                    return obj.Int64;
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                    return obj.Int64_Ranged;
                case TestObject_Derivative_FieldIndex.Int8N:
                    return obj.Int8N;
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                    return obj.Int8N_Ranged;
                case TestObject_Derivative_FieldIndex.Int8:
                    return obj.Int8;
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                    return obj.Int8_Ranged;
                case TestObject_Derivative_FieldIndex.Unsafe:
                    return obj.Unsafe;
                case TestObject_Derivative_FieldIndex.P2IntN:
                    return obj.P2IntN;
                case TestObject_Derivative_FieldIndex.P2Int:
                    return obj.P2Int;
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN;
                case TestObject_Derivative_FieldIndex.P3Double:
                    return obj.P3Double;
                case TestObject_Derivative_FieldIndex.P3IntN:
                    return obj.P3IntN;
                case TestObject_Derivative_FieldIndex.P3Int:
                    return obj.P3Int;
                case TestObject_Derivative_FieldIndex.PercentN:
                    return obj.PercentN;
                case TestObject_Derivative_FieldIndex.Percent:
                    return obj.Percent;
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                    return obj.RangeInt8N;
                case TestObject_Derivative_FieldIndex.RangeInt8:
                    return obj.RangeInt8;
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                    return obj.RangeInt16N;
                case TestObject_Derivative_FieldIndex.RangeInt16:
                    return obj.RangeInt16;
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                    return obj.RangeInt32N;
                case TestObject_Derivative_FieldIndex.RangeInt32:
                    return obj.RangeInt32;
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                    return obj.RangeInt64N;
                case TestObject_Derivative_FieldIndex.RangeInt64:
                    return obj.RangeInt64;
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                    return obj.RangeUInt8N;
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                    return obj.RangeUInt8;
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                    return obj.RangeUInt16N;
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                    return obj.RangeUInt16;
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                    return obj.RangeUInt32N;
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                    return obj.RangeUInt32;
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                    return obj.RangeUInt64N;
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                    return obj.RangeUInt64;
                case TestObject_Derivative_FieldIndex.String:
                    return obj.String;
                case TestObject_Derivative_FieldIndex.UDoubleN:
                    return obj.UDoubleN;
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                    return obj.UDoubleN_Ranged;
                case TestObject_Derivative_FieldIndex.UDouble:
                    return obj.UDouble;
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                    return obj.UDouble_Ranged;
                case TestObject_Derivative_FieldIndex.UInt16N:
                    return obj.UInt16N;
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                    return obj.UInt16N_Ranged;
                case TestObject_Derivative_FieldIndex.UInt16:
                    return obj.UInt16;
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                    return obj.UInt16_Ranged;
                case TestObject_Derivative_FieldIndex.UInt32N:
                    return obj.UInt32N;
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                    return obj.UInt32N_Ranged;
                case TestObject_Derivative_FieldIndex.UInt32:
                    return obj.UInt32;
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                    return obj.UInt32_Ranged;
                case TestObject_Derivative_FieldIndex.UInt64N:
                    return obj.UInt64N;
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                    return obj.UInt64N_Ranged;
                case TestObject_Derivative_FieldIndex.UInt64:
                    return obj.UInt64;
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                    return obj.UInt64_Ranged;
                case TestObject_Derivative_FieldIndex.UInt8N:
                    return obj.UInt8N;
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                    return obj.UInt8N_Ranged;
                case TestObject_Derivative_FieldIndex.UInt8:
                    return obj.UInt8;
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                    return obj.UInt8_Ranged;
                case TestObject_Derivative_FieldIndex.Enum:
                    return obj.Enum;
                case TestObject_Derivative_FieldIndex.WildCard:
                    return obj.WildCard;
                case TestObject_Derivative_FieldIndex.Ref:
                    return obj.Ref;
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                    return obj.Ref_NotNull;
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                    return obj.Ref_Singleton;
                case TestObject_Derivative_FieldIndex.RefGetter:
                    return obj.RefGetter;
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                    return obj.RefGetter_NotNull;
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                    return obj.RefGetter_Singleton;
                case TestObject_Derivative_FieldIndex.RefSetter:
                    return obj.RefSetter;
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                    return obj.RefSetter_NotNull;
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                    return obj.RefSetter_Singleton;
                case TestObject_Derivative_FieldIndex.List:
                    return obj.List;
                case TestObject_Derivative_FieldIndex.RefList:
                    return obj.RefList;
                case TestObject_Derivative_FieldIndex.Dict:
                    return obj.Dict;
                case TestObject_Derivative_FieldIndex.RefDict:
                    return obj.RefDict;
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                    return obj.KeyRefDict;
                case TestObject_Derivative_FieldIndex.ValRefDict:
                    return obj.ValRefDict;
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITestObject_Derivative item,
            NotifyingUnsetParameters? cmds = null)
        {
        }

        #region XML Translation
        public static void Write_XML(
            ITestObject_DerivativeGetter item,
            Stream stream)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: false,
                    errorMask: out TestObject_Derivative_ErrorMask errorMask);
            }
        }

        public static void Write_XML(
            ITestObject_DerivativeGetter item,
            Stream stream,
            out TestObject_Derivative_ErrorMask errorMask)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: true,
                    errorMask: out errorMask);
            }
        }

        public static void Write_XML(
            ITestObject_DerivativeGetter item,
            XmlWriter writer,
            out TestObject_Derivative_ErrorMask errorMask,
            string name = null)
        {
            Write_XML(
                writer: writer,
                name: name,
                item: item,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static void Write_XML(
            ITestObject_DerivativeGetter item,
            XmlWriter writer,
            string name)
        {
            Write_XML(
                writer: writer,
                name: name,
                item: item,
                doMasks: false,
                errorMask: out TestObject_Derivative_ErrorMask errorMask);
        }

        public static void Write_XML(
            ITestObject_DerivativeGetter item,
            XmlWriter writer)
        {
            Write_XML(
                writer: writer,
                name: null,
                item: item,
                doMasks: false,
                errorMask: out TestObject_Derivative_ErrorMask errorMask);
        }

        public static void Write_XML(
            XmlWriter writer,
            string name,
            ITestObject_DerivativeGetter item,
            bool doMasks,
            out TestObject_Derivative_ErrorMask errorMask)
        {
            TestObject_Derivative_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestObject_Derivative_ErrorMask()) : default(Func<TestObject_Derivative_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            string name,
            ITestObject_DerivativeGetter item,
            bool doMasks,
            Func<TestObject_Derivative_ErrorMask> errorMask)
        {
            try
            {
                using (new ElementWrapper(writer, nameof(TestObject_Derivative)))
                {
                    if (!string.IsNullOrEmpty(name))
                    {
                        writer.WriteAttributeString("name", name);
                    }
                }
            }
            catch (Exception ex)
            {
                if (!doMasks) throw;
                errorMask().Overall = ex;
            }
        }
        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestObject_Derivative_Mask<T> 
    {
        public T BoolN;
        public T Bool;
        public T CharN;
        public T Char;
        public T DateTimeNull;
        public T DateTime;
        public T DoubleN;
        public T DoubleN_Ranged;
        public T Double;
        public T Double_Ranged;
        public T FloatN;
        public T FloatN_Ranged;
        public T Float;
        public T Float_Ranged;
        public T Int16N;
        public T Int16N_Ranged;
        public T Int16;
        public T Int16_Ranged;
        public T Int32N;
        public T Int32N_Ranged;
        public T Int32;
        public T Int32_Ranged;
        public T Int64N;
        public T Int64N_Ranged;
        public T Int64;
        public T Int64_Ranged;
        public T Int8N;
        public T Int8N_Ranged;
        public T Int8;
        public T Int8_Ranged;
        public T Unsafe;
        public T P2IntN;
        public T P2Int;
        public T P3DoubleN;
        public T P3Double;
        public T P3IntN;
        public T P3Int;
        public T PercentN;
        public T Percent;
        public T RangeInt8N;
        public T RangeInt8;
        public T RangeInt16N;
        public T RangeInt16;
        public T RangeInt32N;
        public T RangeInt32;
        public T RangeInt64N;
        public T RangeInt64;
        public T RangeUInt8N;
        public T RangeUInt8;
        public T RangeUInt16N;
        public T RangeUInt16;
        public T RangeUInt32N;
        public T RangeUInt32;
        public T RangeUInt64N;
        public T RangeUInt64;
        public T String;
        public T UDoubleN;
        public T UDoubleN_Ranged;
        public T UDouble;
        public T UDouble_Ranged;
        public T UInt16N;
        public T UInt16N_Ranged;
        public T UInt16;
        public T UInt16_Ranged;
        public T UInt32N;
        public T UInt32N_Ranged;
        public T UInt32;
        public T UInt32_Ranged;
        public T UInt64N;
        public T UInt64N_Ranged;
        public T UInt64;
        public T UInt64_Ranged;
        public T UInt8N;
        public T UInt8N_Ranged;
        public T UInt8;
        public T UInt8_Ranged;
        public T Enum;
        public T WildCard;
        public MaskItem<T, ObjectToRef_Mask<T>> Ref { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_Singleton { get; set; }
        public MaskItem<T, IEnumerable<T>> List;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> RefList;
        public MaskItem<T, IEnumerable<KeyValuePair<T, T>>> Dict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>> RefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, T>>> KeyRefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<T, MaskItem<T, ObjectToRef_Mask<T>>>>> ValRefDict;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> DictKeyedValue;
    }

    public class TestObject_Derivative_ErrorMask : IErrorMask
    {
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception BoolN;
        public Exception Bool;
        public Exception CharN;
        public Exception Char;
        public Exception DateTimeNull;
        public Exception DateTime;
        public Exception DoubleN;
        public Exception DoubleN_Ranged;
        public Exception Double;
        public Exception Double_Ranged;
        public Exception FloatN;
        public Exception FloatN_Ranged;
        public Exception Float;
        public Exception Float_Ranged;
        public Exception Int16N;
        public Exception Int16N_Ranged;
        public Exception Int16;
        public Exception Int16_Ranged;
        public Exception Int32N;
        public Exception Int32N_Ranged;
        public Exception Int32;
        public Exception Int32_Ranged;
        public Exception Int64N;
        public Exception Int64N_Ranged;
        public Exception Int64;
        public Exception Int64_Ranged;
        public Exception Int8N;
        public Exception Int8N_Ranged;
        public Exception Int8;
        public Exception Int8_Ranged;
        public Exception Unsafe;
        public Exception P2IntN;
        public Exception P2Int;
        public Exception P3DoubleN;
        public Exception P3Double;
        public Exception P3IntN;
        public Exception P3Int;
        public Exception PercentN;
        public Exception Percent;
        public Exception RangeInt8N;
        public Exception RangeInt8;
        public Exception RangeInt16N;
        public Exception RangeInt16;
        public Exception RangeInt32N;
        public Exception RangeInt32;
        public Exception RangeInt64N;
        public Exception RangeInt64;
        public Exception RangeUInt8N;
        public Exception RangeUInt8;
        public Exception RangeUInt16N;
        public Exception RangeUInt16;
        public Exception RangeUInt32N;
        public Exception RangeUInt32;
        public Exception RangeUInt64N;
        public Exception RangeUInt64;
        public Exception String;
        public Exception UDoubleN;
        public Exception UDoubleN_Ranged;
        public Exception UDouble;
        public Exception UDouble_Ranged;
        public Exception UInt16N;
        public Exception UInt16N_Ranged;
        public Exception UInt16;
        public Exception UInt16_Ranged;
        public Exception UInt32N;
        public Exception UInt32N_Ranged;
        public Exception UInt32;
        public Exception UInt32_Ranged;
        public Exception UInt64N;
        public Exception UInt64N_Ranged;
        public Exception UInt64;
        public Exception UInt64_Ranged;
        public Exception UInt8N;
        public Exception UInt8N_Ranged;
        public Exception UInt8;
        public Exception UInt8_Ranged;
        public Exception Enum;
        public Exception WildCard;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_Singleton;
        public MaskItem<Exception, IEnumerable<Exception>> List;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> RefList;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> Dict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>> RefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>> KeyRefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>> ValRefDict;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> DictKeyedValue;

        public void SetNthException(ushort index, Exception ex)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                    this.BoolN = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Bool:
                    this.Bool = ex;
                    break;
                case TestObject_Derivative_FieldIndex.CharN:
                    this.CharN = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Char:
                    this.Char = ex;
                    break;
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                    this.DateTimeNull = ex;
                    break;
                case TestObject_Derivative_FieldIndex.DateTime:
                    this.DateTime = ex;
                    break;
                case TestObject_Derivative_FieldIndex.DoubleN:
                    this.DoubleN = ex;
                    break;
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Double:
                    this.Double = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                    this.Double_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.FloatN:
                    this.FloatN = ex;
                    break;
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Float:
                    this.Float = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                    this.Float_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int16N:
                    this.Int16N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int16:
                    this.Int16 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int32N:
                    this.Int32N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int32:
                    this.Int32 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int64N:
                    this.Int64N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int64:
                    this.Int64 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int8N:
                    this.Int8N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int8:
                    this.Int8 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Unsafe:
                    this.Unsafe = ex;
                    break;
                case TestObject_Derivative_FieldIndex.P2IntN:
                    this.P2IntN = ex;
                    break;
                case TestObject_Derivative_FieldIndex.P2Int:
                    this.P2Int = ex;
                    break;
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                    this.P3DoubleN = ex;
                    break;
                case TestObject_Derivative_FieldIndex.P3Double:
                    this.P3Double = ex;
                    break;
                case TestObject_Derivative_FieldIndex.P3IntN:
                    this.P3IntN = ex;
                    break;
                case TestObject_Derivative_FieldIndex.P3Int:
                    this.P3Int = ex;
                    break;
                case TestObject_Derivative_FieldIndex.PercentN:
                    this.PercentN = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Percent:
                    this.Percent = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                    this.RangeInt8N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt8:
                    this.RangeInt8 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                    this.RangeInt16N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt16:
                    this.RangeInt16 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                    this.RangeInt32N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt32:
                    this.RangeInt32 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                    this.RangeInt64N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt64:
                    this.RangeInt64 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.String:
                    this.String = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UDoubleN:
                    this.UDoubleN = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UDouble:
                    this.UDouble = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt16N:
                    this.UInt16N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt16:
                    this.UInt16 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt32N:
                    this.UInt32N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt32:
                    this.UInt32 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt64N:
                    this.UInt64N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt64:
                    this.UInt64 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt8N:
                    this.UInt8N = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt8:
                    this.UInt8 = ex;
                    break;
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Enum:
                    this.Enum = ex;
                    break;
                case TestObject_Derivative_FieldIndex.WildCard:
                    this.WildCard = ex;
                    break;
                case TestObject_Derivative_FieldIndex.Ref:
                    this.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.RefGetter:
                    this.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.RefSetter:
                    this.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.List:
                    this.List = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.RefList:
                    this.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.Dict:
                    this.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.RefDict:
                    this.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                    this.KeyRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.ValRefDict:
                    this.ValRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            TestObject_Derivative_FieldIndex enu = (TestObject_Derivative_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Derivative_FieldIndex.BoolN:
                    this.BoolN = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Bool:
                    this.Bool = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.CharN:
                    this.CharN = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Char:
                    this.Char = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.DateTimeNull:
                    this.DateTimeNull = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.DateTime:
                    this.DateTime = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.DoubleN:
                    this.DoubleN = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Double:
                    this.Double = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Double_Ranged:
                    this.Double_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.FloatN:
                    this.FloatN = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Float:
                    this.Float = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Float_Ranged:
                    this.Float_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int16N:
                    this.Int16N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int16:
                    this.Int16 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int32N:
                    this.Int32N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int32:
                    this.Int32 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int64N:
                    this.Int64N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int64:
                    this.Int64 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int8N:
                    this.Int8N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int8:
                    this.Int8 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Unsafe:
                    this.Unsafe = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.P2IntN:
                    this.P2IntN = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.P2Int:
                    this.P2Int = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.P3DoubleN:
                    this.P3DoubleN = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.P3Double:
                    this.P3Double = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.P3IntN:
                    this.P3IntN = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.P3Int:
                    this.P3Int = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.PercentN:
                    this.PercentN = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Percent:
                    this.Percent = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt8N:
                    this.RangeInt8N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt8:
                    this.RangeInt8 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt16N:
                    this.RangeInt16N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt16:
                    this.RangeInt16 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt32N:
                    this.RangeInt32N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt32:
                    this.RangeInt32 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt64N:
                    this.RangeInt64N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeInt64:
                    this.RangeInt64 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.String:
                    this.String = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UDoubleN:
                    this.UDoubleN = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UDouble:
                    this.UDouble = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt16N:
                    this.UInt16N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt16:
                    this.UInt16 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt32N:
                    this.UInt32N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt32:
                    this.UInt32 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt64N:
                    this.UInt64N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt64:
                    this.UInt64 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt8N:
                    this.UInt8N = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt8:
                    this.UInt8 = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Enum:
                    this.Enum = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.WildCard:
                    this.WildCard = (Exception)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Ref:
                    this.Ref = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RefGetter:
                    this.RefGetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RefSetter:
                    this.RefSetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.List:
                    this.List = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RefList:
                    this.RefList = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.Dict:
                    this.Dict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.RefDict:
                    this.RefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.KeyRefDict:
                    this.KeyRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.ValRefDict:
                    this.ValRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_Derivative_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestObject_Derivative_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (BoolN != null)
                {
                    fg.AppendLine("BoolN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(BoolN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Bool != null)
                {
                    fg.AppendLine("Bool =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Bool.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (CharN != null)
                {
                    fg.AppendLine("CharN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(CharN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Char != null)
                {
                    fg.AppendLine("Char =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Char.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DateTimeNull != null)
                {
                    fg.AppendLine("DateTimeNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DateTimeNull.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DateTime != null)
                {
                    fg.AppendLine("DateTime =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DateTime.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DoubleN != null)
                {
                    fg.AppendLine("DoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DoubleN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (DoubleN_Ranged != null)
                {
                    fg.AppendLine("DoubleN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(DoubleN_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Double != null)
                {
                    fg.AppendLine("Double =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Double.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Double_Ranged != null)
                {
                    fg.AppendLine("Double_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Double_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (FloatN != null)
                {
                    fg.AppendLine("FloatN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(FloatN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (FloatN_Ranged != null)
                {
                    fg.AppendLine("FloatN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(FloatN_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Float != null)
                {
                    fg.AppendLine("Float =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Float.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Float_Ranged != null)
                {
                    fg.AppendLine("Float_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Float_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16N != null)
                {
                    fg.AppendLine("Int16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16N_Ranged != null)
                {
                    fg.AppendLine("Int16N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16 != null)
                {
                    fg.AppendLine("Int16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int16_Ranged != null)
                {
                    fg.AppendLine("Int16_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int16_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32N != null)
                {
                    fg.AppendLine("Int32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32N_Ranged != null)
                {
                    fg.AppendLine("Int32N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32 != null)
                {
                    fg.AppendLine("Int32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int32_Ranged != null)
                {
                    fg.AppendLine("Int32_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int32_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64N != null)
                {
                    fg.AppendLine("Int64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64N_Ranged != null)
                {
                    fg.AppendLine("Int64N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64 != null)
                {
                    fg.AppendLine("Int64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int64_Ranged != null)
                {
                    fg.AppendLine("Int64_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int64_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8N != null)
                {
                    fg.AppendLine("Int8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8N_Ranged != null)
                {
                    fg.AppendLine("Int8N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8 != null)
                {
                    fg.AppendLine("Int8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Int8_Ranged != null)
                {
                    fg.AppendLine("Int8_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Int8_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Unsafe != null)
                {
                    fg.AppendLine("Unsafe =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Unsafe.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P2IntN != null)
                {
                    fg.AppendLine("P2IntN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P2IntN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P2Int != null)
                {
                    fg.AppendLine("P2Int =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P2Int.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3DoubleN != null)
                {
                    fg.AppendLine("P3DoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3DoubleN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3Double != null)
                {
                    fg.AppendLine("P3Double =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3Double.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3IntN != null)
                {
                    fg.AppendLine("P3IntN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3IntN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (P3Int != null)
                {
                    fg.AppendLine("P3Int =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(P3Int.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (PercentN != null)
                {
                    fg.AppendLine("PercentN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(PercentN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Percent != null)
                {
                    fg.AppendLine("Percent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Percent.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt8N != null)
                {
                    fg.AppendLine("RangeInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt8 != null)
                {
                    fg.AppendLine("RangeInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt16N != null)
                {
                    fg.AppendLine("RangeInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt16 != null)
                {
                    fg.AppendLine("RangeInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt32N != null)
                {
                    fg.AppendLine("RangeInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt32 != null)
                {
                    fg.AppendLine("RangeInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt64N != null)
                {
                    fg.AppendLine("RangeInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeInt64 != null)
                {
                    fg.AppendLine("RangeInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeInt64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt8N != null)
                {
                    fg.AppendLine("RangeUInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt8 != null)
                {
                    fg.AppendLine("RangeUInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt16N != null)
                {
                    fg.AppendLine("RangeUInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt16 != null)
                {
                    fg.AppendLine("RangeUInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt32N != null)
                {
                    fg.AppendLine("RangeUInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt32 != null)
                {
                    fg.AppendLine("RangeUInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt64N != null)
                {
                    fg.AppendLine("RangeUInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (RangeUInt64 != null)
                {
                    fg.AppendLine("RangeUInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(RangeUInt64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (String != null)
                {
                    fg.AppendLine("String =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(String.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDoubleN != null)
                {
                    fg.AppendLine("UDoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDoubleN.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDoubleN_Ranged != null)
                {
                    fg.AppendLine("UDoubleN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDoubleN_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDouble != null)
                {
                    fg.AppendLine("UDouble =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDouble.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UDouble_Ranged != null)
                {
                    fg.AppendLine("UDouble_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UDouble_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16N != null)
                {
                    fg.AppendLine("UInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16N_Ranged != null)
                {
                    fg.AppendLine("UInt16N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16 != null)
                {
                    fg.AppendLine("UInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt16_Ranged != null)
                {
                    fg.AppendLine("UInt16_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt16_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32N != null)
                {
                    fg.AppendLine("UInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32N_Ranged != null)
                {
                    fg.AppendLine("UInt32N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32 != null)
                {
                    fg.AppendLine("UInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt32_Ranged != null)
                {
                    fg.AppendLine("UInt32_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt32_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64N != null)
                {
                    fg.AppendLine("UInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64N_Ranged != null)
                {
                    fg.AppendLine("UInt64N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64 != null)
                {
                    fg.AppendLine("UInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt64_Ranged != null)
                {
                    fg.AppendLine("UInt64_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt64_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8N != null)
                {
                    fg.AppendLine("UInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8N.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8N_Ranged != null)
                {
                    fg.AppendLine("UInt8N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8N_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8 != null)
                {
                    fg.AppendLine("UInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (UInt8_Ranged != null)
                {
                    fg.AppendLine("UInt8_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(UInt8_Ranged.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Enum != null)
                {
                    fg.AppendLine("Enum =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(Enum.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (WildCard != null)
                {
                    fg.AppendLine("WildCard =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine(WildCard.ToString());
                    }
                    fg.AppendLine("]");
                }
                if (Ref != null)
                {
                    fg.AppendLine("Ref =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref.Overall != null)
                        {
                            fg.AppendLine(Ref.Overall.ToString());
                        }
                        if (Ref.Specific != null)
                        {
                            Ref.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Ref_NotNull != null)
                {
                    fg.AppendLine("Ref_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref_NotNull.Overall != null)
                        {
                            fg.AppendLine(Ref_NotNull.Overall.ToString());
                        }
                        if (Ref_NotNull.Specific != null)
                        {
                            Ref_NotNull.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Ref_Singleton != null)
                {
                    fg.AppendLine("Ref_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Ref_Singleton.Overall != null)
                        {
                            fg.AppendLine(Ref_Singleton.Overall.ToString());
                        }
                        if (Ref_Singleton.Specific != null)
                        {
                            Ref_Singleton.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefGetter != null)
                {
                    fg.AppendLine("RefGetter =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefGetter.Overall != null)
                        {
                            fg.AppendLine(RefGetter.Overall.ToString());
                        }
                        if (RefGetter.Specific != null)
                        {
                            RefGetter.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefGetter_NotNull != null)
                {
                    fg.AppendLine("RefGetter_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefGetter_NotNull.Overall != null)
                        {
                            fg.AppendLine(RefGetter_NotNull.Overall.ToString());
                        }
                        if (RefGetter_NotNull.Specific != null)
                        {
                            RefGetter_NotNull.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefGetter_Singleton != null)
                {
                    fg.AppendLine("RefGetter_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefGetter_Singleton.Overall != null)
                        {
                            fg.AppendLine(RefGetter_Singleton.Overall.ToString());
                        }
                        if (RefGetter_Singleton.Specific != null)
                        {
                            RefGetter_Singleton.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefSetter != null)
                {
                    fg.AppendLine("RefSetter =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefSetter.Overall != null)
                        {
                            fg.AppendLine(RefSetter.Overall.ToString());
                        }
                        if (RefSetter.Specific != null)
                        {
                            RefSetter.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefSetter_NotNull != null)
                {
                    fg.AppendLine("RefSetter_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefSetter_NotNull.Overall != null)
                        {
                            fg.AppendLine(RefSetter_NotNull.Overall.ToString());
                        }
                        if (RefSetter_NotNull.Specific != null)
                        {
                            RefSetter_NotNull.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefSetter_Singleton != null)
                {
                    fg.AppendLine("RefSetter_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefSetter_Singleton.Overall != null)
                        {
                            fg.AppendLine(RefSetter_Singleton.Overall.ToString());
                        }
                        if (RefSetter_Singleton.Specific != null)
                        {
                            RefSetter_Singleton.Specific.ToString(fg);
                        }
                    }
                    fg.AppendLine("]");
                }
                if (List != null)
                {
                    fg.AppendLine("List =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (List.Overall != null)
                        {
                            fg.AppendLine(List.Overall.ToString());
                        }
                        if (List.Specific != null)
                        {
                            foreach (var subItem in List.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine(subItem.ToString());
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefList != null)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefList.Overall != null)
                        {
                            fg.AppendLine(RefList.Overall.ToString());
                        }
                        if (RefList.Specific != null)
                        {
                            foreach (var subItem in RefList.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    if (subItem.Overall != null)
                                    {
                                        fg.AppendLine(subItem.Overall.ToString());
                                    }
                                    if (subItem.Specific != null)
                                    {
                                        subItem.Specific.ToString(fg);
                                    }
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Dict != null)
                {
                    fg.AppendLine("Dict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Dict.Overall != null)
                        {
                            fg.AppendLine(Dict.Overall.ToString());
                        }
                        if (Dict.Specific != null)
                        {
                            foreach (var subItem in Dict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Key.ToString());
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Value.ToString());
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefDict != null)
                {
                    fg.AppendLine("RefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefDict.Overall != null)
                        {
                            fg.AppendLine(RefDict.Overall.ToString());
                        }
                        if (RefDict.Specific != null)
                        {
                            foreach (var subItem in RefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Key.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Key.Overall.ToString());
                                        }
                                        if (subItem.Key.Specific != null)
                                        {
                                            subItem.Key.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Value.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Value.Overall.ToString());
                                        }
                                        if (subItem.Value.Specific != null)
                                        {
                                            subItem.Value.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (KeyRefDict != null)
                {
                    fg.AppendLine("KeyRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (KeyRefDict.Overall != null)
                        {
                            fg.AppendLine(KeyRefDict.Overall.ToString());
                        }
                        if (KeyRefDict.Specific != null)
                        {
                            foreach (var subItem in KeyRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Key.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Key.Overall.ToString());
                                        }
                                        if (subItem.Key.Specific != null)
                                        {
                                            subItem.Key.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Value.ToString());
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (ValRefDict != null)
                {
                    fg.AppendLine("ValRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (ValRefDict.Overall != null)
                        {
                            fg.AppendLine(ValRefDict.Overall.ToString());
                        }
                        if (ValRefDict.Specific != null)
                        {
                            foreach (var subItem in ValRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine(subItem.Key.ToString());
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        if (subItem.Value.Overall != null)
                                        {
                                            fg.AppendLine(subItem.Value.Overall.ToString());
                                        }
                                        if (subItem.Value.Specific != null)
                                        {
                                            subItem.Value.Specific.ToString(fg);
                                        }
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (DictKeyedValue != null)
                {
                    fg.AppendLine("DictKeyedValue =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (DictKeyedValue.Overall != null)
                        {
                            fg.AppendLine(DictKeyedValue.Overall.ToString());
                        }
                        if (DictKeyedValue.Specific != null)
                        {
                            foreach (var subItem in DictKeyedValue.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine(subItem.ToString());
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
    }
    public class TestObject_Derivative_CopyMask
    {
        public bool BoolN;
        public bool Bool;
        public bool CharN;
        public bool Char;
        public bool DateTimeNull;
        public bool DateTime;
        public bool DoubleN;
        public bool DoubleN_Ranged;
        public bool Double;
        public bool Double_Ranged;
        public bool FloatN;
        public bool FloatN_Ranged;
        public bool Float;
        public bool Float_Ranged;
        public bool Int16N;
        public bool Int16N_Ranged;
        public bool Int16;
        public bool Int16_Ranged;
        public bool Int32N;
        public bool Int32N_Ranged;
        public bool Int32;
        public bool Int32_Ranged;
        public bool Int64N;
        public bool Int64N_Ranged;
        public bool Int64;
        public bool Int64_Ranged;
        public bool Int8N;
        public bool Int8N_Ranged;
        public bool Int8;
        public bool Int8_Ranged;
        public bool Unsafe;
        public bool P2IntN;
        public bool P2Int;
        public bool P3DoubleN;
        public bool P3Double;
        public bool P3IntN;
        public bool P3Int;
        public bool PercentN;
        public bool Percent;
        public bool RangeInt8N;
        public bool RangeInt8;
        public bool RangeInt16N;
        public bool RangeInt16;
        public bool RangeInt32N;
        public bool RangeInt32;
        public bool RangeInt64N;
        public bool RangeInt64;
        public bool RangeUInt8N;
        public bool RangeUInt8;
        public bool RangeUInt16N;
        public bool RangeUInt16;
        public bool RangeUInt32N;
        public bool RangeUInt32;
        public bool RangeUInt64N;
        public bool RangeUInt64;
        public bool String;
        public bool UDoubleN;
        public bool UDoubleN_Ranged;
        public bool UDouble;
        public bool UDouble_Ranged;
        public bool UInt16N;
        public bool UInt16N_Ranged;
        public bool UInt16;
        public bool UInt16_Ranged;
        public bool UInt32N;
        public bool UInt32N_Ranged;
        public bool UInt32;
        public bool UInt32_Ranged;
        public bool UInt64N;
        public bool UInt64N_Ranged;
        public bool UInt64;
        public bool UInt64_Ranged;
        public bool UInt8N;
        public bool UInt8N_Ranged;
        public bool UInt8;
        public bool UInt8_Ranged;
        public bool Enum;
        public bool WildCard;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> Ref_Singleton;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter_NotNull;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> RefSetter_Singleton;
        public CopyOption List;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefList;
        public bool Dict;
        public MaskItem<bool, KeyValuePair<(RefCopyType Type, ObjectToRef_CopyMask Mask), (RefCopyType Type, ObjectToRef_CopyMask Mask)>> RefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> KeyRefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> ValRefDict;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> DictKeyedValue;

    }
    #endregion


    #endregion

}
