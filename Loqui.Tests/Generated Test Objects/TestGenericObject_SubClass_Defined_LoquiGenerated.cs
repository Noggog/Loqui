/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Internals;
using Loqui.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;

namespace Loqui.Tests
{
    #region Class
    public partial class TestGenericObject_SubClass_Defined<RBase> : TestGenericObject<long, RBase, ObjectToRef>, ITestGenericObject_SubClass_Defined<RBase>, ILoquiObjectSetter, IEquatable<TestGenericObject_SubClass_Defined<RBase>>
        where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
    {
        ILoquiRegistration ILoquiObject.Registration => TestGenericObject_SubClass_Defined_Registration.Instance;
        public new static TestGenericObject_SubClass_Defined_Registration Registration => TestGenericObject_SubClass_Defined_Registration.Instance;

        #region Ctor
        public TestGenericObject_SubClass_Defined()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion


        #region Loqui Getter Interface

        protected override object GetNthObject(ushort index) => TestGenericObject_SubClass_DefinedCommon.GetNthObject<RBase>(index, this);

        protected override bool GetNthObjectHasBeenSet(ushort index) => TestGenericObject_SubClass_DefinedCommon.GetNthObjectHasBeenSet<RBase>(index, this);

        protected override void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestGenericObject_SubClass_DefinedCommon.UnsetNthObject<RBase>(index, this, cmds);

        #endregion

        #region Loqui Interface
        protected override void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestGenericObject_SubClass_DefinedCommon.SetNthObjectHasBeenSet<RBase>(index, on, this);
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return TestGenericObject_SubClass_DefinedCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestGenericObject_SubClass_Defined_Mask<bool> printMask = null)
        {
            return TestGenericObject_SubClass_DefinedCommon.ToString(this, name: name, printMask: printMask);
        }

        public override void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestGenericObject_SubClass_DefinedCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public new TestGenericObject_SubClass_Defined_Mask<bool> GetHasBeenSetMask()
        {
            return TestGenericObject_SubClass_DefinedCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericObject_SubClass_Defined<RBase> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericObject_SubClass_Defined<RBase> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public new static TestGenericObject_SubClass_Defined<RBase> Create_XML(XElement root)
        {
            return Create_XML<ObjectToRef_ErrorMask>(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static TestGenericObject_SubClass_Defined<RBase> Create_XML<RBase_ErrMask>(
            XElement root,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static TestGenericObject_SubClass_Defined<RBase> Create_XML<RBase_ErrMask>(
            XElement root,
            bool doMasks,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var ret = Create_XML<RBase_ErrMask>(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (TestGenericObject_SubClass_Defined<RBase> Object, TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> ErrorMask) Create_XML<RBase_ErrMask>(
            XElement root,
            bool doMasks)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errMaskRet = null;
            var ret = Create_XML_Internal<RBase_ErrMask>(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>()) : default(Func<TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>>));
            return (ret, errMaskRet);
        }

        public static TestGenericObject_SubClass_Defined<RBase> Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static TestGenericObject_SubClass_Defined<RBase> Create_XML<RBase_ErrMask>(
            string path,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static TestGenericObject_SubClass_Defined<RBase> Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static TestGenericObject_SubClass_Defined<RBase> Create_XML<RBase_ErrMask>(
            Stream stream,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public override void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestGenericObject_SubClass_Defined<RBase>, TestGenericObject_SubClass_Defined_ErrorMask<ObjectToRef_ErrorMask>>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML<RBase_ErrMask>(
            XElement root,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask,
            NotifyingFireParameters? cmds = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            LoquiXmlTranslation<TestGenericObject_SubClass_Defined<RBase>, TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML<RBase_ErrMask>(
            string path,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask,
            NotifyingFireParameters? cmds = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML<RBase_ErrMask>(
            Stream stream,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask,
            NotifyingFireParameters? cmds = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public override void CopyIn_XML<RBase_ErrMask>(
            XElement root,
            out TestGenericObject_ErrorMask<RBase_ErrMask> errorMask,
            NotifyingFireParameters? cmds = null)
        {
            this.CopyIn_XML(
                root: root,
                errorMask: out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errMask,
                cmds: cmds);
            errorMask = errMask;
        }

        #endregion

        #region XML Write
        public virtual void Write_XML<RBase_ErrMask>(
            XmlWriter writer,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            errorMask = (TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>)this.Write_XML_Internal<RBase_ErrMask>(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML<RBase_ErrMask>(
            string path,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML<RBase_ErrMask>(
            Stream stream,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        #region Base Class Trickdown Overrides
        public override void Write_XML<RBase_ErrMask>(
            XmlWriter writer,
            out TestGenericObject_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
        {
            Write_XML(
                writer: writer,
                name: name,
                errorMask: out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errMask);
            errorMask = errMask;
        }

        public override void Write_XML<RBase_ErrMask>(
            string path,
            out TestGenericObject_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
        {
            Write_XML(
                path: path,
                name: name,
                errorMask: out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errMask);
            errorMask = errMask;
        }

        public override void Write_XML<RBase_ErrMask>(
            Stream stream,
            out TestGenericObject_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
        {
            Write_XML(
                stream: stream,
                name: name,
                errorMask: out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errMask);
            errorMask = errMask;
        }

        #endregion

        protected override object Write_XML_Internal<RBase_ErrMask>(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            TestGenericObject_SubClass_DefinedCommon.Write_XML<RBase, RBase_ErrMask>(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static TestGenericObject_SubClass_Defined<RBase> Create_XML_Internal<RBase_ErrMask>(
            XElement root,
            Func<TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            var ret = new TestGenericObject_SubClass_Defined<RBase>();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal<RBase_ErrMask>(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal<RBase_ErrMask>(
            TestGenericObject_SubClass_Defined<RBase> item,
            XElement root,
            string name,
            Func<TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>> errorMask)
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            switch (name)
            {
                default:
                    TestGenericObject<long, RBase, ObjectToRef>.Fill_XML_Internal<RBase_ErrMask>(
                        item: item,
                        root: root,
                        name: name,
                        errorMask: errorMask);
                    break;
            }
        }

        #endregion

        public TestGenericObject_SubClass_Defined<RBase> Copy<RBase_CopyMask>(
            TestGenericObject_SubClass_Defined_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericObject_SubClass_DefinedGetter<RBase> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            return TestGenericObject_SubClass_Defined<RBase>.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestGenericObject_SubClass_Defined<RBase> Copy<RBase_CopyMask>(
            ITestGenericObject_SubClass_Defined<RBase> item,
            TestGenericObject_SubClass_Defined_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericObject_SubClass_DefinedGetter<RBase> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericObject_SubClass_Defined<RBase> ret;
            if (item.GetType().Equals(typeof(TestGenericObject_SubClass_Defined<RBase>)))
            {
                ret = new TestGenericObject_SubClass_Defined<RBase>();
            }
            else
            {
                ret = (TestGenericObject_SubClass_Defined<RBase>)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType, RBase_CopyMask>(
            CopyType item,
            TestGenericObject_SubClass_Defined_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericObject_SubClass_DefinedGetter<RBase> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
            where CopyType : class, ITestGenericObject_SubClass_Defined<RBase>
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestGenericObject_SubClass_Defined<RBase>)))
            {
                ret = new TestGenericObject_SubClass_Defined<RBase>() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom<RBase, ObjectToRef_ErrorMask, RBase_CopyMask>(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestGenericObject_SubClass_Defined<RBase> Copy_ToLoqui<RBase_CopyMask>(
            ITestGenericObject_SubClass_DefinedGetter<RBase> item,
            TestGenericObject_SubClass_Defined_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericObject_SubClass_DefinedGetter<RBase> def = null)
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericObject_SubClass_Defined<RBase> ret;
            if (item.GetType().Equals(typeof(TestGenericObject_SubClass_Defined<RBase>)))
            {
                ret = new TestGenericObject_SubClass_Defined<RBase>() as TestGenericObject_SubClass_Defined<RBase>;
            }
            else
            {
                ret = (TestGenericObject_SubClass_Defined<RBase>)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        protected override void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthObject(index, obj, cmds);
                    break;
            }
        }

        public override void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestGenericObject_SubClass_DefinedCommon.Clear(this, cmds);
        }


        public new static TestGenericObject_SubClass_Defined<RBase> Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestGenericObject_SubClass_Defined<RBase>();
            foreach (var pair in fields)
            {
                CopyInInternal_TestGenericObject_SubClass_Defined(ret, pair);
            }
            return ret;
        }

        protected new static void CopyInInternal_TestGenericObject_SubClass_Defined(TestGenericObject_SubClass_Defined<RBase> obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestGenericObject_SubClass_Defined_FieldIndex enu))
            {
                CopyInInternal_TestGenericObject(obj, pair);
            }
            switch (enu)
            {
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestGenericObject_SubClass_Defined<RBase> obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestGenericObject_SubClass_Defined<RBase> : ITestGenericObject_SubClass_DefinedGetter<RBase>, ITestGenericObject<long, RBase, ObjectToRef>, ILoquiClass<ITestGenericObject_SubClass_Defined<RBase>, ITestGenericObject_SubClass_DefinedGetter<RBase>>, ILoquiClass<TestGenericObject_SubClass_Defined<RBase>, ITestGenericObject_SubClass_DefinedGetter<RBase>>
        where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
    {
    }

    public interface ITestGenericObject_SubClass_DefinedGetter<RBase> : ITestGenericObjectGetter<long, RBase, ObjectToRef>
        where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
    {

    }

    #endregion

}

namespace Loqui.Tests.Internals
{
    #region Field Index
    public enum TestGenericObject_SubClass_Defined_FieldIndex
    {
        RefBase = 0,
        Ref = 1,
        RefList = 2,
    }
    #endregion

    #region Registration
    public class TestGenericObject_SubClass_Defined_Registration : ILoquiRegistration
    {
        public static readonly TestGenericObject_SubClass_Defined_Registration Instance = new TestGenericObject_SubClass_Defined_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTests.ProtocolKey,
            msgID: 5,
            version: 0);

        public const string GUID = "c919b3b2-83e7-400a-8516-50048e9ab51f";

        public const ushort FieldCount = 0;

        public static readonly Type MaskType = typeof(TestGenericObject_SubClass_Defined_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestGenericObject_SubClass_Defined_ErrorMask<>);

        public static readonly Type ClassType = typeof(TestGenericObject_SubClass_Defined<>);

        public static readonly Type GetterType = typeof(ITestGenericObject_SubClass_DefinedGetter<>);

        public static readonly Type SetterType = typeof(ITestGenericObject_SubClass_Defined<>);

        public static readonly Type CommonType = typeof(TestGenericObject_SubClass_DefinedCommon);

        public const string FullName = "Loqui.Tests.TestGenericObject_SubClass_Defined";

        public const string Name = "TestGenericObject_SubClass_Defined";

        public const string Namespace = "Loqui.Tests";

        public const byte GenericCount = 1;

        public static readonly Type GenericRegistrationType = typeof(TestGenericObject_SubClass_Defined_Registration<>);

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthIsEnumerable(index);
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthIsLoqui(index);
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthIsSingleton(index);
            }
        }

        public static string GetNthName(ushort index)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthName(index);
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.IsNthDerivative(index);
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.IsProtected(index);
            }
        }

        public static Type GetNthType(ushort index) => throw new ArgumentException("Cannot get nth type for a generic object here.  Use generic registration instead.");

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }

    public class TestGenericObject_SubClass_Defined_Registration<RBase> : TestGenericObject_SubClass_Defined_Registration
        where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
    {
        public static readonly TestGenericObject_SubClass_Defined_Registration<RBase> GenericInstance = new TestGenericObject_SubClass_Defined_Registration<RBase>();

        public new static Type GetNthType(ushort index)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObject_Registration.GetNthType(index);
            }
        }

    }
    #endregion

    #region Extensions
    public static partial class TestGenericObject_SubClass_DefinedCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom<RBase, RBase_CopyMask>(
            this ITestGenericObject_SubClass_Defined<RBase> item,
            ITestGenericObject_SubClass_DefinedGetter<RBase> rhs,
            TestGenericObject_SubClass_Defined_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericObject_SubClass_DefinedGetter<RBase> def = null,
            NotifyingFireParameters? cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericObject_SubClass_DefinedCommon.CopyFieldsFrom<RBase, ObjectToRef_ErrorMask, RBase_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<RBase, RBase_ErrMask, RBase_CopyMask>(
            this ITestGenericObject_SubClass_Defined<RBase> item,
            ITestGenericObject_SubClass_DefinedGetter<RBase> rhs,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask,
            TestGenericObject_SubClass_Defined_CopyMask<RBase_CopyMask> copyMask = null,
            ITestGenericObject_SubClass_DefinedGetter<RBase> def = null,
            NotifyingFireParameters? cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericObject_SubClass_DefinedCommon.CopyFieldsFrom<RBase, RBase_ErrMask, RBase_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom<RBase, RBase_ErrMask, RBase_CopyMask>(
            this ITestGenericObject_SubClass_Defined<RBase> item,
            ITestGenericObject_SubClass_DefinedGetter<RBase> rhs,
            ITestGenericObject_SubClass_DefinedGetter<RBase> def,
            bool doMasks,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask,
            TestGenericObject_SubClass_Defined_CopyMask<RBase_CopyMask> copyMask,
            NotifyingFireParameters? cmds)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> retErrorMask = null;
            Func<TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>();
                }
                return retErrorMask;
            };
            CopyFieldsFrom<RBase, RBase_ErrMask, RBase_CopyMask>(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom<RBase, RBase_ErrMask, RBase_CopyMask>(
            this ITestGenericObject_SubClass_Defined<RBase> item,
            ITestGenericObject_SubClass_DefinedGetter<RBase> rhs,
            ITestGenericObject_SubClass_DefinedGetter<RBase> def,
            bool doMasks,
            Func<TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>> errorMask,
            TestGenericObject_SubClass_Defined_CopyMask<RBase_CopyMask> copyMask,
            NotifyingFireParameters? cmds)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
            where RBase_CopyMask : ObjectToRef_CopyMask, new()
        {
            TestGenericObjectCommon.CopyFieldsFrom<long, RBase, ObjectToRef, RBase_ErrMask, RBase_CopyMask>(
                item,
                rhs,
                def,
                doMasks,
                errorMask,
                copyMask,
                cmds);
        }

        #endregion

        public static void SetNthObjectHasBeenSet<RBase>(
            ushort index,
            bool on,
            ITestGenericObject_SubClass_Defined<RBase> obj,
            NotifyingFireParameters? cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    TestGenericObjectCommon.SetNthObjectHasBeenSet<long, RBase, ObjectToRef>(index, on, obj);
                    break;
            }
        }

        public static void UnsetNthObject<RBase>(
            ushort index,
            ITestGenericObject_SubClass_Defined<RBase> obj,
            NotifyingUnsetParameters? cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    TestGenericObjectCommon.UnsetNthObject<long, RBase, ObjectToRef>(index, obj);
                    break;
            }
        }

        public static bool GetNthObjectHasBeenSet<RBase>(
            ushort index,
            ITestGenericObject_SubClass_Defined<RBase> obj)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObjectCommon.GetNthObjectHasBeenSet<long, RBase, ObjectToRef>(index, obj);
            }
        }

        public static object GetNthObject<RBase>(
            ushort index,
            ITestGenericObject_SubClass_DefinedGetter<RBase> obj)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    return TestGenericObjectCommon.GetNthObject<long, RBase, ObjectToRef>(index, obj);
            }
        }

        public static void Clear<RBase>(
            ITestGenericObject_SubClass_Defined<RBase> item,
            NotifyingUnsetParameters? cmds = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
        }

        public static TestGenericObject_SubClass_Defined_Mask<bool> GetEqualsMask<RBase>(
            this ITestGenericObject_SubClass_DefinedGetter<RBase> item,
            ITestGenericObject_SubClass_DefinedGetter<RBase> rhs)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            var ret = new TestGenericObject_SubClass_Defined_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask<RBase>(
            ITestGenericObject_SubClass_DefinedGetter<RBase> item,
            ITestGenericObject_SubClass_DefinedGetter<RBase> rhs,
            TestGenericObject_SubClass_Defined_Mask<bool> ret)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            if (rhs == null) return;
            TestGenericObjectCommon.FillEqualsMask(item, rhs, ret);
        }

        public static string ToString<RBase>(
            this ITestGenericObject_SubClass_DefinedGetter<RBase> item,
            string name = null,
            TestGenericObject_SubClass_Defined_Mask<bool> printMask = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString<RBase>(
            this ITestGenericObject_SubClass_DefinedGetter<RBase> item,
            FileGeneration fg,
            string name = null,
            TestGenericObject_SubClass_Defined_Mask<bool> printMask = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestGenericObject_SubClass_Defined<RBase>)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestGenericObject_SubClass_Defined<RBase>)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet<RBase>(
            this ITestGenericObject_SubClass_DefinedGetter<RBase> item,
            TestGenericObject_SubClass_Defined_Mask<bool?> checkMask)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            return true;
        }

        public static TestGenericObject_SubClass_Defined_Mask<bool> GetHasBeenSetMask<RBase>(ITestGenericObject_SubClass_DefinedGetter<RBase> item)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
        {
            var ret = new TestGenericObject_SubClass_Defined_Mask<bool>();
            return ret;
        }

        public static TestGenericObject_SubClass_Defined_FieldIndex? ConvertFieldIndex(TestGenericObject_FieldIndex? index)
        {
            if (!index.HasValue) return null;
            return ConvertFieldIndex(index: index.Value);
        }

        public static TestGenericObject_SubClass_Defined_FieldIndex ConvertFieldIndex(TestGenericObject_FieldIndex index)
        {
            switch (index)
            {
                case TestGenericObject_FieldIndex.RefBase:
                    return (TestGenericObject_SubClass_Defined_FieldIndex)((int)index);
                case TestGenericObject_FieldIndex.Ref:
                    return (TestGenericObject_SubClass_Defined_FieldIndex)((int)index);
                case TestGenericObject_FieldIndex.RefList:
                    return (TestGenericObject_SubClass_Defined_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast_Enum_Only()}");
            }
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML<RBase, RBase_ErrMask>(
            XmlWriter writer,
            ITestGenericObject_SubClass_DefinedGetter<RBase> item,
            bool doMasks,
            out TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errorMask,
            string name = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> errMaskRet = null;
            Write_XML_Internal<RBase, RBase_ErrMask>(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>()) : default(Func<TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal<RBase, RBase_ErrMask>(
            XmlWriter writer,
            ITestGenericObject_SubClass_DefinedGetter<RBase> item,
            Func<TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>> errorMask,
            string name = null)
            where RBase : ObjectToRef, ILoquiObject, ILoquiObjectGetter
            where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Loqui.Tests.TestGenericObject_SubClass_Defined"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Loqui.Tests.TestGenericObject_SubClass_Defined");
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestGenericObject_SubClass_Defined_Mask<T> : TestGenericObject_Mask<T>, IMask<T>, IEquatable<TestGenericObject_SubClass_Defined_Mask<T>>
    {
        #region Ctors
        public TestGenericObject_SubClass_Defined_Mask()
        {
        }

        public TestGenericObject_SubClass_Defined_Mask(T initialValue)
        {
        }
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestGenericObject_SubClass_Defined_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestGenericObject_SubClass_Defined_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!base.Equals(rhs)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(base.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public override bool AllEqual(Func<T, bool> eval)
        {
            if (!base.AllEqual(eval)) return false;
            return true;
        }
        #endregion

        #region Translate
        public new TestGenericObject_SubClass_Defined_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestGenericObject_SubClass_Defined_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestGenericObject_SubClass_Defined_Mask<R> obj, Func<T, R> eval)
        {
            base.Translate_InternalFill(obj, eval);
        }
        #endregion

        #region Clear Enumerables
        public override void ClearEnumerables()
        {
            base.ClearEnumerables();
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestGenericObject_SubClass_Defined_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestGenericObject_SubClass_Defined_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestGenericObject_SubClass_Defined_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> : TestGenericObject_ErrorMask<RBase_ErrMask>, IErrorMask<TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>>
        where RBase_ErrMask : ObjectToRef_ErrorMask, IErrorMask<RBase_ErrMask>, new()
    {
        #region IErrorMask
        public override void SetNthException(int index, Exception ex)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthException(index, ex);
                    break;
            }
        }

        public override void SetNthMask(int index, object obj)
        {
            TestGenericObject_SubClass_Defined_FieldIndex enu = (TestGenericObject_SubClass_Defined_FieldIndex)index;
            switch (enu)
            {
                default:
                    base.SetNthMask(index, obj);
                    break;
            }
        }

        public override bool IsInError()
        {
            if (Overall != null) return true;
            return false;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public override void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestGenericObject_SubClass_Defined_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected override void ToString_FillInternal(FileGeneration fg)
        {
            base.ToString_FillInternal(fg);
        }
        #endregion

        #region Combine
        public TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> Combine(TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> rhs)
        {
            var ret = new TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask>();
            return ret;
        }
        public static TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> Combine(TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> lhs, TestGenericObject_SubClass_Defined_ErrorMask<RBase_ErrMask> rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TestGenericObject_SubClass_Defined_CopyMask<RBase_CopyMask> : TestGenericObject_CopyMask<RBase_CopyMask>
        where RBase_CopyMask : ObjectToRef_CopyMask, new()
    {
    }
    #endregion


    #endregion

}
