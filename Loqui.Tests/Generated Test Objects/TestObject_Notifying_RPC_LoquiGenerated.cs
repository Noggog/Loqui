/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Internals;
using Loqui.Tests;
using System.ComponentModel;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;

namespace Loqui.Tests
{
    #region Class
    public partial class TestObject_Notifying_RPC : ITestObject_Notifying_RPC, ILoquiObjectSetter, INotifyPropertyChanged, IEquatable<TestObject_Notifying_RPC>
    {
        ILoquiRegistration ILoquiObject.Registration => TestObject_Notifying_RPC_Registration.Instance;
        public static TestObject_Notifying_RPC_Registration Registration => TestObject_Notifying_RPC_Registration.Instance;

        #region PropertyChangedHandler
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
        #endregion

        public TestObject_Notifying_RPC()
        {
            _BoolN = NotifyingItem.Factory<Boolean?>(
                onSet: (i) => this.OnPropertyChanged(nameof(BoolN)),
                markAsSet: false);
            _Bool = NotifyingItem.Factory<Boolean>(
                onSet: (i) => this.OnPropertyChanged(nameof(Bool)),
                markAsSet: false);
            _CharN = NotifyingItem.Factory<Char?>(
                onSet: (i) => this.OnPropertyChanged(nameof(CharN)),
                markAsSet: false);
            _Char = NotifyingItem.Factory<Char>(
                onSet: (i) => this.OnPropertyChanged(nameof(Char)),
                markAsSet: false);
            _DateTimeNull = NotifyingItem.Factory<DateTime?>(
                onSet: (i) => this.OnPropertyChanged(nameof(DateTimeNull)),
                markAsSet: false);
            _DateTime = NotifyingItem.Factory<DateTime>(
                onSet: (i) => this.OnPropertyChanged(nameof(DateTime)),
                markAsSet: false);
            _DoubleN = NotifyingItem.Factory<Double?>(
                onSet: (i) => this.OnPropertyChanged(nameof(DoubleN)),
                markAsSet: false);
            _DoubleN_Ranged = NotifyingItem.Factory<Double?>(
                onSet: (i) => this.OnPropertyChanged(nameof(DoubleN_Ranged)),
                markAsSet: false);
            _Double = NotifyingItem.Factory<Double>(
                onSet: (i) => this.OnPropertyChanged(nameof(Double)),
                markAsSet: false);
            _Double_Ranged = NotifyingItem.Factory<Double>(
                onSet: (i) => this.OnPropertyChanged(nameof(Double_Ranged)),
                markAsSet: false);
            _FloatN = NotifyingItem.Factory<Single?>(
                onSet: (i) => this.OnPropertyChanged(nameof(FloatN)),
                markAsSet: false);
            _FloatN_Ranged = NotifyingItem.Factory<Single?>(
                onSet: (i) => this.OnPropertyChanged(nameof(FloatN_Ranged)),
                markAsSet: false);
            _Float = NotifyingItem.Factory<Single>(
                onSet: (i) => this.OnPropertyChanged(nameof(Float)),
                markAsSet: false);
            _Float_Ranged = NotifyingItem.Factory<Single>(
                onSet: (i) => this.OnPropertyChanged(nameof(Float_Ranged)),
                markAsSet: false);
            _Int16N = NotifyingItem.Factory<Int16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int16N)),
                markAsSet: false);
            _Int16N_Ranged = NotifyingItem.Factory<Int16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int16N_Ranged)),
                markAsSet: false);
            _Int16 = NotifyingItem.Factory<Int16>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int16)),
                markAsSet: false);
            _Int16_Ranged = NotifyingItem.Factory<Int16>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int16_Ranged)),
                markAsSet: false);
            _Int32N = NotifyingItem.Factory<Int32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int32N)),
                markAsSet: false);
            _Int32N_Ranged = NotifyingItem.Factory<Int32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int32N_Ranged)),
                markAsSet: false);
            _Int32 = NotifyingItem.Factory<Int32>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int32)),
                markAsSet: false);
            _Int32_Ranged = NotifyingItem.Factory<Int32>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int32_Ranged)),
                markAsSet: false);
            _Int64N = NotifyingItem.Factory<Int64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int64N)),
                markAsSet: false);
            _Int64N_Ranged = NotifyingItem.Factory<Int64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int64N_Ranged)),
                markAsSet: false);
            _Int64 = NotifyingItem.Factory<Int64>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int64)),
                markAsSet: false);
            _Int64_Ranged = NotifyingItem.Factory<Int64>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int64_Ranged)),
                markAsSet: false);
            _Int8N = NotifyingItem.Factory<SByte?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int8N)),
                markAsSet: false);
            _Int8N_Ranged = NotifyingItem.Factory<SByte?>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int8N_Ranged)),
                markAsSet: false);
            _Int8 = NotifyingItem.Factory<SByte>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int8)),
                markAsSet: false);
            _Int8_Ranged = NotifyingItem.Factory<SByte>(
                onSet: (i) => this.OnPropertyChanged(nameof(Int8_Ranged)),
                markAsSet: false);
            _Unsafe = NotifyingItem.Factory<bool>(
                onSet: (i) => this.OnPropertyChanged(nameof(Unsafe)),
                markAsSet: false);
            _P2IntN = NotifyingItem.Factory<P2Int?>(
                onSet: (i) => this.OnPropertyChanged(nameof(P2IntN)),
                markAsSet: false);
            _P2Int = NotifyingItem.Factory<P2Int>(
                onSet: (i) => this.OnPropertyChanged(nameof(P2Int)),
                markAsSet: false);
            _P3DoubleN = NotifyingItem.Factory<P3Double?>(
                onSet: (i) => this.OnPropertyChanged(nameof(P3DoubleN)),
                markAsSet: false);
            _P3Double = NotifyingItem.Factory<P3Double>(
                onSet: (i) => this.OnPropertyChanged(nameof(P3Double)),
                markAsSet: false);
            _P3IntN = NotifyingItem.Factory<P3Int?>(
                onSet: (i) => this.OnPropertyChanged(nameof(P3IntN)),
                markAsSet: false);
            _P3Int = NotifyingItem.Factory<P3Int>(
                onSet: (i) => this.OnPropertyChanged(nameof(P3Int)),
                markAsSet: false);
            _PercentN = NotifyingItem.Factory<Percent?>(
                onSet: (i) => this.OnPropertyChanged(nameof(PercentN)),
                markAsSet: false);
            _Percent = NotifyingItem.Factory<Percent>(
                onSet: (i) => this.OnPropertyChanged(nameof(Percent)),
                markAsSet: false);
            _RangeInt8N = NotifyingItem.Factory<RangeInt8?>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeInt8N)),
                markAsSet: false);
            _RangeInt8 = NotifyingItem.Factory<RangeInt8>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeInt8)),
                markAsSet: false);
            _RangeInt16N = NotifyingItem.Factory<RangeInt16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeInt16N)),
                markAsSet: false);
            _RangeInt16 = NotifyingItem.Factory<RangeInt16>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeInt16)),
                markAsSet: false);
            _RangeInt32N = NotifyingItem.Factory<RangeInt32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeInt32N)),
                markAsSet: false);
            _RangeInt32 = NotifyingItem.Factory<RangeInt32>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeInt32)),
                markAsSet: false);
            _RangeInt64N = NotifyingItem.Factory<RangeInt64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeInt64N)),
                markAsSet: false);
            _RangeInt64 = NotifyingItem.Factory<RangeInt64>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeInt64)),
                markAsSet: false);
            _RangeUInt8N = NotifyingItem.Factory<RangeUInt8?>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeUInt8N)),
                markAsSet: false);
            _RangeUInt8 = NotifyingItem.Factory<RangeUInt8>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeUInt8)),
                markAsSet: false);
            _RangeUInt16N = NotifyingItem.Factory<RangeUInt16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeUInt16N)),
                markAsSet: false);
            _RangeUInt16 = NotifyingItem.Factory<RangeUInt16>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeUInt16)),
                markAsSet: false);
            _RangeUInt32N = NotifyingItem.Factory<RangeUInt32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeUInt32N)),
                markAsSet: false);
            _RangeUInt32 = NotifyingItem.Factory<RangeUInt32>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeUInt32)),
                markAsSet: false);
            _RangeUInt64N = NotifyingItem.Factory<RangeUInt64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeUInt64N)),
                markAsSet: false);
            _RangeUInt64 = NotifyingItem.Factory<RangeUInt64>(
                onSet: (i) => this.OnPropertyChanged(nameof(RangeUInt64)),
                markAsSet: false);
            _String = NotifyingItem.Factory<String>(
                onSet: (i) => this.OnPropertyChanged(nameof(String)),
                markAsSet: false);
            _UDoubleN = NotifyingItem.Factory<UDouble?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UDoubleN)),
                markAsSet: false);
            _UDoubleN_Ranged = NotifyingItem.Factory<UDouble?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UDoubleN_Ranged)),
                markAsSet: false);
            _UDouble = NotifyingItem.Factory<UDouble>(
                onSet: (i) => this.OnPropertyChanged(nameof(UDouble)),
                markAsSet: false);
            _UDouble_Ranged = NotifyingItem.Factory<UDouble>(
                onSet: (i) => this.OnPropertyChanged(nameof(UDouble_Ranged)),
                markAsSet: false);
            _UInt16N = NotifyingItem.Factory<UInt16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt16N)),
                markAsSet: false);
            _UInt16N_Ranged = NotifyingItem.Factory<UInt16?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt16N_Ranged)),
                markAsSet: false);
            _UInt16 = NotifyingItem.Factory<UInt16>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt16)),
                markAsSet: false);
            _UInt16_Ranged = NotifyingItem.Factory<UInt16>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt16_Ranged)),
                markAsSet: false);
            _UInt32N = NotifyingItem.Factory<UInt32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt32N)),
                markAsSet: false);
            _UInt32N_Ranged = NotifyingItem.Factory<UInt32?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt32N_Ranged)),
                markAsSet: false);
            _UInt32 = NotifyingItem.Factory<UInt32>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt32)),
                markAsSet: false);
            _UInt32_Ranged = NotifyingItem.Factory<UInt32>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt32_Ranged)),
                markAsSet: false);
            _UInt64N = NotifyingItem.Factory<UInt64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt64N)),
                markAsSet: false);
            _UInt64N_Ranged = NotifyingItem.Factory<UInt64?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt64N_Ranged)),
                markAsSet: false);
            _UInt64 = NotifyingItem.Factory<UInt64>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt64)),
                markAsSet: false);
            _UInt64_Ranged = NotifyingItem.Factory<UInt64>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt64_Ranged)),
                markAsSet: false);
            _UInt8N = NotifyingItem.Factory<Byte?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt8N)),
                markAsSet: false);
            _UInt8N_Ranged = NotifyingItem.Factory<Byte?>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt8N_Ranged)),
                markAsSet: false);
            _UInt8 = NotifyingItem.Factory<Byte>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt8)),
                markAsSet: false);
            _UInt8_Ranged = NotifyingItem.Factory<Byte>(
                onSet: (i) => this.OnPropertyChanged(nameof(UInt8_Ranged)),
                markAsSet: false);
            _Enum = NotifyingItem.Factory<TestEnum>(
                onSet: (i) => this.OnPropertyChanged(nameof(Enum)),
                markAsSet: false);
            _EnumNull = NotifyingItem.Factory<TestEnum?>(
                onSet: (i) => this.OnPropertyChanged(nameof(EnumNull)),
                markAsSet: false);
            _WildCard = NotifyingItem.Factory<Object>(
                onSet: (i) => this.OnPropertyChanged(nameof(WildCard)),
                markAsSet: false);
            _WildCardNull = NotifyingItem.Factory<Object>(
                onSet: (i) => this.OnPropertyChanged(nameof(WildCardNull)),
                markAsSet: false);
            _Ref = NotifyingItem.Factory<ObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(Ref)),
                markAsSet: false);
            _Ref = NotifyingItem.Factory<ObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(Ref)),
                markAsSet: false);
            _Ref_NotNull = NotifyingItem.FactoryNoNull<ObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(Ref_NotNull)),
                markAsSet: false);
            _Ref_NotNull = NotifyingItem.FactoryNoNull<ObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(Ref_NotNull)),
                markAsSet: false);
            _Ref_Singleton = NotifyingItem.Factory<ObjectToRef>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(Ref_Singleton)),
                markAsSet: false);
            _Ref_Singleton = NotifyingItem.Factory<ObjectToRef>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(Ref_Singleton)),
                markAsSet: false);
            _RefGetter = NotifyingItem.Factory<IObjectToRefGetter>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter)),
                markAsSet: false);
            _RefGetter = NotifyingItem.Factory<IObjectToRefGetter>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter)),
                markAsSet: false);
            _RefGetter_NotNull = NotifyingItem.Factory<IObjectToRefGetter>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter_NotNull)),
                noNullFallback: () => new ObjectToRef(),
                markAsSet: false);
            _RefGetter_NotNull = NotifyingItem.Factory<IObjectToRefGetter>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter_NotNull)),
                noNullFallback: () => new ObjectToRef(),
                markAsSet: false);
            _RefGetter_Singleton = NotifyingItem.Factory<IObjectToRefGetter>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter_Singleton)),
                markAsSet: false);
            _RefGetter_Singleton = NotifyingItem.Factory<IObjectToRefGetter>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(RefGetter_Singleton)),
                markAsSet: false);
            _RefSetter = NotifyingItem.Factory<IObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter)),
                markAsSet: false);
            _RefSetter = NotifyingItem.Factory<IObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter)),
                markAsSet: false);
            _RefSetter_NotNull = NotifyingItem.Factory<IObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter_NotNull)),
                noNullFallback: () => new ObjectToRef(),
                markAsSet: false);
            _RefSetter_NotNull = NotifyingItem.Factory<IObjectToRef>(
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter_NotNull)),
                noNullFallback: () => new ObjectToRef(),
                markAsSet: false);
            _RefSetter_Singleton = NotifyingItem.Factory<IObjectToRef>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter_Singleton)),
                markAsSet: false);
            _RefSetter_Singleton = NotifyingItem.Factory<IObjectToRef>(
                defaultVal: new ObjectToRef(),
                onSet: (i) => this.OnPropertyChanged(nameof(RefSetter_Singleton)),
                markAsSet: false);
            CustomCtor();
        }
        partial void CustomCtor();
        #region BoolN
        protected readonly INotifyingItem<Boolean?> _BoolN;
        public INotifyingItem<Boolean?> BoolN_Property => _BoolN;
        public Boolean? BoolN
        {
            get => this._BoolN.Item;
            set => this._BoolN.Set(value);
        }
        INotifyingItem<Boolean?> ITestObject_Notifying_RPC.BoolN_Property => this.BoolN_Property;
        INotifyingItemGetter<Boolean?> ITestObject_Notifying_RPCGetter.BoolN_Property => this.BoolN_Property;
        #endregion
        #region Bool
        protected readonly INotifyingItem<Boolean> _Bool;
        public INotifyingItem<Boolean> Bool_Property => _Bool;
        public Boolean Bool
        {
            get => this._Bool.Item;
            set => this._Bool.Set(value);
        }
        INotifyingItem<Boolean> ITestObject_Notifying_RPC.Bool_Property => this.Bool_Property;
        INotifyingItemGetter<Boolean> ITestObject_Notifying_RPCGetter.Bool_Property => this.Bool_Property;
        #endregion
        #region CharN
        protected readonly INotifyingItem<Char?> _CharN;
        public INotifyingItem<Char?> CharN_Property => _CharN;
        public Char? CharN
        {
            get => this._CharN.Item;
            set => this._CharN.Set(value);
        }
        INotifyingItem<Char?> ITestObject_Notifying_RPC.CharN_Property => this.CharN_Property;
        INotifyingItemGetter<Char?> ITestObject_Notifying_RPCGetter.CharN_Property => this.CharN_Property;
        #endregion
        #region Char
        protected readonly INotifyingItem<Char> _Char;
        public INotifyingItem<Char> Char_Property => _Char;
        public Char Char
        {
            get => this._Char.Item;
            set => this._Char.Set(value);
        }
        INotifyingItem<Char> ITestObject_Notifying_RPC.Char_Property => this.Char_Property;
        INotifyingItemGetter<Char> ITestObject_Notifying_RPCGetter.Char_Property => this.Char_Property;
        #endregion
        #region DateTimeNull
        protected readonly INotifyingItem<DateTime?> _DateTimeNull;
        public INotifyingItem<DateTime?> DateTimeNull_Property => _DateTimeNull;
        public DateTime? DateTimeNull
        {
            get => this._DateTimeNull.Item;
            set => this._DateTimeNull.Set(value);
        }
        INotifyingItem<DateTime?> ITestObject_Notifying_RPC.DateTimeNull_Property => this.DateTimeNull_Property;
        INotifyingItemGetter<DateTime?> ITestObject_Notifying_RPCGetter.DateTimeNull_Property => this.DateTimeNull_Property;
        #endregion
        #region DateTime
        protected readonly INotifyingItem<DateTime> _DateTime;
        public INotifyingItem<DateTime> DateTime_Property => _DateTime;
        public DateTime DateTime
        {
            get => this._DateTime.Item;
            set => this._DateTime.Set(value);
        }
        INotifyingItem<DateTime> ITestObject_Notifying_RPC.DateTime_Property => this.DateTime_Property;
        INotifyingItemGetter<DateTime> ITestObject_Notifying_RPCGetter.DateTime_Property => this.DateTime_Property;
        #endregion
        #region DoubleN
        protected readonly INotifyingItem<Double?> _DoubleN;
        public INotifyingItem<Double?> DoubleN_Property => _DoubleN;
        public Double? DoubleN
        {
            get => this._DoubleN.Item;
            set => this._DoubleN.Set(value);
        }
        INotifyingItem<Double?> ITestObject_Notifying_RPC.DoubleN_Property => this.DoubleN_Property;
        INotifyingItemGetter<Double?> ITestObject_Notifying_RPCGetter.DoubleN_Property => this.DoubleN_Property;
        #endregion
        #region DoubleN_Ranged
        protected readonly INotifyingItem<Double?> _DoubleN_Ranged;
        public INotifyingItem<Double?> DoubleN_Ranged_Property => _DoubleN_Ranged;
        public Double? DoubleN_Ranged
        {
            get => this._DoubleN_Ranged.Item;
            set => this._DoubleN_Ranged.Set(value?.PutInRange(DoubleN_Ranged_Range.Min, DoubleN_Ranged_Range.Max));
        }
        INotifyingItem<Double?> ITestObject_Notifying_RPC.DoubleN_Ranged_Property => this.DoubleN_Ranged_Property;
        INotifyingItemGetter<Double?> ITestObject_Notifying_RPCGetter.DoubleN_Ranged_Property => this.DoubleN_Ranged_Property;
        public static RangeDouble DoubleN_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region Double
        protected readonly INotifyingItem<Double> _Double;
        public INotifyingItem<Double> Double_Property => _Double;
        public Double Double
        {
            get => this._Double.Item;
            set => this._Double.Set(value);
        }
        INotifyingItem<Double> ITestObject_Notifying_RPC.Double_Property => this.Double_Property;
        INotifyingItemGetter<Double> ITestObject_Notifying_RPCGetter.Double_Property => this.Double_Property;
        #endregion
        #region Double_Ranged
        protected readonly INotifyingItem<Double> _Double_Ranged;
        public INotifyingItem<Double> Double_Ranged_Property => _Double_Ranged;
        public Double Double_Ranged
        {
            get => this._Double_Ranged.Item;
            set => this._Double_Ranged.Set(value.PutInRange(Double_Ranged_Range.Min, Double_Ranged_Range.Max));
        }
        INotifyingItem<Double> ITestObject_Notifying_RPC.Double_Ranged_Property => this.Double_Ranged_Property;
        INotifyingItemGetter<Double> ITestObject_Notifying_RPCGetter.Double_Ranged_Property => this.Double_Ranged_Property;
        public static RangeDouble Double_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region FloatN
        protected readonly INotifyingItem<Single?> _FloatN;
        public INotifyingItem<Single?> FloatN_Property => _FloatN;
        public Single? FloatN
        {
            get => this._FloatN.Item;
            set => this._FloatN.Set(value);
        }
        INotifyingItem<Single?> ITestObject_Notifying_RPC.FloatN_Property => this.FloatN_Property;
        INotifyingItemGetter<Single?> ITestObject_Notifying_RPCGetter.FloatN_Property => this.FloatN_Property;
        #endregion
        #region FloatN_Ranged
        protected readonly INotifyingItem<Single?> _FloatN_Ranged;
        public INotifyingItem<Single?> FloatN_Ranged_Property => _FloatN_Ranged;
        public Single? FloatN_Ranged
        {
            get => this._FloatN_Ranged.Item;
            set => this._FloatN_Ranged.Set(value?.PutInRange(FloatN_Ranged_Range.Min, FloatN_Ranged_Range.Max));
        }
        INotifyingItem<Single?> ITestObject_Notifying_RPC.FloatN_Ranged_Property => this.FloatN_Ranged_Property;
        INotifyingItemGetter<Single?> ITestObject_Notifying_RPCGetter.FloatN_Ranged_Property => this.FloatN_Ranged_Property;
        public static RangeFloat FloatN_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Float
        protected readonly INotifyingItem<Single> _Float;
        public INotifyingItem<Single> Float_Property => _Float;
        public Single Float
        {
            get => this._Float.Item;
            set => this._Float.Set(value);
        }
        INotifyingItem<Single> ITestObject_Notifying_RPC.Float_Property => this.Float_Property;
        INotifyingItemGetter<Single> ITestObject_Notifying_RPCGetter.Float_Property => this.Float_Property;
        #endregion
        #region Float_Ranged
        protected readonly INotifyingItem<Single> _Float_Ranged;
        public INotifyingItem<Single> Float_Ranged_Property => _Float_Ranged;
        public Single Float_Ranged
        {
            get => this._Float_Ranged.Item;
            set => this._Float_Ranged.Set(value.PutInRange(Float_Ranged_Range.Min, Float_Ranged_Range.Max));
        }
        INotifyingItem<Single> ITestObject_Notifying_RPC.Float_Ranged_Property => this.Float_Ranged_Property;
        INotifyingItemGetter<Single> ITestObject_Notifying_RPCGetter.Float_Ranged_Property => this.Float_Ranged_Property;
        public static RangeFloat Float_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Int16N
        protected readonly INotifyingItem<Int16?> _Int16N;
        public INotifyingItem<Int16?> Int16N_Property => _Int16N;
        public Int16? Int16N
        {
            get => this._Int16N.Item;
            set => this._Int16N.Set(value);
        }
        INotifyingItem<Int16?> ITestObject_Notifying_RPC.Int16N_Property => this.Int16N_Property;
        INotifyingItemGetter<Int16?> ITestObject_Notifying_RPCGetter.Int16N_Property => this.Int16N_Property;
        #endregion
        #region Int16N_Ranged
        protected readonly INotifyingItem<Int16?> _Int16N_Ranged;
        public INotifyingItem<Int16?> Int16N_Ranged_Property => _Int16N_Ranged;
        public Int16? Int16N_Ranged
        {
            get => this._Int16N_Ranged.Item;
            set => this._Int16N_Ranged.Set(value?.PutInRange(Int16N_Ranged_Range.Min, Int16N_Ranged_Range.Max));
        }
        INotifyingItem<Int16?> ITestObject_Notifying_RPC.Int16N_Ranged_Property => this.Int16N_Ranged_Property;
        INotifyingItemGetter<Int16?> ITestObject_Notifying_RPCGetter.Int16N_Ranged_Property => this.Int16N_Ranged_Property;
        public static RangeInt16 Int16N_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int16
        protected readonly INotifyingItem<Int16> _Int16;
        public INotifyingItem<Int16> Int16_Property => _Int16;
        public Int16 Int16
        {
            get => this._Int16.Item;
            set => this._Int16.Set(value);
        }
        INotifyingItem<Int16> ITestObject_Notifying_RPC.Int16_Property => this.Int16_Property;
        INotifyingItemGetter<Int16> ITestObject_Notifying_RPCGetter.Int16_Property => this.Int16_Property;
        #endregion
        #region Int16_Ranged
        protected readonly INotifyingItem<Int16> _Int16_Ranged;
        public INotifyingItem<Int16> Int16_Ranged_Property => _Int16_Ranged;
        public Int16 Int16_Ranged
        {
            get => this._Int16_Ranged.Item;
            set => this._Int16_Ranged.Set(value.PutInRange(Int16_Ranged_Range.Min, Int16_Ranged_Range.Max));
        }
        INotifyingItem<Int16> ITestObject_Notifying_RPC.Int16_Ranged_Property => this.Int16_Ranged_Property;
        INotifyingItemGetter<Int16> ITestObject_Notifying_RPCGetter.Int16_Ranged_Property => this.Int16_Ranged_Property;
        public static RangeInt16 Int16_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int32N
        protected readonly INotifyingItem<Int32?> _Int32N;
        public INotifyingItem<Int32?> Int32N_Property => _Int32N;
        public Int32? Int32N
        {
            get => this._Int32N.Item;
            set => this._Int32N.Set(value);
        }
        INotifyingItem<Int32?> ITestObject_Notifying_RPC.Int32N_Property => this.Int32N_Property;
        INotifyingItemGetter<Int32?> ITestObject_Notifying_RPCGetter.Int32N_Property => this.Int32N_Property;
        #endregion
        #region Int32N_Ranged
        protected readonly INotifyingItem<Int32?> _Int32N_Ranged;
        public INotifyingItem<Int32?> Int32N_Ranged_Property => _Int32N_Ranged;
        public Int32? Int32N_Ranged
        {
            get => this._Int32N_Ranged.Item;
            set => this._Int32N_Ranged.Set(value?.PutInRange(Int32N_Ranged_Range.Min, Int32N_Ranged_Range.Max));
        }
        INotifyingItem<Int32?> ITestObject_Notifying_RPC.Int32N_Ranged_Property => this.Int32N_Ranged_Property;
        INotifyingItemGetter<Int32?> ITestObject_Notifying_RPCGetter.Int32N_Ranged_Property => this.Int32N_Ranged_Property;
        public static RangeInt32 Int32N_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int32
        protected readonly INotifyingItem<Int32> _Int32;
        public INotifyingItem<Int32> Int32_Property => _Int32;
        public Int32 Int32
        {
            get => this._Int32.Item;
            set => this._Int32.Set(value);
        }
        INotifyingItem<Int32> ITestObject_Notifying_RPC.Int32_Property => this.Int32_Property;
        INotifyingItemGetter<Int32> ITestObject_Notifying_RPCGetter.Int32_Property => this.Int32_Property;
        #endregion
        #region Int32_Ranged
        protected readonly INotifyingItem<Int32> _Int32_Ranged;
        public INotifyingItem<Int32> Int32_Ranged_Property => _Int32_Ranged;
        public Int32 Int32_Ranged
        {
            get => this._Int32_Ranged.Item;
            set => this._Int32_Ranged.Set(value.PutInRange(Int32_Ranged_Range.Min, Int32_Ranged_Range.Max));
        }
        INotifyingItem<Int32> ITestObject_Notifying_RPC.Int32_Ranged_Property => this.Int32_Ranged_Property;
        INotifyingItemGetter<Int32> ITestObject_Notifying_RPCGetter.Int32_Ranged_Property => this.Int32_Ranged_Property;
        public static RangeInt32 Int32_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int64N
        protected readonly INotifyingItem<Int64?> _Int64N;
        public INotifyingItem<Int64?> Int64N_Property => _Int64N;
        public Int64? Int64N
        {
            get => this._Int64N.Item;
            set => this._Int64N.Set(value);
        }
        INotifyingItem<Int64?> ITestObject_Notifying_RPC.Int64N_Property => this.Int64N_Property;
        INotifyingItemGetter<Int64?> ITestObject_Notifying_RPCGetter.Int64N_Property => this.Int64N_Property;
        #endregion
        #region Int64N_Ranged
        protected readonly INotifyingItem<Int64?> _Int64N_Ranged;
        public INotifyingItem<Int64?> Int64N_Ranged_Property => _Int64N_Ranged;
        public Int64? Int64N_Ranged
        {
            get => this._Int64N_Ranged.Item;
            set => this._Int64N_Ranged.Set(value?.PutInRange(Int64N_Ranged_Range.Min, Int64N_Ranged_Range.Max));
        }
        INotifyingItem<Int64?> ITestObject_Notifying_RPC.Int64N_Ranged_Property => this.Int64N_Ranged_Property;
        INotifyingItemGetter<Int64?> ITestObject_Notifying_RPCGetter.Int64N_Ranged_Property => this.Int64N_Ranged_Property;
        public static RangeInt64 Int64N_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int64
        protected readonly INotifyingItem<Int64> _Int64;
        public INotifyingItem<Int64> Int64_Property => _Int64;
        public Int64 Int64
        {
            get => this._Int64.Item;
            set => this._Int64.Set(value);
        }
        INotifyingItem<Int64> ITestObject_Notifying_RPC.Int64_Property => this.Int64_Property;
        INotifyingItemGetter<Int64> ITestObject_Notifying_RPCGetter.Int64_Property => this.Int64_Property;
        #endregion
        #region Int64_Ranged
        protected readonly INotifyingItem<Int64> _Int64_Ranged;
        public INotifyingItem<Int64> Int64_Ranged_Property => _Int64_Ranged;
        public Int64 Int64_Ranged
        {
            get => this._Int64_Ranged.Item;
            set => this._Int64_Ranged.Set(value.PutInRange(Int64_Ranged_Range.Min, Int64_Ranged_Range.Max));
        }
        INotifyingItem<Int64> ITestObject_Notifying_RPC.Int64_Ranged_Property => this.Int64_Ranged_Property;
        INotifyingItemGetter<Int64> ITestObject_Notifying_RPCGetter.Int64_Ranged_Property => this.Int64_Ranged_Property;
        public static RangeInt64 Int64_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int8N
        protected readonly INotifyingItem<SByte?> _Int8N;
        public INotifyingItem<SByte?> Int8N_Property => _Int8N;
        public SByte? Int8N
        {
            get => this._Int8N.Item;
            set => this._Int8N.Set(value);
        }
        INotifyingItem<SByte?> ITestObject_Notifying_RPC.Int8N_Property => this.Int8N_Property;
        INotifyingItemGetter<SByte?> ITestObject_Notifying_RPCGetter.Int8N_Property => this.Int8N_Property;
        #endregion
        #region Int8N_Ranged
        protected readonly INotifyingItem<SByte?> _Int8N_Ranged;
        public INotifyingItem<SByte?> Int8N_Ranged_Property => _Int8N_Ranged;
        public SByte? Int8N_Ranged
        {
            get => this._Int8N_Ranged.Item;
            set => this._Int8N_Ranged.Set(value?.PutInRange(Int8N_Ranged_Range.Min, Int8N_Ranged_Range.Max));
        }
        INotifyingItem<SByte?> ITestObject_Notifying_RPC.Int8N_Ranged_Property => this.Int8N_Ranged_Property;
        INotifyingItemGetter<SByte?> ITestObject_Notifying_RPCGetter.Int8N_Ranged_Property => this.Int8N_Ranged_Property;
        public static RangeInt8 Int8N_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Int8
        protected readonly INotifyingItem<SByte> _Int8;
        public INotifyingItem<SByte> Int8_Property => _Int8;
        public SByte Int8
        {
            get => this._Int8.Item;
            set => this._Int8.Set(value);
        }
        INotifyingItem<SByte> ITestObject_Notifying_RPC.Int8_Property => this.Int8_Property;
        INotifyingItemGetter<SByte> ITestObject_Notifying_RPCGetter.Int8_Property => this.Int8_Property;
        #endregion
        #region Int8_Ranged
        protected readonly INotifyingItem<SByte> _Int8_Ranged;
        public INotifyingItem<SByte> Int8_Ranged_Property => _Int8_Ranged;
        public SByte Int8_Ranged
        {
            get => this._Int8_Ranged.Item;
            set => this._Int8_Ranged.Set(value.PutInRange(Int8_Ranged_Range.Min, Int8_Ranged_Range.Max));
        }
        INotifyingItem<SByte> ITestObject_Notifying_RPC.Int8_Ranged_Property => this.Int8_Ranged_Property;
        INotifyingItemGetter<SByte> ITestObject_Notifying_RPCGetter.Int8_Ranged_Property => this.Int8_Ranged_Property;
        public static RangeInt8 Int8_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Unsafe
        protected readonly INotifyingItem<bool> _Unsafe;
        public INotifyingItem<bool> Unsafe_Property => _Unsafe;
        public bool Unsafe
        {
            get => this._Unsafe.Item;
            set => this._Unsafe.Set(value);
        }
        INotifyingItem<bool> ITestObject_Notifying_RPC.Unsafe_Property => this.Unsafe_Property;
        INotifyingItemGetter<bool> ITestObject_Notifying_RPCGetter.Unsafe_Property => this.Unsafe_Property;
        #endregion
        #region P2IntN
        protected readonly INotifyingItem<P2Int?> _P2IntN;
        public INotifyingItem<P2Int?> P2IntN_Property => _P2IntN;
        public P2Int? P2IntN
        {
            get => this._P2IntN.Item;
            set => this._P2IntN.Set(value);
        }
        INotifyingItem<P2Int?> ITestObject_Notifying_RPC.P2IntN_Property => this.P2IntN_Property;
        INotifyingItemGetter<P2Int?> ITestObject_Notifying_RPCGetter.P2IntN_Property => this.P2IntN_Property;
        #endregion
        #region P2Int
        protected readonly INotifyingItem<P2Int> _P2Int;
        public INotifyingItem<P2Int> P2Int_Property => _P2Int;
        public P2Int P2Int
        {
            get => this._P2Int.Item;
            set => this._P2Int.Set(value);
        }
        INotifyingItem<P2Int> ITestObject_Notifying_RPC.P2Int_Property => this.P2Int_Property;
        INotifyingItemGetter<P2Int> ITestObject_Notifying_RPCGetter.P2Int_Property => this.P2Int_Property;
        #endregion
        #region P3DoubleN
        protected readonly INotifyingItem<P3Double?> _P3DoubleN;
        public INotifyingItem<P3Double?> P3DoubleN_Property => _P3DoubleN;
        public P3Double? P3DoubleN
        {
            get => this._P3DoubleN.Item;
            set => this._P3DoubleN.Set(value);
        }
        INotifyingItem<P3Double?> ITestObject_Notifying_RPC.P3DoubleN_Property => this.P3DoubleN_Property;
        INotifyingItemGetter<P3Double?> ITestObject_Notifying_RPCGetter.P3DoubleN_Property => this.P3DoubleN_Property;
        #endregion
        #region P3Double
        protected readonly INotifyingItem<P3Double> _P3Double;
        public INotifyingItem<P3Double> P3Double_Property => _P3Double;
        public P3Double P3Double
        {
            get => this._P3Double.Item;
            set => this._P3Double.Set(value);
        }
        INotifyingItem<P3Double> ITestObject_Notifying_RPC.P3Double_Property => this.P3Double_Property;
        INotifyingItemGetter<P3Double> ITestObject_Notifying_RPCGetter.P3Double_Property => this.P3Double_Property;
        #endregion
        #region P3IntN
        protected readonly INotifyingItem<P3Int?> _P3IntN;
        public INotifyingItem<P3Int?> P3IntN_Property => _P3IntN;
        public P3Int? P3IntN
        {
            get => this._P3IntN.Item;
            set => this._P3IntN.Set(value);
        }
        INotifyingItem<P3Int?> ITestObject_Notifying_RPC.P3IntN_Property => this.P3IntN_Property;
        INotifyingItemGetter<P3Int?> ITestObject_Notifying_RPCGetter.P3IntN_Property => this.P3IntN_Property;
        #endregion
        #region P3Int
        protected readonly INotifyingItem<P3Int> _P3Int;
        public INotifyingItem<P3Int> P3Int_Property => _P3Int;
        public P3Int P3Int
        {
            get => this._P3Int.Item;
            set => this._P3Int.Set(value);
        }
        INotifyingItem<P3Int> ITestObject_Notifying_RPC.P3Int_Property => this.P3Int_Property;
        INotifyingItemGetter<P3Int> ITestObject_Notifying_RPCGetter.P3Int_Property => this.P3Int_Property;
        #endregion
        #region PercentN
        protected readonly INotifyingItem<Percent?> _PercentN;
        public INotifyingItem<Percent?> PercentN_Property => _PercentN;
        public Percent? PercentN
        {
            get => this._PercentN.Item;
            set => this._PercentN.Set(value);
        }
        INotifyingItem<Percent?> ITestObject_Notifying_RPC.PercentN_Property => this.PercentN_Property;
        INotifyingItemGetter<Percent?> ITestObject_Notifying_RPCGetter.PercentN_Property => this.PercentN_Property;
        #endregion
        #region Percent
        protected readonly INotifyingItem<Percent> _Percent;
        public INotifyingItem<Percent> Percent_Property => _Percent;
        public Percent Percent
        {
            get => this._Percent.Item;
            set => this._Percent.Set(value);
        }
        INotifyingItem<Percent> ITestObject_Notifying_RPC.Percent_Property => this.Percent_Property;
        INotifyingItemGetter<Percent> ITestObject_Notifying_RPCGetter.Percent_Property => this.Percent_Property;
        #endregion
        #region RangeInt8N
        protected readonly INotifyingItem<RangeInt8?> _RangeInt8N;
        public INotifyingItem<RangeInt8?> RangeInt8N_Property => _RangeInt8N;
        public RangeInt8? RangeInt8N
        {
            get => this._RangeInt8N.Item;
            set => this._RangeInt8N.Set(value);
        }
        INotifyingItem<RangeInt8?> ITestObject_Notifying_RPC.RangeInt8N_Property => this.RangeInt8N_Property;
        INotifyingItemGetter<RangeInt8?> ITestObject_Notifying_RPCGetter.RangeInt8N_Property => this.RangeInt8N_Property;
        #endregion
        #region RangeInt8
        protected readonly INotifyingItem<RangeInt8> _RangeInt8;
        public INotifyingItem<RangeInt8> RangeInt8_Property => _RangeInt8;
        public RangeInt8 RangeInt8
        {
            get => this._RangeInt8.Item;
            set => this._RangeInt8.Set(value);
        }
        INotifyingItem<RangeInt8> ITestObject_Notifying_RPC.RangeInt8_Property => this.RangeInt8_Property;
        INotifyingItemGetter<RangeInt8> ITestObject_Notifying_RPCGetter.RangeInt8_Property => this.RangeInt8_Property;
        #endregion
        #region RangeInt16N
        protected readonly INotifyingItem<RangeInt16?> _RangeInt16N;
        public INotifyingItem<RangeInt16?> RangeInt16N_Property => _RangeInt16N;
        public RangeInt16? RangeInt16N
        {
            get => this._RangeInt16N.Item;
            set => this._RangeInt16N.Set(value);
        }
        INotifyingItem<RangeInt16?> ITestObject_Notifying_RPC.RangeInt16N_Property => this.RangeInt16N_Property;
        INotifyingItemGetter<RangeInt16?> ITestObject_Notifying_RPCGetter.RangeInt16N_Property => this.RangeInt16N_Property;
        #endregion
        #region RangeInt16
        protected readonly INotifyingItem<RangeInt16> _RangeInt16;
        public INotifyingItem<RangeInt16> RangeInt16_Property => _RangeInt16;
        public RangeInt16 RangeInt16
        {
            get => this._RangeInt16.Item;
            set => this._RangeInt16.Set(value);
        }
        INotifyingItem<RangeInt16> ITestObject_Notifying_RPC.RangeInt16_Property => this.RangeInt16_Property;
        INotifyingItemGetter<RangeInt16> ITestObject_Notifying_RPCGetter.RangeInt16_Property => this.RangeInt16_Property;
        #endregion
        #region RangeInt32N
        protected readonly INotifyingItem<RangeInt32?> _RangeInt32N;
        public INotifyingItem<RangeInt32?> RangeInt32N_Property => _RangeInt32N;
        public RangeInt32? RangeInt32N
        {
            get => this._RangeInt32N.Item;
            set => this._RangeInt32N.Set(value);
        }
        INotifyingItem<RangeInt32?> ITestObject_Notifying_RPC.RangeInt32N_Property => this.RangeInt32N_Property;
        INotifyingItemGetter<RangeInt32?> ITestObject_Notifying_RPCGetter.RangeInt32N_Property => this.RangeInt32N_Property;
        #endregion
        #region RangeInt32
        protected readonly INotifyingItem<RangeInt32> _RangeInt32;
        public INotifyingItem<RangeInt32> RangeInt32_Property => _RangeInt32;
        public RangeInt32 RangeInt32
        {
            get => this._RangeInt32.Item;
            set => this._RangeInt32.Set(value);
        }
        INotifyingItem<RangeInt32> ITestObject_Notifying_RPC.RangeInt32_Property => this.RangeInt32_Property;
        INotifyingItemGetter<RangeInt32> ITestObject_Notifying_RPCGetter.RangeInt32_Property => this.RangeInt32_Property;
        #endregion
        #region RangeInt64N
        protected readonly INotifyingItem<RangeInt64?> _RangeInt64N;
        public INotifyingItem<RangeInt64?> RangeInt64N_Property => _RangeInt64N;
        public RangeInt64? RangeInt64N
        {
            get => this._RangeInt64N.Item;
            set => this._RangeInt64N.Set(value);
        }
        INotifyingItem<RangeInt64?> ITestObject_Notifying_RPC.RangeInt64N_Property => this.RangeInt64N_Property;
        INotifyingItemGetter<RangeInt64?> ITestObject_Notifying_RPCGetter.RangeInt64N_Property => this.RangeInt64N_Property;
        #endregion
        #region RangeInt64
        protected readonly INotifyingItem<RangeInt64> _RangeInt64;
        public INotifyingItem<RangeInt64> RangeInt64_Property => _RangeInt64;
        public RangeInt64 RangeInt64
        {
            get => this._RangeInt64.Item;
            set => this._RangeInt64.Set(value);
        }
        INotifyingItem<RangeInt64> ITestObject_Notifying_RPC.RangeInt64_Property => this.RangeInt64_Property;
        INotifyingItemGetter<RangeInt64> ITestObject_Notifying_RPCGetter.RangeInt64_Property => this.RangeInt64_Property;
        #endregion
        #region RangeUInt8N
        protected readonly INotifyingItem<RangeUInt8?> _RangeUInt8N;
        public INotifyingItem<RangeUInt8?> RangeUInt8N_Property => _RangeUInt8N;
        public RangeUInt8? RangeUInt8N
        {
            get => this._RangeUInt8N.Item;
            set => this._RangeUInt8N.Set(value);
        }
        INotifyingItem<RangeUInt8?> ITestObject_Notifying_RPC.RangeUInt8N_Property => this.RangeUInt8N_Property;
        INotifyingItemGetter<RangeUInt8?> ITestObject_Notifying_RPCGetter.RangeUInt8N_Property => this.RangeUInt8N_Property;
        #endregion
        #region RangeUInt8
        protected readonly INotifyingItem<RangeUInt8> _RangeUInt8;
        public INotifyingItem<RangeUInt8> RangeUInt8_Property => _RangeUInt8;
        public RangeUInt8 RangeUInt8
        {
            get => this._RangeUInt8.Item;
            set => this._RangeUInt8.Set(value);
        }
        INotifyingItem<RangeUInt8> ITestObject_Notifying_RPC.RangeUInt8_Property => this.RangeUInt8_Property;
        INotifyingItemGetter<RangeUInt8> ITestObject_Notifying_RPCGetter.RangeUInt8_Property => this.RangeUInt8_Property;
        #endregion
        #region RangeUInt16N
        protected readonly INotifyingItem<RangeUInt16?> _RangeUInt16N;
        public INotifyingItem<RangeUInt16?> RangeUInt16N_Property => _RangeUInt16N;
        public RangeUInt16? RangeUInt16N
        {
            get => this._RangeUInt16N.Item;
            set => this._RangeUInt16N.Set(value);
        }
        INotifyingItem<RangeUInt16?> ITestObject_Notifying_RPC.RangeUInt16N_Property => this.RangeUInt16N_Property;
        INotifyingItemGetter<RangeUInt16?> ITestObject_Notifying_RPCGetter.RangeUInt16N_Property => this.RangeUInt16N_Property;
        #endregion
        #region RangeUInt16
        protected readonly INotifyingItem<RangeUInt16> _RangeUInt16;
        public INotifyingItem<RangeUInt16> RangeUInt16_Property => _RangeUInt16;
        public RangeUInt16 RangeUInt16
        {
            get => this._RangeUInt16.Item;
            set => this._RangeUInt16.Set(value);
        }
        INotifyingItem<RangeUInt16> ITestObject_Notifying_RPC.RangeUInt16_Property => this.RangeUInt16_Property;
        INotifyingItemGetter<RangeUInt16> ITestObject_Notifying_RPCGetter.RangeUInt16_Property => this.RangeUInt16_Property;
        #endregion
        #region RangeUInt32N
        protected readonly INotifyingItem<RangeUInt32?> _RangeUInt32N;
        public INotifyingItem<RangeUInt32?> RangeUInt32N_Property => _RangeUInt32N;
        public RangeUInt32? RangeUInt32N
        {
            get => this._RangeUInt32N.Item;
            set => this._RangeUInt32N.Set(value);
        }
        INotifyingItem<RangeUInt32?> ITestObject_Notifying_RPC.RangeUInt32N_Property => this.RangeUInt32N_Property;
        INotifyingItemGetter<RangeUInt32?> ITestObject_Notifying_RPCGetter.RangeUInt32N_Property => this.RangeUInt32N_Property;
        #endregion
        #region RangeUInt32
        protected readonly INotifyingItem<RangeUInt32> _RangeUInt32;
        public INotifyingItem<RangeUInt32> RangeUInt32_Property => _RangeUInt32;
        public RangeUInt32 RangeUInt32
        {
            get => this._RangeUInt32.Item;
            set => this._RangeUInt32.Set(value);
        }
        INotifyingItem<RangeUInt32> ITestObject_Notifying_RPC.RangeUInt32_Property => this.RangeUInt32_Property;
        INotifyingItemGetter<RangeUInt32> ITestObject_Notifying_RPCGetter.RangeUInt32_Property => this.RangeUInt32_Property;
        #endregion
        #region RangeUInt64N
        protected readonly INotifyingItem<RangeUInt64?> _RangeUInt64N;
        public INotifyingItem<RangeUInt64?> RangeUInt64N_Property => _RangeUInt64N;
        public RangeUInt64? RangeUInt64N
        {
            get => this._RangeUInt64N.Item;
            set => this._RangeUInt64N.Set(value);
        }
        INotifyingItem<RangeUInt64?> ITestObject_Notifying_RPC.RangeUInt64N_Property => this.RangeUInt64N_Property;
        INotifyingItemGetter<RangeUInt64?> ITestObject_Notifying_RPCGetter.RangeUInt64N_Property => this.RangeUInt64N_Property;
        #endregion
        #region RangeUInt64
        protected readonly INotifyingItem<RangeUInt64> _RangeUInt64;
        public INotifyingItem<RangeUInt64> RangeUInt64_Property => _RangeUInt64;
        public RangeUInt64 RangeUInt64
        {
            get => this._RangeUInt64.Item;
            set => this._RangeUInt64.Set(value);
        }
        INotifyingItem<RangeUInt64> ITestObject_Notifying_RPC.RangeUInt64_Property => this.RangeUInt64_Property;
        INotifyingItemGetter<RangeUInt64> ITestObject_Notifying_RPCGetter.RangeUInt64_Property => this.RangeUInt64_Property;
        #endregion
        #region String
        protected readonly INotifyingItem<String> _String;
        public INotifyingItem<String> String_Property => _String;
        public String String
        {
            get => this._String.Item;
            set => this._String.Set(value);
        }
        INotifyingItem<String> ITestObject_Notifying_RPC.String_Property => this.String_Property;
        INotifyingItemGetter<String> ITestObject_Notifying_RPCGetter.String_Property => this.String_Property;
        #endregion
        #region UDoubleN
        protected readonly INotifyingItem<UDouble?> _UDoubleN;
        public INotifyingItem<UDouble?> UDoubleN_Property => _UDoubleN;
        public UDouble? UDoubleN
        {
            get => this._UDoubleN.Item;
            set => this._UDoubleN.Set(value);
        }
        INotifyingItem<UDouble?> ITestObject_Notifying_RPC.UDoubleN_Property => this.UDoubleN_Property;
        INotifyingItemGetter<UDouble?> ITestObject_Notifying_RPCGetter.UDoubleN_Property => this.UDoubleN_Property;
        #endregion
        #region UDoubleN_Ranged
        protected readonly INotifyingItem<UDouble?> _UDoubleN_Ranged;
        public INotifyingItem<UDouble?> UDoubleN_Ranged_Property => _UDoubleN_Ranged;
        public UDouble? UDoubleN_Ranged
        {
            get => this._UDoubleN_Ranged.Item;
            set => this._UDoubleN_Ranged.Set(value?.PutInRange(UDoubleN_Ranged_Range.Min, UDoubleN_Ranged_Range.Max));
        }
        INotifyingItem<UDouble?> ITestObject_Notifying_RPC.UDoubleN_Ranged_Property => this.UDoubleN_Ranged_Property;
        INotifyingItemGetter<UDouble?> ITestObject_Notifying_RPCGetter.UDoubleN_Ranged_Property => this.UDoubleN_Ranged_Property;
        public static RangeUDouble UDoubleN_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UDouble
        protected readonly INotifyingItem<UDouble> _UDouble;
        public INotifyingItem<UDouble> UDouble_Property => _UDouble;
        public UDouble UDouble
        {
            get => this._UDouble.Item;
            set => this._UDouble.Set(value);
        }
        INotifyingItem<UDouble> ITestObject_Notifying_RPC.UDouble_Property => this.UDouble_Property;
        INotifyingItemGetter<UDouble> ITestObject_Notifying_RPCGetter.UDouble_Property => this.UDouble_Property;
        #endregion
        #region UDouble_Ranged
        protected readonly INotifyingItem<UDouble> _UDouble_Ranged;
        public INotifyingItem<UDouble> UDouble_Ranged_Property => _UDouble_Ranged;
        public UDouble UDouble_Ranged
        {
            get => this._UDouble_Ranged.Item;
            set => this._UDouble_Ranged.Set(value.PutInRange(UDouble_Ranged_Range.Min, UDouble_Ranged_Range.Max));
        }
        INotifyingItem<UDouble> ITestObject_Notifying_RPC.UDouble_Ranged_Property => this.UDouble_Ranged_Property;
        INotifyingItemGetter<UDouble> ITestObject_Notifying_RPCGetter.UDouble_Ranged_Property => this.UDouble_Ranged_Property;
        public static RangeUDouble UDouble_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UInt16N
        protected readonly INotifyingItem<UInt16?> _UInt16N;
        public INotifyingItem<UInt16?> UInt16N_Property => _UInt16N;
        public UInt16? UInt16N
        {
            get => this._UInt16N.Item;
            set => this._UInt16N.Set(value);
        }
        INotifyingItem<UInt16?> ITestObject_Notifying_RPC.UInt16N_Property => this.UInt16N_Property;
        INotifyingItemGetter<UInt16?> ITestObject_Notifying_RPCGetter.UInt16N_Property => this.UInt16N_Property;
        #endregion
        #region UInt16N_Ranged
        protected readonly INotifyingItem<UInt16?> _UInt16N_Ranged;
        public INotifyingItem<UInt16?> UInt16N_Ranged_Property => _UInt16N_Ranged;
        public UInt16? UInt16N_Ranged
        {
            get => this._UInt16N_Ranged.Item;
            set => this._UInt16N_Ranged.Set(value?.PutInRange(UInt16N_Ranged_Range.Min, UInt16N_Ranged_Range.Max));
        }
        INotifyingItem<UInt16?> ITestObject_Notifying_RPC.UInt16N_Ranged_Property => this.UInt16N_Ranged_Property;
        INotifyingItemGetter<UInt16?> ITestObject_Notifying_RPCGetter.UInt16N_Ranged_Property => this.UInt16N_Ranged_Property;
        public static RangeUInt16 UInt16N_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt16
        protected readonly INotifyingItem<UInt16> _UInt16;
        public INotifyingItem<UInt16> UInt16_Property => _UInt16;
        public UInt16 UInt16
        {
            get => this._UInt16.Item;
            set => this._UInt16.Set(value);
        }
        INotifyingItem<UInt16> ITestObject_Notifying_RPC.UInt16_Property => this.UInt16_Property;
        INotifyingItemGetter<UInt16> ITestObject_Notifying_RPCGetter.UInt16_Property => this.UInt16_Property;
        #endregion
        #region UInt16_Ranged
        protected readonly INotifyingItem<UInt16> _UInt16_Ranged;
        public INotifyingItem<UInt16> UInt16_Ranged_Property => _UInt16_Ranged;
        public UInt16 UInt16_Ranged
        {
            get => this._UInt16_Ranged.Item;
            set => this._UInt16_Ranged.Set(value.PutInRange(UInt16_Ranged_Range.Min, UInt16_Ranged_Range.Max));
        }
        INotifyingItem<UInt16> ITestObject_Notifying_RPC.UInt16_Ranged_Property => this.UInt16_Ranged_Property;
        INotifyingItemGetter<UInt16> ITestObject_Notifying_RPCGetter.UInt16_Ranged_Property => this.UInt16_Ranged_Property;
        public static RangeUInt16 UInt16_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt32N
        protected readonly INotifyingItem<UInt32?> _UInt32N;
        public INotifyingItem<UInt32?> UInt32N_Property => _UInt32N;
        public UInt32? UInt32N
        {
            get => this._UInt32N.Item;
            set => this._UInt32N.Set(value);
        }
        INotifyingItem<UInt32?> ITestObject_Notifying_RPC.UInt32N_Property => this.UInt32N_Property;
        INotifyingItemGetter<UInt32?> ITestObject_Notifying_RPCGetter.UInt32N_Property => this.UInt32N_Property;
        #endregion
        #region UInt32N_Ranged
        protected readonly INotifyingItem<UInt32?> _UInt32N_Ranged;
        public INotifyingItem<UInt32?> UInt32N_Ranged_Property => _UInt32N_Ranged;
        public UInt32? UInt32N_Ranged
        {
            get => this._UInt32N_Ranged.Item;
            set => this._UInt32N_Ranged.Set(value?.PutInRange(UInt32N_Ranged_Range.Min, UInt32N_Ranged_Range.Max));
        }
        INotifyingItem<UInt32?> ITestObject_Notifying_RPC.UInt32N_Ranged_Property => this.UInt32N_Ranged_Property;
        INotifyingItemGetter<UInt32?> ITestObject_Notifying_RPCGetter.UInt32N_Ranged_Property => this.UInt32N_Ranged_Property;
        public static RangeUInt32 UInt32N_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt32
        protected readonly INotifyingItem<UInt32> _UInt32;
        public INotifyingItem<UInt32> UInt32_Property => _UInt32;
        public UInt32 UInt32
        {
            get => this._UInt32.Item;
            set => this._UInt32.Set(value);
        }
        INotifyingItem<UInt32> ITestObject_Notifying_RPC.UInt32_Property => this.UInt32_Property;
        INotifyingItemGetter<UInt32> ITestObject_Notifying_RPCGetter.UInt32_Property => this.UInt32_Property;
        #endregion
        #region UInt32_Ranged
        protected readonly INotifyingItem<UInt32> _UInt32_Ranged;
        public INotifyingItem<UInt32> UInt32_Ranged_Property => _UInt32_Ranged;
        public UInt32 UInt32_Ranged
        {
            get => this._UInt32_Ranged.Item;
            set => this._UInt32_Ranged.Set(value.PutInRange(UInt32_Ranged_Range.Min, UInt32_Ranged_Range.Max));
        }
        INotifyingItem<UInt32> ITestObject_Notifying_RPC.UInt32_Ranged_Property => this.UInt32_Ranged_Property;
        INotifyingItemGetter<UInt32> ITestObject_Notifying_RPCGetter.UInt32_Ranged_Property => this.UInt32_Ranged_Property;
        public static RangeUInt32 UInt32_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt64N
        protected readonly INotifyingItem<UInt64?> _UInt64N;
        public INotifyingItem<UInt64?> UInt64N_Property => _UInt64N;
        public UInt64? UInt64N
        {
            get => this._UInt64N.Item;
            set => this._UInt64N.Set(value);
        }
        INotifyingItem<UInt64?> ITestObject_Notifying_RPC.UInt64N_Property => this.UInt64N_Property;
        INotifyingItemGetter<UInt64?> ITestObject_Notifying_RPCGetter.UInt64N_Property => this.UInt64N_Property;
        #endregion
        #region UInt64N_Ranged
        protected readonly INotifyingItem<UInt64?> _UInt64N_Ranged;
        public INotifyingItem<UInt64?> UInt64N_Ranged_Property => _UInt64N_Ranged;
        public UInt64? UInt64N_Ranged
        {
            get => this._UInt64N_Ranged.Item;
            set => this._UInt64N_Ranged.Set(value?.PutInRange(UInt64N_Ranged_Range.Min, UInt64N_Ranged_Range.Max));
        }
        INotifyingItem<UInt64?> ITestObject_Notifying_RPC.UInt64N_Ranged_Property => this.UInt64N_Ranged_Property;
        INotifyingItemGetter<UInt64?> ITestObject_Notifying_RPCGetter.UInt64N_Ranged_Property => this.UInt64N_Ranged_Property;
        public static RangeUInt64 UInt64N_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt64
        protected readonly INotifyingItem<UInt64> _UInt64;
        public INotifyingItem<UInt64> UInt64_Property => _UInt64;
        public UInt64 UInt64
        {
            get => this._UInt64.Item;
            set => this._UInt64.Set(value);
        }
        INotifyingItem<UInt64> ITestObject_Notifying_RPC.UInt64_Property => this.UInt64_Property;
        INotifyingItemGetter<UInt64> ITestObject_Notifying_RPCGetter.UInt64_Property => this.UInt64_Property;
        #endregion
        #region UInt64_Ranged
        protected readonly INotifyingItem<UInt64> _UInt64_Ranged;
        public INotifyingItem<UInt64> UInt64_Ranged_Property => _UInt64_Ranged;
        public UInt64 UInt64_Ranged
        {
            get => this._UInt64_Ranged.Item;
            set => this._UInt64_Ranged.Set(value.PutInRange(UInt64_Ranged_Range.Min, UInt64_Ranged_Range.Max));
        }
        INotifyingItem<UInt64> ITestObject_Notifying_RPC.UInt64_Ranged_Property => this.UInt64_Ranged_Property;
        INotifyingItemGetter<UInt64> ITestObject_Notifying_RPCGetter.UInt64_Ranged_Property => this.UInt64_Ranged_Property;
        public static RangeUInt64 UInt64_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt8N
        protected readonly INotifyingItem<Byte?> _UInt8N;
        public INotifyingItem<Byte?> UInt8N_Property => _UInt8N;
        public Byte? UInt8N
        {
            get => this._UInt8N.Item;
            set => this._UInt8N.Set(value);
        }
        INotifyingItem<Byte?> ITestObject_Notifying_RPC.UInt8N_Property => this.UInt8N_Property;
        INotifyingItemGetter<Byte?> ITestObject_Notifying_RPCGetter.UInt8N_Property => this.UInt8N_Property;
        #endregion
        #region UInt8N_Ranged
        protected readonly INotifyingItem<Byte?> _UInt8N_Ranged;
        public INotifyingItem<Byte?> UInt8N_Ranged_Property => _UInt8N_Ranged;
        public Byte? UInt8N_Ranged
        {
            get => this._UInt8N_Ranged.Item;
            set => this._UInt8N_Ranged.Set(value?.PutInRange(UInt8N_Ranged_Range.Min, UInt8N_Ranged_Range.Max));
        }
        INotifyingItem<Byte?> ITestObject_Notifying_RPC.UInt8N_Ranged_Property => this.UInt8N_Ranged_Property;
        INotifyingItemGetter<Byte?> ITestObject_Notifying_RPCGetter.UInt8N_Ranged_Property => this.UInt8N_Ranged_Property;
        public static RangeUInt8 UInt8N_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region UInt8
        protected readonly INotifyingItem<Byte> _UInt8;
        public INotifyingItem<Byte> UInt8_Property => _UInt8;
        public Byte UInt8
        {
            get => this._UInt8.Item;
            set => this._UInt8.Set(value);
        }
        INotifyingItem<Byte> ITestObject_Notifying_RPC.UInt8_Property => this.UInt8_Property;
        INotifyingItemGetter<Byte> ITestObject_Notifying_RPCGetter.UInt8_Property => this.UInt8_Property;
        #endregion
        #region UInt8_Ranged
        protected readonly INotifyingItem<Byte> _UInt8_Ranged;
        public INotifyingItem<Byte> UInt8_Ranged_Property => _UInt8_Ranged;
        public Byte UInt8_Ranged
        {
            get => this._UInt8_Ranged.Item;
            set => this._UInt8_Ranged.Set(value.PutInRange(UInt8_Ranged_Range.Min, UInt8_Ranged_Range.Max));
        }
        INotifyingItem<Byte> ITestObject_Notifying_RPC.UInt8_Ranged_Property => this.UInt8_Ranged_Property;
        INotifyingItemGetter<Byte> ITestObject_Notifying_RPCGetter.UInt8_Ranged_Property => this.UInt8_Ranged_Property;
        public static RangeUInt8 UInt8_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region Enum
        protected readonly INotifyingItem<TestEnum> _Enum;
        public INotifyingItem<TestEnum> Enum_Property => _Enum;
        public TestEnum Enum
        {
            get => this._Enum.Item;
            set => this._Enum.Set(value);
        }
        INotifyingItem<TestEnum> ITestObject_Notifying_RPC.Enum_Property => this.Enum_Property;
        INotifyingItemGetter<TestEnum> ITestObject_Notifying_RPCGetter.Enum_Property => this.Enum_Property;
        #endregion
        #region EnumNull
        protected readonly INotifyingItem<TestEnum?> _EnumNull;
        public INotifyingItem<TestEnum?> EnumNull_Property => _EnumNull;
        public TestEnum? EnumNull
        {
            get => this._EnumNull.Item;
            set => this._EnumNull.Set(value);
        }
        INotifyingItem<TestEnum?> ITestObject_Notifying_RPC.EnumNull_Property => this.EnumNull_Property;
        INotifyingItemGetter<TestEnum?> ITestObject_Notifying_RPCGetter.EnumNull_Property => this.EnumNull_Property;
        #endregion
        #region WildCard
        protected readonly INotifyingItem<Object> _WildCard = new NotifyingItemConvertWrapper<Object>(
            (change) => TryGet<Object>.Succeed(WildcardLink.Validate(change.New)),
            default(Object),
            markAsSet: false
        );
        public INotifyingItem<Object> WildCard_Property => _WildCard;
        public Object WildCard { get => _WildCard.Item; set => _WildCard.Item = value; }
        INotifyingItem<Object> ITestObject_Notifying_RPC.WildCard_Property => this.WildCard_Property;
        INotifyingItemGetter<Object> ITestObject_Notifying_RPCGetter.WildCard_Property => this.WildCard_Property;
        #endregion
        #region WildCardNull
        protected readonly INotifyingItem<Object> _WildCardNull = new NotifyingItemConvertWrapper<Object>(
            (change) => TryGet<Object>.Succeed(WildcardLink.Validate(change.New)),
            default(Object),
            markAsSet: false
        );
        public INotifyingItem<Object> WildCardNull_Property => _WildCardNull;
        public Object WildCardNull { get => _WildCardNull.Item; set => _WildCardNull.Item = value; }
        INotifyingItem<Object> ITestObject_Notifying_RPC.WildCardNull_Property => this.WildCardNull_Property;
        INotifyingItemGetter<Object> ITestObject_Notifying_RPCGetter.WildCardNull_Property => this.WildCardNull_Property;
        #endregion
        #region Ref
        private readonly INotifyingItem<ObjectToRef> _Ref = new NotifyingItem<ObjectToRef>();
        public INotifyingItem<ObjectToRef> Ref_Property => this._Ref;
        ObjectToRef ITestObject_Notifying_RPCGetter.Ref => this.Ref;
        public ObjectToRef Ref { get => _Ref.Item; set => _Ref.Item = value; }
        INotifyingItem<ObjectToRef> ITestObject_Notifying_RPC.Ref_Property => this.Ref_Property;
        INotifyingItemGetter<ObjectToRef> ITestObject_Notifying_RPCGetter.Ref_Property => this.Ref_Property;
        #endregion
        #region Ref_NotNull
        private readonly INotifyingItem<ObjectToRef> _Ref_NotNull = new NotifyingItemConvertWrapper<ObjectToRef>(
            defaultVal: new ObjectToRef(),
            incomingConverter: (change) =>
            {
                if (change.New == null)
                {
                    return TryGet<ObjectToRef>.Succeed(new ObjectToRef());
                }
                return TryGet<ObjectToRef>.Succeed(change.New);
            }
        );
        public INotifyingItem<ObjectToRef> Ref_NotNull_Property => this._Ref_NotNull;
        ObjectToRef ITestObject_Notifying_RPCGetter.Ref_NotNull => this.Ref_NotNull;
        public ObjectToRef Ref_NotNull { get => _Ref_NotNull.Item; set => _Ref_NotNull.Item = value; }
        INotifyingItem<ObjectToRef> ITestObject_Notifying_RPC.Ref_NotNull_Property => this.Ref_NotNull_Property;
        INotifyingItemGetter<ObjectToRef> ITestObject_Notifying_RPCGetter.Ref_NotNull_Property => this.Ref_NotNull_Property;
        #endregion
        #region Ref_Singleton
        private readonly INotifyingItem<ObjectToRef> _Ref_Singleton = new NotifyingItem<ObjectToRef>(new ObjectToRef());
        public INotifyingItemGetter<ObjectToRef> Ref_Singleton_Property => this._Ref_Singleton;
        ObjectToRef ITestObject_Notifying_RPCGetter.Ref_Singleton => this.Ref_Singleton;
        public ObjectToRef Ref_Singleton { get => _Ref_Singleton.Item; set => _Ref_Singleton.Item = value; }
        INotifyingItemGetter<ObjectToRef> ITestObject_Notifying_RPCGetter.Ref_Singleton_Property => this.Ref_Singleton_Property;
        #endregion
        #region RefGetter
        private readonly INotifyingItem<IObjectToRefGetter> _RefGetter = new NotifyingItem<IObjectToRefGetter>();
        public INotifyingItem<IObjectToRefGetter> RefGetter_Property => this._RefGetter;
        IObjectToRefGetter ITestObject_Notifying_RPCGetter.RefGetter => this.RefGetter;
        public IObjectToRefGetter RefGetter { get => _RefGetter.Item; set => _RefGetter.Item = value; }
        INotifyingItem<IObjectToRefGetter> ITestObject_Notifying_RPC.RefGetter_Property => this.RefGetter_Property;
        INotifyingItemGetter<IObjectToRefGetter> ITestObject_Notifying_RPCGetter.RefGetter_Property => this.RefGetter_Property;
        #endregion
        #region RefGetter_NotNull
        private readonly INotifyingItem<IObjectToRefGetter> _RefGetter_NotNull = new NotifyingItemConvertWrapper<IObjectToRefGetter>(
            defaultVal: new ObjectToRef(),
            incomingConverter: (change) =>
            {
                if (change.New == null)
                {
                    return TryGet<IObjectToRefGetter>.Succeed(new ObjectToRef());
                }
                return TryGet<IObjectToRefGetter>.Succeed(change.New);
            }
        );
        public INotifyingItem<IObjectToRefGetter> RefGetter_NotNull_Property => this._RefGetter_NotNull;
        IObjectToRefGetter ITestObject_Notifying_RPCGetter.RefGetter_NotNull => this.RefGetter_NotNull;
        public IObjectToRefGetter RefGetter_NotNull { get => _RefGetter_NotNull.Item; set => _RefGetter_NotNull.Item = value; }
        INotifyingItem<IObjectToRefGetter> ITestObject_Notifying_RPC.RefGetter_NotNull_Property => this.RefGetter_NotNull_Property;
        INotifyingItemGetter<IObjectToRefGetter> ITestObject_Notifying_RPCGetter.RefGetter_NotNull_Property => this.RefGetter_NotNull_Property;
        #endregion
        #region RefGetter_Singleton
        private readonly INotifyingItem<IObjectToRefGetter> _RefGetter_Singleton = new NotifyingItem<IObjectToRefGetter>(new ObjectToRef());
        public INotifyingItemGetter<IObjectToRefGetter> RefGetter_Singleton_Property => this._RefGetter_Singleton;
        IObjectToRefGetter ITestObject_Notifying_RPCGetter.RefGetter_Singleton => this.RefGetter_Singleton;
        public IObjectToRefGetter RefGetter_Singleton { get => _RefGetter_Singleton.Item; set => _RefGetter_Singleton.Item = value; }
        INotifyingItemGetter<IObjectToRefGetter> ITestObject_Notifying_RPCGetter.RefGetter_Singleton_Property => this.RefGetter_Singleton_Property;
        #endregion
        #region RefSetter
        private readonly INotifyingItem<IObjectToRef> _RefSetter = new NotifyingItem<IObjectToRef>();
        public INotifyingItem<IObjectToRef> RefSetter_Property => this._RefSetter;
        IObjectToRef ITestObject_Notifying_RPCGetter.RefSetter => this.RefSetter;
        public IObjectToRef RefSetter { get => _RefSetter.Item; set => _RefSetter.Item = value; }
        INotifyingItem<IObjectToRef> ITestObject_Notifying_RPC.RefSetter_Property => this.RefSetter_Property;
        INotifyingItemGetter<IObjectToRef> ITestObject_Notifying_RPCGetter.RefSetter_Property => this.RefSetter_Property;
        #endregion
        #region RefSetter_NotNull
        private readonly INotifyingItem<IObjectToRef> _RefSetter_NotNull = new NotifyingItemConvertWrapper<IObjectToRef>(
            defaultVal: new ObjectToRef(),
            incomingConverter: (change) =>
            {
                if (change.New == null)
                {
                    return TryGet<IObjectToRef>.Succeed(new ObjectToRef());
                }
                return TryGet<IObjectToRef>.Succeed(change.New);
            }
        );
        public INotifyingItem<IObjectToRef> RefSetter_NotNull_Property => this._RefSetter_NotNull;
        IObjectToRef ITestObject_Notifying_RPCGetter.RefSetter_NotNull => this.RefSetter_NotNull;
        public IObjectToRef RefSetter_NotNull { get => _RefSetter_NotNull.Item; set => _RefSetter_NotNull.Item = value; }
        INotifyingItem<IObjectToRef> ITestObject_Notifying_RPC.RefSetter_NotNull_Property => this.RefSetter_NotNull_Property;
        INotifyingItemGetter<IObjectToRef> ITestObject_Notifying_RPCGetter.RefSetter_NotNull_Property => this.RefSetter_NotNull_Property;
        #endregion
        #region RefSetter_Singleton
        private readonly INotifyingItem<IObjectToRef> _RefSetter_Singleton = new NotifyingItem<IObjectToRef>(new ObjectToRef());
        public INotifyingItemGetter<IObjectToRef> RefSetter_Singleton_Property => this._RefSetter_Singleton;
        IObjectToRef ITestObject_Notifying_RPCGetter.RefSetter_Singleton => this.RefSetter_Singleton;
        public IObjectToRef RefSetter_Singleton { get => _RefSetter_Singleton.Item; set => _RefSetter_Singleton.Item = value; }
        INotifyingItemGetter<IObjectToRef> ITestObject_Notifying_RPCGetter.RefSetter_Singleton_Property => this.RefSetter_Singleton_Property;
        #endregion
        #region List
        private readonly INotifyingList<Boolean> _List = new NotifyingList<Boolean>();
        public INotifyingList<Boolean> List => _List;
        #region Interface Members
        INotifyingList<Boolean> ITestObject_Notifying_RPC.List => _List;
        INotifyingListGetter<Boolean> ITestObject_Notifying_RPCGetter.List => _List;
        #endregion

        #endregion
        #region RefList
        private readonly INotifyingList<ObjectToRef> _RefList = new NotifyingList<ObjectToRef>();
        public INotifyingList<ObjectToRef> RefList => _RefList;
        #region Interface Members
        INotifyingList<ObjectToRef> ITestObject_Notifying_RPC.RefList => _RefList;
        INotifyingListGetter<ObjectToRef> ITestObject_Notifying_RPCGetter.RefList => _RefList;
        #endregion

        #endregion
        #region Dict
        private readonly INotifyingDictionary<String, Boolean> _Dict = new NotifyingDictionary<String, Boolean>();
        public INotifyingDictionary<String, Boolean> Dict { get { return _Dict; } }
        #region Interface Members
        INotifyingDictionary<String, Boolean> ITestObject_Notifying_RPC.Dict => _Dict;
        INotifyingDictionaryGetter<String, Boolean> ITestObject_Notifying_RPCGetter.Dict => _Dict;
        #endregion

        #endregion
        #region RefDict
        private readonly INotifyingDictionary<ObjectToRef, ObjectToRef> _RefDict = new NotifyingDictionary<ObjectToRef, ObjectToRef>();
        public INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get { return _RefDict; } }
        #region Interface Members
        INotifyingDictionary<ObjectToRef, ObjectToRef> ITestObject_Notifying_RPC.RefDict => _RefDict;
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> ITestObject_Notifying_RPCGetter.RefDict => _RefDict;
        #endregion

        #endregion
        #region KeyRefDict
        private readonly INotifyingDictionary<ObjectToRef, Boolean> _KeyRefDict = new NotifyingDictionary<ObjectToRef, Boolean>();
        public INotifyingDictionary<ObjectToRef, Boolean> KeyRefDict { get { return _KeyRefDict; } }
        #region Interface Members
        INotifyingDictionary<ObjectToRef, Boolean> ITestObject_Notifying_RPC.KeyRefDict => _KeyRefDict;
        INotifyingDictionaryGetter<ObjectToRef, Boolean> ITestObject_Notifying_RPCGetter.KeyRefDict => _KeyRefDict;
        #endregion

        #endregion
        #region ValRefDict
        private readonly INotifyingDictionary<String, ObjectToRef> _ValRefDict = new NotifyingDictionary<String, ObjectToRef>();
        public INotifyingDictionary<String, ObjectToRef> ValRefDict { get { return _ValRefDict; } }
        #region Interface Members
        INotifyingDictionary<String, ObjectToRef> ITestObject_Notifying_RPC.ValRefDict => _ValRefDict;
        INotifyingDictionaryGetter<String, ObjectToRef> ITestObject_Notifying_RPCGetter.ValRefDict => _ValRefDict;
        #endregion

        #endregion
        #region DictKeyedValue
        private readonly INotifyingKeyedCollection<Int32, ObjectToRef> _DictKeyedValue = new NotifyingKeyedCollection<Int32, ObjectToRef>((item) => item.KeyField);
        public INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue => _DictKeyedValue;
        #region Interface Members
        INotifyingKeyedCollection<Int32, ObjectToRef> ITestObject_Notifying_RPC.DictKeyedValue => _DictKeyedValue;
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> ITestObject_Notifying_RPCGetter.DictKeyedValue => _DictKeyedValue;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TestObject_Notifying_RPCCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestObject_Notifying_RPCCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestObject_Notifying_RPCCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestObject_Notifying_RPCCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        public void CopyFieldsFrom(
            ITestObject_Notifying_RPCGetter rhs,
            TestObject_Notifying_RPC_CopyMask copyMask = null,
            ITestObject_Notifying_RPCGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_Notifying_RPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestObject_Notifying_RPCGetter rhs,
            out TestObject_Notifying_RPC_ErrorMask errorMask,
            TestObject_Notifying_RPC_CopyMask copyMask = null,
            ITestObject_Notifying_RPCGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_Notifying_RPCCommon.CopyFieldsFrom(
                item: this,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public void CopyFieldsFrom(
            ITestObject_Notifying_RPCGetter rhs,
            bool doErrorMask,
            out TestObject_Notifying_RPC_ErrorMask errorMask,
            TestObject_Notifying_RPC_CopyMask copyMask = null,
            ITestObject_Notifying_RPCGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            if (doErrorMask)
            {
                CopyFieldsFrom(
                    rhs: rhs,
                    errorMask: out errorMask,
                    copyMask: copyMask,
                    def: def,
                    cmds: cmds);
            }
            else
            {
                errorMask = null;
                CopyFieldsFrom(
                    rhs: rhs,
                    copyMask: copyMask,
                    def: def,
                    cmds: cmds);
            }
        }

        #endregion

        #region To String
        public override string ToString()
        {
            return TestObject_Notifying_RPCCommon.ToString(this, printMask: null);
        }

        public void ToString(FileGeneration fg)
        {
            TestObject_Notifying_RPCCommon.ToString(this, fg, printMask: null);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_Notifying_RPC rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_Notifying_RPC rhs)
        {
            if (BoolN_Property.HasBeenSet != rhs.BoolN_Property.HasBeenSet) return false;
            if (BoolN_Property.HasBeenSet)
            {
                if (BoolN != rhs.BoolN) return false;
            }
            if (Bool_Property.HasBeenSet != rhs.Bool_Property.HasBeenSet) return false;
            if (Bool_Property.HasBeenSet)
            {
                if (Bool != rhs.Bool) return false;
            }
            if (CharN_Property.HasBeenSet != rhs.CharN_Property.HasBeenSet) return false;
            if (CharN_Property.HasBeenSet)
            {
                if (CharN != rhs.CharN) return false;
            }
            if (Char_Property.HasBeenSet != rhs.Char_Property.HasBeenSet) return false;
            if (Char_Property.HasBeenSet)
            {
                if (Char != rhs.Char) return false;
            }
            if (DateTimeNull_Property.HasBeenSet != rhs.DateTimeNull_Property.HasBeenSet) return false;
            if (DateTimeNull_Property.HasBeenSet)
            {
                if (DateTimeNull != rhs.DateTimeNull) return false;
            }
            if (DateTime_Property.HasBeenSet != rhs.DateTime_Property.HasBeenSet) return false;
            if (DateTime_Property.HasBeenSet)
            {
                if (DateTime != rhs.DateTime) return false;
            }
            if (DoubleN_Property.HasBeenSet != rhs.DoubleN_Property.HasBeenSet) return false;
            if (DoubleN_Property.HasBeenSet)
            {
                if (DoubleN != rhs.DoubleN) return false;
            }
            if (DoubleN_Ranged_Property.HasBeenSet != rhs.DoubleN_Ranged_Property.HasBeenSet) return false;
            if (DoubleN_Ranged_Property.HasBeenSet)
            {
                if (DoubleN_Ranged != rhs.DoubleN_Ranged) return false;
            }
            if (Double_Property.HasBeenSet != rhs.Double_Property.HasBeenSet) return false;
            if (Double_Property.HasBeenSet)
            {
                if (Double != rhs.Double) return false;
            }
            if (Double_Ranged_Property.HasBeenSet != rhs.Double_Ranged_Property.HasBeenSet) return false;
            if (Double_Ranged_Property.HasBeenSet)
            {
                if (Double_Ranged != rhs.Double_Ranged) return false;
            }
            if (FloatN_Property.HasBeenSet != rhs.FloatN_Property.HasBeenSet) return false;
            if (FloatN_Property.HasBeenSet)
            {
                if (FloatN != rhs.FloatN) return false;
            }
            if (FloatN_Ranged_Property.HasBeenSet != rhs.FloatN_Ranged_Property.HasBeenSet) return false;
            if (FloatN_Ranged_Property.HasBeenSet)
            {
                if (FloatN_Ranged != rhs.FloatN_Ranged) return false;
            }
            if (Float_Property.HasBeenSet != rhs.Float_Property.HasBeenSet) return false;
            if (Float_Property.HasBeenSet)
            {
                if (Float != rhs.Float) return false;
            }
            if (Float_Ranged_Property.HasBeenSet != rhs.Float_Ranged_Property.HasBeenSet) return false;
            if (Float_Ranged_Property.HasBeenSet)
            {
                if (Float_Ranged != rhs.Float_Ranged) return false;
            }
            if (Int16N_Property.HasBeenSet != rhs.Int16N_Property.HasBeenSet) return false;
            if (Int16N_Property.HasBeenSet)
            {
                if (Int16N != rhs.Int16N) return false;
            }
            if (Int16N_Ranged_Property.HasBeenSet != rhs.Int16N_Ranged_Property.HasBeenSet) return false;
            if (Int16N_Ranged_Property.HasBeenSet)
            {
                if (Int16N_Ranged != rhs.Int16N_Ranged) return false;
            }
            if (Int16_Property.HasBeenSet != rhs.Int16_Property.HasBeenSet) return false;
            if (Int16_Property.HasBeenSet)
            {
                if (Int16 != rhs.Int16) return false;
            }
            if (Int16_Ranged_Property.HasBeenSet != rhs.Int16_Ranged_Property.HasBeenSet) return false;
            if (Int16_Ranged_Property.HasBeenSet)
            {
                if (Int16_Ranged != rhs.Int16_Ranged) return false;
            }
            if (Int32N_Property.HasBeenSet != rhs.Int32N_Property.HasBeenSet) return false;
            if (Int32N_Property.HasBeenSet)
            {
                if (Int32N != rhs.Int32N) return false;
            }
            if (Int32N_Ranged_Property.HasBeenSet != rhs.Int32N_Ranged_Property.HasBeenSet) return false;
            if (Int32N_Ranged_Property.HasBeenSet)
            {
                if (Int32N_Ranged != rhs.Int32N_Ranged) return false;
            }
            if (Int32_Property.HasBeenSet != rhs.Int32_Property.HasBeenSet) return false;
            if (Int32_Property.HasBeenSet)
            {
                if (Int32 != rhs.Int32) return false;
            }
            if (Int32_Ranged_Property.HasBeenSet != rhs.Int32_Ranged_Property.HasBeenSet) return false;
            if (Int32_Ranged_Property.HasBeenSet)
            {
                if (Int32_Ranged != rhs.Int32_Ranged) return false;
            }
            if (Int64N_Property.HasBeenSet != rhs.Int64N_Property.HasBeenSet) return false;
            if (Int64N_Property.HasBeenSet)
            {
                if (Int64N != rhs.Int64N) return false;
            }
            if (Int64N_Ranged_Property.HasBeenSet != rhs.Int64N_Ranged_Property.HasBeenSet) return false;
            if (Int64N_Ranged_Property.HasBeenSet)
            {
                if (Int64N_Ranged != rhs.Int64N_Ranged) return false;
            }
            if (Int64_Property.HasBeenSet != rhs.Int64_Property.HasBeenSet) return false;
            if (Int64_Property.HasBeenSet)
            {
                if (Int64 != rhs.Int64) return false;
            }
            if (Int64_Ranged_Property.HasBeenSet != rhs.Int64_Ranged_Property.HasBeenSet) return false;
            if (Int64_Ranged_Property.HasBeenSet)
            {
                if (Int64_Ranged != rhs.Int64_Ranged) return false;
            }
            if (Int8N_Property.HasBeenSet != rhs.Int8N_Property.HasBeenSet) return false;
            if (Int8N_Property.HasBeenSet)
            {
                if (Int8N != rhs.Int8N) return false;
            }
            if (Int8N_Ranged_Property.HasBeenSet != rhs.Int8N_Ranged_Property.HasBeenSet) return false;
            if (Int8N_Ranged_Property.HasBeenSet)
            {
                if (Int8N_Ranged != rhs.Int8N_Ranged) return false;
            }
            if (Int8_Property.HasBeenSet != rhs.Int8_Property.HasBeenSet) return false;
            if (Int8_Property.HasBeenSet)
            {
                if (Int8 != rhs.Int8) return false;
            }
            if (Int8_Ranged_Property.HasBeenSet != rhs.Int8_Ranged_Property.HasBeenSet) return false;
            if (Int8_Ranged_Property.HasBeenSet)
            {
                if (Int8_Ranged != rhs.Int8_Ranged) return false;
            }
            if (Unsafe_Property.HasBeenSet != rhs.Unsafe_Property.HasBeenSet) return false;
            if (Unsafe_Property.HasBeenSet)
            {
                if (Unsafe != rhs.Unsafe) return false;
            }
            if (P2IntN_Property.HasBeenSet != rhs.P2IntN_Property.HasBeenSet) return false;
            if (P2IntN_Property.HasBeenSet)
            {
                if (P2IntN != rhs.P2IntN) return false;
            }
            if (P2Int_Property.HasBeenSet != rhs.P2Int_Property.HasBeenSet) return false;
            if (P2Int_Property.HasBeenSet)
            {
                if (P2Int != rhs.P2Int) return false;
            }
            if (P3DoubleN_Property.HasBeenSet != rhs.P3DoubleN_Property.HasBeenSet) return false;
            if (P3DoubleN_Property.HasBeenSet)
            {
                if (P3DoubleN != rhs.P3DoubleN) return false;
            }
            if (P3Double_Property.HasBeenSet != rhs.P3Double_Property.HasBeenSet) return false;
            if (P3Double_Property.HasBeenSet)
            {
                if (P3Double != rhs.P3Double) return false;
            }
            if (P3IntN_Property.HasBeenSet != rhs.P3IntN_Property.HasBeenSet) return false;
            if (P3IntN_Property.HasBeenSet)
            {
                if (P3IntN != rhs.P3IntN) return false;
            }
            if (P3Int_Property.HasBeenSet != rhs.P3Int_Property.HasBeenSet) return false;
            if (P3Int_Property.HasBeenSet)
            {
                if (P3Int != rhs.P3Int) return false;
            }
            if (PercentN_Property.HasBeenSet != rhs.PercentN_Property.HasBeenSet) return false;
            if (PercentN_Property.HasBeenSet)
            {
                if (PercentN != rhs.PercentN) return false;
            }
            if (Percent_Property.HasBeenSet != rhs.Percent_Property.HasBeenSet) return false;
            if (Percent_Property.HasBeenSet)
            {
                if (Percent != rhs.Percent) return false;
            }
            if (RangeInt8N_Property.HasBeenSet != rhs.RangeInt8N_Property.HasBeenSet) return false;
            if (RangeInt8N_Property.HasBeenSet)
            {
                if (RangeInt8N != rhs.RangeInt8N) return false;
            }
            if (RangeInt8_Property.HasBeenSet != rhs.RangeInt8_Property.HasBeenSet) return false;
            if (RangeInt8_Property.HasBeenSet)
            {
                if (RangeInt8 != rhs.RangeInt8) return false;
            }
            if (RangeInt16N_Property.HasBeenSet != rhs.RangeInt16N_Property.HasBeenSet) return false;
            if (RangeInt16N_Property.HasBeenSet)
            {
                if (RangeInt16N != rhs.RangeInt16N) return false;
            }
            if (RangeInt16_Property.HasBeenSet != rhs.RangeInt16_Property.HasBeenSet) return false;
            if (RangeInt16_Property.HasBeenSet)
            {
                if (RangeInt16 != rhs.RangeInt16) return false;
            }
            if (RangeInt32N_Property.HasBeenSet != rhs.RangeInt32N_Property.HasBeenSet) return false;
            if (RangeInt32N_Property.HasBeenSet)
            {
                if (RangeInt32N != rhs.RangeInt32N) return false;
            }
            if (RangeInt32_Property.HasBeenSet != rhs.RangeInt32_Property.HasBeenSet) return false;
            if (RangeInt32_Property.HasBeenSet)
            {
                if (RangeInt32 != rhs.RangeInt32) return false;
            }
            if (RangeInt64N_Property.HasBeenSet != rhs.RangeInt64N_Property.HasBeenSet) return false;
            if (RangeInt64N_Property.HasBeenSet)
            {
                if (RangeInt64N != rhs.RangeInt64N) return false;
            }
            if (RangeInt64_Property.HasBeenSet != rhs.RangeInt64_Property.HasBeenSet) return false;
            if (RangeInt64_Property.HasBeenSet)
            {
                if (RangeInt64 != rhs.RangeInt64) return false;
            }
            if (RangeUInt8N_Property.HasBeenSet != rhs.RangeUInt8N_Property.HasBeenSet) return false;
            if (RangeUInt8N_Property.HasBeenSet)
            {
                if (RangeUInt8N != rhs.RangeUInt8N) return false;
            }
            if (RangeUInt8_Property.HasBeenSet != rhs.RangeUInt8_Property.HasBeenSet) return false;
            if (RangeUInt8_Property.HasBeenSet)
            {
                if (RangeUInt8 != rhs.RangeUInt8) return false;
            }
            if (RangeUInt16N_Property.HasBeenSet != rhs.RangeUInt16N_Property.HasBeenSet) return false;
            if (RangeUInt16N_Property.HasBeenSet)
            {
                if (RangeUInt16N != rhs.RangeUInt16N) return false;
            }
            if (RangeUInt16_Property.HasBeenSet != rhs.RangeUInt16_Property.HasBeenSet) return false;
            if (RangeUInt16_Property.HasBeenSet)
            {
                if (RangeUInt16 != rhs.RangeUInt16) return false;
            }
            if (RangeUInt32N_Property.HasBeenSet != rhs.RangeUInt32N_Property.HasBeenSet) return false;
            if (RangeUInt32N_Property.HasBeenSet)
            {
                if (RangeUInt32N != rhs.RangeUInt32N) return false;
            }
            if (RangeUInt32_Property.HasBeenSet != rhs.RangeUInt32_Property.HasBeenSet) return false;
            if (RangeUInt32_Property.HasBeenSet)
            {
                if (RangeUInt32 != rhs.RangeUInt32) return false;
            }
            if (RangeUInt64N_Property.HasBeenSet != rhs.RangeUInt64N_Property.HasBeenSet) return false;
            if (RangeUInt64N_Property.HasBeenSet)
            {
                if (RangeUInt64N != rhs.RangeUInt64N) return false;
            }
            if (RangeUInt64_Property.HasBeenSet != rhs.RangeUInt64_Property.HasBeenSet) return false;
            if (RangeUInt64_Property.HasBeenSet)
            {
                if (RangeUInt64 != rhs.RangeUInt64) return false;
            }
            if (String_Property.HasBeenSet != rhs.String_Property.HasBeenSet) return false;
            if (String_Property.HasBeenSet)
            {
                if (String != rhs.String) return false;
            }
            if (UDoubleN_Property.HasBeenSet != rhs.UDoubleN_Property.HasBeenSet) return false;
            if (UDoubleN_Property.HasBeenSet)
            {
                if (UDoubleN != rhs.UDoubleN) return false;
            }
            if (UDoubleN_Ranged_Property.HasBeenSet != rhs.UDoubleN_Ranged_Property.HasBeenSet) return false;
            if (UDoubleN_Ranged_Property.HasBeenSet)
            {
                if (UDoubleN_Ranged != rhs.UDoubleN_Ranged) return false;
            }
            if (UDouble_Property.HasBeenSet != rhs.UDouble_Property.HasBeenSet) return false;
            if (UDouble_Property.HasBeenSet)
            {
                if (UDouble != rhs.UDouble) return false;
            }
            if (UDouble_Ranged_Property.HasBeenSet != rhs.UDouble_Ranged_Property.HasBeenSet) return false;
            if (UDouble_Ranged_Property.HasBeenSet)
            {
                if (UDouble_Ranged != rhs.UDouble_Ranged) return false;
            }
            if (UInt16N_Property.HasBeenSet != rhs.UInt16N_Property.HasBeenSet) return false;
            if (UInt16N_Property.HasBeenSet)
            {
                if (UInt16N != rhs.UInt16N) return false;
            }
            if (UInt16N_Ranged_Property.HasBeenSet != rhs.UInt16N_Ranged_Property.HasBeenSet) return false;
            if (UInt16N_Ranged_Property.HasBeenSet)
            {
                if (UInt16N_Ranged != rhs.UInt16N_Ranged) return false;
            }
            if (UInt16_Property.HasBeenSet != rhs.UInt16_Property.HasBeenSet) return false;
            if (UInt16_Property.HasBeenSet)
            {
                if (UInt16 != rhs.UInt16) return false;
            }
            if (UInt16_Ranged_Property.HasBeenSet != rhs.UInt16_Ranged_Property.HasBeenSet) return false;
            if (UInt16_Ranged_Property.HasBeenSet)
            {
                if (UInt16_Ranged != rhs.UInt16_Ranged) return false;
            }
            if (UInt32N_Property.HasBeenSet != rhs.UInt32N_Property.HasBeenSet) return false;
            if (UInt32N_Property.HasBeenSet)
            {
                if (UInt32N != rhs.UInt32N) return false;
            }
            if (UInt32N_Ranged_Property.HasBeenSet != rhs.UInt32N_Ranged_Property.HasBeenSet) return false;
            if (UInt32N_Ranged_Property.HasBeenSet)
            {
                if (UInt32N_Ranged != rhs.UInt32N_Ranged) return false;
            }
            if (UInt32_Property.HasBeenSet != rhs.UInt32_Property.HasBeenSet) return false;
            if (UInt32_Property.HasBeenSet)
            {
                if (UInt32 != rhs.UInt32) return false;
            }
            if (UInt32_Ranged_Property.HasBeenSet != rhs.UInt32_Ranged_Property.HasBeenSet) return false;
            if (UInt32_Ranged_Property.HasBeenSet)
            {
                if (UInt32_Ranged != rhs.UInt32_Ranged) return false;
            }
            if (UInt64N_Property.HasBeenSet != rhs.UInt64N_Property.HasBeenSet) return false;
            if (UInt64N_Property.HasBeenSet)
            {
                if (UInt64N != rhs.UInt64N) return false;
            }
            if (UInt64N_Ranged_Property.HasBeenSet != rhs.UInt64N_Ranged_Property.HasBeenSet) return false;
            if (UInt64N_Ranged_Property.HasBeenSet)
            {
                if (UInt64N_Ranged != rhs.UInt64N_Ranged) return false;
            }
            if (UInt64_Property.HasBeenSet != rhs.UInt64_Property.HasBeenSet) return false;
            if (UInt64_Property.HasBeenSet)
            {
                if (UInt64 != rhs.UInt64) return false;
            }
            if (UInt64_Ranged_Property.HasBeenSet != rhs.UInt64_Ranged_Property.HasBeenSet) return false;
            if (UInt64_Ranged_Property.HasBeenSet)
            {
                if (UInt64_Ranged != rhs.UInt64_Ranged) return false;
            }
            if (UInt8N_Property.HasBeenSet != rhs.UInt8N_Property.HasBeenSet) return false;
            if (UInt8N_Property.HasBeenSet)
            {
                if (UInt8N != rhs.UInt8N) return false;
            }
            if (UInt8N_Ranged_Property.HasBeenSet != rhs.UInt8N_Ranged_Property.HasBeenSet) return false;
            if (UInt8N_Ranged_Property.HasBeenSet)
            {
                if (UInt8N_Ranged != rhs.UInt8N_Ranged) return false;
            }
            if (UInt8_Property.HasBeenSet != rhs.UInt8_Property.HasBeenSet) return false;
            if (UInt8_Property.HasBeenSet)
            {
                if (UInt8 != rhs.UInt8) return false;
            }
            if (UInt8_Ranged_Property.HasBeenSet != rhs.UInt8_Ranged_Property.HasBeenSet) return false;
            if (UInt8_Ranged_Property.HasBeenSet)
            {
                if (UInt8_Ranged != rhs.UInt8_Ranged) return false;
            }
            if (Enum_Property.HasBeenSet != rhs.Enum_Property.HasBeenSet) return false;
            if (Enum_Property.HasBeenSet)
            {
                if (Enum != rhs.Enum) return false;
            }
            if (EnumNull_Property.HasBeenSet != rhs.EnumNull_Property.HasBeenSet) return false;
            if (EnumNull_Property.HasBeenSet)
            {
                if (EnumNull != rhs.EnumNull) return false;
            }
            if (WildCard_Property.HasBeenSet != rhs.WildCard_Property.HasBeenSet) return false;
            if (WildCard_Property.HasBeenSet)
            {
                if (WildCard != rhs.WildCard) return false;
            }
            if (WildCardNull_Property.HasBeenSet != rhs.WildCardNull_Property.HasBeenSet) return false;
            if (WildCardNull_Property.HasBeenSet)
            {
                if (WildCardNull != rhs.WildCardNull) return false;
            }
            if (Ref_Property.HasBeenSet != rhs.Ref_Property.HasBeenSet) return false;
            if (Ref_Property.HasBeenSet)
            {
                if (object.Equals(Ref, rhs.Ref)) return false;
            }
            if (Ref_NotNull_Property.HasBeenSet != rhs.Ref_NotNull_Property.HasBeenSet) return false;
            if (Ref_NotNull_Property.HasBeenSet)
            {
                if (object.Equals(Ref_NotNull, rhs.Ref_NotNull)) return false;
            }
            if (Ref_Singleton_Property.HasBeenSet != rhs.Ref_Singleton_Property.HasBeenSet) return false;
            if (Ref_Singleton_Property.HasBeenSet)
            {
                if (object.Equals(Ref_Singleton, rhs.Ref_Singleton)) return false;
            }
            if (RefGetter_Property.HasBeenSet != rhs.RefGetter_Property.HasBeenSet) return false;
            if (RefGetter_Property.HasBeenSet)
            {
                if (object.Equals(RefGetter, rhs.RefGetter)) return false;
            }
            if (RefGetter_NotNull_Property.HasBeenSet != rhs.RefGetter_NotNull_Property.HasBeenSet) return false;
            if (RefGetter_NotNull_Property.HasBeenSet)
            {
                if (object.Equals(RefGetter_NotNull, rhs.RefGetter_NotNull)) return false;
            }
            if (RefGetter_Singleton_Property.HasBeenSet != rhs.RefGetter_Singleton_Property.HasBeenSet) return false;
            if (RefGetter_Singleton_Property.HasBeenSet)
            {
                if (object.Equals(RefGetter_Singleton, rhs.RefGetter_Singleton)) return false;
            }
            if (RefSetter_Property.HasBeenSet != rhs.RefSetter_Property.HasBeenSet) return false;
            if (RefSetter_Property.HasBeenSet)
            {
                if (object.Equals(RefSetter, rhs.RefSetter)) return false;
            }
            if (RefSetter_NotNull_Property.HasBeenSet != rhs.RefSetter_NotNull_Property.HasBeenSet) return false;
            if (RefSetter_NotNull_Property.HasBeenSet)
            {
                if (object.Equals(RefSetter_NotNull, rhs.RefSetter_NotNull)) return false;
            }
            if (RefSetter_Singleton_Property.HasBeenSet != rhs.RefSetter_Singleton_Property.HasBeenSet) return false;
            if (RefSetter_Singleton_Property.HasBeenSet)
            {
                if (object.Equals(RefSetter_Singleton, rhs.RefSetter_Singleton)) return false;
            }
            if (List.HasBeenSet != rhs.List.HasBeenSet) return false;
            if (List.HasBeenSet)
            {
                if (List.SequenceEqual(rhs.List)) return false;
            }
            if (RefList.HasBeenSet != rhs.RefList.HasBeenSet) return false;
            if (RefList.HasBeenSet)
            {
                if (RefList.SequenceEqual(rhs.RefList)) return false;
            }
            if (Dict.HasBeenSet != rhs.Dict.HasBeenSet) return false;
            if (Dict.HasBeenSet)
            {
                if (Dict.SequenceEqual(rhs.Dict)) return false;
            }
            if (RefDict.HasBeenSet != rhs.RefDict.HasBeenSet) return false;
            if (RefDict.HasBeenSet)
            {
                if (RefDict.SequenceEqual(rhs.RefDict)) return false;
            }
            if (KeyRefDict.HasBeenSet != rhs.KeyRefDict.HasBeenSet) return false;
            if (KeyRefDict.HasBeenSet)
            {
                if (KeyRefDict.SequenceEqual(rhs.KeyRefDict)) return false;
            }
            if (ValRefDict.HasBeenSet != rhs.ValRefDict.HasBeenSet) return false;
            if (ValRefDict.HasBeenSet)
            {
                if (ValRefDict.SequenceEqual(rhs.ValRefDict)) return false;
            }
            if (DictKeyedValue.HasBeenSet != rhs.DictKeyedValue.HasBeenSet) return false;
            if (DictKeyedValue.HasBeenSet)
            {
                if (DictKeyedValue.SequenceEqual(rhs.DictKeyedValue)) return false;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            if (BoolN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(BoolN).CombineHashCode(ret);
            }
            if (Bool_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Bool).CombineHashCode(ret);
            }
            if (CharN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(CharN).CombineHashCode(ret);
            }
            if (Char_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Char).CombineHashCode(ret);
            }
            if (DateTimeNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DateTimeNull).CombineHashCode(ret);
            }
            if (DateTime_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DateTime).CombineHashCode(ret);
            }
            if (DoubleN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DoubleN).CombineHashCode(ret);
            }
            if (DoubleN_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DoubleN_Ranged).CombineHashCode(ret);
            }
            if (Double_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Double).CombineHashCode(ret);
            }
            if (Double_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Double_Ranged).CombineHashCode(ret);
            }
            if (FloatN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FloatN).CombineHashCode(ret);
            }
            if (FloatN_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(FloatN_Ranged).CombineHashCode(ret);
            }
            if (Float_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Float).CombineHashCode(ret);
            }
            if (Float_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Float_Ranged).CombineHashCode(ret);
            }
            if (Int16N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int16N).CombineHashCode(ret);
            }
            if (Int16N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int16N_Ranged).CombineHashCode(ret);
            }
            if (Int16_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int16).CombineHashCode(ret);
            }
            if (Int16_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int16_Ranged).CombineHashCode(ret);
            }
            if (Int32N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int32N).CombineHashCode(ret);
            }
            if (Int32N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int32N_Ranged).CombineHashCode(ret);
            }
            if (Int32_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int32).CombineHashCode(ret);
            }
            if (Int32_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int32_Ranged).CombineHashCode(ret);
            }
            if (Int64N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int64N).CombineHashCode(ret);
            }
            if (Int64N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int64N_Ranged).CombineHashCode(ret);
            }
            if (Int64_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int64).CombineHashCode(ret);
            }
            if (Int64_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int64_Ranged).CombineHashCode(ret);
            }
            if (Int8N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int8N).CombineHashCode(ret);
            }
            if (Int8N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int8N_Ranged).CombineHashCode(ret);
            }
            if (Int8_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int8).CombineHashCode(ret);
            }
            if (Int8_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Int8_Ranged).CombineHashCode(ret);
            }
            if (Unsafe_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Unsafe).CombineHashCode(ret);
            }
            if (P2IntN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P2IntN).CombineHashCode(ret);
            }
            if (P2Int_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P2Int).CombineHashCode(ret);
            }
            if (P3DoubleN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P3DoubleN).CombineHashCode(ret);
            }
            if (P3Double_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P3Double).CombineHashCode(ret);
            }
            if (P3IntN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P3IntN).CombineHashCode(ret);
            }
            if (P3Int_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(P3Int).CombineHashCode(ret);
            }
            if (PercentN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(PercentN).CombineHashCode(ret);
            }
            if (Percent_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Percent).CombineHashCode(ret);
            }
            if (RangeInt8N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt8N).CombineHashCode(ret);
            }
            if (RangeInt8_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt8).CombineHashCode(ret);
            }
            if (RangeInt16N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt16N).CombineHashCode(ret);
            }
            if (RangeInt16_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt16).CombineHashCode(ret);
            }
            if (RangeInt32N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt32N).CombineHashCode(ret);
            }
            if (RangeInt32_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt32).CombineHashCode(ret);
            }
            if (RangeInt64N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt64N).CombineHashCode(ret);
            }
            if (RangeInt64_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeInt64).CombineHashCode(ret);
            }
            if (RangeUInt8N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt8N).CombineHashCode(ret);
            }
            if (RangeUInt8_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt8).CombineHashCode(ret);
            }
            if (RangeUInt16N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt16N).CombineHashCode(ret);
            }
            if (RangeUInt16_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt16).CombineHashCode(ret);
            }
            if (RangeUInt32N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt32N).CombineHashCode(ret);
            }
            if (RangeUInt32_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt32).CombineHashCode(ret);
            }
            if (RangeUInt64N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt64N).CombineHashCode(ret);
            }
            if (RangeUInt64_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RangeUInt64).CombineHashCode(ret);
            }
            if (String_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(String).CombineHashCode(ret);
            }
            if (UDoubleN_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UDoubleN).CombineHashCode(ret);
            }
            if (UDoubleN_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UDoubleN_Ranged).CombineHashCode(ret);
            }
            if (UDouble_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UDouble).CombineHashCode(ret);
            }
            if (UDouble_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UDouble_Ranged).CombineHashCode(ret);
            }
            if (UInt16N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt16N).CombineHashCode(ret);
            }
            if (UInt16N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt16N_Ranged).CombineHashCode(ret);
            }
            if (UInt16_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt16).CombineHashCode(ret);
            }
            if (UInt16_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt16_Ranged).CombineHashCode(ret);
            }
            if (UInt32N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt32N).CombineHashCode(ret);
            }
            if (UInt32N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt32N_Ranged).CombineHashCode(ret);
            }
            if (UInt32_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt32).CombineHashCode(ret);
            }
            if (UInt32_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt32_Ranged).CombineHashCode(ret);
            }
            if (UInt64N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt64N).CombineHashCode(ret);
            }
            if (UInt64N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt64N_Ranged).CombineHashCode(ret);
            }
            if (UInt64_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt64).CombineHashCode(ret);
            }
            if (UInt64_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt64_Ranged).CombineHashCode(ret);
            }
            if (UInt8N_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt8N).CombineHashCode(ret);
            }
            if (UInt8N_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt8N_Ranged).CombineHashCode(ret);
            }
            if (UInt8_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt8).CombineHashCode(ret);
            }
            if (UInt8_Ranged_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(UInt8_Ranged).CombineHashCode(ret);
            }
            if (Enum_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Enum).CombineHashCode(ret);
            }
            if (EnumNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(EnumNull).CombineHashCode(ret);
            }
            if (WildCard_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(WildCard).CombineHashCode(ret);
            }
            if (WildCardNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(WildCardNull).CombineHashCode(ret);
            }
            if (Ref_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ref).CombineHashCode(ret);
            }
            if (Ref_NotNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ref_NotNull).CombineHashCode(ret);
            }
            if (Ref_Singleton_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Ref_Singleton).CombineHashCode(ret);
            }
            if (RefGetter_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefGetter).CombineHashCode(ret);
            }
            if (RefGetter_NotNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefGetter_NotNull).CombineHashCode(ret);
            }
            if (RefGetter_Singleton_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefGetter_Singleton).CombineHashCode(ret);
            }
            if (RefSetter_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefSetter).CombineHashCode(ret);
            }
            if (RefSetter_NotNull_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefSetter_NotNull).CombineHashCode(ret);
            }
            if (RefSetter_Singleton_Property.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefSetter_Singleton).CombineHashCode(ret);
            }
            if (List.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(List).CombineHashCode(ret);
            }
            if (RefList.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefList).CombineHashCode(ret);
            }
            if (Dict.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(Dict).CombineHashCode(ret);
            }
            if (RefDict.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(RefDict).CombineHashCode(ret);
            }
            if (KeyRefDict.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(KeyRefDict).CombineHashCode(ret);
            }
            if (ValRefDict.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(ValRefDict).CombineHashCode(ret);
            }
            if (DictKeyedValue.HasBeenSet)
            {
                ret = HashHelper.GetHashCode(DictKeyedValue).CombineHashCode(ret);
            }
            return ret;
        }

        #endregion


        #region XML Translation
        public static TestObject_Notifying_RPC Create_XML(Stream stream)
        {
            using (var reader = new StreamReader(stream))
            {
                return Create_XML(XElement.Parse(reader.ReadToEnd()));
            }
        }

        public static TestObject_Notifying_RPC Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        public static TestObject_Notifying_RPC Create_XML(
            XElement root,
            out TestObject_Notifying_RPC_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        public static TestObject_Notifying_RPC Create_XML(
            XElement root,
            bool doMasks,
            out TestObject_Notifying_RPC_ErrorMask errorMask)
        {
            TestObject_Notifying_RPC_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestObject_Notifying_RPC_ErrorMask()) : default(Func<TestObject_Notifying_RPC_ErrorMask>));
            errorMask = errMaskRet;
            return ret;
        }

        private static TestObject_Notifying_RPC Create_XML_Internal(
            XElement root,
            bool doMasks,
            Func<TestObject_Notifying_RPC_ErrorMask> errorMask)
        {
            if (!root.Name.LocalName.Equals("Loqui.Tests.TestObject_Notifying_RPC"))
            {
                var ex = new ArgumentException($"Skipping field that did not match proper type. Type: {root.Name.LocalName}, expected: Loqui.Tests.TestObject_Notifying_RPC.");
                if (!doMasks) throw ex;
                errorMask().Overall = ex;
                return null;
            }
            var ret = new TestObject_Notifying_RPC();
            try
            {
                foreach (var elem in root.Elements())
                {
                    if (!elem.TryGetAttribute("name", out XAttribute name)) continue;
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: name.Value,
                        typeName: elem.Name.LocalName,
                        doMasks: doMasks,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            {
                if (!doMasks) throw;
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            TestObject_Notifying_RPC item,
            XElement root,
            string name,
            string typeName,
            bool doMasks,
            Func<TestObject_Notifying_RPC_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "BoolN":
                    try
                    {
                        var tryGet = BooleanXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._BoolN.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.BoolN, ex);
                    }
                    break;
                case "Bool":
                    try
                    {
                        var tryGet = BooleanXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Bool.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Bool, ex);
                    }
                    break;
                case "CharN":
                    try
                    {
                        var tryGet = CharXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._CharN.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.CharN, ex);
                    }
                    break;
                case "Char":
                    try
                    {
                        var tryGet = CharXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Char.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Char, ex);
                    }
                    break;
                case "DateTimeNull":
                    try
                    {
                        var tryGet = DateTimeXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._DateTimeNull.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DateTimeNull, ex);
                    }
                    break;
                case "DateTime":
                    try
                    {
                        var tryGet = DateTimeXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._DateTime.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DateTime, ex);
                    }
                    break;
                case "DoubleN":
                    try
                    {
                        var tryGet = DoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._DoubleN.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DoubleN, ex);
                    }
                    break;
                case "DoubleN_Ranged":
                    try
                    {
                        var tryGet = DoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._DoubleN_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged, ex);
                    }
                    break;
                case "Double":
                    try
                    {
                        var tryGet = DoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Double.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Double, ex);
                    }
                    break;
                case "Double_Ranged":
                    try
                    {
                        var tryGet = DoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Double_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Double_Ranged, ex);
                    }
                    break;
                case "FloatN":
                    try
                    {
                        var tryGet = FloatXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._FloatN.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.FloatN, ex);
                    }
                    break;
                case "FloatN_Ranged":
                    try
                    {
                        var tryGet = FloatXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._FloatN_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged, ex);
                    }
                    break;
                case "Float":
                    try
                    {
                        var tryGet = FloatXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Float.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Float, ex);
                    }
                    break;
                case "Float_Ranged":
                    try
                    {
                        var tryGet = FloatXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Float_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Float_Ranged, ex);
                    }
                    break;
                case "Int16N":
                    try
                    {
                        var tryGet = Int16XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._Int16N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16N, ex);
                    }
                    break;
                case "Int16N_Ranged":
                    try
                    {
                        var tryGet = Int16XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._Int16N_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged, ex);
                    }
                    break;
                case "Int16":
                    try
                    {
                        var tryGet = Int16XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Int16.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16, ex);
                    }
                    break;
                case "Int16_Ranged":
                    try
                    {
                        var tryGet = Int16XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Int16_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16_Ranged, ex);
                    }
                    break;
                case "Int32N":
                    try
                    {
                        var tryGet = Int32XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._Int32N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32N, ex);
                    }
                    break;
                case "Int32N_Ranged":
                    try
                    {
                        var tryGet = Int32XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._Int32N_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged, ex);
                    }
                    break;
                case "Int32":
                    try
                    {
                        var tryGet = Int32XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Int32.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32, ex);
                    }
                    break;
                case "Int32_Ranged":
                    try
                    {
                        var tryGet = Int32XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Int32_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32_Ranged, ex);
                    }
                    break;
                case "Int64N":
                    try
                    {
                        var tryGet = Int64XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._Int64N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64N, ex);
                    }
                    break;
                case "Int64N_Ranged":
                    try
                    {
                        var tryGet = Int64XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._Int64N_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged, ex);
                    }
                    break;
                case "Int64":
                    try
                    {
                        var tryGet = Int64XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Int64.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64, ex);
                    }
                    break;
                case "Int64_Ranged":
                    try
                    {
                        var tryGet = Int64XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Int64_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64_Ranged, ex);
                    }
                    break;
                case "Int8N":
                    try
                    {
                        var tryGet = Int8XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._Int8N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8N, ex);
                    }
                    break;
                case "Int8N_Ranged":
                    try
                    {
                        var tryGet = Int8XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._Int8N_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged, ex);
                    }
                    break;
                case "Int8":
                    try
                    {
                        var tryGet = Int8XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Int8.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8, ex);
                    }
                    break;
                case "Int8_Ranged":
                    try
                    {
                        var tryGet = Int8XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Int8_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8_Ranged, ex);
                    }
                    break;
                case "Unsafe":
                    try
                    {
                        var wildType = item.Unsafe == null ? null : item.Unsafe.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Parse(
                            root,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Unsafe, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Unsafe, ex);
                    }
                    break;
                case "P2IntN":
                    try
                    {
                        var tryGet = P2IntXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._P2IntN.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P2IntN, ex);
                    }
                    break;
                case "P2Int":
                    try
                    {
                        var tryGet = P2IntXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._P2Int.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P2Int, ex);
                    }
                    break;
                case "P3DoubleN":
                    try
                    {
                        var tryGet = P3DoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._P3DoubleN.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3DoubleN, ex);
                    }
                    break;
                case "P3Double":
                    try
                    {
                        var tryGet = P3DoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._P3Double.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3Double, ex);
                    }
                    break;
                case "P3IntN":
                    try
                    {
                        var tryGet = P3IntXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._P3IntN.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3IntN, ex);
                    }
                    break;
                case "P3Int":
                    try
                    {
                        var tryGet = P3IntXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._P3Int.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3Int, ex);
                    }
                    break;
                case "PercentN":
                    try
                    {
                        var tryGet = PercentXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._PercentN.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.PercentN, ex);
                    }
                    break;
                case "Percent":
                    try
                    {
                        var tryGet = PercentXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Percent.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Percent, ex);
                    }
                    break;
                case "RangeInt8N":
                    try
                    {
                        var tryGet = RangeInt8XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._RangeInt8N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt8N, ex);
                    }
                    break;
                case "RangeInt8":
                    try
                    {
                        var tryGet = RangeInt8XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._RangeInt8.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt8, ex);
                    }
                    break;
                case "RangeInt16N":
                    try
                    {
                        var tryGet = RangeInt16XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._RangeInt16N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt16N, ex);
                    }
                    break;
                case "RangeInt16":
                    try
                    {
                        var tryGet = RangeInt16XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._RangeInt16.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt16, ex);
                    }
                    break;
                case "RangeInt32N":
                    try
                    {
                        var tryGet = RangeInt32XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._RangeInt32N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt32N, ex);
                    }
                    break;
                case "RangeInt32":
                    try
                    {
                        var tryGet = RangeInt32XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._RangeInt32.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt32, ex);
                    }
                    break;
                case "RangeInt64N":
                    try
                    {
                        var tryGet = RangeInt64XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._RangeInt64N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt64N, ex);
                    }
                    break;
                case "RangeInt64":
                    try
                    {
                        var tryGet = RangeInt64XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._RangeInt64.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt64, ex);
                    }
                    break;
                case "RangeUInt8N":
                    try
                    {
                        var tryGet = RangeUInt8XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._RangeUInt8N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt8N, ex);
                    }
                    break;
                case "RangeUInt8":
                    try
                    {
                        var tryGet = RangeUInt8XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._RangeUInt8.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt8, ex);
                    }
                    break;
                case "RangeUInt16N":
                    try
                    {
                        var tryGet = RangeUInt16XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._RangeUInt16N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt16N, ex);
                    }
                    break;
                case "RangeUInt16":
                    try
                    {
                        var tryGet = RangeUInt16XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._RangeUInt16.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt16, ex);
                    }
                    break;
                case "RangeUInt32N":
                    try
                    {
                        var tryGet = RangeUInt32XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._RangeUInt32N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt32N, ex);
                    }
                    break;
                case "RangeUInt32":
                    try
                    {
                        var tryGet = RangeUInt32XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._RangeUInt32.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt32, ex);
                    }
                    break;
                case "RangeUInt64N":
                    try
                    {
                        var tryGet = RangeUInt64XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._RangeUInt64N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt64N, ex);
                    }
                    break;
                case "RangeUInt64":
                    try
                    {
                        var tryGet = RangeUInt64XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._RangeUInt64.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt64, ex);
                    }
                    break;
                case "String":
                    try
                    {
                        var tryGet = StringXmlTranslation.Instance.Parse(root);
                        if (tryGet.Succeeded)
                        {
                            item._String.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.String, ex);
                    }
                    break;
                case "UDoubleN":
                    try
                    {
                        var tryGet = UDoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UDoubleN.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDoubleN, ex);
                    }
                    break;
                case "UDoubleN_Ranged":
                    try
                    {
                        var tryGet = UDoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UDoubleN_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged, ex);
                    }
                    break;
                case "UDouble":
                    try
                    {
                        var tryGet = UDoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UDouble.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDouble, ex);
                    }
                    break;
                case "UDouble_Ranged":
                    try
                    {
                        var tryGet = UDoubleXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UDouble_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged, ex);
                    }
                    break;
                case "UInt16N":
                    try
                    {
                        var tryGet = UInt16XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UInt16N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16N, ex);
                    }
                    break;
                case "UInt16N_Ranged":
                    try
                    {
                        var tryGet = UInt16XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UInt16N_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged, ex);
                    }
                    break;
                case "UInt16":
                    try
                    {
                        var tryGet = UInt16XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UInt16.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16, ex);
                    }
                    break;
                case "UInt16_Ranged":
                    try
                    {
                        var tryGet = UInt16XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UInt16_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged, ex);
                    }
                    break;
                case "UInt32N":
                    try
                    {
                        var tryGet = UInt32XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UInt32N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32N, ex);
                    }
                    break;
                case "UInt32N_Ranged":
                    try
                    {
                        var tryGet = UInt32XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UInt32N_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged, ex);
                    }
                    break;
                case "UInt32":
                    try
                    {
                        var tryGet = UInt32XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UInt32.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32, ex);
                    }
                    break;
                case "UInt32_Ranged":
                    try
                    {
                        var tryGet = UInt32XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UInt32_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged, ex);
                    }
                    break;
                case "UInt64N":
                    try
                    {
                        var tryGet = UInt64XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UInt64N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64N, ex);
                    }
                    break;
                case "UInt64N_Ranged":
                    try
                    {
                        var tryGet = UInt64XmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UInt64N_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged, ex);
                    }
                    break;
                case "UInt64":
                    try
                    {
                        var tryGet = UInt64XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UInt64.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64, ex);
                    }
                    break;
                case "UInt64_Ranged":
                    try
                    {
                        var tryGet = UInt64XmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UInt64_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged, ex);
                    }
                    break;
                case "UInt8N":
                    try
                    {
                        var tryGet = ByteXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UInt8N.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8N, ex);
                    }
                    break;
                case "UInt8N_Ranged":
                    try
                    {
                        var tryGet = ByteXmlTranslation.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._UInt8N_Ranged.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged, ex);
                    }
                    break;
                case "UInt8":
                    try
                    {
                        var tryGet = ByteXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UInt8.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8, ex);
                    }
                    break;
                case "UInt8_Ranged":
                    try
                    {
                        var tryGet = ByteXmlTranslation.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._UInt8_Ranged.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged, ex);
                    }
                    break;
                case "Enum":
                    try
                    {
                        var tryGet = EnumXmlTranslation<TestEnum>.Instance.Parse(
                            root,
                            nullable: false);
                        if (tryGet.Succeeded)
                        {
                            item._Enum.Item = tryGet.Value.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Enum, ex);
                    }
                    break;
                case "EnumNull":
                    try
                    {
                        var tryGet = EnumXmlTranslation<TestEnum>.Instance.Parse(
                            root,
                            nullable: true);
                        if (tryGet.Succeeded)
                        {
                            item._EnumNull.Item = tryGet.Value;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.EnumNull, ex);
                    }
                    break;
                case "WildCard":
                    try
                    {
                        var wildType = item.WildCard == null ? null : item.WildCard.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Parse(
                            root,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.WildCard, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.WildCard, ex);
                    }
                    break;
                case "WildCardNull":
                    try
                    {
                        var wildType = item.WildCardNull == null ? null : item.WildCardNull.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Parse(
                            root,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.WildCardNull, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.WildCardNull, ex);
                    }
                    break;
                case "Ref":
                    try
                    {
                        ObjectToRef_ErrorMask suberrorMask;
                        if (typeName.Equals("Loqui.Tests.ObjectToRef"))
                        {
                            item._Ref.Item = (ObjectToRef)ObjectToRef.Create_XML(
                                root: root,
                                doMasks: doMasks,
                                errorMask: out suberrorMask);
                        }
                        else
                        {
                            var register = LoquiRegistration.GetRegisterByFullName(typeName);
                            XmlTranslator.GetTranslator(register.ClassType).Item.Value.Parse(
                                root: root,
                                doMasks: doMasks,
                                maskObj: out var subErrorMaskObj);
                            suberrorMask = (ObjectToRef_ErrorMask)subErrorMaskObj;
                        }
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Ref, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Ref, ex);
                    }
                    break;
                case "Ref_NotNull":
                    try
                    {
                        ObjectToRef_ErrorMask suberrorMask;
                        if (typeName.Equals("Loqui.Tests.ObjectToRef"))
                        {
                            item._Ref_NotNull.Item = (ObjectToRef)ObjectToRef.Create_XML(
                                root: root,
                                doMasks: doMasks,
                                errorMask: out suberrorMask);
                        }
                        else
                        {
                            var register = LoquiRegistration.GetRegisterByFullName(typeName);
                            XmlTranslator.GetTranslator(register.ClassType).Item.Value.Parse(
                                root: root,
                                doMasks: doMasks,
                                maskObj: out var subErrorMaskObj);
                            suberrorMask = (ObjectToRef_ErrorMask)subErrorMaskObj;
                        }
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_NotNull, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_NotNull, ex);
                    }
                    break;
                case "Ref_Singleton":
                    try
                    {
                        var tmp = ObjectToRef.Create_XML(
                            root: root,
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask createMask);
                        ObjectToRefCommon.CopyFieldsFrom(
                            item: item._Ref_Singleton.Item,
                            rhs: tmp,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            doErrorMask: doMasks,
                            errorMask: out ObjectToRef_ErrorMask copyMask);
                        var suberrorMask = ObjectToRef_ErrorMask.Combine(createMask, copyMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_Singleton, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_Singleton, ex);
                    }
                    break;
                case "RefGetter":
                    try
                    {
                        ObjectToRef_ErrorMask suberrorMask;
                        if (typeName.Equals("Loqui.Tests.ObjectToRef"))
                        {
                            item._RefGetter.Item = (IObjectToRefGetter)ObjectToRef.Create_XML(
                                root: root,
                                doMasks: doMasks,
                                errorMask: out suberrorMask);
                        }
                        else
                        {
                            var register = LoquiRegistration.GetRegisterByFullName(typeName);
                            XmlTranslator.GetTranslator(register.ClassType).Item.Value.Parse(
                                root: root,
                                doMasks: doMasks,
                                maskObj: out var subErrorMaskObj);
                            suberrorMask = (ObjectToRef_ErrorMask)subErrorMaskObj;
                        }
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter, ex);
                    }
                    break;
                case "RefGetter_NotNull":
                    try
                    {
                        ObjectToRef_ErrorMask suberrorMask;
                        if (typeName.Equals("Loqui.Tests.ObjectToRef"))
                        {
                            item._RefGetter_NotNull.Item = (IObjectToRefGetter)ObjectToRef.Create_XML(
                                root: root,
                                doMasks: doMasks,
                                errorMask: out suberrorMask);
                        }
                        else
                        {
                            var register = LoquiRegistration.GetRegisterByFullName(typeName);
                            XmlTranslator.GetTranslator(register.ClassType).Item.Value.Parse(
                                root: root,
                                doMasks: doMasks,
                                maskObj: out var subErrorMaskObj);
                            suberrorMask = (ObjectToRef_ErrorMask)subErrorMaskObj;
                        }
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull, ex);
                    }
                    break;
                case "RefGetter_Singleton":
                    break;
                case "RefSetter":
                    try
                    {
                        ObjectToRef_ErrorMask suberrorMask;
                        if (typeName.Equals("Loqui.Tests.ObjectToRef"))
                        {
                            item._RefSetter.Item = (IObjectToRef)ObjectToRef.Create_XML(
                                root: root,
                                doMasks: doMasks,
                                errorMask: out suberrorMask);
                        }
                        else
                        {
                            var register = LoquiRegistration.GetRegisterByFullName(typeName);
                            XmlTranslator.GetTranslator(register.ClassType).Item.Value.Parse(
                                root: root,
                                doMasks: doMasks,
                                maskObj: out var subErrorMaskObj);
                            suberrorMask = (ObjectToRef_ErrorMask)subErrorMaskObj;
                        }
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter, ex);
                    }
                    break;
                case "RefSetter_NotNull":
                    try
                    {
                        ObjectToRef_ErrorMask suberrorMask;
                        if (typeName.Equals("Loqui.Tests.ObjectToRef"))
                        {
                            item._RefSetter_NotNull.Item = (IObjectToRef)ObjectToRef.Create_XML(
                                root: root,
                                doMasks: doMasks,
                                errorMask: out suberrorMask);
                        }
                        else
                        {
                            var register = LoquiRegistration.GetRegisterByFullName(typeName);
                            XmlTranslator.GetTranslator(register.ClassType).Item.Value.Parse(
                                root: root,
                                doMasks: doMasks,
                                maskObj: out var subErrorMaskObj);
                            suberrorMask = (ObjectToRef_ErrorMask)subErrorMaskObj;
                        }
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull, ex);
                    }
                    break;
                case "RefSetter_Singleton":
                    try
                    {
                        var tmp = ObjectToRef.Create_XML(
                            root: root,
                            doMasks: doMasks,
                            errorMask: out ObjectToRef_ErrorMask createMask);
                        ObjectToRefCommon.CopyFieldsFrom(
                            item: item._RefSetter_Singleton.Item,
                            rhs: tmp,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            doErrorMask: doMasks,
                            errorMask: out ObjectToRef_ErrorMask copyMask);
                        var suberrorMask = ObjectToRef_ErrorMask.Combine(createMask, copyMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton, ex);
                    }
                    break;
                case "List":
                    try
                    {
                        throw new NotImplementedException();
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.List, ex);
                    }
                    break;
                case "RefList":
                    try
                    {
                        throw new NotImplementedException();
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefList, ex);
                    }
                    break;
                case "Dict":
                    try
                    {
                        var wildType = item.Dict == null ? null : item.Dict.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Parse(
                            root,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Dict, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Dict, ex);
                    }
                    break;
                case "RefDict":
                    try
                    {
                        var wildType = item.RefDict == null ? null : item.RefDict.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Parse(
                            root,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefDict, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefDict, ex);
                    }
                    break;
                case "KeyRefDict":
                    try
                    {
                        var wildType = item.KeyRefDict == null ? null : item.KeyRefDict.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Parse(
                            root,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.KeyRefDict, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.KeyRefDict, ex);
                    }
                    break;
                case "ValRefDict":
                    try
                    {
                        var wildType = item.ValRefDict == null ? null : item.ValRefDict.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Parse(
                            root,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.ValRefDict, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.ValRefDict, ex);
                    }
                    break;
                case "DictKeyedValue":
                    try
                    {
                        var wildType = item.DictKeyedValue == null ? null : item.DictKeyedValue.GetType();
                        var transl = XmlTranslator.GetTranslator(wildType);
                        if (transl?.Item.Failed ?? true)
                        {
                            throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                        }
                        transl.Item.Value.Parse(
                            root,
                            doMasks,
                            out object suberrorMask);
                        if (suberrorMask != null)
                        {
                            errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.DictKeyedValue, suberrorMask);
                        }
                    }
                    catch (Exception ex)
                    {
                        if (!doMasks) throw;
                        errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DictKeyedValue, ex);
                    }
                    break;
                default:
                    break;
            }
        }

        public void CopyIn_XML(XElement root, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject_Notifying_RPC, TestObject_Notifying_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out TestObject_Notifying_RPC_ErrorMask errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(XElement root, out TestObject_Notifying_RPC_ErrorMask errorMask, NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject_Notifying_RPC, TestObject_Notifying_RPC_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void Write_XML(Stream stream)
        {
            TestObject_Notifying_RPCCommon.Write_XML(
                this,
                stream);
        }

        public void Write_XML(Stream stream, out TestObject_Notifying_RPC_ErrorMask errorMask)
        {
            TestObject_Notifying_RPCCommon.Write_XML(
                this,
                stream,
                out errorMask);
        }

        public void Write_XML(XmlWriter writer, out TestObject_Notifying_RPC_ErrorMask errorMask, string name = null)
        {
            TestObject_Notifying_RPCCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: true,
                errorMask: out errorMask);
        }

        public void Write_XML(XmlWriter writer, string name = null)
        {
            TestObject_Notifying_RPCCommon.Write_XML(
                writer: writer,
                name: name,
                item: this,
                doMasks: false,
                errorMask: out TestObject_Notifying_RPC_ErrorMask errorMask);
        }

        #endregion

        public TestObject_Notifying_RPC Copy(
            TestObject_Notifying_RPC_CopyMask copyMask = null,
            ITestObject_Notifying_RPCGetter def = null)
        {
            return TestObject_Notifying_RPC.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestObject_Notifying_RPC Copy(
            ITestObject_Notifying_RPC item,
            TestObject_Notifying_RPC_CopyMask copyMask = null,
            ITestObject_Notifying_RPCGetter def = null)
        {
            TestObject_Notifying_RPC ret;
            if (item.GetType().Equals(typeof(TestObject_Notifying_RPC)))
            {
                ret = new TestObject_Notifying_RPC();
            }
            else
            {
                ret = (TestObject_Notifying_RPC)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType Copy<CopyType>(
            CopyType item,
            TestObject_Notifying_RPC_CopyMask copyMask = null,
            ITestObject_Notifying_RPCGetter def = null)
            where CopyType : class, ITestObject_Notifying_RPC
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestObject_Notifying_RPC)))
            {
                ret = new TestObject_Notifying_RPC() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doErrorMask: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestObject_Notifying_RPC Copy_ToLoqui(
            ITestObject_Notifying_RPCGetter item,
            TestObject_Notifying_RPC_CopyMask copyMask = null,
            ITestObject_Notifying_RPCGetter def = null)
        {
            var ret = new TestObject_Notifying_RPC();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                    this._BoolN.Set(
                        (Boolean?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                    this._Bool.Set(
                        (Boolean)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                    this._CharN.Set(
                        (Char?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Char:
                    this._Char.Set(
                        (Char)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                    this._DateTimeNull.Set(
                        (DateTime?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                    this._DateTime.Set(
                        (DateTime)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                    this._DoubleN.Set(
                        (Double?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                    this._DoubleN_Ranged.Set(
                        (Double?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double:
                    this._Double.Set(
                        (Double)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                    this._Double_Ranged.Set(
                        (Double)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                    this._FloatN.Set(
                        (Single?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                    this._FloatN_Ranged.Set(
                        (Single?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float:
                    this._Float.Set(
                        (Single)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                    this._Float_Ranged.Set(
                        (Single)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                    this._Int16N.Set(
                        (Int16?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                    this._Int16N_Ranged.Set(
                        (Int16?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                    this._Int16.Set(
                        (Int16)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                    this._Int16_Ranged.Set(
                        (Int16)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                    this._Int32N.Set(
                        (Int32?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                    this._Int32N_Ranged.Set(
                        (Int32?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                    this._Int32.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                    this._Int32_Ranged.Set(
                        (Int32)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                    this._Int64N.Set(
                        (Int64?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                    this._Int64N_Ranged.Set(
                        (Int64?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                    this._Int64.Set(
                        (Int64)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                    this._Int64_Ranged.Set(
                        (Int64)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                    this._Int8N.Set(
                        (SByte?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                    this._Int8N_Ranged.Set(
                        (SByte?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                    this._Int8.Set(
                        (SByte)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                    this._Int8_Ranged.Set(
                        (SByte)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                    this._Unsafe.Set(
                        (bool)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                    this._P2IntN.Set(
                        (P2Int?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                    this._P2Int.Set(
                        (P2Int)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                    this._P3DoubleN.Set(
                        (P3Double?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                    this._P3Double.Set(
                        (P3Double)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                    this._P3IntN.Set(
                        (P3Int?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                    this._P3Int.Set(
                        (P3Int)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                    this._PercentN.Set(
                        (Percent?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                    this._Percent.Set(
                        (Percent)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                    this._RangeInt8N.Set(
                        (RangeInt8?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                    this._RangeInt8.Set(
                        (RangeInt8)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                    this._RangeInt16N.Set(
                        (RangeInt16?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                    this._RangeInt16.Set(
                        (RangeInt16)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                    this._RangeInt32N.Set(
                        (RangeInt32?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                    this._RangeInt32.Set(
                        (RangeInt32)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                    this._RangeInt64N.Set(
                        (RangeInt64?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                    this._RangeInt64.Set(
                        (RangeInt64)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                    this._RangeUInt8N.Set(
                        (RangeUInt8?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                    this._RangeUInt8.Set(
                        (RangeUInt8)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                    this._RangeUInt16N.Set(
                        (RangeUInt16?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                    this._RangeUInt16.Set(
                        (RangeUInt16)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                    this._RangeUInt32N.Set(
                        (RangeUInt32?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                    this._RangeUInt32.Set(
                        (RangeUInt32)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                    this._RangeUInt64N.Set(
                        (RangeUInt64?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                    this._RangeUInt64.Set(
                        (RangeUInt64)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.String:
                    this._String.Set(
                        (String)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                    this._UDoubleN.Set(
                        (UDouble?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                    this._UDoubleN_Ranged.Set(
                        (UDouble?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                    this._UDouble.Set(
                        (UDouble)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                    this._UDouble_Ranged.Set(
                        (UDouble)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                    this._UInt16N.Set(
                        (UInt16?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                    this._UInt16N_Ranged.Set(
                        (UInt16?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                    this._UInt16.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                    this._UInt16_Ranged.Set(
                        (UInt16)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                    this._UInt32N.Set(
                        (UInt32?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                    this._UInt32N_Ranged.Set(
                        (UInt32?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                    this._UInt32.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                    this._UInt32_Ranged.Set(
                        (UInt32)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                    this._UInt64N.Set(
                        (UInt64?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                    this._UInt64N_Ranged.Set(
                        (UInt64?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                    this._UInt64.Set(
                        (UInt64)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                    this._UInt64_Ranged.Set(
                        (UInt64)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                    this._UInt8N.Set(
                        (Byte?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                    this._UInt8N_Ranged.Set(
                        (Byte?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                    this._UInt8.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                    this._UInt8_Ranged.Set(
                        (Byte)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                    this._Enum.Set(
                        (TestEnum)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                    this._EnumNull.Set(
                        (TestEnum?)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                    this._WildCard.Set(
                        (Object)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                    this._WildCardNull.Set(
                        (Object)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                    this._Ref.Set(
                        (ObjectToRef)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                    this._Ref_NotNull.Set(
                        (ObjectToRef)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Cannot set singleton member Ref_Singleton");
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                    this._RefGetter.Set(
                        (IObjectToRefGetter)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                    this._RefGetter_NotNull.Set(
                        (IObjectToRefGetter)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot set singleton member RefGetter_Singleton");
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                    this._RefSetter.Set(
                        (IObjectToRef)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                    this._RefSetter_NotNull.Set(
                        (IObjectToRef)obj,
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Cannot set singleton member RefSetter_Singleton");
                case TestObject_Notifying_RPC_FieldIndex.List:
                    this._List.SetTo((IEnumerable<Boolean>)obj, cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    this._RefList.SetTo((IEnumerable<ObjectToRef>)obj, cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                    this.Dict.SetTo(
                        ((NotifyingDictionary<String, Boolean>)obj).Select(
                            (i) => new KeyValuePair<String, Boolean>(
                                i.Key,
                                i.Value)),
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                    this.RefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                i.Key.Copy(),
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                    this.KeyRefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, Boolean>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, Boolean>(
                                i.Key.Copy(),
                                i.Value)),
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                    this.ValRefDict.SetTo(
                        ((NotifyingDictionary<String, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<String, ObjectToRef>(
                                i.Key,
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)(NotifyingDictionary<Int32, ObjectToRef>)obj),
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestObject_Notifying_RPCCommon.Clear(this, cmds);
        }


        public static TestObject_Notifying_RPC Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestObject_Notifying_RPC();
            ILoquiObjectExt.CopyFieldsIn(ret, fields, def: null, skipProtected: false, cmds: null);
            return ret;
        }

        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestObject_Notifying_RPC obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestObject_Notifying_RPC : ITestObject_Notifying_RPCGetter, ILoquiClass<ITestObject_Notifying_RPC, ITestObject_Notifying_RPCGetter>, ILoquiClass<TestObject_Notifying_RPC, ITestObject_Notifying_RPCGetter>
    {
        new Boolean? BoolN { get; set; }
        new INotifyingItem<Boolean?> BoolN_Property { get; }

        new Boolean Bool { get; set; }
        new INotifyingItem<Boolean> Bool_Property { get; }

        new Char? CharN { get; set; }
        new INotifyingItem<Char?> CharN_Property { get; }

        new Char Char { get; set; }
        new INotifyingItem<Char> Char_Property { get; }

        new DateTime? DateTimeNull { get; set; }
        new INotifyingItem<DateTime?> DateTimeNull_Property { get; }

        new DateTime DateTime { get; set; }
        new INotifyingItem<DateTime> DateTime_Property { get; }

        new Double? DoubleN { get; set; }
        new INotifyingItem<Double?> DoubleN_Property { get; }

        new Double? DoubleN_Ranged { get; set; }
        new INotifyingItem<Double?> DoubleN_Ranged_Property { get; }

        new Double Double { get; set; }
        new INotifyingItem<Double> Double_Property { get; }

        new Double Double_Ranged { get; set; }
        new INotifyingItem<Double> Double_Ranged_Property { get; }

        new Single? FloatN { get; set; }
        new INotifyingItem<Single?> FloatN_Property { get; }

        new Single? FloatN_Ranged { get; set; }
        new INotifyingItem<Single?> FloatN_Ranged_Property { get; }

        new Single Float { get; set; }
        new INotifyingItem<Single> Float_Property { get; }

        new Single Float_Ranged { get; set; }
        new INotifyingItem<Single> Float_Ranged_Property { get; }

        new Int16? Int16N { get; set; }
        new INotifyingItem<Int16?> Int16N_Property { get; }

        new Int16? Int16N_Ranged { get; set; }
        new INotifyingItem<Int16?> Int16N_Ranged_Property { get; }

        new Int16 Int16 { get; set; }
        new INotifyingItem<Int16> Int16_Property { get; }

        new Int16 Int16_Ranged { get; set; }
        new INotifyingItem<Int16> Int16_Ranged_Property { get; }

        new Int32? Int32N { get; set; }
        new INotifyingItem<Int32?> Int32N_Property { get; }

        new Int32? Int32N_Ranged { get; set; }
        new INotifyingItem<Int32?> Int32N_Ranged_Property { get; }

        new Int32 Int32 { get; set; }
        new INotifyingItem<Int32> Int32_Property { get; }

        new Int32 Int32_Ranged { get; set; }
        new INotifyingItem<Int32> Int32_Ranged_Property { get; }

        new Int64? Int64N { get; set; }
        new INotifyingItem<Int64?> Int64N_Property { get; }

        new Int64? Int64N_Ranged { get; set; }
        new INotifyingItem<Int64?> Int64N_Ranged_Property { get; }

        new Int64 Int64 { get; set; }
        new INotifyingItem<Int64> Int64_Property { get; }

        new Int64 Int64_Ranged { get; set; }
        new INotifyingItem<Int64> Int64_Ranged_Property { get; }

        new SByte? Int8N { get; set; }
        new INotifyingItem<SByte?> Int8N_Property { get; }

        new SByte? Int8N_Ranged { get; set; }
        new INotifyingItem<SByte?> Int8N_Ranged_Property { get; }

        new SByte Int8 { get; set; }
        new INotifyingItem<SByte> Int8_Property { get; }

        new SByte Int8_Ranged { get; set; }
        new INotifyingItem<SByte> Int8_Ranged_Property { get; }

        new bool Unsafe { get; set; }
        new INotifyingItem<bool> Unsafe_Property { get; }

        new P2Int? P2IntN { get; set; }
        new INotifyingItem<P2Int?> P2IntN_Property { get; }

        new P2Int P2Int { get; set; }
        new INotifyingItem<P2Int> P2Int_Property { get; }

        new P3Double? P3DoubleN { get; set; }
        new INotifyingItem<P3Double?> P3DoubleN_Property { get; }

        new P3Double P3Double { get; set; }
        new INotifyingItem<P3Double> P3Double_Property { get; }

        new P3Int? P3IntN { get; set; }
        new INotifyingItem<P3Int?> P3IntN_Property { get; }

        new P3Int P3Int { get; set; }
        new INotifyingItem<P3Int> P3Int_Property { get; }

        new Percent? PercentN { get; set; }
        new INotifyingItem<Percent?> PercentN_Property { get; }

        new Percent Percent { get; set; }
        new INotifyingItem<Percent> Percent_Property { get; }

        new RangeInt8? RangeInt8N { get; set; }
        new INotifyingItem<RangeInt8?> RangeInt8N_Property { get; }

        new RangeInt8 RangeInt8 { get; set; }
        new INotifyingItem<RangeInt8> RangeInt8_Property { get; }

        new RangeInt16? RangeInt16N { get; set; }
        new INotifyingItem<RangeInt16?> RangeInt16N_Property { get; }

        new RangeInt16 RangeInt16 { get; set; }
        new INotifyingItem<RangeInt16> RangeInt16_Property { get; }

        new RangeInt32? RangeInt32N { get; set; }
        new INotifyingItem<RangeInt32?> RangeInt32N_Property { get; }

        new RangeInt32 RangeInt32 { get; set; }
        new INotifyingItem<RangeInt32> RangeInt32_Property { get; }

        new RangeInt64? RangeInt64N { get; set; }
        new INotifyingItem<RangeInt64?> RangeInt64N_Property { get; }

        new RangeInt64 RangeInt64 { get; set; }
        new INotifyingItem<RangeInt64> RangeInt64_Property { get; }

        new RangeUInt8? RangeUInt8N { get; set; }
        new INotifyingItem<RangeUInt8?> RangeUInt8N_Property { get; }

        new RangeUInt8 RangeUInt8 { get; set; }
        new INotifyingItem<RangeUInt8> RangeUInt8_Property { get; }

        new RangeUInt16? RangeUInt16N { get; set; }
        new INotifyingItem<RangeUInt16?> RangeUInt16N_Property { get; }

        new RangeUInt16 RangeUInt16 { get; set; }
        new INotifyingItem<RangeUInt16> RangeUInt16_Property { get; }

        new RangeUInt32? RangeUInt32N { get; set; }
        new INotifyingItem<RangeUInt32?> RangeUInt32N_Property { get; }

        new RangeUInt32 RangeUInt32 { get; set; }
        new INotifyingItem<RangeUInt32> RangeUInt32_Property { get; }

        new RangeUInt64? RangeUInt64N { get; set; }
        new INotifyingItem<RangeUInt64?> RangeUInt64N_Property { get; }

        new RangeUInt64 RangeUInt64 { get; set; }
        new INotifyingItem<RangeUInt64> RangeUInt64_Property { get; }

        new String String { get; set; }
        new INotifyingItem<String> String_Property { get; }

        new UDouble? UDoubleN { get; set; }
        new INotifyingItem<UDouble?> UDoubleN_Property { get; }

        new UDouble? UDoubleN_Ranged { get; set; }
        new INotifyingItem<UDouble?> UDoubleN_Ranged_Property { get; }

        new UDouble UDouble { get; set; }
        new INotifyingItem<UDouble> UDouble_Property { get; }

        new UDouble UDouble_Ranged { get; set; }
        new INotifyingItem<UDouble> UDouble_Ranged_Property { get; }

        new UInt16? UInt16N { get; set; }
        new INotifyingItem<UInt16?> UInt16N_Property { get; }

        new UInt16? UInt16N_Ranged { get; set; }
        new INotifyingItem<UInt16?> UInt16N_Ranged_Property { get; }

        new UInt16 UInt16 { get; set; }
        new INotifyingItem<UInt16> UInt16_Property { get; }

        new UInt16 UInt16_Ranged { get; set; }
        new INotifyingItem<UInt16> UInt16_Ranged_Property { get; }

        new UInt32? UInt32N { get; set; }
        new INotifyingItem<UInt32?> UInt32N_Property { get; }

        new UInt32? UInt32N_Ranged { get; set; }
        new INotifyingItem<UInt32?> UInt32N_Ranged_Property { get; }

        new UInt32 UInt32 { get; set; }
        new INotifyingItem<UInt32> UInt32_Property { get; }

        new UInt32 UInt32_Ranged { get; set; }
        new INotifyingItem<UInt32> UInt32_Ranged_Property { get; }

        new UInt64? UInt64N { get; set; }
        new INotifyingItem<UInt64?> UInt64N_Property { get; }

        new UInt64? UInt64N_Ranged { get; set; }
        new INotifyingItem<UInt64?> UInt64N_Ranged_Property { get; }

        new UInt64 UInt64 { get; set; }
        new INotifyingItem<UInt64> UInt64_Property { get; }

        new UInt64 UInt64_Ranged { get; set; }
        new INotifyingItem<UInt64> UInt64_Ranged_Property { get; }

        new Byte? UInt8N { get; set; }
        new INotifyingItem<Byte?> UInt8N_Property { get; }

        new Byte? UInt8N_Ranged { get; set; }
        new INotifyingItem<Byte?> UInt8N_Ranged_Property { get; }

        new Byte UInt8 { get; set; }
        new INotifyingItem<Byte> UInt8_Property { get; }

        new Byte UInt8_Ranged { get; set; }
        new INotifyingItem<Byte> UInt8_Ranged_Property { get; }

        new TestEnum Enum { get; set; }
        new INotifyingItem<TestEnum> Enum_Property { get; }

        new TestEnum? EnumNull { get; set; }
        new INotifyingItem<TestEnum?> EnumNull_Property { get; }

        new Object WildCard { get; set; }
        new INotifyingItem<Object> WildCard_Property { get; }

        new Object WildCardNull { get; set; }
        new INotifyingItem<Object> WildCardNull_Property { get; }

        new ObjectToRef Ref { get; set; }
        new INotifyingItem<ObjectToRef> Ref_Property { get; }

        new ObjectToRef Ref_NotNull { get; set; }
        new INotifyingItem<ObjectToRef> Ref_NotNull_Property { get; }

        new IObjectToRefGetter RefGetter { get; set; }
        new INotifyingItem<IObjectToRefGetter> RefGetter_Property { get; }

        new IObjectToRefGetter RefGetter_NotNull { get; set; }
        new INotifyingItem<IObjectToRefGetter> RefGetter_NotNull_Property { get; }

        new IObjectToRef RefSetter { get; set; }
        new INotifyingItem<IObjectToRef> RefSetter_Property { get; }

        new IObjectToRef RefSetter_NotNull { get; set; }
        new INotifyingItem<IObjectToRef> RefSetter_NotNull_Property { get; }

        new INotifyingList<Boolean> List { get; }
        new INotifyingList<ObjectToRef> RefList { get; }
        new INotifyingDictionary<String, Boolean> Dict { get; }
        new INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get; }
        new INotifyingDictionary<ObjectToRef, Boolean> KeyRefDict { get; }
        new INotifyingDictionary<String, ObjectToRef> ValRefDict { get; }
        new INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue { get; }
    }

    public interface ITestObject_Notifying_RPCGetter : ILoquiObject
    {
        #region BoolN
        Boolean? BoolN { get; }
        INotifyingItemGetter<Boolean?> BoolN_Property { get; }

        #endregion
        #region Bool
        Boolean Bool { get; }
        INotifyingItemGetter<Boolean> Bool_Property { get; }

        #endregion
        #region CharN
        Char? CharN { get; }
        INotifyingItemGetter<Char?> CharN_Property { get; }

        #endregion
        #region Char
        Char Char { get; }
        INotifyingItemGetter<Char> Char_Property { get; }

        #endregion
        #region DateTimeNull
        DateTime? DateTimeNull { get; }
        INotifyingItemGetter<DateTime?> DateTimeNull_Property { get; }

        #endregion
        #region DateTime
        DateTime DateTime { get; }
        INotifyingItemGetter<DateTime> DateTime_Property { get; }

        #endregion
        #region DoubleN
        Double? DoubleN { get; }
        INotifyingItemGetter<Double?> DoubleN_Property { get; }

        #endregion
        #region DoubleN_Ranged
        Double? DoubleN_Ranged { get; }
        INotifyingItemGetter<Double?> DoubleN_Ranged_Property { get; }

        #endregion
        #region Double
        Double Double { get; }
        INotifyingItemGetter<Double> Double_Property { get; }

        #endregion
        #region Double_Ranged
        Double Double_Ranged { get; }
        INotifyingItemGetter<Double> Double_Ranged_Property { get; }

        #endregion
        #region FloatN
        Single? FloatN { get; }
        INotifyingItemGetter<Single?> FloatN_Property { get; }

        #endregion
        #region FloatN_Ranged
        Single? FloatN_Ranged { get; }
        INotifyingItemGetter<Single?> FloatN_Ranged_Property { get; }

        #endregion
        #region Float
        Single Float { get; }
        INotifyingItemGetter<Single> Float_Property { get; }

        #endregion
        #region Float_Ranged
        Single Float_Ranged { get; }
        INotifyingItemGetter<Single> Float_Ranged_Property { get; }

        #endregion
        #region Int16N
        Int16? Int16N { get; }
        INotifyingItemGetter<Int16?> Int16N_Property { get; }

        #endregion
        #region Int16N_Ranged
        Int16? Int16N_Ranged { get; }
        INotifyingItemGetter<Int16?> Int16N_Ranged_Property { get; }

        #endregion
        #region Int16
        Int16 Int16 { get; }
        INotifyingItemGetter<Int16> Int16_Property { get; }

        #endregion
        #region Int16_Ranged
        Int16 Int16_Ranged { get; }
        INotifyingItemGetter<Int16> Int16_Ranged_Property { get; }

        #endregion
        #region Int32N
        Int32? Int32N { get; }
        INotifyingItemGetter<Int32?> Int32N_Property { get; }

        #endregion
        #region Int32N_Ranged
        Int32? Int32N_Ranged { get; }
        INotifyingItemGetter<Int32?> Int32N_Ranged_Property { get; }

        #endregion
        #region Int32
        Int32 Int32 { get; }
        INotifyingItemGetter<Int32> Int32_Property { get; }

        #endregion
        #region Int32_Ranged
        Int32 Int32_Ranged { get; }
        INotifyingItemGetter<Int32> Int32_Ranged_Property { get; }

        #endregion
        #region Int64N
        Int64? Int64N { get; }
        INotifyingItemGetter<Int64?> Int64N_Property { get; }

        #endregion
        #region Int64N_Ranged
        Int64? Int64N_Ranged { get; }
        INotifyingItemGetter<Int64?> Int64N_Ranged_Property { get; }

        #endregion
        #region Int64
        Int64 Int64 { get; }
        INotifyingItemGetter<Int64> Int64_Property { get; }

        #endregion
        #region Int64_Ranged
        Int64 Int64_Ranged { get; }
        INotifyingItemGetter<Int64> Int64_Ranged_Property { get; }

        #endregion
        #region Int8N
        SByte? Int8N { get; }
        INotifyingItemGetter<SByte?> Int8N_Property { get; }

        #endregion
        #region Int8N_Ranged
        SByte? Int8N_Ranged { get; }
        INotifyingItemGetter<SByte?> Int8N_Ranged_Property { get; }

        #endregion
        #region Int8
        SByte Int8 { get; }
        INotifyingItemGetter<SByte> Int8_Property { get; }

        #endregion
        #region Int8_Ranged
        SByte Int8_Ranged { get; }
        INotifyingItemGetter<SByte> Int8_Ranged_Property { get; }

        #endregion
        #region Unsafe
        bool Unsafe { get; }
        INotifyingItemGetter<bool> Unsafe_Property { get; }

        #endregion
        #region P2IntN
        P2Int? P2IntN { get; }
        INotifyingItemGetter<P2Int?> P2IntN_Property { get; }

        #endregion
        #region P2Int
        P2Int P2Int { get; }
        INotifyingItemGetter<P2Int> P2Int_Property { get; }

        #endregion
        #region P3DoubleN
        P3Double? P3DoubleN { get; }
        INotifyingItemGetter<P3Double?> P3DoubleN_Property { get; }

        #endregion
        #region P3Double
        P3Double P3Double { get; }
        INotifyingItemGetter<P3Double> P3Double_Property { get; }

        #endregion
        #region P3IntN
        P3Int? P3IntN { get; }
        INotifyingItemGetter<P3Int?> P3IntN_Property { get; }

        #endregion
        #region P3Int
        P3Int P3Int { get; }
        INotifyingItemGetter<P3Int> P3Int_Property { get; }

        #endregion
        #region PercentN
        Percent? PercentN { get; }
        INotifyingItemGetter<Percent?> PercentN_Property { get; }

        #endregion
        #region Percent
        Percent Percent { get; }
        INotifyingItemGetter<Percent> Percent_Property { get; }

        #endregion
        #region RangeInt8N
        RangeInt8? RangeInt8N { get; }
        INotifyingItemGetter<RangeInt8?> RangeInt8N_Property { get; }

        #endregion
        #region RangeInt8
        RangeInt8 RangeInt8 { get; }
        INotifyingItemGetter<RangeInt8> RangeInt8_Property { get; }

        #endregion
        #region RangeInt16N
        RangeInt16? RangeInt16N { get; }
        INotifyingItemGetter<RangeInt16?> RangeInt16N_Property { get; }

        #endregion
        #region RangeInt16
        RangeInt16 RangeInt16 { get; }
        INotifyingItemGetter<RangeInt16> RangeInt16_Property { get; }

        #endregion
        #region RangeInt32N
        RangeInt32? RangeInt32N { get; }
        INotifyingItemGetter<RangeInt32?> RangeInt32N_Property { get; }

        #endregion
        #region RangeInt32
        RangeInt32 RangeInt32 { get; }
        INotifyingItemGetter<RangeInt32> RangeInt32_Property { get; }

        #endregion
        #region RangeInt64N
        RangeInt64? RangeInt64N { get; }
        INotifyingItemGetter<RangeInt64?> RangeInt64N_Property { get; }

        #endregion
        #region RangeInt64
        RangeInt64 RangeInt64 { get; }
        INotifyingItemGetter<RangeInt64> RangeInt64_Property { get; }

        #endregion
        #region RangeUInt8N
        RangeUInt8? RangeUInt8N { get; }
        INotifyingItemGetter<RangeUInt8?> RangeUInt8N_Property { get; }

        #endregion
        #region RangeUInt8
        RangeUInt8 RangeUInt8 { get; }
        INotifyingItemGetter<RangeUInt8> RangeUInt8_Property { get; }

        #endregion
        #region RangeUInt16N
        RangeUInt16? RangeUInt16N { get; }
        INotifyingItemGetter<RangeUInt16?> RangeUInt16N_Property { get; }

        #endregion
        #region RangeUInt16
        RangeUInt16 RangeUInt16 { get; }
        INotifyingItemGetter<RangeUInt16> RangeUInt16_Property { get; }

        #endregion
        #region RangeUInt32N
        RangeUInt32? RangeUInt32N { get; }
        INotifyingItemGetter<RangeUInt32?> RangeUInt32N_Property { get; }

        #endregion
        #region RangeUInt32
        RangeUInt32 RangeUInt32 { get; }
        INotifyingItemGetter<RangeUInt32> RangeUInt32_Property { get; }

        #endregion
        #region RangeUInt64N
        RangeUInt64? RangeUInt64N { get; }
        INotifyingItemGetter<RangeUInt64?> RangeUInt64N_Property { get; }

        #endregion
        #region RangeUInt64
        RangeUInt64 RangeUInt64 { get; }
        INotifyingItemGetter<RangeUInt64> RangeUInt64_Property { get; }

        #endregion
        #region String
        String String { get; }
        INotifyingItemGetter<String> String_Property { get; }

        #endregion
        #region UDoubleN
        UDouble? UDoubleN { get; }
        INotifyingItemGetter<UDouble?> UDoubleN_Property { get; }

        #endregion
        #region UDoubleN_Ranged
        UDouble? UDoubleN_Ranged { get; }
        INotifyingItemGetter<UDouble?> UDoubleN_Ranged_Property { get; }

        #endregion
        #region UDouble
        UDouble UDouble { get; }
        INotifyingItemGetter<UDouble> UDouble_Property { get; }

        #endregion
        #region UDouble_Ranged
        UDouble UDouble_Ranged { get; }
        INotifyingItemGetter<UDouble> UDouble_Ranged_Property { get; }

        #endregion
        #region UInt16N
        UInt16? UInt16N { get; }
        INotifyingItemGetter<UInt16?> UInt16N_Property { get; }

        #endregion
        #region UInt16N_Ranged
        UInt16? UInt16N_Ranged { get; }
        INotifyingItemGetter<UInt16?> UInt16N_Ranged_Property { get; }

        #endregion
        #region UInt16
        UInt16 UInt16 { get; }
        INotifyingItemGetter<UInt16> UInt16_Property { get; }

        #endregion
        #region UInt16_Ranged
        UInt16 UInt16_Ranged { get; }
        INotifyingItemGetter<UInt16> UInt16_Ranged_Property { get; }

        #endregion
        #region UInt32N
        UInt32? UInt32N { get; }
        INotifyingItemGetter<UInt32?> UInt32N_Property { get; }

        #endregion
        #region UInt32N_Ranged
        UInt32? UInt32N_Ranged { get; }
        INotifyingItemGetter<UInt32?> UInt32N_Ranged_Property { get; }

        #endregion
        #region UInt32
        UInt32 UInt32 { get; }
        INotifyingItemGetter<UInt32> UInt32_Property { get; }

        #endregion
        #region UInt32_Ranged
        UInt32 UInt32_Ranged { get; }
        INotifyingItemGetter<UInt32> UInt32_Ranged_Property { get; }

        #endregion
        #region UInt64N
        UInt64? UInt64N { get; }
        INotifyingItemGetter<UInt64?> UInt64N_Property { get; }

        #endregion
        #region UInt64N_Ranged
        UInt64? UInt64N_Ranged { get; }
        INotifyingItemGetter<UInt64?> UInt64N_Ranged_Property { get; }

        #endregion
        #region UInt64
        UInt64 UInt64 { get; }
        INotifyingItemGetter<UInt64> UInt64_Property { get; }

        #endregion
        #region UInt64_Ranged
        UInt64 UInt64_Ranged { get; }
        INotifyingItemGetter<UInt64> UInt64_Ranged_Property { get; }

        #endregion
        #region UInt8N
        Byte? UInt8N { get; }
        INotifyingItemGetter<Byte?> UInt8N_Property { get; }

        #endregion
        #region UInt8N_Ranged
        Byte? UInt8N_Ranged { get; }
        INotifyingItemGetter<Byte?> UInt8N_Ranged_Property { get; }

        #endregion
        #region UInt8
        Byte UInt8 { get; }
        INotifyingItemGetter<Byte> UInt8_Property { get; }

        #endregion
        #region UInt8_Ranged
        Byte UInt8_Ranged { get; }
        INotifyingItemGetter<Byte> UInt8_Ranged_Property { get; }

        #endregion
        #region Enum
        TestEnum Enum { get; }
        INotifyingItemGetter<TestEnum> Enum_Property { get; }

        #endregion
        #region EnumNull
        TestEnum? EnumNull { get; }
        INotifyingItemGetter<TestEnum?> EnumNull_Property { get; }

        #endregion
        #region WildCard
        Object WildCard { get; }
        INotifyingItemGetter<Object> WildCard_Property { get; }

        #endregion
        #region WildCardNull
        Object WildCardNull { get; }
        INotifyingItemGetter<Object> WildCardNull_Property { get; }

        #endregion
        #region Ref
        ObjectToRef Ref { get; }
        INotifyingItemGetter<ObjectToRef> Ref_Property { get; }

        #endregion
        #region Ref_NotNull
        ObjectToRef Ref_NotNull { get; }
        INotifyingItemGetter<ObjectToRef> Ref_NotNull_Property { get; }

        #endregion
        #region Ref_Singleton
        ObjectToRef Ref_Singleton { get; }
        INotifyingItemGetter<ObjectToRef> Ref_Singleton_Property { get; }

        #endregion
        #region RefGetter
        IObjectToRefGetter RefGetter { get; }
        INotifyingItemGetter<IObjectToRefGetter> RefGetter_Property { get; }

        #endregion
        #region RefGetter_NotNull
        IObjectToRefGetter RefGetter_NotNull { get; }
        INotifyingItemGetter<IObjectToRefGetter> RefGetter_NotNull_Property { get; }

        #endregion
        #region RefGetter_Singleton
        IObjectToRefGetter RefGetter_Singleton { get; }
        INotifyingItemGetter<IObjectToRefGetter> RefGetter_Singleton_Property { get; }

        #endregion
        #region RefSetter
        IObjectToRef RefSetter { get; }
        INotifyingItemGetter<IObjectToRef> RefSetter_Property { get; }

        #endregion
        #region RefSetter_NotNull
        IObjectToRef RefSetter_NotNull { get; }
        INotifyingItemGetter<IObjectToRef> RefSetter_NotNull_Property { get; }

        #endregion
        #region RefSetter_Singleton
        IObjectToRef RefSetter_Singleton { get; }
        INotifyingItemGetter<IObjectToRef> RefSetter_Singleton_Property { get; }

        #endregion
        #region List
        INotifyingListGetter<Boolean> List { get; }
        #endregion
        #region RefList
        INotifyingListGetter<ObjectToRef> RefList { get; }
        #endregion
        #region Dict
        INotifyingDictionaryGetter<String, Boolean> Dict { get; }
        #endregion
        #region RefDict
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> RefDict { get; }
        #endregion
        #region KeyRefDict
        INotifyingDictionaryGetter<ObjectToRef, Boolean> KeyRefDict { get; }
        #endregion
        #region ValRefDict
        INotifyingDictionaryGetter<String, ObjectToRef> ValRefDict { get; }
        #endregion
        #region DictKeyedValue
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> DictKeyedValue { get; }
        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Internals
{
    #region Field Index
    public enum TestObject_Notifying_RPC_FieldIndex
    {
        BoolN = 0,
        Bool = 1,
        CharN = 2,
        Char = 3,
        DateTimeNull = 4,
        DateTime = 5,
        DoubleN = 6,
        DoubleN_Ranged = 7,
        Double = 8,
        Double_Ranged = 9,
        FloatN = 10,
        FloatN_Ranged = 11,
        Float = 12,
        Float_Ranged = 13,
        Int16N = 14,
        Int16N_Ranged = 15,
        Int16 = 16,
        Int16_Ranged = 17,
        Int32N = 18,
        Int32N_Ranged = 19,
        Int32 = 20,
        Int32_Ranged = 21,
        Int64N = 22,
        Int64N_Ranged = 23,
        Int64 = 24,
        Int64_Ranged = 25,
        Int8N = 26,
        Int8N_Ranged = 27,
        Int8 = 28,
        Int8_Ranged = 29,
        Unsafe = 30,
        P2IntN = 31,
        P2Int = 32,
        P3DoubleN = 33,
        P3Double = 34,
        P3IntN = 35,
        P3Int = 36,
        PercentN = 37,
        Percent = 38,
        RangeInt8N = 39,
        RangeInt8 = 40,
        RangeInt16N = 41,
        RangeInt16 = 42,
        RangeInt32N = 43,
        RangeInt32 = 44,
        RangeInt64N = 45,
        RangeInt64 = 46,
        RangeUInt8N = 47,
        RangeUInt8 = 48,
        RangeUInt16N = 49,
        RangeUInt16 = 50,
        RangeUInt32N = 51,
        RangeUInt32 = 52,
        RangeUInt64N = 53,
        RangeUInt64 = 54,
        String = 55,
        UDoubleN = 56,
        UDoubleN_Ranged = 57,
        UDouble = 58,
        UDouble_Ranged = 59,
        UInt16N = 60,
        UInt16N_Ranged = 61,
        UInt16 = 62,
        UInt16_Ranged = 63,
        UInt32N = 64,
        UInt32N_Ranged = 65,
        UInt32 = 66,
        UInt32_Ranged = 67,
        UInt64N = 68,
        UInt64N_Ranged = 69,
        UInt64 = 70,
        UInt64_Ranged = 71,
        UInt8N = 72,
        UInt8N_Ranged = 73,
        UInt8 = 74,
        UInt8_Ranged = 75,
        Enum = 76,
        EnumNull = 77,
        WildCard = 78,
        WildCardNull = 79,
        Ref = 80,
        Ref_NotNull = 81,
        Ref_Singleton = 82,
        RefGetter = 83,
        RefGetter_NotNull = 84,
        RefGetter_Singleton = 85,
        RefSetter = 86,
        RefSetter_NotNull = 87,
        RefSetter_Singleton = 88,
        List = 89,
        RefList = 90,
        Dict = 91,
        RefDict = 92,
        KeyRefDict = 93,
        ValRefDict = 94,
        DictKeyedValue = 95,
    }
    #endregion

    #region Registration
    public class TestObject_Notifying_RPC_Registration : ILoquiRegistration
    {
        public static readonly TestObject_Notifying_RPC_Registration Instance = new TestObject_Notifying_RPC_Registration();

        public static ProtocolDefinition ProtocolDefinition => ProtocolDefinition_LoquiTests.Definition;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTests.ProtocolKey,
            msgID: 23,
            version: 0);

        public const string GUID = "7ba65986-3bcf-477c-91a0-2b87e88e7754";

        public const ushort FieldCount = 96;

        public static readonly Type MaskType = typeof(TestObject_Notifying_RPC_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestObject_Notifying_RPC_ErrorMask);

        public static readonly Type ClassType = typeof(TestObject_Notifying_RPC);

        public static readonly Type CommonType = typeof(TestObject_Notifying_RPCCommon);

        public const string FullName = "Loqui.Tests.TestObject_Notifying_RPC";

        public const string Name = "TestObject_Notifying_RPC";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BOOLN":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.BoolN;
                case "BOOL":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Bool;
                case "CHARN":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.CharN;
                case "CHAR":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Char;
                case "DATETIMENULL":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.DateTimeNull;
                case "DATETIME":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.DateTime;
                case "DOUBLEN":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.DoubleN;
                case "DOUBLEN_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged;
                case "DOUBLE":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Double;
                case "DOUBLE_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Double_Ranged;
                case "FLOATN":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.FloatN;
                case "FLOATN_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged;
                case "FLOAT":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Float;
                case "FLOAT_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Float_Ranged;
                case "INT16N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int16N;
                case "INT16N_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged;
                case "INT16":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int16;
                case "INT16_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int16_Ranged;
                case "INT32N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int32N;
                case "INT32N_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged;
                case "INT32":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int32;
                case "INT32_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int32_Ranged;
                case "INT64N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int64N;
                case "INT64N_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged;
                case "INT64":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int64;
                case "INT64_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int64_Ranged;
                case "INT8N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int8N;
                case "INT8N_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged;
                case "INT8":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int8;
                case "INT8_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Int8_Ranged;
                case "UNSAFE":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Unsafe;
                case "P2INTN":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.P2IntN;
                case "P2INT":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.P2Int;
                case "P3DOUBLEN":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.P3DoubleN;
                case "P3DOUBLE":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.P3Double;
                case "P3INTN":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.P3IntN;
                case "P3INT":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.P3Int;
                case "PERCENTN":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.PercentN;
                case "PERCENT":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Percent;
                case "RANGEINT8N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt8N;
                case "RANGEINT8":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt8;
                case "RANGEINT16N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt16N;
                case "RANGEINT16":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt16;
                case "RANGEINT32N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt32N;
                case "RANGEINT32":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt32;
                case "RANGEINT64N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt64N;
                case "RANGEINT64":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt64;
                case "RANGEUINT8N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt8N;
                case "RANGEUINT8":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt8;
                case "RANGEUINT16N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt16N;
                case "RANGEUINT16":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt16;
                case "RANGEUINT32N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt32N;
                case "RANGEUINT32":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt32;
                case "RANGEUINT64N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt64N;
                case "RANGEUINT64":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt64;
                case "STRING":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.String;
                case "UDOUBLEN":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UDoubleN;
                case "UDOUBLEN_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged;
                case "UDOUBLE":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UDouble;
                case "UDOUBLE_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged;
                case "UINT16N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt16N;
                case "UINT16N_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged;
                case "UINT16":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt16;
                case "UINT16_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged;
                case "UINT32N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt32N;
                case "UINT32N_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged;
                case "UINT32":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt32;
                case "UINT32_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged;
                case "UINT64N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt64N;
                case "UINT64N_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged;
                case "UINT64":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt64;
                case "UINT64_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged;
                case "UINT8N":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt8N;
                case "UINT8N_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged;
                case "UINT8":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt8;
                case "UINT8_RANGED":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged;
                case "ENUM":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Enum;
                case "ENUMNULL":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.EnumNull;
                case "WILDCARD":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.WildCard;
                case "WILDCARDNULL":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.WildCardNull;
                case "REF":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Ref;
                case "REF_NOTNULL":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Ref_NotNull;
                case "REF_SINGLETON":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Ref_Singleton;
                case "REFGETTER":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter;
                case "REFGETTER_NOTNULL":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull;
                case "REFGETTER_SINGLETON":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton;
                case "REFSETTER":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter;
                case "REFSETTER_NOTNULL":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull;
                case "REFSETTER_SINGLETON":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton;
                case "LIST":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.List;
                case "REFLIST":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RefList;
                case "DICT":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.Dict;
                case "REFDICT":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.RefDict;
                case "KEYREFDICT":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.KeyRefDict;
                case "VALREFDICT":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.ValRefDict;
                case "DICTKEYEDVALUE":
                    return (ushort)TestObject_Notifying_RPC_FieldIndex.DictKeyedValue;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.List:
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    return true;
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                case TestObject_Notifying_RPC_FieldIndex.Char:
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Double:
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Float:
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                case TestObject_Notifying_RPC_FieldIndex.String:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    return true;
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                case TestObject_Notifying_RPC_FieldIndex.Char:
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Double:
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Float:
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                case TestObject_Notifying_RPC_FieldIndex.String:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                case TestObject_Notifying_RPC_FieldIndex.List:
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    return true;
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                case TestObject_Notifying_RPC_FieldIndex.Char:
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Double:
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Float:
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                case TestObject_Notifying_RPC_FieldIndex.String:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.List:
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                    return "BoolN";
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                    return "Bool";
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                    return "CharN";
                case TestObject_Notifying_RPC_FieldIndex.Char:
                    return "Char";
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                    return "DateTimeNull";
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                    return "DateTime";
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                    return "DoubleN";
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                    return "DoubleN_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Double:
                    return "Double";
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                    return "Double_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                    return "FloatN";
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                    return "FloatN_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Float:
                    return "Float";
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                    return "Float_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                    return "Int16N";
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                    return "Int16N_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                    return "Int16";
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                    return "Int16_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                    return "Int32N";
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                    return "Int32N_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                    return "Int32";
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                    return "Int32_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                    return "Int64N";
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                    return "Int64N_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                    return "Int64";
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                    return "Int64_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                    return "Int8N";
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                    return "Int8N_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                    return "Int8";
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                    return "Int8_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                    return "Unsafe";
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                    return "P2IntN";
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                    return "P2Int";
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                    return "P3DoubleN";
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                    return "P3Double";
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                    return "P3IntN";
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                    return "P3Int";
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                    return "PercentN";
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                    return "Percent";
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                    return "RangeInt8N";
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                    return "RangeInt8";
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                    return "RangeInt16N";
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                    return "RangeInt16";
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                    return "RangeInt32N";
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                    return "RangeInt32";
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                    return "RangeInt64N";
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                    return "RangeInt64";
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                    return "RangeUInt8N";
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                    return "RangeUInt8";
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                    return "RangeUInt16N";
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                    return "RangeUInt16";
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                    return "RangeUInt32N";
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                    return "RangeUInt32";
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                    return "RangeUInt64N";
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                    return "RangeUInt64";
                case TestObject_Notifying_RPC_FieldIndex.String:
                    return "String";
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                    return "UDoubleN";
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                    return "UDoubleN_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                    return "UDouble";
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                    return "UDouble_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                    return "UInt16N";
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                    return "UInt16N_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                    return "UInt16";
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                    return "UInt16_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                    return "UInt32N";
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                    return "UInt32N_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                    return "UInt32";
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                    return "UInt32_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                    return "UInt64N";
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                    return "UInt64N_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                    return "UInt64";
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                    return "UInt64_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                    return "UInt8N";
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                    return "UInt8N_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                    return "UInt8";
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                    return "UInt8_Ranged";
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                    return "Enum";
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                    return "EnumNull";
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                    return "WildCard";
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                    return "WildCardNull";
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                    return "Ref";
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                    return "Ref_NotNull";
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                    return "Ref_Singleton";
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                    return "RefGetter";
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                    return "RefGetter_NotNull";
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                    return "RefGetter_Singleton";
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                    return "RefSetter";
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                    return "RefSetter_NotNull";
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    return "RefSetter_Singleton";
                case TestObject_Notifying_RPC_FieldIndex.List:
                    return "List";
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    return "RefList";
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                    return "Dict";
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                    return "RefDict";
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                    return "KeyRefDict";
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                    return "ValRefDict";
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    return "DictKeyedValue";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                case TestObject_Notifying_RPC_FieldIndex.Char:
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Double:
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Float:
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                case TestObject_Notifying_RPC_FieldIndex.String:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.List:
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                case TestObject_Notifying_RPC_FieldIndex.Char:
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Double:
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Float:
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                case TestObject_Notifying_RPC_FieldIndex.String:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                case TestObject_Notifying_RPC_FieldIndex.List:
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                    return typeof(Boolean?);
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                    return typeof(Boolean);
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                    return typeof(Char?);
                case TestObject_Notifying_RPC_FieldIndex.Char:
                    return typeof(Char);
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                    return typeof(DateTime?);
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                    return typeof(DateTime);
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                    return typeof(Double?);
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                    return typeof(Double?);
                case TestObject_Notifying_RPC_FieldIndex.Double:
                    return typeof(Double);
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                    return typeof(Double);
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                    return typeof(Single?);
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                    return typeof(Single?);
                case TestObject_Notifying_RPC_FieldIndex.Float:
                    return typeof(Single);
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                    return typeof(Single);
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                    return typeof(Int16?);
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                    return typeof(Int16?);
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                    return typeof(Int16);
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                    return typeof(Int16);
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                    return typeof(Int32?);
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                    return typeof(Int32?);
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                    return typeof(Int32);
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                    return typeof(Int32);
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                    return typeof(Int64?);
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                    return typeof(Int64?);
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                    return typeof(Int64);
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                    return typeof(Int64);
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                    return typeof(SByte?);
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                    return typeof(SByte?);
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                    return typeof(SByte);
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                    return typeof(SByte);
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                    return typeof(bool);
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                    return typeof(P2Int?);
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                    return typeof(P2Int);
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                    return typeof(P3Double?);
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                    return typeof(P3Double);
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                    return typeof(P3Int?);
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                    return typeof(P3Int);
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                    return typeof(Percent?);
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                    return typeof(Percent);
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                    return typeof(RangeInt8?);
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                    return typeof(RangeInt8);
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                    return typeof(RangeInt16?);
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                    return typeof(RangeInt16);
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                    return typeof(RangeInt32?);
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                    return typeof(RangeInt32);
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                    return typeof(RangeInt64?);
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                    return typeof(RangeInt64);
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                    return typeof(RangeUInt8?);
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                    return typeof(RangeUInt8);
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                    return typeof(RangeUInt16?);
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                    return typeof(RangeUInt16);
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                    return typeof(RangeUInt32?);
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                    return typeof(RangeUInt32);
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                    return typeof(RangeUInt64?);
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                    return typeof(RangeUInt64);
                case TestObject_Notifying_RPC_FieldIndex.String:
                    return typeof(String);
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                    return typeof(UDouble?);
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                    return typeof(UDouble?);
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                    return typeof(UDouble);
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                    return typeof(UDouble);
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                    return typeof(UInt16?);
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                    return typeof(UInt16?);
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                    return typeof(UInt16);
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                    return typeof(UInt16);
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                    return typeof(UInt32?);
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                    return typeof(UInt32?);
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                    return typeof(UInt32);
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                    return typeof(UInt32);
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                    return typeof(UInt64?);
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                    return typeof(UInt64?);
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                    return typeof(UInt64);
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                    return typeof(UInt64);
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                    return typeof(Byte?);
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                    return typeof(Byte?);
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                    return typeof(Byte);
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                    return typeof(Byte);
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                    return typeof(TestEnum);
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                    return typeof(TestEnum?);
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                    return typeof(Object);
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                    return typeof(Object);
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                    return typeof(ObjectToRef);
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                    return typeof(ObjectToRef);
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                    return typeof(ObjectToRef);
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                    return typeof(IObjectToRefGetter);
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                    return typeof(IObjectToRefGetter);
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                    return typeof(IObjectToRefGetter);
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                    return typeof(IObjectToRef);
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                    return typeof(IObjectToRef);
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    return typeof(IObjectToRef);
                case TestObject_Notifying_RPC_FieldIndex.List:
                    return typeof(NotifyingList<Boolean>);
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    return typeof(NotifyingList<ObjectToRef>);
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                    return typeof(NotifyingDictionary<String, Boolean>);
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, ObjectToRef>);
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, Boolean>);
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                    return typeof(NotifyingDictionary<String, ObjectToRef>);
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    return typeof(NotifyingDictionary<Int32, ObjectToRef>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolDefinition ILoquiRegistration.ProtocolDefinition => ProtocolDefinition;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static class TestObject_Notifying_RPCCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITestObject_Notifying_RPC item,
            ITestObject_Notifying_RPCGetter rhs,
            ITestObject_Notifying_RPCGetter def,
            bool doErrorMask,
            out TestObject_Notifying_RPC_ErrorMask errorMask,
            TestObject_Notifying_RPC_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            TestObject_Notifying_RPC_ErrorMask retErrorMask = null;
            Func<TestObject_Notifying_RPC_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestObject_Notifying_RPC_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doErrorMask: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ITestObject_Notifying_RPC item,
            ITestObject_Notifying_RPCGetter rhs,
            ITestObject_Notifying_RPCGetter def,
            bool doErrorMask,
            Func<TestObject_Notifying_RPC_ErrorMask> errorMask,
            TestObject_Notifying_RPC_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.BoolN ?? true)
            {
                try
                {
                    item.BoolN_Property.SetToWithDefault(
                        rhs.BoolN_Property,
                        def?.BoolN_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.BoolN, ex);
                }
            }
            if (copyMask?.Bool ?? true)
            {
                try
                {
                    item.Bool_Property.SetToWithDefault(
                        rhs.Bool_Property,
                        def?.Bool_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Bool, ex);
                }
            }
            if (copyMask?.CharN ?? true)
            {
                try
                {
                    item.CharN_Property.SetToWithDefault(
                        rhs.CharN_Property,
                        def?.CharN_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.CharN, ex);
                }
            }
            if (copyMask?.Char ?? true)
            {
                try
                {
                    item.Char_Property.SetToWithDefault(
                        rhs.Char_Property,
                        def?.Char_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Char, ex);
                }
            }
            if (copyMask?.DateTimeNull ?? true)
            {
                try
                {
                    item.DateTimeNull_Property.SetToWithDefault(
                        rhs.DateTimeNull_Property,
                        def?.DateTimeNull_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DateTimeNull, ex);
                }
            }
            if (copyMask?.DateTime ?? true)
            {
                try
                {
                    item.DateTime_Property.SetToWithDefault(
                        rhs.DateTime_Property,
                        def?.DateTime_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DateTime, ex);
                }
            }
            if (copyMask?.DoubleN ?? true)
            {
                try
                {
                    item.DoubleN_Property.SetToWithDefault(
                        rhs.DoubleN_Property,
                        def?.DoubleN_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DoubleN, ex);
                }
            }
            if (copyMask?.DoubleN_Ranged ?? true)
            {
                try
                {
                    item.DoubleN_Ranged_Property.SetToWithDefault(
                        rhs.DoubleN_Ranged_Property,
                        def?.DoubleN_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged, ex);
                }
            }
            if (copyMask?.Double ?? true)
            {
                try
                {
                    item.Double_Property.SetToWithDefault(
                        rhs.Double_Property,
                        def?.Double_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Double, ex);
                }
            }
            if (copyMask?.Double_Ranged ?? true)
            {
                try
                {
                    item.Double_Ranged_Property.SetToWithDefault(
                        rhs.Double_Ranged_Property,
                        def?.Double_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Double_Ranged, ex);
                }
            }
            if (copyMask?.FloatN ?? true)
            {
                try
                {
                    item.FloatN_Property.SetToWithDefault(
                        rhs.FloatN_Property,
                        def?.FloatN_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.FloatN, ex);
                }
            }
            if (copyMask?.FloatN_Ranged ?? true)
            {
                try
                {
                    item.FloatN_Ranged_Property.SetToWithDefault(
                        rhs.FloatN_Ranged_Property,
                        def?.FloatN_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged, ex);
                }
            }
            if (copyMask?.Float ?? true)
            {
                try
                {
                    item.Float_Property.SetToWithDefault(
                        rhs.Float_Property,
                        def?.Float_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Float, ex);
                }
            }
            if (copyMask?.Float_Ranged ?? true)
            {
                try
                {
                    item.Float_Ranged_Property.SetToWithDefault(
                        rhs.Float_Ranged_Property,
                        def?.Float_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Float_Ranged, ex);
                }
            }
            if (copyMask?.Int16N ?? true)
            {
                try
                {
                    item.Int16N_Property.SetToWithDefault(
                        rhs.Int16N_Property,
                        def?.Int16N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16N, ex);
                }
            }
            if (copyMask?.Int16N_Ranged ?? true)
            {
                try
                {
                    item.Int16N_Ranged_Property.SetToWithDefault(
                        rhs.Int16N_Ranged_Property,
                        def?.Int16N_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged, ex);
                }
            }
            if (copyMask?.Int16 ?? true)
            {
                try
                {
                    item.Int16_Property.SetToWithDefault(
                        rhs.Int16_Property,
                        def?.Int16_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16, ex);
                }
            }
            if (copyMask?.Int16_Ranged ?? true)
            {
                try
                {
                    item.Int16_Ranged_Property.SetToWithDefault(
                        rhs.Int16_Ranged_Property,
                        def?.Int16_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16_Ranged, ex);
                }
            }
            if (copyMask?.Int32N ?? true)
            {
                try
                {
                    item.Int32N_Property.SetToWithDefault(
                        rhs.Int32N_Property,
                        def?.Int32N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32N, ex);
                }
            }
            if (copyMask?.Int32N_Ranged ?? true)
            {
                try
                {
                    item.Int32N_Ranged_Property.SetToWithDefault(
                        rhs.Int32N_Ranged_Property,
                        def?.Int32N_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged, ex);
                }
            }
            if (copyMask?.Int32 ?? true)
            {
                try
                {
                    item.Int32_Property.SetToWithDefault(
                        rhs.Int32_Property,
                        def?.Int32_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32, ex);
                }
            }
            if (copyMask?.Int32_Ranged ?? true)
            {
                try
                {
                    item.Int32_Ranged_Property.SetToWithDefault(
                        rhs.Int32_Ranged_Property,
                        def?.Int32_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32_Ranged, ex);
                }
            }
            if (copyMask?.Int64N ?? true)
            {
                try
                {
                    item.Int64N_Property.SetToWithDefault(
                        rhs.Int64N_Property,
                        def?.Int64N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64N, ex);
                }
            }
            if (copyMask?.Int64N_Ranged ?? true)
            {
                try
                {
                    item.Int64N_Ranged_Property.SetToWithDefault(
                        rhs.Int64N_Ranged_Property,
                        def?.Int64N_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged, ex);
                }
            }
            if (copyMask?.Int64 ?? true)
            {
                try
                {
                    item.Int64_Property.SetToWithDefault(
                        rhs.Int64_Property,
                        def?.Int64_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64, ex);
                }
            }
            if (copyMask?.Int64_Ranged ?? true)
            {
                try
                {
                    item.Int64_Ranged_Property.SetToWithDefault(
                        rhs.Int64_Ranged_Property,
                        def?.Int64_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64_Ranged, ex);
                }
            }
            if (copyMask?.Int8N ?? true)
            {
                try
                {
                    item.Int8N_Property.SetToWithDefault(
                        rhs.Int8N_Property,
                        def?.Int8N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8N, ex);
                }
            }
            if (copyMask?.Int8N_Ranged ?? true)
            {
                try
                {
                    item.Int8N_Ranged_Property.SetToWithDefault(
                        rhs.Int8N_Ranged_Property,
                        def?.Int8N_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged, ex);
                }
            }
            if (copyMask?.Int8 ?? true)
            {
                try
                {
                    item.Int8_Property.SetToWithDefault(
                        rhs.Int8_Property,
                        def?.Int8_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8, ex);
                }
            }
            if (copyMask?.Int8_Ranged ?? true)
            {
                try
                {
                    item.Int8_Ranged_Property.SetToWithDefault(
                        rhs.Int8_Ranged_Property,
                        def?.Int8_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8_Ranged, ex);
                }
            }
            if (copyMask?.Unsafe ?? true)
            {
                try
                {
                    item.Unsafe_Property.SetToWithDefault(
                        rhs.Unsafe_Property,
                        def?.Unsafe_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Unsafe, ex);
                }
            }
            if (copyMask?.P2IntN ?? true)
            {
                try
                {
                    item.P2IntN_Property.SetToWithDefault(
                        rhs.P2IntN_Property,
                        def?.P2IntN_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P2IntN, ex);
                }
            }
            if (copyMask?.P2Int ?? true)
            {
                try
                {
                    item.P2Int_Property.SetToWithDefault(
                        rhs.P2Int_Property,
                        def?.P2Int_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P2Int, ex);
                }
            }
            if (copyMask?.P3DoubleN ?? true)
            {
                try
                {
                    item.P3DoubleN_Property.SetToWithDefault(
                        rhs.P3DoubleN_Property,
                        def?.P3DoubleN_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3DoubleN, ex);
                }
            }
            if (copyMask?.P3Double ?? true)
            {
                try
                {
                    item.P3Double_Property.SetToWithDefault(
                        rhs.P3Double_Property,
                        def?.P3Double_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3Double, ex);
                }
            }
            if (copyMask?.P3IntN ?? true)
            {
                try
                {
                    item.P3IntN_Property.SetToWithDefault(
                        rhs.P3IntN_Property,
                        def?.P3IntN_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3IntN, ex);
                }
            }
            if (copyMask?.P3Int ?? true)
            {
                try
                {
                    item.P3Int_Property.SetToWithDefault(
                        rhs.P3Int_Property,
                        def?.P3Int_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3Int, ex);
                }
            }
            if (copyMask?.PercentN ?? true)
            {
                try
                {
                    item.PercentN_Property.SetToWithDefault(
                        rhs.PercentN_Property,
                        def?.PercentN_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.PercentN, ex);
                }
            }
            if (copyMask?.Percent ?? true)
            {
                try
                {
                    item.Percent_Property.SetToWithDefault(
                        rhs.Percent_Property,
                        def?.Percent_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Percent, ex);
                }
            }
            if (copyMask?.RangeInt8N ?? true)
            {
                try
                {
                    item.RangeInt8N_Property.SetToWithDefault(
                        rhs.RangeInt8N_Property,
                        def?.RangeInt8N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt8N, ex);
                }
            }
            if (copyMask?.RangeInt8 ?? true)
            {
                try
                {
                    item.RangeInt8_Property.SetToWithDefault(
                        rhs.RangeInt8_Property,
                        def?.RangeInt8_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt8, ex);
                }
            }
            if (copyMask?.RangeInt16N ?? true)
            {
                try
                {
                    item.RangeInt16N_Property.SetToWithDefault(
                        rhs.RangeInt16N_Property,
                        def?.RangeInt16N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt16N, ex);
                }
            }
            if (copyMask?.RangeInt16 ?? true)
            {
                try
                {
                    item.RangeInt16_Property.SetToWithDefault(
                        rhs.RangeInt16_Property,
                        def?.RangeInt16_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt16, ex);
                }
            }
            if (copyMask?.RangeInt32N ?? true)
            {
                try
                {
                    item.RangeInt32N_Property.SetToWithDefault(
                        rhs.RangeInt32N_Property,
                        def?.RangeInt32N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt32N, ex);
                }
            }
            if (copyMask?.RangeInt32 ?? true)
            {
                try
                {
                    item.RangeInt32_Property.SetToWithDefault(
                        rhs.RangeInt32_Property,
                        def?.RangeInt32_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt32, ex);
                }
            }
            if (copyMask?.RangeInt64N ?? true)
            {
                try
                {
                    item.RangeInt64N_Property.SetToWithDefault(
                        rhs.RangeInt64N_Property,
                        def?.RangeInt64N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt64N, ex);
                }
            }
            if (copyMask?.RangeInt64 ?? true)
            {
                try
                {
                    item.RangeInt64_Property.SetToWithDefault(
                        rhs.RangeInt64_Property,
                        def?.RangeInt64_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt64, ex);
                }
            }
            if (copyMask?.RangeUInt8N ?? true)
            {
                try
                {
                    item.RangeUInt8N_Property.SetToWithDefault(
                        rhs.RangeUInt8N_Property,
                        def?.RangeUInt8N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt8N, ex);
                }
            }
            if (copyMask?.RangeUInt8 ?? true)
            {
                try
                {
                    item.RangeUInt8_Property.SetToWithDefault(
                        rhs.RangeUInt8_Property,
                        def?.RangeUInt8_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt8, ex);
                }
            }
            if (copyMask?.RangeUInt16N ?? true)
            {
                try
                {
                    item.RangeUInt16N_Property.SetToWithDefault(
                        rhs.RangeUInt16N_Property,
                        def?.RangeUInt16N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt16N, ex);
                }
            }
            if (copyMask?.RangeUInt16 ?? true)
            {
                try
                {
                    item.RangeUInt16_Property.SetToWithDefault(
                        rhs.RangeUInt16_Property,
                        def?.RangeUInt16_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt16, ex);
                }
            }
            if (copyMask?.RangeUInt32N ?? true)
            {
                try
                {
                    item.RangeUInt32N_Property.SetToWithDefault(
                        rhs.RangeUInt32N_Property,
                        def?.RangeUInt32N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt32N, ex);
                }
            }
            if (copyMask?.RangeUInt32 ?? true)
            {
                try
                {
                    item.RangeUInt32_Property.SetToWithDefault(
                        rhs.RangeUInt32_Property,
                        def?.RangeUInt32_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt32, ex);
                }
            }
            if (copyMask?.RangeUInt64N ?? true)
            {
                try
                {
                    item.RangeUInt64N_Property.SetToWithDefault(
                        rhs.RangeUInt64N_Property,
                        def?.RangeUInt64N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt64N, ex);
                }
            }
            if (copyMask?.RangeUInt64 ?? true)
            {
                try
                {
                    item.RangeUInt64_Property.SetToWithDefault(
                        rhs.RangeUInt64_Property,
                        def?.RangeUInt64_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt64, ex);
                }
            }
            if (copyMask?.String ?? true)
            {
                try
                {
                    item.String_Property.SetToWithDefault(
                        rhs.String_Property,
                        def?.String_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.String, ex);
                }
            }
            if (copyMask?.UDoubleN ?? true)
            {
                try
                {
                    item.UDoubleN_Property.SetToWithDefault(
                        rhs.UDoubleN_Property,
                        def?.UDoubleN_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDoubleN, ex);
                }
            }
            if (copyMask?.UDoubleN_Ranged ?? true)
            {
                try
                {
                    item.UDoubleN_Ranged_Property.SetToWithDefault(
                        rhs.UDoubleN_Ranged_Property,
                        def?.UDoubleN_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged, ex);
                }
            }
            if (copyMask?.UDouble ?? true)
            {
                try
                {
                    item.UDouble_Property.SetToWithDefault(
                        rhs.UDouble_Property,
                        def?.UDouble_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDouble, ex);
                }
            }
            if (copyMask?.UDouble_Ranged ?? true)
            {
                try
                {
                    item.UDouble_Ranged_Property.SetToWithDefault(
                        rhs.UDouble_Ranged_Property,
                        def?.UDouble_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged, ex);
                }
            }
            if (copyMask?.UInt16N ?? true)
            {
                try
                {
                    item.UInt16N_Property.SetToWithDefault(
                        rhs.UInt16N_Property,
                        def?.UInt16N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16N, ex);
                }
            }
            if (copyMask?.UInt16N_Ranged ?? true)
            {
                try
                {
                    item.UInt16N_Ranged_Property.SetToWithDefault(
                        rhs.UInt16N_Ranged_Property,
                        def?.UInt16N_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged, ex);
                }
            }
            if (copyMask?.UInt16 ?? true)
            {
                try
                {
                    item.UInt16_Property.SetToWithDefault(
                        rhs.UInt16_Property,
                        def?.UInt16_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16, ex);
                }
            }
            if (copyMask?.UInt16_Ranged ?? true)
            {
                try
                {
                    item.UInt16_Ranged_Property.SetToWithDefault(
                        rhs.UInt16_Ranged_Property,
                        def?.UInt16_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged, ex);
                }
            }
            if (copyMask?.UInt32N ?? true)
            {
                try
                {
                    item.UInt32N_Property.SetToWithDefault(
                        rhs.UInt32N_Property,
                        def?.UInt32N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32N, ex);
                }
            }
            if (copyMask?.UInt32N_Ranged ?? true)
            {
                try
                {
                    item.UInt32N_Ranged_Property.SetToWithDefault(
                        rhs.UInt32N_Ranged_Property,
                        def?.UInt32N_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged, ex);
                }
            }
            if (copyMask?.UInt32 ?? true)
            {
                try
                {
                    item.UInt32_Property.SetToWithDefault(
                        rhs.UInt32_Property,
                        def?.UInt32_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32, ex);
                }
            }
            if (copyMask?.UInt32_Ranged ?? true)
            {
                try
                {
                    item.UInt32_Ranged_Property.SetToWithDefault(
                        rhs.UInt32_Ranged_Property,
                        def?.UInt32_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged, ex);
                }
            }
            if (copyMask?.UInt64N ?? true)
            {
                try
                {
                    item.UInt64N_Property.SetToWithDefault(
                        rhs.UInt64N_Property,
                        def?.UInt64N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64N, ex);
                }
            }
            if (copyMask?.UInt64N_Ranged ?? true)
            {
                try
                {
                    item.UInt64N_Ranged_Property.SetToWithDefault(
                        rhs.UInt64N_Ranged_Property,
                        def?.UInt64N_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged, ex);
                }
            }
            if (copyMask?.UInt64 ?? true)
            {
                try
                {
                    item.UInt64_Property.SetToWithDefault(
                        rhs.UInt64_Property,
                        def?.UInt64_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64, ex);
                }
            }
            if (copyMask?.UInt64_Ranged ?? true)
            {
                try
                {
                    item.UInt64_Ranged_Property.SetToWithDefault(
                        rhs.UInt64_Ranged_Property,
                        def?.UInt64_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged, ex);
                }
            }
            if (copyMask?.UInt8N ?? true)
            {
                try
                {
                    item.UInt8N_Property.SetToWithDefault(
                        rhs.UInt8N_Property,
                        def?.UInt8N_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8N, ex);
                }
            }
            if (copyMask?.UInt8N_Ranged ?? true)
            {
                try
                {
                    item.UInt8N_Ranged_Property.SetToWithDefault(
                        rhs.UInt8N_Ranged_Property,
                        def?.UInt8N_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged, ex);
                }
            }
            if (copyMask?.UInt8 ?? true)
            {
                try
                {
                    item.UInt8_Property.SetToWithDefault(
                        rhs.UInt8_Property,
                        def?.UInt8_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8, ex);
                }
            }
            if (copyMask?.UInt8_Ranged ?? true)
            {
                try
                {
                    item.UInt8_Ranged_Property.SetToWithDefault(
                        rhs.UInt8_Ranged_Property,
                        def?.UInt8_Ranged_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged, ex);
                }
            }
            if (copyMask?.Enum ?? true)
            {
                try
                {
                    item.Enum_Property.SetToWithDefault(
                        rhs.Enum_Property,
                        def?.Enum_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Enum, ex);
                }
            }
            if (copyMask?.EnumNull ?? true)
            {
                try
                {
                    item.EnumNull_Property.SetToWithDefault(
                        rhs.EnumNull_Property,
                        def?.EnumNull_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.EnumNull, ex);
                }
            }
            if (copyMask?.WildCard ?? true)
            {
                try
                {
                    item.WildCard_Property.SetToWithDefault(
                        rhs.WildCard_Property,
                        def?.WildCard_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.WildCard, ex);
                }
            }
            if (copyMask?.WildCardNull ?? true)
            {
                try
                {
                    item.WildCardNull_Property.SetToWithDefault(
                        rhs.WildCardNull_Property,
                        def?.WildCardNull_Property,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.WildCardNull, ex);
                }
            }
            if (copyMask?.Ref.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Ref_Property.SetToWithDefault(
                        rhs.Ref_Property,
                        def?.Ref_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Ref.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ObjectToRefCommon.CopyFieldsFrom(
                                        item: item.Ref,
                                        rhs: rhs.Ref,
                                        def: def?.Ref,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Ref.Specific == null)
                                            {
                                                baseMask.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                            }
                                            return baseMask.Ref.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Ref.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ObjectToRef);
                                    return ObjectToRef.Copy(
                                        r,
                                        copyMask?.Ref.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ref.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Ref, ex);
                }
            }
            if (copyMask?.Ref_NotNull.Overall != CopyOption.Skip)
            {
                try
                {
                    item.Ref_NotNull_Property.SetToWithDefault(
                        rhs.Ref_NotNull_Property,
                        def?.Ref_NotNull_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.Ref_NotNull.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ObjectToRefCommon.CopyFieldsFrom(
                                        item: item.Ref_NotNull,
                                        rhs: rhs.Ref_NotNull,
                                        def: def?.Ref_NotNull,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.Ref_NotNull.Specific == null)
                                            {
                                                baseMask.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                            }
                                            return baseMask.Ref_NotNull.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.Ref_NotNull.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ObjectToRef);
                                    return ObjectToRef.Copy(
                                        r,
                                        copyMask?.Ref_NotNull.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ref_NotNull.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_NotNull, ex);
                }
            }
            if (copyMask?.Ref_Singleton.Overall ?? true)
            {
                try
                {
                    ObjectToRefCommon.CopyFieldsFrom(
                        item: item.Ref_Singleton,
                        rhs: rhs.Ref_Singleton,
                        def: def?.Ref_Singleton,
                        doErrorMask: doErrorMask,
                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Ref_Singleton.Specific == null)
                            {
                                baseMask.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                            }
                            return baseMask.Ref_Singleton.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Ref_Singleton.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_Singleton, ex);
                }
            }
            if (copyMask?.RefGetter.Overall != CopyOption.Skip)
            {
                try
                {
                    item.RefGetter_Property.SetToWithDefault(
                        rhs.RefGetter_Property,
                        def?.RefGetter_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RefGetter.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(IObjectToRefGetter);
                                    return ObjectToRef.Copy_ToLoqui(
                                        r,
                                        copyMask?.RefGetter.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefGetter.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter, ex);
                }
            }
            if (copyMask?.RefGetter_NotNull.Overall != CopyOption.Skip)
            {
                try
                {
                    item.RefGetter_NotNull_Property.SetToWithDefault(
                        rhs.RefGetter_NotNull_Property,
                        def?.RefGetter_NotNull_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RefGetter_NotNull.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(IObjectToRefGetter);
                                    return ObjectToRef.Copy_ToLoqui(
                                        r,
                                        copyMask?.RefGetter_NotNull.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefGetter_NotNull.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull, ex);
                }
            }
            if (copyMask?.RefSetter.Overall != CopyOption.Skip)
            {
                try
                {
                    item.RefSetter_Property.SetToWithDefault(
                        rhs.RefSetter_Property,
                        def?.RefSetter_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RefSetter.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ObjectToRefCommon.CopyFieldsFrom(
                                        item: item.RefSetter,
                                        rhs: rhs.RefSetter,
                                        def: def?.RefSetter,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.RefSetter.Specific == null)
                                            {
                                                baseMask.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                            }
                                            return baseMask.RefSetter.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.RefSetter.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(IObjectToRef);
                                    return ObjectToRef.Copy(
                                        r,
                                        copyMask?.RefSetter.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefSetter.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter, ex);
                }
            }
            if (copyMask?.RefSetter_NotNull.Overall != CopyOption.Skip)
            {
                try
                {
                    item.RefSetter_NotNull_Property.SetToWithDefault(
                        rhs.RefSetter_NotNull_Property,
                        def?.RefSetter_NotNull_Property,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RefSetter_NotNull.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.CopyIn:
                                    ObjectToRefCommon.CopyFieldsFrom(
                                        item: item.RefSetter_NotNull,
                                        rhs: rhs.RefSetter_NotNull,
                                        def: def?.RefSetter_NotNull,
                                        doErrorMask: doErrorMask,
                                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                                        {
                                            var baseMask = errorMask();
                                            if (baseMask.RefSetter_NotNull.Specific == null)
                                            {
                                                baseMask.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                            }
                                            return baseMask.RefSetter_NotNull.Specific;
                                        }
                                        ) : null),
                                        copyMask: copyMask?.RefSetter_NotNull.Specific,
                                        cmds: cmds);
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(IObjectToRef);
                                    return ObjectToRef.Copy(
                                        r,
                                        copyMask?.RefSetter_NotNull.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefSetter_NotNull.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull, ex);
                }
            }
            if (copyMask?.RefSetter_Singleton.Overall ?? true)
            {
                try
                {
                    ObjectToRefCommon.CopyFieldsFrom(
                        item: item.RefSetter_Singleton,
                        rhs: rhs.RefSetter_Singleton,
                        def: def?.RefSetter_Singleton,
                        doErrorMask: doErrorMask,
                        errorMask: (doErrorMask ? new Func<ObjectToRef_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.RefSetter_Singleton.Specific == null)
                            {
                                baseMask.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                            }
                            return baseMask.RefSetter_Singleton.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.RefSetter_Singleton.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton, ex);
                }
            }
            if (copyMask?.List != CopyOption.Skip)
            {
                try
                {
                    item.List.SetToWithDefault(
                        rhs.List,
                        def?.List,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.List, ex);
                }
            }
            if (copyMask?.RefList.Overall != CopyOption.Skip)
            {
                try
                {
                    item.RefList.SetToWithDefault(
                        rhs.RefList,
                        def?.RefList,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RefList.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return r.Copy(copyMask?.RefList.Specific, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefList.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefList, ex);
                }
            }
            if (copyMask?.Dict ?? true)
            {
                try
                {
                    item.Dict.SetToWithDefault(
                        rhs.Dict,
                        def?.Dict,
                        cmds);
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Dict, ex);
                }
            }
            if (copyMask?.RefDict.Overall ?? true)
            {
                try
                {
                    item.RefDict.SetToWithDefault(
                        rhs.RefDict,
                        def?.RefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef key;
                            switch (copyMask?.RefDict.Specific.Key.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    key = k;
                                    break;
                                case RefCopyType.MakeCopy:
                                    key = k.Copy(copyMask: copyMask?.RefDict.Specific.Key.Mask);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.RefDict.Overall}. Cannot execute copy.");
                            }
                            ObjectToRef val;
                            switch (copyMask?.RefDict.Specific.Value.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    val = v;
                                    break;
                                case RefCopyType.MakeCopy:
                                    val = v.Copy(copyMask?.RefDict.Specific.Value.Mask, d);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.RefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<ObjectToRef, ObjectToRef>(key, val);
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefDict, ex);
                }
            }
            if (copyMask?.KeyRefDict.Overall ?? true)
            {
                try
                {
                    item.KeyRefDict.SetToWithDefault(
                        rhs.KeyRefDict,
                        def?.KeyRefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef key;
                            switch (copyMask?.KeyRefDict.Specific.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    key = k;
                                    break;
                                case RefCopyType.MakeCopy:
                                    key = k.Copy(copyMask: copyMask?.KeyRefDict.Specific.Mask);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.KeyRefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<ObjectToRef, Boolean>(key, v);
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.KeyRefDict, ex);
                }
            }
            if (copyMask?.ValRefDict.Overall ?? true)
            {
                try
                {
                    item.ValRefDict.SetToWithDefault(
                        rhs.ValRefDict,
                        def?.ValRefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef val;
                            switch (copyMask?.ValRefDict.Specific.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    val = v;
                                    break;
                                case RefCopyType.MakeCopy:
                                    val = v.Copy(copyMask?.ValRefDict.Specific.Mask, d);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.ValRefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<String, ObjectToRef>(k, val);
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.ValRefDict, ex);
                }
            }
            if (copyMask?.DictKeyedValue.Overall != CopyOption.Skip)
            {
                try
                {
                    item.DictKeyedValue.SetToWithDefault(
                        rhs.DictKeyedValue,
                        def?.DictKeyedValue,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.DictKeyedValue.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return r.Copy(copyMask?.DictKeyedValue.Specific, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.DictKeyedValue.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                {
                    if (doErrorMask) throw;
                    errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DictKeyedValue, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestObject_Notifying_RPC obj,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                    obj.BoolN_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                    obj.Bool_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                    obj.CharN_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Char:
                    obj.Char_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                    obj.DateTimeNull_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                    obj.DateTime_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                    obj.DoubleN_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                    obj.DoubleN_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double:
                    obj.Double_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                    obj.Double_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                    obj.FloatN_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                    obj.FloatN_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float:
                    obj.Float_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                    obj.Float_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                    obj.Int16N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                    obj.Int16N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                    obj.Int16_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                    obj.Int16_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                    obj.Int32N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                    obj.Int32N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                    obj.Int32_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                    obj.Int32_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                    obj.Int64N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                    obj.Int64N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                    obj.Int64_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                    obj.Int64_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                    obj.Int8N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                    obj.Int8N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                    obj.Int8_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                    obj.Int8_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                    obj.Unsafe_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                    obj.P2IntN_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                    obj.P2Int_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                    obj.P3DoubleN_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                    obj.P3Double_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                    obj.P3IntN_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                    obj.P3Int_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                    obj.PercentN_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                    obj.Percent_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                    obj.RangeInt8N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                    obj.RangeInt8_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                    obj.RangeInt16N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                    obj.RangeInt16_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                    obj.RangeInt32N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                    obj.RangeInt32_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                    obj.RangeInt64N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                    obj.RangeInt64_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                    obj.RangeUInt8N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                    obj.RangeUInt8_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                    obj.RangeUInt16N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                    obj.RangeUInt16_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                    obj.RangeUInt32N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                    obj.RangeUInt32_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                    obj.RangeUInt64N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                    obj.RangeUInt64_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.String:
                    obj.String_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                    obj.UDoubleN_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                    obj.UDoubleN_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                    obj.UDouble_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                    obj.UDouble_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                    obj.UInt16N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                    obj.UInt16N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                    obj.UInt16_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                    obj.UInt16_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                    obj.UInt32N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                    obj.UInt32N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                    obj.UInt32_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                    obj.UInt32_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                    obj.UInt64N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                    obj.UInt64N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                    obj.UInt64_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                    obj.UInt64_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                    obj.UInt8N_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                    obj.UInt8N_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                    obj.UInt8_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                    obj.UInt8_Ranged_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                    obj.Enum_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                    obj.EnumNull_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                    obj.WildCard_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                    obj.WildCardNull_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                    obj.Ref_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                    obj.Ref_NotNull_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Cannot mark set status of a singleton: Ref_Singleton");
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                    obj.RefGetter_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                    obj.RefGetter_NotNull_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot mark set status of a singleton: RefGetter_Singleton");
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                    obj.RefSetter_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                    obj.RefSetter_NotNull_Property.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Cannot mark set status of a singleton: RefSetter_Singleton");
                case TestObject_Notifying_RPC_FieldIndex.List:
                    obj.List.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    obj.RefList.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                    obj.Dict.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                    obj.RefDict.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                    obj.KeyRefDict.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                    obj.ValRefDict.HasBeenSet = on;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestObject_Notifying_RPC obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                    obj.BoolN_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                    obj.Bool_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                    obj.CharN_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Char:
                    obj.Char_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                    obj.DateTimeNull_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                    obj.DateTime_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                    obj.DoubleN_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                    obj.DoubleN_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double:
                    obj.Double_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                    obj.Double_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                    obj.FloatN_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                    obj.FloatN_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float:
                    obj.Float_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                    obj.Float_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                    obj.Int16N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                    obj.Int16N_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                    obj.Int16_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                    obj.Int16_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                    obj.Int32N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                    obj.Int32N_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                    obj.Int32_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                    obj.Int32_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                    obj.Int64N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                    obj.Int64N_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                    obj.Int64_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                    obj.Int64_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                    obj.Int8N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                    obj.Int8N_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                    obj.Int8_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                    obj.Int8_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                    obj.Unsafe_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                    obj.P2IntN_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                    obj.P2Int_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                    obj.P3DoubleN_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                    obj.P3Double_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                    obj.P3IntN_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                    obj.P3Int_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                    obj.PercentN_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                    obj.Percent_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                    obj.RangeInt8N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                    obj.RangeInt8_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                    obj.RangeInt16N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                    obj.RangeInt16_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                    obj.RangeInt32N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                    obj.RangeInt32_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                    obj.RangeInt64N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                    obj.RangeInt64_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                    obj.RangeUInt8N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                    obj.RangeUInt8_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                    obj.RangeUInt16N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                    obj.RangeUInt16_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                    obj.RangeUInt32N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                    obj.RangeUInt32_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                    obj.RangeUInt64N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                    obj.RangeUInt64_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.String:
                    obj.String_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                    obj.UDoubleN_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                    obj.UDoubleN_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                    obj.UDouble_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                    obj.UDouble_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                    obj.UInt16N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                    obj.UInt16N_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                    obj.UInt16_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                    obj.UInt16_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                    obj.UInt32N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                    obj.UInt32N_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                    obj.UInt32_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                    obj.UInt32_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                    obj.UInt64N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                    obj.UInt64N_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                    obj.UInt64_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                    obj.UInt64_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                    obj.UInt8N_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                    obj.UInt8N_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                    obj.UInt8_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                    obj.UInt8_Ranged_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                    obj.Enum_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                    obj.EnumNull_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                    obj.WildCard_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                    obj.WildCardNull_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                    obj.Ref_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                    obj.Ref_NotNull_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                    ObjectToRefCommon.Clear(obj.Ref_Singleton, cmds.ToUnsetParams());
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                    obj.RefGetter_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                    obj.RefGetter_NotNull_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot unset a get only singleton: RefGetter_Singleton");
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                    obj.RefSetter_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                    obj.RefSetter_NotNull_Property.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    ObjectToRefCommon.Clear(obj.RefSetter_Singleton, cmds.ToUnsetParams());
                    break;
                case TestObject_Notifying_RPC_FieldIndex.List:
                    obj.List.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    obj.RefList.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                    obj.Dict.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                    obj.RefDict.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                    obj.KeyRefDict.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                    obj.ValRefDict.Unset(cmds);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestObject_Notifying_RPC obj)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                    return obj.BoolN_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                    return obj.Bool_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                    return obj.CharN_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Char:
                    return obj.Char_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                    return obj.DateTimeNull_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                    return obj.DateTime_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                    return obj.DoubleN_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                    return obj.DoubleN_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Double:
                    return obj.Double_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                    return obj.Double_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                    return obj.FloatN_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                    return obj.FloatN_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Float:
                    return obj.Float_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                    return obj.Float_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                    return obj.Int16N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                    return obj.Int16N_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                    return obj.Int16_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                    return obj.Int16_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                    return obj.Int32N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                    return obj.Int32N_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                    return obj.Int32_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                    return obj.Int32_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                    return obj.Int64N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                    return obj.Int64N_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                    return obj.Int64_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                    return obj.Int64_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                    return obj.Int8N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                    return obj.Int8N_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                    return obj.Int8_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                    return obj.Int8_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                    return obj.Unsafe_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                    return obj.P2IntN_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                    return obj.P2Int_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                    return obj.P3Double_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                    return obj.P3IntN_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                    return obj.P3Int_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                    return obj.PercentN_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                    return obj.Percent_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                    return obj.RangeInt8N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                    return obj.RangeInt8_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                    return obj.RangeInt16N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                    return obj.RangeInt16_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                    return obj.RangeInt32N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                    return obj.RangeInt32_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                    return obj.RangeInt64N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                    return obj.RangeInt64_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                    return obj.RangeUInt8N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                    return obj.RangeUInt8_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                    return obj.RangeUInt16N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                    return obj.RangeUInt16_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                    return obj.RangeUInt32N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                    return obj.RangeUInt32_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                    return obj.RangeUInt64N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                    return obj.RangeUInt64_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.String:
                    return obj.String_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                    return obj.UDoubleN_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                    return obj.UDoubleN_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                    return obj.UDouble_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                    return obj.UDouble_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                    return obj.UInt16N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                    return obj.UInt16N_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                    return obj.UInt16_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                    return obj.UInt16_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                    return obj.UInt32N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                    return obj.UInt32N_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                    return obj.UInt32_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                    return obj.UInt32_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                    return obj.UInt64N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                    return obj.UInt64N_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                    return obj.UInt64_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                    return obj.UInt64_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                    return obj.UInt8N_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                    return obj.UInt8N_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                    return obj.UInt8_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                    return obj.UInt8_Ranged_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                    return obj.Enum_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                    return obj.EnumNull_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                    return obj.WildCard_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                    return obj.WildCardNull_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                    return obj.Ref_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                    return obj.Ref_NotNull_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                    return obj.Ref_Singleton_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                    return obj.RefGetter_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                    return obj.RefGetter_NotNull_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                    return obj.RefGetter_Singleton_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                    return obj.RefSetter_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                    return obj.RefSetter_NotNull_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    return obj.RefSetter_Singleton_Property.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.List:
                    return obj.List.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    return obj.RefList.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                    return obj.Dict.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                    return obj.RefDict.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                    return obj.KeyRefDict.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                    return obj.ValRefDict.HasBeenSet;
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue.HasBeenSet;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestObject_Notifying_RPCGetter obj)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                    return obj.BoolN;
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                    return obj.Bool;
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                    return obj.CharN;
                case TestObject_Notifying_RPC_FieldIndex.Char:
                    return obj.Char;
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                    return obj.DateTimeNull;
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                    return obj.DateTime;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                    return obj.DoubleN;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                    return obj.DoubleN_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Double:
                    return obj.Double;
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                    return obj.Double_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                    return obj.FloatN;
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                    return obj.FloatN_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Float:
                    return obj.Float;
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                    return obj.Float_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                    return obj.Int16N;
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                    return obj.Int16N_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                    return obj.Int16;
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                    return obj.Int16_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                    return obj.Int32N;
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                    return obj.Int32N_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                    return obj.Int32;
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                    return obj.Int32_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                    return obj.Int64N;
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                    return obj.Int64N_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                    return obj.Int64;
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                    return obj.Int64_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                    return obj.Int8N;
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                    return obj.Int8N_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                    return obj.Int8;
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                    return obj.Int8_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                    return obj.Unsafe;
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                    return obj.P2IntN;
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                    return obj.P2Int;
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN;
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                    return obj.P3Double;
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                    return obj.P3IntN;
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                    return obj.P3Int;
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                    return obj.PercentN;
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                    return obj.Percent;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                    return obj.RangeInt8N;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                    return obj.RangeInt8;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                    return obj.RangeInt16N;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                    return obj.RangeInt16;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                    return obj.RangeInt32N;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                    return obj.RangeInt32;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                    return obj.RangeInt64N;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                    return obj.RangeInt64;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                    return obj.RangeUInt8N;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                    return obj.RangeUInt8;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                    return obj.RangeUInt16N;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                    return obj.RangeUInt16;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                    return obj.RangeUInt32N;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                    return obj.RangeUInt32;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                    return obj.RangeUInt64N;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                    return obj.RangeUInt64;
                case TestObject_Notifying_RPC_FieldIndex.String:
                    return obj.String;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                    return obj.UDoubleN;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                    return obj.UDoubleN_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                    return obj.UDouble;
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                    return obj.UDouble_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                    return obj.UInt16N;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                    return obj.UInt16N_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                    return obj.UInt16;
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                    return obj.UInt16_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                    return obj.UInt32N;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                    return obj.UInt32N_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                    return obj.UInt32;
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                    return obj.UInt32_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                    return obj.UInt64N;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                    return obj.UInt64N_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                    return obj.UInt64;
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                    return obj.UInt64_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                    return obj.UInt8N;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                    return obj.UInt8N_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                    return obj.UInt8;
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                    return obj.UInt8_Ranged;
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                    return obj.Enum;
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                    return obj.EnumNull;
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                    return obj.WildCard;
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                    return obj.WildCardNull;
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                    return obj.Ref;
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                    return obj.Ref_NotNull;
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                    return obj.Ref_Singleton;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                    return obj.RefGetter;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                    return obj.RefGetter_NotNull;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                    return obj.RefGetter_Singleton;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                    return obj.RefSetter;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                    return obj.RefSetter_NotNull;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    return obj.RefSetter_Singleton;
                case TestObject_Notifying_RPC_FieldIndex.List:
                    return obj.List;
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    return obj.RefList;
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                    return obj.Dict;
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                    return obj.RefDict;
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                    return obj.KeyRefDict;
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                    return obj.ValRefDict;
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITestObject_Notifying_RPC item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.BoolN_Property.Unset(cmds.ToUnsetParams());
            item.Bool_Property.Unset(cmds.ToUnsetParams());
            item.CharN_Property.Unset(cmds.ToUnsetParams());
            item.Char_Property.Unset(cmds.ToUnsetParams());
            item.DateTimeNull_Property.Unset(cmds.ToUnsetParams());
            item.DateTime_Property.Unset(cmds.ToUnsetParams());
            item.DoubleN_Property.Unset(cmds.ToUnsetParams());
            item.DoubleN_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Double_Property.Unset(cmds.ToUnsetParams());
            item.Double_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.FloatN_Property.Unset(cmds.ToUnsetParams());
            item.FloatN_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Float_Property.Unset(cmds.ToUnsetParams());
            item.Float_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Int16N_Property.Unset(cmds.ToUnsetParams());
            item.Int16N_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Int16_Property.Unset(cmds.ToUnsetParams());
            item.Int16_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Int32N_Property.Unset(cmds.ToUnsetParams());
            item.Int32N_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Int32_Property.Unset(cmds.ToUnsetParams());
            item.Int32_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Int64N_Property.Unset(cmds.ToUnsetParams());
            item.Int64N_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Int64_Property.Unset(cmds.ToUnsetParams());
            item.Int64_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Int8N_Property.Unset(cmds.ToUnsetParams());
            item.Int8N_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Int8_Property.Unset(cmds.ToUnsetParams());
            item.Int8_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Unsafe_Property.Unset(cmds.ToUnsetParams());
            item.P2IntN_Property.Unset(cmds.ToUnsetParams());
            item.P2Int_Property.Unset(cmds.ToUnsetParams());
            item.P3DoubleN_Property.Unset(cmds.ToUnsetParams());
            item.P3Double_Property.Unset(cmds.ToUnsetParams());
            item.P3IntN_Property.Unset(cmds.ToUnsetParams());
            item.P3Int_Property.Unset(cmds.ToUnsetParams());
            item.PercentN_Property.Unset(cmds.ToUnsetParams());
            item.Percent_Property.Unset(cmds.ToUnsetParams());
            item.RangeInt8N_Property.Unset(cmds.ToUnsetParams());
            item.RangeInt8_Property.Unset(cmds.ToUnsetParams());
            item.RangeInt16N_Property.Unset(cmds.ToUnsetParams());
            item.RangeInt16_Property.Unset(cmds.ToUnsetParams());
            item.RangeInt32N_Property.Unset(cmds.ToUnsetParams());
            item.RangeInt32_Property.Unset(cmds.ToUnsetParams());
            item.RangeInt64N_Property.Unset(cmds.ToUnsetParams());
            item.RangeInt64_Property.Unset(cmds.ToUnsetParams());
            item.RangeUInt8N_Property.Unset(cmds.ToUnsetParams());
            item.RangeUInt8_Property.Unset(cmds.ToUnsetParams());
            item.RangeUInt16N_Property.Unset(cmds.ToUnsetParams());
            item.RangeUInt16_Property.Unset(cmds.ToUnsetParams());
            item.RangeUInt32N_Property.Unset(cmds.ToUnsetParams());
            item.RangeUInt32_Property.Unset(cmds.ToUnsetParams());
            item.RangeUInt64N_Property.Unset(cmds.ToUnsetParams());
            item.RangeUInt64_Property.Unset(cmds.ToUnsetParams());
            item.String_Property.Unset(cmds.ToUnsetParams());
            item.UDoubleN_Property.Unset(cmds.ToUnsetParams());
            item.UDoubleN_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.UDouble_Property.Unset(cmds.ToUnsetParams());
            item.UDouble_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.UInt16N_Property.Unset(cmds.ToUnsetParams());
            item.UInt16N_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.UInt16_Property.Unset(cmds.ToUnsetParams());
            item.UInt16_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.UInt32N_Property.Unset(cmds.ToUnsetParams());
            item.UInt32N_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.UInt32_Property.Unset(cmds.ToUnsetParams());
            item.UInt32_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.UInt64N_Property.Unset(cmds.ToUnsetParams());
            item.UInt64N_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.UInt64_Property.Unset(cmds.ToUnsetParams());
            item.UInt64_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.UInt8N_Property.Unset(cmds.ToUnsetParams());
            item.UInt8N_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.UInt8_Property.Unset(cmds.ToUnsetParams());
            item.UInt8_Ranged_Property.Unset(cmds.ToUnsetParams());
            item.Enum_Property.Unset(cmds.ToUnsetParams());
            item.EnumNull_Property.Unset(cmds.ToUnsetParams());
            item.WildCard_Property.Unset(cmds.ToUnsetParams());
            item.WildCardNull_Property.Unset(cmds.ToUnsetParams());
            item.Ref_Property.Unset(cmds.ToUnsetParams());
            item.Ref_NotNull_Property.Unset(cmds.ToUnsetParams());
            item.RefGetter_Property.Unset(cmds.ToUnsetParams());
            item.RefGetter_NotNull_Property.Unset(cmds.ToUnsetParams());
            item.RefSetter_Property.Unset(cmds.ToUnsetParams());
            item.RefSetter_NotNull_Property.Unset(cmds.ToUnsetParams());
            item.List.Unset(cmds.ToUnsetParams());
            item.RefList.Unset(cmds.ToUnsetParams());
            item.Dict.Unset(cmds.ToUnsetParams());
            item.RefDict.Unset(cmds.ToUnsetParams());
            item.KeyRefDict.Unset(cmds.ToUnsetParams());
            item.ValRefDict.Unset(cmds.ToUnsetParams());
            item.DictKeyedValue.Unset(cmds.ToUnsetParams());
        }

        public static TestObject_Notifying_RPC_Mask<bool> GetEqualsMask(
            this ITestObject_Notifying_RPCGetter item,
            ITestObject_Notifying_RPCGetter rhs)
        {
            var ret = new TestObject_Notifying_RPC_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITestObject_Notifying_RPCGetter item,
            ITestObject_Notifying_RPCGetter rhs,
            TestObject_Notifying_RPC_Mask<bool> ret)
        {
            ret.BoolN = item.BoolN_Property.Equals(rhs.BoolN_Property, (l, r) => l != r);
            ret.Bool = item.Bool_Property.Equals(rhs.Bool_Property, (l, r) => l != r);
            ret.CharN = item.CharN_Property.Equals(rhs.CharN_Property, (l, r) => l != r);
            ret.Char = item.Char_Property.Equals(rhs.Char_Property, (l, r) => l != r);
            ret.DateTimeNull = item.DateTimeNull_Property.Equals(rhs.DateTimeNull_Property, (l, r) => l != r);
            ret.DateTime = item.DateTime_Property.Equals(rhs.DateTime_Property, (l, r) => l != r);
            ret.DoubleN = item.DoubleN_Property.Equals(rhs.DoubleN_Property, (l, r) => l != r);
            ret.DoubleN_Ranged = item.DoubleN_Ranged_Property.Equals(rhs.DoubleN_Ranged_Property, (l, r) => l != r);
            ret.Double = item.Double_Property.Equals(rhs.Double_Property, (l, r) => l != r);
            ret.Double_Ranged = item.Double_Ranged_Property.Equals(rhs.Double_Ranged_Property, (l, r) => l != r);
            ret.FloatN = item.FloatN_Property.Equals(rhs.FloatN_Property, (l, r) => l != r);
            ret.FloatN_Ranged = item.FloatN_Ranged_Property.Equals(rhs.FloatN_Ranged_Property, (l, r) => l != r);
            ret.Float = item.Float_Property.Equals(rhs.Float_Property, (l, r) => l != r);
            ret.Float_Ranged = item.Float_Ranged_Property.Equals(rhs.Float_Ranged_Property, (l, r) => l != r);
            ret.Int16N = item.Int16N_Property.Equals(rhs.Int16N_Property, (l, r) => l != r);
            ret.Int16N_Ranged = item.Int16N_Ranged_Property.Equals(rhs.Int16N_Ranged_Property, (l, r) => l != r);
            ret.Int16 = item.Int16_Property.Equals(rhs.Int16_Property, (l, r) => l != r);
            ret.Int16_Ranged = item.Int16_Ranged_Property.Equals(rhs.Int16_Ranged_Property, (l, r) => l != r);
            ret.Int32N = item.Int32N_Property.Equals(rhs.Int32N_Property, (l, r) => l != r);
            ret.Int32N_Ranged = item.Int32N_Ranged_Property.Equals(rhs.Int32N_Ranged_Property, (l, r) => l != r);
            ret.Int32 = item.Int32_Property.Equals(rhs.Int32_Property, (l, r) => l != r);
            ret.Int32_Ranged = item.Int32_Ranged_Property.Equals(rhs.Int32_Ranged_Property, (l, r) => l != r);
            ret.Int64N = item.Int64N_Property.Equals(rhs.Int64N_Property, (l, r) => l != r);
            ret.Int64N_Ranged = item.Int64N_Ranged_Property.Equals(rhs.Int64N_Ranged_Property, (l, r) => l != r);
            ret.Int64 = item.Int64_Property.Equals(rhs.Int64_Property, (l, r) => l != r);
            ret.Int64_Ranged = item.Int64_Ranged_Property.Equals(rhs.Int64_Ranged_Property, (l, r) => l != r);
            ret.Int8N = item.Int8N_Property.Equals(rhs.Int8N_Property, (l, r) => l != r);
            ret.Int8N_Ranged = item.Int8N_Ranged_Property.Equals(rhs.Int8N_Ranged_Property, (l, r) => l != r);
            ret.Int8 = item.Int8_Property.Equals(rhs.Int8_Property, (l, r) => l != r);
            ret.Int8_Ranged = item.Int8_Ranged_Property.Equals(rhs.Int8_Ranged_Property, (l, r) => l != r);
            ret.Unsafe = item.Unsafe_Property.Equals(rhs.Unsafe_Property, (l, r) => l != r);
            ret.P2IntN = item.P2IntN_Property.Equals(rhs.P2IntN_Property, (l, r) => l != r);
            ret.P2Int = item.P2Int_Property.Equals(rhs.P2Int_Property, (l, r) => l != r);
            ret.P3DoubleN = item.P3DoubleN_Property.Equals(rhs.P3DoubleN_Property, (l, r) => l != r);
            ret.P3Double = item.P3Double_Property.Equals(rhs.P3Double_Property, (l, r) => l != r);
            ret.P3IntN = item.P3IntN_Property.Equals(rhs.P3IntN_Property, (l, r) => l != r);
            ret.P3Int = item.P3Int_Property.Equals(rhs.P3Int_Property, (l, r) => l != r);
            ret.PercentN = item.PercentN_Property.Equals(rhs.PercentN_Property, (l, r) => l != r);
            ret.Percent = item.Percent_Property.Equals(rhs.Percent_Property, (l, r) => l != r);
            ret.RangeInt8N = item.RangeInt8N_Property.Equals(rhs.RangeInt8N_Property, (l, r) => l != r);
            ret.RangeInt8 = item.RangeInt8_Property.Equals(rhs.RangeInt8_Property, (l, r) => l != r);
            ret.RangeInt16N = item.RangeInt16N_Property.Equals(rhs.RangeInt16N_Property, (l, r) => l != r);
            ret.RangeInt16 = item.RangeInt16_Property.Equals(rhs.RangeInt16_Property, (l, r) => l != r);
            ret.RangeInt32N = item.RangeInt32N_Property.Equals(rhs.RangeInt32N_Property, (l, r) => l != r);
            ret.RangeInt32 = item.RangeInt32_Property.Equals(rhs.RangeInt32_Property, (l, r) => l != r);
            ret.RangeInt64N = item.RangeInt64N_Property.Equals(rhs.RangeInt64N_Property, (l, r) => l != r);
            ret.RangeInt64 = item.RangeInt64_Property.Equals(rhs.RangeInt64_Property, (l, r) => l != r);
            ret.RangeUInt8N = item.RangeUInt8N_Property.Equals(rhs.RangeUInt8N_Property, (l, r) => l != r);
            ret.RangeUInt8 = item.RangeUInt8_Property.Equals(rhs.RangeUInt8_Property, (l, r) => l != r);
            ret.RangeUInt16N = item.RangeUInt16N_Property.Equals(rhs.RangeUInt16N_Property, (l, r) => l != r);
            ret.RangeUInt16 = item.RangeUInt16_Property.Equals(rhs.RangeUInt16_Property, (l, r) => l != r);
            ret.RangeUInt32N = item.RangeUInt32N_Property.Equals(rhs.RangeUInt32N_Property, (l, r) => l != r);
            ret.RangeUInt32 = item.RangeUInt32_Property.Equals(rhs.RangeUInt32_Property, (l, r) => l != r);
            ret.RangeUInt64N = item.RangeUInt64N_Property.Equals(rhs.RangeUInt64N_Property, (l, r) => l != r);
            ret.RangeUInt64 = item.RangeUInt64_Property.Equals(rhs.RangeUInt64_Property, (l, r) => l != r);
            ret.String = item.String_Property.Equals(rhs.String_Property, (l, r) => l != r);
            ret.UDoubleN = item.UDoubleN_Property.Equals(rhs.UDoubleN_Property, (l, r) => l != r);
            ret.UDoubleN_Ranged = item.UDoubleN_Ranged_Property.Equals(rhs.UDoubleN_Ranged_Property, (l, r) => l != r);
            ret.UDouble = item.UDouble_Property.Equals(rhs.UDouble_Property, (l, r) => l != r);
            ret.UDouble_Ranged = item.UDouble_Ranged_Property.Equals(rhs.UDouble_Ranged_Property, (l, r) => l != r);
            ret.UInt16N = item.UInt16N_Property.Equals(rhs.UInt16N_Property, (l, r) => l != r);
            ret.UInt16N_Ranged = item.UInt16N_Ranged_Property.Equals(rhs.UInt16N_Ranged_Property, (l, r) => l != r);
            ret.UInt16 = item.UInt16_Property.Equals(rhs.UInt16_Property, (l, r) => l != r);
            ret.UInt16_Ranged = item.UInt16_Ranged_Property.Equals(rhs.UInt16_Ranged_Property, (l, r) => l != r);
            ret.UInt32N = item.UInt32N_Property.Equals(rhs.UInt32N_Property, (l, r) => l != r);
            ret.UInt32N_Ranged = item.UInt32N_Ranged_Property.Equals(rhs.UInt32N_Ranged_Property, (l, r) => l != r);
            ret.UInt32 = item.UInt32_Property.Equals(rhs.UInt32_Property, (l, r) => l != r);
            ret.UInt32_Ranged = item.UInt32_Ranged_Property.Equals(rhs.UInt32_Ranged_Property, (l, r) => l != r);
            ret.UInt64N = item.UInt64N_Property.Equals(rhs.UInt64N_Property, (l, r) => l != r);
            ret.UInt64N_Ranged = item.UInt64N_Ranged_Property.Equals(rhs.UInt64N_Ranged_Property, (l, r) => l != r);
            ret.UInt64 = item.UInt64_Property.Equals(rhs.UInt64_Property, (l, r) => l != r);
            ret.UInt64_Ranged = item.UInt64_Ranged_Property.Equals(rhs.UInt64_Ranged_Property, (l, r) => l != r);
            ret.UInt8N = item.UInt8N_Property.Equals(rhs.UInt8N_Property, (l, r) => l != r);
            ret.UInt8N_Ranged = item.UInt8N_Ranged_Property.Equals(rhs.UInt8N_Ranged_Property, (l, r) => l != r);
            ret.UInt8 = item.UInt8_Property.Equals(rhs.UInt8_Property, (l, r) => l != r);
            ret.UInt8_Ranged = item.UInt8_Ranged_Property.Equals(rhs.UInt8_Ranged_Property, (l, r) => l != r);
            ret.Enum = item.Enum_Property.Equals(rhs.Enum_Property, (l, r) => l != r);
            ret.EnumNull = item.EnumNull_Property.Equals(rhs.EnumNull_Property, (l, r) => l != r);
            ret.WildCard = item.WildCard_Property.Equals(rhs.WildCard_Property, (l, r) => l != r);
            ret.WildCardNull = item.WildCardNull_Property.Equals(rhs.WildCardNull_Property, (l, r) => l != r);
            ret.Ref = item.Ref_Property.LoquiEqualsHelper(rhs.Ref_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Ref_NotNull = item.Ref_NotNull_Property.LoquiEqualsHelper(rhs.Ref_NotNull_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.Ref_Singleton = item.Ref_Singleton_Property.LoquiEqualsHelper(rhs.Ref_Singleton_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefGetter = item.RefGetter_Property.LoquiEqualsHelper(rhs.RefGetter_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefGetter_NotNull = item.RefGetter_NotNull_Property.LoquiEqualsHelper(rhs.RefGetter_NotNull_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefGetter_Singleton = item.RefGetter_Singleton_Property.LoquiEqualsHelper(rhs.RefGetter_Singleton_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefSetter = item.RefSetter_Property.LoquiEqualsHelper(rhs.RefSetter_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefSetter_NotNull = item.RefSetter_NotNull_Property.LoquiEqualsHelper(rhs.RefSetter_NotNull_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            ret.RefSetter_Singleton = item.RefSetter_Singleton_Property.LoquiEqualsHelper(rhs.RefSetter_Singleton_Property, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
            if (item.List.HasBeenSet == rhs.List.HasBeenSet)
            {
                if (item.List.HasBeenSet)
                {
                    ret.List = new MaskItem<bool, IEnumerable<bool>>();
                    ret.List.Specific = item.List.SelectAgainst<Boolean, bool>(rhs.List, ((l, r) => object.Equals(l, r)), out ret.List.Overall);
                    ret.List.Overall = ret.List.Overall && ret.List.Specific.All((b) => b);
                }
                else
                {
                    ret.List = new MaskItem<bool, IEnumerable<bool>>();
                    ret.List.Overall = true;
                }
            }
            else
            {
                ret.List = new MaskItem<bool, IEnumerable<bool>>();
                ret.List.Overall = false;
            }
            if (item.RefList.HasBeenSet == rhs.RefList.HasBeenSet)
            {
                if (item.RefList.HasBeenSet)
                {
                    ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                    ret.RefList.Specific = item.RefList.SelectAgainst<ObjectToRef, MaskItem<bool, ObjectToRef_Mask<bool>>>(rhs.RefList, ((l, r) =>
                    {
                        MaskItem<bool, ObjectToRef_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.RefList.Overall);
                    ret.RefList.Overall = ret.RefList.Overall && ret.RefList.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                    ret.RefList.Overall = true;
                }
            }
            else
            {
                ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                ret.RefList.Overall = false;
            }
            if (item.Dict.HasBeenSet == rhs.Dict.HasBeenSet)
            {
                if (item.Dict.HasBeenSet)
                {
                    ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>();
                    ret.Dict.Specific = item.Dict.SelectAgainst<KeyValuePair<String, Boolean>, KeyValuePair<bool, bool>>(rhs.Dict, ((l, r) => new KeyValuePair<bool, bool>(object.Equals(l.Key, r.Key), object.Equals(l.Value, r.Value))), out ret.Dict.Overall);
                    ret.Dict.Overall = ret.Dict.Overall && ret.Dict.Specific.All((b) => b.Key && b.Value);
                }
                else
                {
                    ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>();
                    ret.Dict.Overall = true;
                }
            }
            else
            {
                ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>();
                ret.Dict.Overall = false;
            }
            if (item.RefDict.HasBeenSet == rhs.RefDict.HasBeenSet)
            {
                if (item.RefDict.HasBeenSet)
                {
                    ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                    ret.RefDict.Specific = item.RefDict.SelectAgainst<KeyValuePair<ObjectToRef, ObjectToRef>, KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>(rhs.RefDict, ((l, r) =>
                    {
                        MaskItem<bool, ObjectToRef_Mask<bool>> keyItemRet;
                        MaskItem<bool, ObjectToRef_Mask<bool>> valItemRet;
                        keyItemRet = l.Key.LoquiEqualsHelper(r.Key, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        valItemRet = l.Value.LoquiEqualsHelper(r.Value, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>(keyItemRet, valItemRet);
                    }
                    ), out ret.RefDict.Overall);
                    ret.RefDict.Overall = ret.RefDict.Overall && ret.RefDict.Specific.All((b) => b.Key.Overall && b.Value.Overall );
                }
                else
                {
                    ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                    ret.RefDict.Overall = true;
                }
            }
            else
            {
                ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                ret.RefDict.Overall = false;
            }
            if (item.KeyRefDict.HasBeenSet == rhs.KeyRefDict.HasBeenSet)
            {
                if (item.KeyRefDict.HasBeenSet)
                {
                    ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>();
                    ret.KeyRefDict.Specific = item.KeyRefDict.SelectAgainst<KeyValuePair<ObjectToRef, Boolean>, KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>(rhs.KeyRefDict, ((l, r) =>
                    {
                        MaskItem<bool, ObjectToRef_Mask<bool>> keyItemRet;
                        bool valItemRet = object.Equals(l.Value, r.Value);
                        keyItemRet = l.Key.LoquiEqualsHelper(r.Key, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>(keyItemRet, valItemRet);
                    }
                    ), out ret.KeyRefDict.Overall);
                    ret.KeyRefDict.Overall = ret.KeyRefDict.Overall && ret.KeyRefDict.Specific.All((b) => b.Key.Overall && b.Value);
                }
                else
                {
                    ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>();
                    ret.KeyRefDict.Overall = true;
                }
            }
            else
            {
                ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>();
                ret.KeyRefDict.Overall = false;
            }
            if (item.ValRefDict.HasBeenSet == rhs.ValRefDict.HasBeenSet)
            {
                if (item.ValRefDict.HasBeenSet)
                {
                    ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                    ret.ValRefDict.Specific = item.ValRefDict.SelectAgainst<KeyValuePair<String, ObjectToRef>, KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>(rhs.ValRefDict, ((l, r) =>
                    {
                        bool keyItemRet = object.Equals(l.Key, r.Key);
                        MaskItem<bool, ObjectToRef_Mask<bool>> valItemRet;
                        valItemRet = l.Value.LoquiEqualsHelper(r.Value, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return new KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>(keyItemRet, valItemRet);
                    }
                    ), out ret.ValRefDict.Overall);
                    ret.ValRefDict.Overall = ret.ValRefDict.Overall && ret.ValRefDict.Specific.All((b) => b.Key && b.Value.Overall);
                }
                else
                {
                    ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                    ret.ValRefDict.Overall = true;
                }
            }
            else
            {
                ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
                ret.ValRefDict.Overall = false;
            }
            if (item.DictKeyedValue.HasBeenSet == rhs.DictKeyedValue.HasBeenSet)
            {
                if (item.DictKeyedValue.HasBeenSet)
                {
                    ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                    ret.DictKeyedValue.Specific = item.DictKeyedValue.Values.SelectAgainst<ObjectToRef, MaskItem<bool, ObjectToRef_Mask<bool>>>(rhs.DictKeyedValue.Values, ((l, r) =>
                    {
                        MaskItem<bool, ObjectToRef_Mask<bool>> itemRet;
                        itemRet = l.LoquiEqualsHelper(r, (loqLhs, loqRhs) => ObjectToRefCommon.GetEqualsMask(loqLhs, loqRhs));
                        return itemRet;
                    }
                    ), out ret.DictKeyedValue.Overall);
                    ret.DictKeyedValue.Overall = ret.DictKeyedValue.Overall && ret.DictKeyedValue.Specific.All((b) => b.Overall);
                }
                else
                {
                    ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                    ret.DictKeyedValue.Overall = true;
                }
            }
            else
            {
                ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
                ret.DictKeyedValue.Overall = false;
            }
        }

        public static string ToString(
            this ITestObject_Notifying_RPCGetter item,
            TestObject_Notifying_RPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITestObject_Notifying_RPCGetter item,
            FileGeneration fg,
            TestObject_Notifying_RPC_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestObject_Notifying_RPC)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.BoolN ?? true)
                {
                    fg.AppendLine($"BoolN => {item.BoolN}");
                }
                if (printMask?.Bool ?? true)
                {
                    fg.AppendLine($"Bool => {item.Bool}");
                }
                if (printMask?.CharN ?? true)
                {
                    fg.AppendLine($"CharN => {item.CharN}");
                }
                if (printMask?.Char ?? true)
                {
                    fg.AppendLine($"Char => {item.Char}");
                }
                if (printMask?.DateTimeNull ?? true)
                {
                    fg.AppendLine($"DateTimeNull => {item.DateTimeNull}");
                }
                if (printMask?.DateTime ?? true)
                {
                    fg.AppendLine($"DateTime => {item.DateTime}");
                }
                if (printMask?.DoubleN ?? true)
                {
                    fg.AppendLine($"DoubleN => {item.DoubleN}");
                }
                if (printMask?.DoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"DoubleN_Ranged => {item.DoubleN_Ranged}");
                }
                if (printMask?.Double ?? true)
                {
                    fg.AppendLine($"Double => {item.Double}");
                }
                if (printMask?.Double_Ranged ?? true)
                {
                    fg.AppendLine($"Double_Ranged => {item.Double_Ranged}");
                }
                if (printMask?.FloatN ?? true)
                {
                    fg.AppendLine($"FloatN => {item.FloatN}");
                }
                if (printMask?.FloatN_Ranged ?? true)
                {
                    fg.AppendLine($"FloatN_Ranged => {item.FloatN_Ranged}");
                }
                if (printMask?.Float ?? true)
                {
                    fg.AppendLine($"Float => {item.Float}");
                }
                if (printMask?.Float_Ranged ?? true)
                {
                    fg.AppendLine($"Float_Ranged => {item.Float_Ranged}");
                }
                if (printMask?.Int16N ?? true)
                {
                    fg.AppendLine($"Int16N => {item.Int16N}");
                }
                if (printMask?.Int16N_Ranged ?? true)
                {
                    fg.AppendLine($"Int16N_Ranged => {item.Int16N_Ranged}");
                }
                if (printMask?.Int16 ?? true)
                {
                    fg.AppendLine($"Int16 => {item.Int16}");
                }
                if (printMask?.Int16_Ranged ?? true)
                {
                    fg.AppendLine($"Int16_Ranged => {item.Int16_Ranged}");
                }
                if (printMask?.Int32N ?? true)
                {
                    fg.AppendLine($"Int32N => {item.Int32N}");
                }
                if (printMask?.Int32N_Ranged ?? true)
                {
                    fg.AppendLine($"Int32N_Ranged => {item.Int32N_Ranged}");
                }
                if (printMask?.Int32 ?? true)
                {
                    fg.AppendLine($"Int32 => {item.Int32}");
                }
                if (printMask?.Int32_Ranged ?? true)
                {
                    fg.AppendLine($"Int32_Ranged => {item.Int32_Ranged}");
                }
                if (printMask?.Int64N ?? true)
                {
                    fg.AppendLine($"Int64N => {item.Int64N}");
                }
                if (printMask?.Int64N_Ranged ?? true)
                {
                    fg.AppendLine($"Int64N_Ranged => {item.Int64N_Ranged}");
                }
                if (printMask?.Int64 ?? true)
                {
                    fg.AppendLine($"Int64 => {item.Int64}");
                }
                if (printMask?.Int64_Ranged ?? true)
                {
                    fg.AppendLine($"Int64_Ranged => {item.Int64_Ranged}");
                }
                if (printMask?.Int8N ?? true)
                {
                    fg.AppendLine($"Int8N => {item.Int8N}");
                }
                if (printMask?.Int8N_Ranged ?? true)
                {
                    fg.AppendLine($"Int8N_Ranged => {item.Int8N_Ranged}");
                }
                if (printMask?.Int8 ?? true)
                {
                    fg.AppendLine($"Int8 => {item.Int8}");
                }
                if (printMask?.Int8_Ranged ?? true)
                {
                    fg.AppendLine($"Int8_Ranged => {item.Int8_Ranged}");
                }
                if (printMask?.Unsafe ?? true)
                {
                    fg.AppendLine($"Unsafe => {item.Unsafe}");
                }
                if (printMask?.P2IntN ?? true)
                {
                    fg.AppendLine($"P2IntN => {item.P2IntN}");
                }
                if (printMask?.P2Int ?? true)
                {
                    fg.AppendLine($"P2Int => {item.P2Int}");
                }
                if (printMask?.P3DoubleN ?? true)
                {
                    fg.AppendLine($"P3DoubleN => {item.P3DoubleN}");
                }
                if (printMask?.P3Double ?? true)
                {
                    fg.AppendLine($"P3Double => {item.P3Double}");
                }
                if (printMask?.P3IntN ?? true)
                {
                    fg.AppendLine($"P3IntN => {item.P3IntN}");
                }
                if (printMask?.P3Int ?? true)
                {
                    fg.AppendLine($"P3Int => {item.P3Int}");
                }
                if (printMask?.PercentN ?? true)
                {
                    fg.AppendLine($"PercentN => {item.PercentN}");
                }
                if (printMask?.Percent ?? true)
                {
                    fg.AppendLine($"Percent => {item.Percent}");
                }
                if (printMask?.RangeInt8N ?? true)
                {
                    fg.AppendLine($"RangeInt8N => {item.RangeInt8N}");
                }
                if (printMask?.RangeInt8 ?? true)
                {
                    fg.AppendLine($"RangeInt8 => {item.RangeInt8}");
                }
                if (printMask?.RangeInt16N ?? true)
                {
                    fg.AppendLine($"RangeInt16N => {item.RangeInt16N}");
                }
                if (printMask?.RangeInt16 ?? true)
                {
                    fg.AppendLine($"RangeInt16 => {item.RangeInt16}");
                }
                if (printMask?.RangeInt32N ?? true)
                {
                    fg.AppendLine($"RangeInt32N => {item.RangeInt32N}");
                }
                if (printMask?.RangeInt32 ?? true)
                {
                    fg.AppendLine($"RangeInt32 => {item.RangeInt32}");
                }
                if (printMask?.RangeInt64N ?? true)
                {
                    fg.AppendLine($"RangeInt64N => {item.RangeInt64N}");
                }
                if (printMask?.RangeInt64 ?? true)
                {
                    fg.AppendLine($"RangeInt64 => {item.RangeInt64}");
                }
                if (printMask?.RangeUInt8N ?? true)
                {
                    fg.AppendLine($"RangeUInt8N => {item.RangeUInt8N}");
                }
                if (printMask?.RangeUInt8 ?? true)
                {
                    fg.AppendLine($"RangeUInt8 => {item.RangeUInt8}");
                }
                if (printMask?.RangeUInt16N ?? true)
                {
                    fg.AppendLine($"RangeUInt16N => {item.RangeUInt16N}");
                }
                if (printMask?.RangeUInt16 ?? true)
                {
                    fg.AppendLine($"RangeUInt16 => {item.RangeUInt16}");
                }
                if (printMask?.RangeUInt32N ?? true)
                {
                    fg.AppendLine($"RangeUInt32N => {item.RangeUInt32N}");
                }
                if (printMask?.RangeUInt32 ?? true)
                {
                    fg.AppendLine($"RangeUInt32 => {item.RangeUInt32}");
                }
                if (printMask?.RangeUInt64N ?? true)
                {
                    fg.AppendLine($"RangeUInt64N => {item.RangeUInt64N}");
                }
                if (printMask?.RangeUInt64 ?? true)
                {
                    fg.AppendLine($"RangeUInt64 => {item.RangeUInt64}");
                }
                if (printMask?.String ?? true)
                {
                    fg.AppendLine($"String => {item.String}");
                }
                if (printMask?.UDoubleN ?? true)
                {
                    fg.AppendLine($"UDoubleN => {item.UDoubleN}");
                }
                if (printMask?.UDoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"UDoubleN_Ranged => {item.UDoubleN_Ranged}");
                }
                if (printMask?.UDouble ?? true)
                {
                    fg.AppendLine($"UDouble => {item.UDouble}");
                }
                if (printMask?.UDouble_Ranged ?? true)
                {
                    fg.AppendLine($"UDouble_Ranged => {item.UDouble_Ranged}");
                }
                if (printMask?.UInt16N ?? true)
                {
                    fg.AppendLine($"UInt16N => {item.UInt16N}");
                }
                if (printMask?.UInt16N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16N_Ranged => {item.UInt16N_Ranged}");
                }
                if (printMask?.UInt16 ?? true)
                {
                    fg.AppendLine($"UInt16 => {item.UInt16}");
                }
                if (printMask?.UInt16_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16_Ranged => {item.UInt16_Ranged}");
                }
                if (printMask?.UInt32N ?? true)
                {
                    fg.AppendLine($"UInt32N => {item.UInt32N}");
                }
                if (printMask?.UInt32N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32N_Ranged => {item.UInt32N_Ranged}");
                }
                if (printMask?.UInt32 ?? true)
                {
                    fg.AppendLine($"UInt32 => {item.UInt32}");
                }
                if (printMask?.UInt32_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32_Ranged => {item.UInt32_Ranged}");
                }
                if (printMask?.UInt64N ?? true)
                {
                    fg.AppendLine($"UInt64N => {item.UInt64N}");
                }
                if (printMask?.UInt64N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64N_Ranged => {item.UInt64N_Ranged}");
                }
                if (printMask?.UInt64 ?? true)
                {
                    fg.AppendLine($"UInt64 => {item.UInt64}");
                }
                if (printMask?.UInt64_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64_Ranged => {item.UInt64_Ranged}");
                }
                if (printMask?.UInt8N ?? true)
                {
                    fg.AppendLine($"UInt8N => {item.UInt8N}");
                }
                if (printMask?.UInt8N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8N_Ranged => {item.UInt8N_Ranged}");
                }
                if (printMask?.UInt8 ?? true)
                {
                    fg.AppendLine($"UInt8 => {item.UInt8}");
                }
                if (printMask?.UInt8_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8_Ranged => {item.UInt8_Ranged}");
                }
                if (printMask?.Enum ?? true)
                {
                    fg.AppendLine($"Enum => {item.Enum}");
                }
                if (printMask?.EnumNull ?? true)
                {
                    fg.AppendLine($"EnumNull => {item.EnumNull}");
                }
                if (printMask?.WildCard ?? true)
                {
                    fg.AppendLine($"WildCard => {item.WildCard}");
                }
                if (printMask?.WildCardNull ?? true)
                {
                    fg.AppendLine($"WildCardNull => {item.WildCardNull}");
                }
                if (printMask?.Ref?.Overall ?? true)
                {
                    item.Ref.ToString(fg);
                }
                if (printMask?.Ref_NotNull?.Overall ?? true)
                {
                    item.Ref_NotNull.ToString(fg);
                }
                if (printMask?.Ref_Singleton?.Overall ?? true)
                {
                    item.Ref_Singleton.ToString(fg);
                }
                if (printMask?.RefGetter?.Overall ?? true)
                {
                    item.RefGetter.ToString(fg);
                }
                if (printMask?.RefGetter_NotNull?.Overall ?? true)
                {
                    item.RefGetter_NotNull.ToString(fg);
                }
                if (printMask?.RefGetter_Singleton?.Overall ?? true)
                {
                    item.RefGetter_Singleton.ToString(fg);
                }
                if (printMask?.RefSetter?.Overall ?? true)
                {
                    item.RefSetter.ToString(fg);
                }
                if (printMask?.RefSetter_NotNull?.Overall ?? true)
                {
                    item.RefSetter_NotNull.ToString(fg);
                }
                if (printMask?.RefSetter_Singleton?.Overall ?? true)
                {
                    item.RefSetter_Singleton.ToString(fg);
                }
                if (printMask?.List?.Overall ?? true)
                {
                    throw new NotImplementedException();
                }
                if (printMask?.RefList?.Overall ?? true)
                {
                    throw new NotImplementedException();
                }
                if (printMask?.Dict?.Overall ?? true)
                {
                    throw new NotImplementedException();
                }
                if (printMask?.RefDict?.Overall ?? true)
                {
                    throw new NotImplementedException();
                }
                if (printMask?.KeyRefDict?.Overall ?? true)
                {
                    throw new NotImplementedException();
                }
                if (printMask?.ValRefDict?.Overall ?? true)
                {
                    throw new NotImplementedException();
                }
                if (printMask?.DictKeyedValue?.Overall ?? true)
                {
                    throw new NotImplementedException();
                }
            }
            fg.AppendLine("]");
        }
        #region XML Translation
        #region XML Write
        public static void Write_XML(
            ITestObject_Notifying_RPCGetter item,
            Stream stream)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: false,
                    errorMask: out TestObject_Notifying_RPC_ErrorMask errorMask);
            }
        }

        public static void Write_XML(
            ITestObject_Notifying_RPCGetter item,
            Stream stream,
            out TestObject_Notifying_RPC_ErrorMask errorMask)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: null,
                    item: item,
                    doMasks: true,
                    errorMask: out errorMask);
            }
        }

        public static void Write_XML(
            XmlWriter writer,
            string name,
            ITestObject_Notifying_RPCGetter item,
            bool doMasks,
            out TestObject_Notifying_RPC_ErrorMask errorMask)
        {
            TestObject_Notifying_RPC_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                doMasks: doMasks,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestObject_Notifying_RPC_ErrorMask()) : default(Func<TestObject_Notifying_RPC_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            string name,
            ITestObject_Notifying_RPCGetter item,
            bool doMasks,
            Func<TestObject_Notifying_RPC_ErrorMask> errorMask)
        {
            try
            {
                using (new ElementWrapper(writer, nameof(TestObject_Notifying_RPC)))
                {
                    if (!string.IsNullOrEmpty(name))
                    {
                        writer.WriteAttributeString("name", name);
                    }
                    if (item.BoolN_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.BoolN_Property.HasBeenSet)
                            {
                                BooleanXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.BoolN),
                                    item.BoolN);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.BoolN, ex);
                        }
                    }
                    if (item.Bool_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Bool_Property.HasBeenSet)
                            {
                                BooleanXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Bool),
                                    item.Bool);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Bool, ex);
                        }
                    }
                    if (item.CharN_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.CharN_Property.HasBeenSet)
                            {
                                CharXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.CharN),
                                    item.CharN);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.CharN, ex);
                        }
                    }
                    if (item.Char_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Char_Property.HasBeenSet)
                            {
                                CharXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Char),
                                    item.Char);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Char, ex);
                        }
                    }
                    if (item.DateTimeNull_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.DateTimeNull_Property.HasBeenSet)
                            {
                                DateTimeXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.DateTimeNull),
                                    item.DateTimeNull);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DateTimeNull, ex);
                        }
                    }
                    if (item.DateTime_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.DateTime_Property.HasBeenSet)
                            {
                                DateTimeXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.DateTime),
                                    item.DateTime);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DateTime, ex);
                        }
                    }
                    if (item.DoubleN_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.DoubleN_Property.HasBeenSet)
                            {
                                DoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.DoubleN),
                                    item.DoubleN);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DoubleN, ex);
                        }
                    }
                    if (item.DoubleN_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.DoubleN_Ranged_Property.HasBeenSet)
                            {
                                DoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.DoubleN_Ranged),
                                    item.DoubleN_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged, ex);
                        }
                    }
                    if (item.Double_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Double_Property.HasBeenSet)
                            {
                                DoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Double),
                                    item.Double);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Double, ex);
                        }
                    }
                    if (item.Double_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Double_Ranged_Property.HasBeenSet)
                            {
                                DoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Double_Ranged),
                                    item.Double_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Double_Ranged, ex);
                        }
                    }
                    if (item.FloatN_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.FloatN_Property.HasBeenSet)
                            {
                                FloatXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.FloatN),
                                    item.FloatN);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.FloatN, ex);
                        }
                    }
                    if (item.FloatN_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.FloatN_Ranged_Property.HasBeenSet)
                            {
                                FloatXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.FloatN_Ranged),
                                    item.FloatN_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged, ex);
                        }
                    }
                    if (item.Float_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Float_Property.HasBeenSet)
                            {
                                FloatXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Float),
                                    item.Float);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Float, ex);
                        }
                    }
                    if (item.Float_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Float_Ranged_Property.HasBeenSet)
                            {
                                FloatXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Float_Ranged),
                                    item.Float_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Float_Ranged, ex);
                        }
                    }
                    if (item.Int16N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int16N_Property.HasBeenSet)
                            {
                                Int16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int16N),
                                    item.Int16N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16N, ex);
                        }
                    }
                    if (item.Int16N_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int16N_Ranged_Property.HasBeenSet)
                            {
                                Int16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int16N_Ranged),
                                    item.Int16N_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged, ex);
                        }
                    }
                    if (item.Int16_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int16_Property.HasBeenSet)
                            {
                                Int16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int16),
                                    item.Int16);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16, ex);
                        }
                    }
                    if (item.Int16_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int16_Ranged_Property.HasBeenSet)
                            {
                                Int16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int16_Ranged),
                                    item.Int16_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int16_Ranged, ex);
                        }
                    }
                    if (item.Int32N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int32N_Property.HasBeenSet)
                            {
                                Int32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int32N),
                                    item.Int32N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32N, ex);
                        }
                    }
                    if (item.Int32N_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int32N_Ranged_Property.HasBeenSet)
                            {
                                Int32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int32N_Ranged),
                                    item.Int32N_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged, ex);
                        }
                    }
                    if (item.Int32_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int32_Property.HasBeenSet)
                            {
                                Int32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int32),
                                    item.Int32);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32, ex);
                        }
                    }
                    if (item.Int32_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int32_Ranged_Property.HasBeenSet)
                            {
                                Int32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int32_Ranged),
                                    item.Int32_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int32_Ranged, ex);
                        }
                    }
                    if (item.Int64N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int64N_Property.HasBeenSet)
                            {
                                Int64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int64N),
                                    item.Int64N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64N, ex);
                        }
                    }
                    if (item.Int64N_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int64N_Ranged_Property.HasBeenSet)
                            {
                                Int64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int64N_Ranged),
                                    item.Int64N_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged, ex);
                        }
                    }
                    if (item.Int64_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int64_Property.HasBeenSet)
                            {
                                Int64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int64),
                                    item.Int64);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64, ex);
                        }
                    }
                    if (item.Int64_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int64_Ranged_Property.HasBeenSet)
                            {
                                Int64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int64_Ranged),
                                    item.Int64_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int64_Ranged, ex);
                        }
                    }
                    if (item.Int8N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int8N_Property.HasBeenSet)
                            {
                                Int8XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int8N),
                                    item.Int8N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8N, ex);
                        }
                    }
                    if (item.Int8N_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int8N_Ranged_Property.HasBeenSet)
                            {
                                Int8XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int8N_Ranged),
                                    item.Int8N_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged, ex);
                        }
                    }
                    if (item.Int8_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int8_Property.HasBeenSet)
                            {
                                Int8XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int8),
                                    item.Int8);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8, ex);
                        }
                    }
                    if (item.Int8_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Int8_Ranged_Property.HasBeenSet)
                            {
                                Int8XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Int8_Ranged),
                                    item.Int8_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Int8_Ranged, ex);
                        }
                    }
                    if (item.Unsafe_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Unsafe_Property.HasBeenSet)
                            {
                                var wildType = item.Unsafe == null ? null : item.Unsafe.GetType();
                                var transl = XmlTranslator.GetTranslator(wildType);
                                if (transl?.Item.Failed ?? true)
                                {
                                    throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                                }
                                transl.Item.Value.Write(
                                    writer,
                                    nameof(item.Unsafe),
                                    item.Unsafe,
                                    doMasks,
                                    out object suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Unsafe, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Unsafe, ex);
                        }
                    }
                    if (item.P2IntN_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.P2IntN_Property.HasBeenSet)
                            {
                                P2IntXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.P2IntN),
                                    item.P2IntN);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P2IntN, ex);
                        }
                    }
                    if (item.P2Int_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.P2Int_Property.HasBeenSet)
                            {
                                P2IntXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.P2Int),
                                    item.P2Int);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P2Int, ex);
                        }
                    }
                    if (item.P3DoubleN_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.P3DoubleN_Property.HasBeenSet)
                            {
                                P3DoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.P3DoubleN),
                                    item.P3DoubleN);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3DoubleN, ex);
                        }
                    }
                    if (item.P3Double_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.P3Double_Property.HasBeenSet)
                            {
                                P3DoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.P3Double),
                                    item.P3Double);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3Double, ex);
                        }
                    }
                    if (item.P3IntN_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.P3IntN_Property.HasBeenSet)
                            {
                                P3IntXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.P3IntN),
                                    item.P3IntN);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3IntN, ex);
                        }
                    }
                    if (item.P3Int_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.P3Int_Property.HasBeenSet)
                            {
                                P3IntXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.P3Int),
                                    item.P3Int);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.P3Int, ex);
                        }
                    }
                    if (item.PercentN_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.PercentN_Property.HasBeenSet)
                            {
                                PercentXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.PercentN),
                                    item.PercentN);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.PercentN, ex);
                        }
                    }
                    if (item.Percent_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Percent_Property.HasBeenSet)
                            {
                                PercentXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.Percent),
                                    item.Percent);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Percent, ex);
                        }
                    }
                    if (item.RangeInt8N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeInt8N_Property.HasBeenSet)
                            {
                                RangeInt8XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeInt8N),
                                    item.RangeInt8N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt8N, ex);
                        }
                    }
                    if (item.RangeInt8_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeInt8_Property.HasBeenSet)
                            {
                                RangeInt8XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeInt8),
                                    item.RangeInt8);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt8, ex);
                        }
                    }
                    if (item.RangeInt16N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeInt16N_Property.HasBeenSet)
                            {
                                RangeInt16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeInt16N),
                                    item.RangeInt16N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt16N, ex);
                        }
                    }
                    if (item.RangeInt16_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeInt16_Property.HasBeenSet)
                            {
                                RangeInt16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeInt16),
                                    item.RangeInt16);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt16, ex);
                        }
                    }
                    if (item.RangeInt32N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeInt32N_Property.HasBeenSet)
                            {
                                RangeInt32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeInt32N),
                                    item.RangeInt32N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt32N, ex);
                        }
                    }
                    if (item.RangeInt32_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeInt32_Property.HasBeenSet)
                            {
                                RangeInt32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeInt32),
                                    item.RangeInt32);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt32, ex);
                        }
                    }
                    if (item.RangeInt64N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeInt64N_Property.HasBeenSet)
                            {
                                RangeInt64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeInt64N),
                                    item.RangeInt64N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt64N, ex);
                        }
                    }
                    if (item.RangeInt64_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeInt64_Property.HasBeenSet)
                            {
                                RangeInt64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeInt64),
                                    item.RangeInt64);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeInt64, ex);
                        }
                    }
                    if (item.RangeUInt8N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeUInt8N_Property.HasBeenSet)
                            {
                                RangeUInt8XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeUInt8N),
                                    item.RangeUInt8N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt8N, ex);
                        }
                    }
                    if (item.RangeUInt8_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeUInt8_Property.HasBeenSet)
                            {
                                RangeUInt8XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeUInt8),
                                    item.RangeUInt8);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt8, ex);
                        }
                    }
                    if (item.RangeUInt16N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeUInt16N_Property.HasBeenSet)
                            {
                                RangeUInt16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeUInt16N),
                                    item.RangeUInt16N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt16N, ex);
                        }
                    }
                    if (item.RangeUInt16_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeUInt16_Property.HasBeenSet)
                            {
                                RangeUInt16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeUInt16),
                                    item.RangeUInt16);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt16, ex);
                        }
                    }
                    if (item.RangeUInt32N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeUInt32N_Property.HasBeenSet)
                            {
                                RangeUInt32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeUInt32N),
                                    item.RangeUInt32N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt32N, ex);
                        }
                    }
                    if (item.RangeUInt32_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeUInt32_Property.HasBeenSet)
                            {
                                RangeUInt32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeUInt32),
                                    item.RangeUInt32);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt32, ex);
                        }
                    }
                    if (item.RangeUInt64N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeUInt64N_Property.HasBeenSet)
                            {
                                RangeUInt64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeUInt64N),
                                    item.RangeUInt64N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt64N, ex);
                        }
                    }
                    if (item.RangeUInt64_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RangeUInt64_Property.HasBeenSet)
                            {
                                RangeUInt64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.RangeUInt64),
                                    item.RangeUInt64);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RangeUInt64, ex);
                        }
                    }
                    if (item.String_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.String_Property.HasBeenSet)
                            {
                                StringXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.String),
                                    item.String);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.String, ex);
                        }
                    }
                    if (item.UDoubleN_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UDoubleN_Property.HasBeenSet)
                            {
                                UDoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UDoubleN),
                                    item.UDoubleN);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDoubleN, ex);
                        }
                    }
                    if (item.UDoubleN_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UDoubleN_Ranged_Property.HasBeenSet)
                            {
                                UDoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UDoubleN_Ranged),
                                    item.UDoubleN_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged, ex);
                        }
                    }
                    if (item.UDouble_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UDouble_Property.HasBeenSet)
                            {
                                UDoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UDouble),
                                    item.UDouble);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDouble, ex);
                        }
                    }
                    if (item.UDouble_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UDouble_Ranged_Property.HasBeenSet)
                            {
                                UDoubleXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UDouble_Ranged),
                                    item.UDouble_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged, ex);
                        }
                    }
                    if (item.UInt16N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt16N_Property.HasBeenSet)
                            {
                                UInt16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt16N),
                                    item.UInt16N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16N, ex);
                        }
                    }
                    if (item.UInt16N_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt16N_Ranged_Property.HasBeenSet)
                            {
                                UInt16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt16N_Ranged),
                                    item.UInt16N_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged, ex);
                        }
                    }
                    if (item.UInt16_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt16_Property.HasBeenSet)
                            {
                                UInt16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt16),
                                    item.UInt16);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16, ex);
                        }
                    }
                    if (item.UInt16_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt16_Ranged_Property.HasBeenSet)
                            {
                                UInt16XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt16_Ranged),
                                    item.UInt16_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged, ex);
                        }
                    }
                    if (item.UInt32N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt32N_Property.HasBeenSet)
                            {
                                UInt32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt32N),
                                    item.UInt32N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32N, ex);
                        }
                    }
                    if (item.UInt32N_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt32N_Ranged_Property.HasBeenSet)
                            {
                                UInt32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt32N_Ranged),
                                    item.UInt32N_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged, ex);
                        }
                    }
                    if (item.UInt32_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt32_Property.HasBeenSet)
                            {
                                UInt32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt32),
                                    item.UInt32);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32, ex);
                        }
                    }
                    if (item.UInt32_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt32_Ranged_Property.HasBeenSet)
                            {
                                UInt32XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt32_Ranged),
                                    item.UInt32_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged, ex);
                        }
                    }
                    if (item.UInt64N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt64N_Property.HasBeenSet)
                            {
                                UInt64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt64N),
                                    item.UInt64N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64N, ex);
                        }
                    }
                    if (item.UInt64N_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt64N_Ranged_Property.HasBeenSet)
                            {
                                UInt64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt64N_Ranged),
                                    item.UInt64N_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged, ex);
                        }
                    }
                    if (item.UInt64_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt64_Property.HasBeenSet)
                            {
                                UInt64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt64),
                                    item.UInt64);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64, ex);
                        }
                    }
                    if (item.UInt64_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt64_Ranged_Property.HasBeenSet)
                            {
                                UInt64XmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt64_Ranged),
                                    item.UInt64_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged, ex);
                        }
                    }
                    if (item.UInt8N_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt8N_Property.HasBeenSet)
                            {
                                ByteXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt8N),
                                    item.UInt8N);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8N, ex);
                        }
                    }
                    if (item.UInt8N_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt8N_Ranged_Property.HasBeenSet)
                            {
                                ByteXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt8N_Ranged),
                                    item.UInt8N_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged, ex);
                        }
                    }
                    if (item.UInt8_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt8_Property.HasBeenSet)
                            {
                                ByteXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt8),
                                    item.UInt8);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8, ex);
                        }
                    }
                    if (item.UInt8_Ranged_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.UInt8_Ranged_Property.HasBeenSet)
                            {
                                ByteXmlTranslation.Instance.Write(
                                    writer,
                                    nameof(item.UInt8_Ranged),
                                    item.UInt8_Ranged);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged, ex);
                        }
                    }
                    if (item.Enum_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Enum_Property.HasBeenSet)
                            {
                                EnumXmlTranslation<TestEnum>.Instance.Write(
                                    writer,
                                    nameof(item.Enum),
                                    item.Enum);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Enum, ex);
                        }
                    }
                    if (item.EnumNull_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.EnumNull_Property.HasBeenSet)
                            {
                                EnumXmlTranslation<TestEnum>.Instance.Write(
                                    writer,
                                    nameof(item.EnumNull),
                                    item.EnumNull);
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.EnumNull, ex);
                        }
                    }
                    if (item.WildCard_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.WildCard_Property.HasBeenSet)
                            {
                                var wildType = item.WildCard == null ? null : item.WildCard.GetType();
                                var transl = XmlTranslator.GetTranslator(wildType);
                                if (transl?.Item.Failed ?? true)
                                {
                                    throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                                }
                                transl.Item.Value.Write(
                                    writer,
                                    nameof(item.WildCard),
                                    item.WildCard,
                                    doMasks,
                                    out object suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.WildCard, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.WildCard, ex);
                        }
                    }
                    if (item.WildCardNull_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.WildCardNull_Property.HasBeenSet)
                            {
                                var wildType = item.WildCardNull == null ? null : item.WildCardNull.GetType();
                                var transl = XmlTranslator.GetTranslator(wildType);
                                if (transl?.Item.Failed ?? true)
                                {
                                    throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                                }
                                transl.Item.Value.Write(
                                    writer,
                                    nameof(item.WildCardNull),
                                    item.WildCardNull,
                                    doMasks,
                                    out object suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.WildCardNull, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.WildCardNull, ex);
                        }
                    }
                    if (item.Ref_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Ref_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.Ref,
                                    name: nameof(item.Ref),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Ref, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Ref, ex);
                        }
                    }
                    if (item.Ref_NotNull_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Ref_NotNull_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.Ref_NotNull,
                                    name: nameof(item.Ref_NotNull),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_NotNull, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_NotNull, ex);
                        }
                    }
                    if (item.Ref_Singleton_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.Ref_Singleton_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.Ref_Singleton,
                                    name: nameof(item.Ref_Singleton),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_Singleton, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Ref_Singleton, ex);
                        }
                    }
                    if (item.RefGetter_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RefGetter_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.RefGetter,
                                    name: nameof(item.RefGetter),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter, ex);
                        }
                    }
                    if (item.RefGetter_NotNull_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RefGetter_NotNull_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.RefGetter_NotNull,
                                    name: nameof(item.RefGetter_NotNull),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull, ex);
                        }
                    }
                    if (item.RefGetter_Singleton_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RefGetter_Singleton_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.RefGetter_Singleton,
                                    name: nameof(item.RefGetter_Singleton),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton, ex);
                        }
                    }
                    if (item.RefSetter_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RefSetter_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.RefSetter,
                                    name: nameof(item.RefSetter),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter, ex);
                        }
                    }
                    if (item.RefSetter_NotNull_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RefSetter_NotNull_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.RefSetter_NotNull,
                                    name: nameof(item.RefSetter_NotNull),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull, ex);
                        }
                    }
                    if (item.RefSetter_Singleton_Property.HasBeenSet)
                    {
                        try
                        {
                            if (item.RefSetter_Singleton_Property.HasBeenSet)
                            {
                                ObjectToRefCommon.Write_XML(
                                    writer: writer,
                                    item: item.RefSetter_Singleton,
                                    name: nameof(item.RefSetter_Singleton),
                                    doMasks: doMasks,
                                    errorMask: out ObjectToRef_ErrorMask suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton, new MaskItem<Exception, ObjectToRef_ErrorMask>(null, suberrorMask));
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton, ex);
                        }
                    }
                    if (item.List.HasBeenSet)
                    {
                        try
                        {
                            if (item.List.HasBeenSet)
                            {
                                ListXmlTranslation<Boolean>.Instance.Write(
                                    writer: writer,
                                    name: nameof(item.List),
                                    item: item.List,
                                    doMasks: doMasks,
                                    maskObj: out object errorMaskObj,
                                    transl: (Boolean subItem, out object subMask) =>
                                    {
                                        BooleanXmlTranslation.Instance.Write(
                                            writer,
                                            null,
                                            subItem);
                                        subMask = null;
                                    }
                                    );
                                if (errorMaskObj != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.List, errorMaskObj);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.List, ex);
                        }
                    }
                    if (item.RefList.HasBeenSet)
                    {
                        try
                        {
                            if (item.RefList.HasBeenSet)
                            {
                                ListXmlTranslation<ObjectToRef>.Instance.Write(
                                    writer: writer,
                                    name: nameof(item.RefList),
                                    item: item.RefList,
                                    doMasks: doMasks,
                                    maskObj: out object errorMaskObj,
                                    transl: (ObjectToRef subItem, out object subMask) =>
                                    {
                                        ObjectToRefCommon.Write_XML(
                                            writer: writer,
                                            item: subItem,
                                            name: null,
                                            doMasks: doMasks,
                                            errorMask: out ObjectToRef_ErrorMask subsubMask);
                                        subMask = subsubMask;
                                    }
                                    );
                                if (errorMaskObj != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefList, errorMaskObj);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefList, ex);
                        }
                    }
                    if (item.Dict.HasBeenSet)
                    {
                        try
                        {
                            if (item.Dict.HasBeenSet)
                            {
                                var wildType = item.Dict == null ? null : item.Dict.GetType();
                                var transl = XmlTranslator.GetTranslator(wildType);
                                if (transl?.Item.Failed ?? true)
                                {
                                    throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                                }
                                transl.Item.Value.Write(
                                    writer,
                                    nameof(item.Dict),
                                    item.Dict,
                                    doMasks,
                                    out object suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.Dict, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.Dict, ex);
                        }
                    }
                    if (item.RefDict.HasBeenSet)
                    {
                        try
                        {
                            if (item.RefDict.HasBeenSet)
                            {
                                var wildType = item.RefDict == null ? null : item.RefDict.GetType();
                                var transl = XmlTranslator.GetTranslator(wildType);
                                if (transl?.Item.Failed ?? true)
                                {
                                    throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                                }
                                transl.Item.Value.Write(
                                    writer,
                                    nameof(item.RefDict),
                                    item.RefDict,
                                    doMasks,
                                    out object suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.RefDict, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.RefDict, ex);
                        }
                    }
                    if (item.KeyRefDict.HasBeenSet)
                    {
                        try
                        {
                            if (item.KeyRefDict.HasBeenSet)
                            {
                                var wildType = item.KeyRefDict == null ? null : item.KeyRefDict.GetType();
                                var transl = XmlTranslator.GetTranslator(wildType);
                                if (transl?.Item.Failed ?? true)
                                {
                                    throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                                }
                                transl.Item.Value.Write(
                                    writer,
                                    nameof(item.KeyRefDict),
                                    item.KeyRefDict,
                                    doMasks,
                                    out object suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.KeyRefDict, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.KeyRefDict, ex);
                        }
                    }
                    if (item.ValRefDict.HasBeenSet)
                    {
                        try
                        {
                            if (item.ValRefDict.HasBeenSet)
                            {
                                var wildType = item.ValRefDict == null ? null : item.ValRefDict.GetType();
                                var transl = XmlTranslator.GetTranslator(wildType);
                                if (transl?.Item.Failed ?? true)
                                {
                                    throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                                }
                                transl.Item.Value.Write(
                                    writer,
                                    nameof(item.ValRefDict),
                                    item.ValRefDict,
                                    doMasks,
                                    out object suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.ValRefDict, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.ValRefDict, ex);
                        }
                    }
                    if (item.DictKeyedValue.HasBeenSet)
                    {
                        try
                        {
                            if (item.DictKeyedValue.HasBeenSet)
                            {
                                var wildType = item.DictKeyedValue == null ? null : item.DictKeyedValue.GetType();
                                var transl = XmlTranslator.GetTranslator(wildType);
                                if (transl?.Item.Failed ?? true)
                                {
                                    throw new ArgumentException($"Failed to get translator for {wildType}. {transl?.Item.Reason}");
                                }
                                transl.Item.Value.Write(
                                    writer,
                                    nameof(item.DictKeyedValue),
                                    item.DictKeyedValue,
                                    doMasks,
                                    out object suberrorMask);
                                if (suberrorMask != null)
                                {
                                    errorMask().SetNthMask((ushort)TestObject_Notifying_RPC_FieldIndex.DictKeyedValue, suberrorMask);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            if (!doMasks) throw;
                            errorMask().SetNthException((ushort)TestObject_Notifying_RPC_FieldIndex.DictKeyedValue, ex);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (!doMasks) throw;
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestObject_Notifying_RPC_Mask<T> : IMask<T>
    {
        #region Members
        public T BoolN;
        public T Bool;
        public T CharN;
        public T Char;
        public T DateTimeNull;
        public T DateTime;
        public T DoubleN;
        public T DoubleN_Ranged;
        public T Double;
        public T Double_Ranged;
        public T FloatN;
        public T FloatN_Ranged;
        public T Float;
        public T Float_Ranged;
        public T Int16N;
        public T Int16N_Ranged;
        public T Int16;
        public T Int16_Ranged;
        public T Int32N;
        public T Int32N_Ranged;
        public T Int32;
        public T Int32_Ranged;
        public T Int64N;
        public T Int64N_Ranged;
        public T Int64;
        public T Int64_Ranged;
        public T Int8N;
        public T Int8N_Ranged;
        public T Int8;
        public T Int8_Ranged;
        public T Unsafe;
        public T P2IntN;
        public T P2Int;
        public T P3DoubleN;
        public T P3Double;
        public T P3IntN;
        public T P3Int;
        public T PercentN;
        public T Percent;
        public T RangeInt8N;
        public T RangeInt8;
        public T RangeInt16N;
        public T RangeInt16;
        public T RangeInt32N;
        public T RangeInt32;
        public T RangeInt64N;
        public T RangeInt64;
        public T RangeUInt8N;
        public T RangeUInt8;
        public T RangeUInt16N;
        public T RangeUInt16;
        public T RangeUInt32N;
        public T RangeUInt32;
        public T RangeUInt64N;
        public T RangeUInt64;
        public T String;
        public T UDoubleN;
        public T UDoubleN_Ranged;
        public T UDouble;
        public T UDouble_Ranged;
        public T UInt16N;
        public T UInt16N_Ranged;
        public T UInt16;
        public T UInt16_Ranged;
        public T UInt32N;
        public T UInt32N_Ranged;
        public T UInt32;
        public T UInt32_Ranged;
        public T UInt64N;
        public T UInt64N_Ranged;
        public T UInt64;
        public T UInt64_Ranged;
        public T UInt8N;
        public T UInt8N_Ranged;
        public T UInt8;
        public T UInt8_Ranged;
        public T Enum;
        public T EnumNull;
        public T WildCard;
        public T WildCardNull;
        public MaskItem<T, ObjectToRef_Mask<T>> Ref { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_Singleton { get; set; }
        public MaskItem<T, IEnumerable<T>> List;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> RefList;
        public MaskItem<T, IEnumerable<KeyValuePair<T, T>>> Dict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>> RefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, T>>> KeyRefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<T, MaskItem<T, ObjectToRef_Mask<T>>>>> ValRefDict;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> DictKeyedValue;
        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.BoolN)) return false;
            if (!eval(this.Bool)) return false;
            if (!eval(this.CharN)) return false;
            if (!eval(this.Char)) return false;
            if (!eval(this.DateTimeNull)) return false;
            if (!eval(this.DateTime)) return false;
            if (!eval(this.DoubleN)) return false;
            if (!eval(this.DoubleN_Ranged)) return false;
            if (!eval(this.Double)) return false;
            if (!eval(this.Double_Ranged)) return false;
            if (!eval(this.FloatN)) return false;
            if (!eval(this.FloatN_Ranged)) return false;
            if (!eval(this.Float)) return false;
            if (!eval(this.Float_Ranged)) return false;
            if (!eval(this.Int16N)) return false;
            if (!eval(this.Int16N_Ranged)) return false;
            if (!eval(this.Int16)) return false;
            if (!eval(this.Int16_Ranged)) return false;
            if (!eval(this.Int32N)) return false;
            if (!eval(this.Int32N_Ranged)) return false;
            if (!eval(this.Int32)) return false;
            if (!eval(this.Int32_Ranged)) return false;
            if (!eval(this.Int64N)) return false;
            if (!eval(this.Int64N_Ranged)) return false;
            if (!eval(this.Int64)) return false;
            if (!eval(this.Int64_Ranged)) return false;
            if (!eval(this.Int8N)) return false;
            if (!eval(this.Int8N_Ranged)) return false;
            if (!eval(this.Int8)) return false;
            if (!eval(this.Int8_Ranged)) return false;
            if (!eval(this.Unsafe)) return false;
            if (!eval(this.P2IntN)) return false;
            if (!eval(this.P2Int)) return false;
            if (!eval(this.P3DoubleN)) return false;
            if (!eval(this.P3Double)) return false;
            if (!eval(this.P3IntN)) return false;
            if (!eval(this.P3Int)) return false;
            if (!eval(this.PercentN)) return false;
            if (!eval(this.Percent)) return false;
            if (!eval(this.RangeInt8N)) return false;
            if (!eval(this.RangeInt8)) return false;
            if (!eval(this.RangeInt16N)) return false;
            if (!eval(this.RangeInt16)) return false;
            if (!eval(this.RangeInt32N)) return false;
            if (!eval(this.RangeInt32)) return false;
            if (!eval(this.RangeInt64N)) return false;
            if (!eval(this.RangeInt64)) return false;
            if (!eval(this.RangeUInt8N)) return false;
            if (!eval(this.RangeUInt8)) return false;
            if (!eval(this.RangeUInt16N)) return false;
            if (!eval(this.RangeUInt16)) return false;
            if (!eval(this.RangeUInt32N)) return false;
            if (!eval(this.RangeUInt32)) return false;
            if (!eval(this.RangeUInt64N)) return false;
            if (!eval(this.RangeUInt64)) return false;
            if (!eval(this.String)) return false;
            if (!eval(this.UDoubleN)) return false;
            if (!eval(this.UDoubleN_Ranged)) return false;
            if (!eval(this.UDouble)) return false;
            if (!eval(this.UDouble_Ranged)) return false;
            if (!eval(this.UInt16N)) return false;
            if (!eval(this.UInt16N_Ranged)) return false;
            if (!eval(this.UInt16)) return false;
            if (!eval(this.UInt16_Ranged)) return false;
            if (!eval(this.UInt32N)) return false;
            if (!eval(this.UInt32N_Ranged)) return false;
            if (!eval(this.UInt32)) return false;
            if (!eval(this.UInt32_Ranged)) return false;
            if (!eval(this.UInt64N)) return false;
            if (!eval(this.UInt64N_Ranged)) return false;
            if (!eval(this.UInt64)) return false;
            if (!eval(this.UInt64_Ranged)) return false;
            if (!eval(this.UInt8N)) return false;
            if (!eval(this.UInt8N_Ranged)) return false;
            if (!eval(this.UInt8)) return false;
            if (!eval(this.UInt8_Ranged)) return false;
            if (!eval(this.Enum)) return false;
            if (!eval(this.EnumNull)) return false;
            if (!eval(this.WildCard)) return false;
            if (!eval(this.WildCardNull)) return false;
            if (Ref != null)
            {
                if (!eval(this.Ref.Overall)) return false;
                if (Ref.Specific != null && !Ref.Specific.AllEqual(eval)) return false;
            }
            if (Ref_NotNull != null)
            {
                if (!eval(this.Ref_NotNull.Overall)) return false;
                if (Ref_NotNull.Specific != null && !Ref_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (Ref_Singleton != null)
            {
                if (!eval(this.Ref_Singleton.Overall)) return false;
                if (Ref_Singleton.Specific != null && !Ref_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter != null)
            {
                if (!eval(this.RefGetter.Overall)) return false;
                if (RefGetter.Specific != null && !RefGetter.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter_NotNull != null)
            {
                if (!eval(this.RefGetter_NotNull.Overall)) return false;
                if (RefGetter_NotNull.Specific != null && !RefGetter_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter_Singleton != null)
            {
                if (!eval(this.RefGetter_Singleton.Overall)) return false;
                if (RefGetter_Singleton.Specific != null && !RefGetter_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter != null)
            {
                if (!eval(this.RefSetter.Overall)) return false;
                if (RefSetter.Specific != null && !RefSetter.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter_NotNull != null)
            {
                if (!eval(this.RefSetter_NotNull.Overall)) return false;
                if (RefSetter_NotNull.Specific != null && !RefSetter_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter_Singleton != null)
            {
                if (!eval(this.RefSetter_Singleton.Overall)) return false;
                if (RefSetter_Singleton.Specific != null && !RefSetter_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (List != null)
            {
                if (!eval(this.List.Overall)) return false;
                if (List.Specific != null)
                {
                    foreach (var item in List.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (RefList != null)
            {
                if (!eval(this.RefList.Overall)) return false;
                if (RefList.Specific != null)
                {
                    foreach (var item in RefList.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (Dict != null)
            {
                if (!eval(this.Dict.Overall)) return false;
                if (Dict.Specific != null)
                {
                    foreach (var item in Dict.Specific)
                    {
                        if (!eval(item.Key)) return false;
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (RefDict != null)
            {
                if (!eval(this.RefDict.Overall)) return false;
                if (RefDict.Specific != null)
                {
                    foreach (var item in RefDict.Specific)
                    {
                        if (item.Key != null)
                        {
                            if (!eval(item.Key.Overall)) return false;
                            if (!item.Key.Specific?.AllEqual(eval) ?? false) return false;
                        }
                        if (item.Value != null)
                        {
                            if (!eval(item.Value.Overall)) return false;
                            if (!item.Value.Specific?.AllEqual(eval) ?? false) return false;
                        }
                    }
                }
            }
            if (KeyRefDict != null)
            {
                if (!eval(this.KeyRefDict.Overall)) return false;
                if (KeyRefDict.Specific != null)
                {
                    foreach (var item in KeyRefDict.Specific)
                    {
                        if (item.Key != null)
                        {
                            if (!eval(item.Key.Overall)) return false;
                            if (!item.Key.Specific?.AllEqual(eval) ?? false) return false;
                        }
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (ValRefDict != null)
            {
                if (!eval(this.ValRefDict.Overall)) return false;
                if (ValRefDict.Specific != null)
                {
                    foreach (var item in ValRefDict.Specific)
                    {
                        if (!eval(item.Key)) return false;
                        if (item.Value != null)
                        {
                            if (!eval(item.Value.Overall)) return false;
                            if (!item.Value.Specific?.AllEqual(eval) ?? false) return false;
                        }
                    }
                }
            }
            if (DictKeyedValue != null)
            {
                if (!eval(this.DictKeyedValue.Overall)) return false;
                if (DictKeyedValue.Specific != null)
                {
                    foreach (var item in DictKeyedValue.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public TestObject_Notifying_RPC_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestObject_Notifying_RPC_Mask<R>();
            ret.BoolN = eval(this.BoolN);
            ret.Bool = eval(this.Bool);
            ret.CharN = eval(this.CharN);
            ret.Char = eval(this.Char);
            ret.DateTimeNull = eval(this.DateTimeNull);
            ret.DateTime = eval(this.DateTime);
            ret.DoubleN = eval(this.DoubleN);
            ret.DoubleN_Ranged = eval(this.DoubleN_Ranged);
            ret.Double = eval(this.Double);
            ret.Double_Ranged = eval(this.Double_Ranged);
            ret.FloatN = eval(this.FloatN);
            ret.FloatN_Ranged = eval(this.FloatN_Ranged);
            ret.Float = eval(this.Float);
            ret.Float_Ranged = eval(this.Float_Ranged);
            ret.Int16N = eval(this.Int16N);
            ret.Int16N_Ranged = eval(this.Int16N_Ranged);
            ret.Int16 = eval(this.Int16);
            ret.Int16_Ranged = eval(this.Int16_Ranged);
            ret.Int32N = eval(this.Int32N);
            ret.Int32N_Ranged = eval(this.Int32N_Ranged);
            ret.Int32 = eval(this.Int32);
            ret.Int32_Ranged = eval(this.Int32_Ranged);
            ret.Int64N = eval(this.Int64N);
            ret.Int64N_Ranged = eval(this.Int64N_Ranged);
            ret.Int64 = eval(this.Int64);
            ret.Int64_Ranged = eval(this.Int64_Ranged);
            ret.Int8N = eval(this.Int8N);
            ret.Int8N_Ranged = eval(this.Int8N_Ranged);
            ret.Int8 = eval(this.Int8);
            ret.Int8_Ranged = eval(this.Int8_Ranged);
            ret.Unsafe = eval(this.Unsafe);
            ret.P2IntN = eval(this.P2IntN);
            ret.P2Int = eval(this.P2Int);
            ret.P3DoubleN = eval(this.P3DoubleN);
            ret.P3Double = eval(this.P3Double);
            ret.P3IntN = eval(this.P3IntN);
            ret.P3Int = eval(this.P3Int);
            ret.PercentN = eval(this.PercentN);
            ret.Percent = eval(this.Percent);
            ret.RangeInt8N = eval(this.RangeInt8N);
            ret.RangeInt8 = eval(this.RangeInt8);
            ret.RangeInt16N = eval(this.RangeInt16N);
            ret.RangeInt16 = eval(this.RangeInt16);
            ret.RangeInt32N = eval(this.RangeInt32N);
            ret.RangeInt32 = eval(this.RangeInt32);
            ret.RangeInt64N = eval(this.RangeInt64N);
            ret.RangeInt64 = eval(this.RangeInt64);
            ret.RangeUInt8N = eval(this.RangeUInt8N);
            ret.RangeUInt8 = eval(this.RangeUInt8);
            ret.RangeUInt16N = eval(this.RangeUInt16N);
            ret.RangeUInt16 = eval(this.RangeUInt16);
            ret.RangeUInt32N = eval(this.RangeUInt32N);
            ret.RangeUInt32 = eval(this.RangeUInt32);
            ret.RangeUInt64N = eval(this.RangeUInt64N);
            ret.RangeUInt64 = eval(this.RangeUInt64);
            ret.String = eval(this.String);
            ret.UDoubleN = eval(this.UDoubleN);
            ret.UDoubleN_Ranged = eval(this.UDoubleN_Ranged);
            ret.UDouble = eval(this.UDouble);
            ret.UDouble_Ranged = eval(this.UDouble_Ranged);
            ret.UInt16N = eval(this.UInt16N);
            ret.UInt16N_Ranged = eval(this.UInt16N_Ranged);
            ret.UInt16 = eval(this.UInt16);
            ret.UInt16_Ranged = eval(this.UInt16_Ranged);
            ret.UInt32N = eval(this.UInt32N);
            ret.UInt32N_Ranged = eval(this.UInt32N_Ranged);
            ret.UInt32 = eval(this.UInt32);
            ret.UInt32_Ranged = eval(this.UInt32_Ranged);
            ret.UInt64N = eval(this.UInt64N);
            ret.UInt64N_Ranged = eval(this.UInt64N_Ranged);
            ret.UInt64 = eval(this.UInt64);
            ret.UInt64_Ranged = eval(this.UInt64_Ranged);
            ret.UInt8N = eval(this.UInt8N);
            ret.UInt8N_Ranged = eval(this.UInt8N_Ranged);
            ret.UInt8 = eval(this.UInt8);
            ret.UInt8_Ranged = eval(this.UInt8_Ranged);
            ret.Enum = eval(this.Enum);
            ret.EnumNull = eval(this.EnumNull);
            ret.WildCard = eval(this.WildCard);
            ret.WildCardNull = eval(this.WildCardNull);
            if (this.Ref != null)
            {
                ret.Ref = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.Ref.Overall = eval(this.Ref.Overall);
                if (this.Ref.Specific != null)
                {
                    ret.Ref.Specific = this.Ref.Specific.Translate(eval);
                }
            }
            if (this.Ref_NotNull != null)
            {
                ret.Ref_NotNull = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.Ref_NotNull.Overall = eval(this.Ref_NotNull.Overall);
                if (this.Ref_NotNull.Specific != null)
                {
                    ret.Ref_NotNull.Specific = this.Ref_NotNull.Specific.Translate(eval);
                }
            }
            if (this.Ref_Singleton != null)
            {
                ret.Ref_Singleton = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.Ref_Singleton.Overall = eval(this.Ref_Singleton.Overall);
                if (this.Ref_Singleton.Specific != null)
                {
                    ret.Ref_Singleton.Specific = this.Ref_Singleton.Specific.Translate(eval);
                }
            }
            if (this.RefGetter != null)
            {
                ret.RefGetter = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.RefGetter.Overall = eval(this.RefGetter.Overall);
                if (this.RefGetter.Specific != null)
                {
                    ret.RefGetter.Specific = this.RefGetter.Specific.Translate(eval);
                }
            }
            if (this.RefGetter_NotNull != null)
            {
                ret.RefGetter_NotNull = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.RefGetter_NotNull.Overall = eval(this.RefGetter_NotNull.Overall);
                if (this.RefGetter_NotNull.Specific != null)
                {
                    ret.RefGetter_NotNull.Specific = this.RefGetter_NotNull.Specific.Translate(eval);
                }
            }
            if (this.RefGetter_Singleton != null)
            {
                ret.RefGetter_Singleton = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.RefGetter_Singleton.Overall = eval(this.RefGetter_Singleton.Overall);
                if (this.RefGetter_Singleton.Specific != null)
                {
                    ret.RefGetter_Singleton.Specific = this.RefGetter_Singleton.Specific.Translate(eval);
                }
            }
            if (this.RefSetter != null)
            {
                ret.RefSetter = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.RefSetter.Overall = eval(this.RefSetter.Overall);
                if (this.RefSetter.Specific != null)
                {
                    ret.RefSetter.Specific = this.RefSetter.Specific.Translate(eval);
                }
            }
            if (this.RefSetter_NotNull != null)
            {
                ret.RefSetter_NotNull = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.RefSetter_NotNull.Overall = eval(this.RefSetter_NotNull.Overall);
                if (this.RefSetter_NotNull.Specific != null)
                {
                    ret.RefSetter_NotNull.Specific = this.RefSetter_NotNull.Specific.Translate(eval);
                }
            }
            if (this.RefSetter_Singleton != null)
            {
                ret.RefSetter_Singleton = new MaskItem<R, ObjectToRef_Mask<R>>();
                ret.RefSetter_Singleton.Overall = eval(this.RefSetter_Singleton.Overall);
                if (this.RefSetter_Singleton.Specific != null)
                {
                    ret.RefSetter_Singleton.Specific = this.RefSetter_Singleton.Specific.Translate(eval);
                }
            }
            if (List != null)
            {
                ret.List = new MaskItem<R, IEnumerable<R>>();
                ret.List.Overall = eval(this.List.Overall);
                if (List.Specific != null)
                {
                    List<R> l = new List<R>();
                    ret.List.Specific = l;
                    foreach (var item in List.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (RefList != null)
            {
                ret.RefList = new MaskItem<R, IEnumerable<MaskItem<R, ObjectToRef_Mask<R>>>>();
                ret.RefList.Overall = eval(this.RefList.Overall);
                if (RefList.Specific != null)
                {
                    List<MaskItem<R, ObjectToRef_Mask<R>>> l = new List<MaskItem<R, ObjectToRef_Mask<R>>>();
                    ret.RefList.Specific = l;
                    foreach (var item in RefList.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> mask = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ObjectToRef_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Dict != null)
            {
                ret.Dict = new MaskItem<R, IEnumerable<KeyValuePair<R, R>>>();
                if (Dict.Specific != null)
                {
                    List<KeyValuePair<R, R>> l = new List<KeyValuePair<R, R>>();
                    ret.Dict.Specific = l;
                    foreach (var item in Dict.Specific)
                    {
                        R keyVal = eval(item.Key);
                        R valVal = eval(item.Value);
                        l.Add(new KeyValuePair<R, R>(keyVal, valVal));
                    }
                }
            }
            if (RefDict != null)
            {
                ret.RefDict = new MaskItem<R, IEnumerable<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>>>();
                if (RefDict.Specific != null)
                {
                    List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>> l = new List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>>();
                    ret.RefDict.Specific = l;
                    foreach (var item in RefDict.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> keyVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Key != null)
                        {
                            keyVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            keyVal.Overall = eval(item.Key.Overall);
                            if (item.Key.Specific != null)
                            {
                                keyVal.Specific = item.Key.Specific.Translate(eval);
                            }
                        }
                        MaskItem<R, ObjectToRef_Mask<R>> valVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Value != null)
                        {
                            valVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            valVal.Overall = eval(item.Value.Overall);
                            if (item.Value.Specific != null)
                            {
                                valVal.Specific = item.Value.Specific.Translate(eval);
                            }
                        }
                        l.Add(new KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>(keyVal, valVal));
                    }
                }
            }
            if (KeyRefDict != null)
            {
                ret.KeyRefDict = new MaskItem<R, IEnumerable<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>>>();
                if (KeyRefDict.Specific != null)
                {
                    List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>> l = new List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>>();
                    ret.KeyRefDict.Specific = l;
                    foreach (var item in KeyRefDict.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> keyVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Key != null)
                        {
                            keyVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            keyVal.Overall = eval(item.Key.Overall);
                            if (item.Key.Specific != null)
                            {
                                keyVal.Specific = item.Key.Specific.Translate(eval);
                            }
                        }
                        R valVal = eval(item.Value);
                        l.Add(new KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>(keyVal, valVal));
                    }
                }
            }
            if (ValRefDict != null)
            {
                ret.ValRefDict = new MaskItem<R, IEnumerable<KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>>>();
                if (ValRefDict.Specific != null)
                {
                    List<KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>> l = new List<KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>>();
                    ret.ValRefDict.Specific = l;
                    foreach (var item in ValRefDict.Specific)
                    {
                        R keyVal = eval(item.Key);
                        MaskItem<R, ObjectToRef_Mask<R>> valVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Value != null)
                        {
                            valVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            valVal.Overall = eval(item.Value.Overall);
                            if (item.Value.Specific != null)
                            {
                                valVal.Specific = item.Value.Specific.Translate(eval);
                            }
                        }
                        l.Add(new KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>(keyVal, valVal));
                    }
                }
            }
            if (DictKeyedValue != null)
            {
                ret.DictKeyedValue = new MaskItem<R, IEnumerable<MaskItem<R, ObjectToRef_Mask<R>>>>();
                if (DictKeyedValue.Specific != null)
                {
                    List<MaskItem<R, ObjectToRef_Mask<R>>> l = new List<MaskItem<R, ObjectToRef_Mask<R>>>();
                    ret.DictKeyedValue.Specific = l;
                    foreach (var item in DictKeyedValue.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> mask = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ObjectToRef_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            return ret;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestObject_Notifying_RPC_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestObject_Notifying_RPC_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestObject_Notifying_RPC_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.BoolN ?? true)
                {
                    fg.AppendLine("BoolN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"BoolN => {BoolN.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Bool ?? true)
                {
                    fg.AppendLine("Bool =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Bool => {Bool.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.CharN ?? true)
                {
                    fg.AppendLine("CharN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"CharN => {CharN.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Char ?? true)
                {
                    fg.AppendLine("Char =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Char => {Char.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DateTimeNull ?? true)
                {
                    fg.AppendLine("DateTimeNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"DateTimeNull => {DateTimeNull.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DateTime ?? true)
                {
                    fg.AppendLine("DateTime =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"DateTime => {DateTime.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DoubleN ?? true)
                {
                    fg.AppendLine("DoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"DoubleN => {DoubleN.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DoubleN_Ranged ?? true)
                {
                    fg.AppendLine("DoubleN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"DoubleN_Ranged => {DoubleN_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Double ?? true)
                {
                    fg.AppendLine("Double =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Double => {Double.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Double_Ranged ?? true)
                {
                    fg.AppendLine("Double_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Double_Ranged => {Double_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FloatN ?? true)
                {
                    fg.AppendLine("FloatN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"FloatN => {FloatN.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.FloatN_Ranged ?? true)
                {
                    fg.AppendLine("FloatN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"FloatN_Ranged => {FloatN_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Float ?? true)
                {
                    fg.AppendLine("Float =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Float => {Float.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Float_Ranged ?? true)
                {
                    fg.AppendLine("Float_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Float_Ranged => {Float_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int16N ?? true)
                {
                    fg.AppendLine("Int16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int16N => {Int16N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int16N_Ranged ?? true)
                {
                    fg.AppendLine("Int16N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int16N_Ranged => {Int16N_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int16 ?? true)
                {
                    fg.AppendLine("Int16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int16 => {Int16.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int16_Ranged ?? true)
                {
                    fg.AppendLine("Int16_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int16_Ranged => {Int16_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int32N ?? true)
                {
                    fg.AppendLine("Int32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int32N => {Int32N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int32N_Ranged ?? true)
                {
                    fg.AppendLine("Int32N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int32N_Ranged => {Int32N_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int32 ?? true)
                {
                    fg.AppendLine("Int32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int32 => {Int32.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int32_Ranged ?? true)
                {
                    fg.AppendLine("Int32_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int32_Ranged => {Int32_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int64N ?? true)
                {
                    fg.AppendLine("Int64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int64N => {Int64N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int64N_Ranged ?? true)
                {
                    fg.AppendLine("Int64N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int64N_Ranged => {Int64N_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int64 ?? true)
                {
                    fg.AppendLine("Int64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int64 => {Int64.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int64_Ranged ?? true)
                {
                    fg.AppendLine("Int64_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int64_Ranged => {Int64_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int8N ?? true)
                {
                    fg.AppendLine("Int8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int8N => {Int8N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int8N_Ranged ?? true)
                {
                    fg.AppendLine("Int8N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int8N_Ranged => {Int8N_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int8 ?? true)
                {
                    fg.AppendLine("Int8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int8 => {Int8.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Int8_Ranged ?? true)
                {
                    fg.AppendLine("Int8_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Int8_Ranged => {Int8_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Unsafe ?? true)
                {
                    fg.AppendLine("Unsafe =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Unsafe => {Unsafe.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.P2IntN ?? true)
                {
                    fg.AppendLine("P2IntN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"P2IntN => {P2IntN.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.P2Int ?? true)
                {
                    fg.AppendLine("P2Int =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"P2Int => {P2Int.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.P3DoubleN ?? true)
                {
                    fg.AppendLine("P3DoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"P3DoubleN => {P3DoubleN.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.P3Double ?? true)
                {
                    fg.AppendLine("P3Double =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"P3Double => {P3Double.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.P3IntN ?? true)
                {
                    fg.AppendLine("P3IntN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"P3IntN => {P3IntN.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.P3Int ?? true)
                {
                    fg.AppendLine("P3Int =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"P3Int => {P3Int.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.PercentN ?? true)
                {
                    fg.AppendLine("PercentN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"PercentN => {PercentN.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Percent ?? true)
                {
                    fg.AppendLine("Percent =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Percent => {Percent.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeInt8N ?? true)
                {
                    fg.AppendLine("RangeInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeInt8N => {RangeInt8N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeInt8 ?? true)
                {
                    fg.AppendLine("RangeInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeInt8 => {RangeInt8.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeInt16N ?? true)
                {
                    fg.AppendLine("RangeInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeInt16N => {RangeInt16N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeInt16 ?? true)
                {
                    fg.AppendLine("RangeInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeInt16 => {RangeInt16.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeInt32N ?? true)
                {
                    fg.AppendLine("RangeInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeInt32N => {RangeInt32N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeInt32 ?? true)
                {
                    fg.AppendLine("RangeInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeInt32 => {RangeInt32.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeInt64N ?? true)
                {
                    fg.AppendLine("RangeInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeInt64N => {RangeInt64N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeInt64 ?? true)
                {
                    fg.AppendLine("RangeInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeInt64 => {RangeInt64.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeUInt8N ?? true)
                {
                    fg.AppendLine("RangeUInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeUInt8N => {RangeUInt8N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeUInt8 ?? true)
                {
                    fg.AppendLine("RangeUInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeUInt8 => {RangeUInt8.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeUInt16N ?? true)
                {
                    fg.AppendLine("RangeUInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeUInt16N => {RangeUInt16N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeUInt16 ?? true)
                {
                    fg.AppendLine("RangeUInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeUInt16 => {RangeUInt16.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeUInt32N ?? true)
                {
                    fg.AppendLine("RangeUInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeUInt32N => {RangeUInt32N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeUInt32 ?? true)
                {
                    fg.AppendLine("RangeUInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeUInt32 => {RangeUInt32.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeUInt64N ?? true)
                {
                    fg.AppendLine("RangeUInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeUInt64N => {RangeUInt64N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RangeUInt64 ?? true)
                {
                    fg.AppendLine("RangeUInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"RangeUInt64 => {RangeUInt64.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.String ?? true)
                {
                    fg.AppendLine("String =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"String => {String.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UDoubleN ?? true)
                {
                    fg.AppendLine("UDoubleN =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UDoubleN => {UDoubleN.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UDoubleN_Ranged ?? true)
                {
                    fg.AppendLine("UDoubleN_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UDoubleN_Ranged => {UDoubleN_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UDouble ?? true)
                {
                    fg.AppendLine("UDouble =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UDouble => {UDouble.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UDouble_Ranged ?? true)
                {
                    fg.AppendLine("UDouble_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UDouble_Ranged => {UDouble_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt16N ?? true)
                {
                    fg.AppendLine("UInt16N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt16N => {UInt16N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt16N_Ranged ?? true)
                {
                    fg.AppendLine("UInt16N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt16N_Ranged => {UInt16N_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt16 ?? true)
                {
                    fg.AppendLine("UInt16 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt16 => {UInt16.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt16_Ranged ?? true)
                {
                    fg.AppendLine("UInt16_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt16_Ranged => {UInt16_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt32N ?? true)
                {
                    fg.AppendLine("UInt32N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt32N => {UInt32N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt32N_Ranged ?? true)
                {
                    fg.AppendLine("UInt32N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt32N_Ranged => {UInt32N_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt32 ?? true)
                {
                    fg.AppendLine("UInt32 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt32 => {UInt32.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt32_Ranged ?? true)
                {
                    fg.AppendLine("UInt32_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt32_Ranged => {UInt32_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt64N ?? true)
                {
                    fg.AppendLine("UInt64N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt64N => {UInt64N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt64N_Ranged ?? true)
                {
                    fg.AppendLine("UInt64N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt64N_Ranged => {UInt64N_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt64 ?? true)
                {
                    fg.AppendLine("UInt64 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt64 => {UInt64.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt64_Ranged ?? true)
                {
                    fg.AppendLine("UInt64_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt64_Ranged => {UInt64_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt8N ?? true)
                {
                    fg.AppendLine("UInt8N =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt8N => {UInt8N.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt8N_Ranged ?? true)
                {
                    fg.AppendLine("UInt8N_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt8N_Ranged => {UInt8N_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt8 ?? true)
                {
                    fg.AppendLine("UInt8 =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt8 => {UInt8.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.UInt8_Ranged ?? true)
                {
                    fg.AppendLine("UInt8_Ranged =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"UInt8_Ranged => {UInt8_Ranged.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Enum ?? true)
                {
                    fg.AppendLine("Enum =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"Enum => {Enum.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.EnumNull ?? true)
                {
                    fg.AppendLine("EnumNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"EnumNull => {EnumNull.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.WildCard ?? true)
                {
                    fg.AppendLine("WildCard =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"WildCard => {WildCard.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.WildCardNull ?? true)
                {
                    fg.AppendLine("WildCardNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"WildCardNull => {WildCardNull.ToStringSafe()}");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Ref?.Overall ?? true)
                {
                    fg.AppendLine("Ref =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        Ref.ToString(fg);
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Ref_NotNull?.Overall ?? true)
                {
                    fg.AppendLine("Ref_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        Ref_NotNull.ToString(fg);
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Ref_Singleton?.Overall ?? true)
                {
                    fg.AppendLine("Ref_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        Ref_Singleton.ToString(fg);
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefGetter?.Overall ?? true)
                {
                    fg.AppendLine("RefGetter =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        RefGetter.ToString(fg);
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefGetter_NotNull?.Overall ?? true)
                {
                    fg.AppendLine("RefGetter_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        RefGetter_NotNull.ToString(fg);
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefGetter_Singleton?.Overall ?? true)
                {
                    fg.AppendLine("RefGetter_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        RefGetter_Singleton.ToString(fg);
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefSetter?.Overall ?? true)
                {
                    fg.AppendLine("RefSetter =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        RefSetter.ToString(fg);
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefSetter_NotNull?.Overall ?? true)
                {
                    fg.AppendLine("RefSetter_NotNull =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        RefSetter_NotNull.ToString(fg);
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefSetter_Singleton?.Overall ?? true)
                {
                    fg.AppendLine("RefSetter_Singleton =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        RefSetter_Singleton.ToString(fg);
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.List?.Overall ?? true)
                {
                    fg.AppendLine("List =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine("List =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (List.Overall != null)
                            {
                                fg.AppendLine(List.Overall.ToString());
                            }
                            if (List.Specific != null)
                            {
                                foreach (var subItem in List.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefList?.Overall ?? true)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine("RefList =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (RefList.Overall != null)
                            {
                                fg.AppendLine(RefList.Overall.ToString());
                            }
                            if (RefList.Specific != null)
                            {
                                foreach (var subItem in RefList.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Dict?.Overall ?? true)
                {
                    fg.AppendLine("Dict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine("Dict =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (Dict.Overall != null)
                            {
                                fg.AppendLine(Dict.Overall.ToString());
                            }
                            if (Dict.Specific != null)
                            {
                                foreach (var subItem in Dict.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine("Key => [");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem.Key.ToStringSafe()}");
                                        }
                                        fg.AppendLine("]");
                                        fg.AppendLine("Value => [");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem.Value.ToStringSafe()}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefDict?.Overall ?? true)
                {
                    fg.AppendLine("RefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine("RefDict =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (RefDict.Overall != null)
                            {
                                fg.AppendLine(RefDict.Overall.ToString());
                            }
                            if (RefDict.Specific != null)
                            {
                                foreach (var subItem in RefDict.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine("Key => [");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem.Key.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                        fg.AppendLine("Value => [");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem.Value.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.KeyRefDict?.Overall ?? true)
                {
                    fg.AppendLine("KeyRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine("KeyRefDict =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (KeyRefDict.Overall != null)
                            {
                                fg.AppendLine(KeyRefDict.Overall.ToString());
                            }
                            if (KeyRefDict.Specific != null)
                            {
                                foreach (var subItem in KeyRefDict.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine("Key => [");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem.Key.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                        fg.AppendLine("Value => [");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem.Value.ToStringSafe()}");
                                        }
                                        fg.AppendLine("]");
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.ValRefDict?.Overall ?? true)
                {
                    fg.AppendLine("ValRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine("ValRefDict =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (ValRefDict.Overall != null)
                            {
                                fg.AppendLine(ValRefDict.Overall.ToString());
                            }
                            if (ValRefDict.Specific != null)
                            {
                                foreach (var subItem in ValRefDict.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine("Key => [");
                                        using (new DepthWrapper(fg))
                                        {
                                            fg.AppendLine($" => {subItem.Key.ToStringSafe()}");
                                        }
                                        fg.AppendLine("]");
                                        fg.AppendLine("Value => [");
                                        using (new DepthWrapper(fg))
                                        {
                                            subItem.Value.ToString(fg);
                                        }
                                        fg.AppendLine("]");
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DictKeyedValue?.Overall ?? true)
                {
                    fg.AppendLine("DictKeyedValue =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine("DictKeyedValue =>");
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            if (DictKeyedValue.Overall != null)
                            {
                                fg.AppendLine(DictKeyedValue.Overall.ToString());
                            }
                            if (DictKeyedValue.Specific != null)
                            {
                                foreach (var subItem in DictKeyedValue.Specific)
                                {
                                    fg.AppendLine("[");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($"KeyField => {subItem.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                }
                            }
                        }
                        fg.AppendLine("]");
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestObject_Notifying_RPC_ErrorMask : IErrorMask
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception BoolN;
        public Exception Bool;
        public Exception CharN;
        public Exception Char;
        public Exception DateTimeNull;
        public Exception DateTime;
        public Exception DoubleN;
        public Exception DoubleN_Ranged;
        public Exception Double;
        public Exception Double_Ranged;
        public Exception FloatN;
        public Exception FloatN_Ranged;
        public Exception Float;
        public Exception Float_Ranged;
        public Exception Int16N;
        public Exception Int16N_Ranged;
        public Exception Int16;
        public Exception Int16_Ranged;
        public Exception Int32N;
        public Exception Int32N_Ranged;
        public Exception Int32;
        public Exception Int32_Ranged;
        public Exception Int64N;
        public Exception Int64N_Ranged;
        public Exception Int64;
        public Exception Int64_Ranged;
        public Exception Int8N;
        public Exception Int8N_Ranged;
        public Exception Int8;
        public Exception Int8_Ranged;
        public Exception Unsafe;
        public Exception P2IntN;
        public Exception P2Int;
        public Exception P3DoubleN;
        public Exception P3Double;
        public Exception P3IntN;
        public Exception P3Int;
        public Exception PercentN;
        public Exception Percent;
        public Exception RangeInt8N;
        public Exception RangeInt8;
        public Exception RangeInt16N;
        public Exception RangeInt16;
        public Exception RangeInt32N;
        public Exception RangeInt32;
        public Exception RangeInt64N;
        public Exception RangeInt64;
        public Exception RangeUInt8N;
        public Exception RangeUInt8;
        public Exception RangeUInt16N;
        public Exception RangeUInt16;
        public Exception RangeUInt32N;
        public Exception RangeUInt32;
        public Exception RangeUInt64N;
        public Exception RangeUInt64;
        public Exception String;
        public Exception UDoubleN;
        public Exception UDoubleN_Ranged;
        public Exception UDouble;
        public Exception UDouble_Ranged;
        public Exception UInt16N;
        public Exception UInt16N_Ranged;
        public Exception UInt16;
        public Exception UInt16_Ranged;
        public Exception UInt32N;
        public Exception UInt32N_Ranged;
        public Exception UInt32;
        public Exception UInt32_Ranged;
        public Exception UInt64N;
        public Exception UInt64N_Ranged;
        public Exception UInt64;
        public Exception UInt64_Ranged;
        public Exception UInt8N;
        public Exception UInt8N_Ranged;
        public Exception UInt8;
        public Exception UInt8_Ranged;
        public Exception Enum;
        public Exception EnumNull;
        public Exception WildCard;
        public Exception WildCardNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_Singleton;
        public MaskItem<Exception, IEnumerable<Exception>> List;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> RefList;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> Dict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>> RefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>> KeyRefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>> ValRefDict;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> DictKeyedValue;
        #endregion

        #region IErrorMask
        public void SetNthException(ushort index, Exception ex)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                    this.BoolN = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                    this.Bool = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                    this.CharN = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Char:
                    this.Char = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                    this.DateTimeNull = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                    this.DateTime = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                    this.DoubleN = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double:
                    this.Double = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                    this.Double_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                    this.FloatN = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float:
                    this.Float = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                    this.Float_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                    this.Int16N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                    this.Int16 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                    this.Int32N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                    this.Int32 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                    this.Int64N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                    this.Int64 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                    this.Int8N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                    this.Int8 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                    this.Unsafe = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                    this.P2IntN = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                    this.P2Int = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                    this.P3DoubleN = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                    this.P3Double = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                    this.P3IntN = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                    this.P3Int = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                    this.PercentN = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                    this.Percent = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                    this.RangeInt8N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                    this.RangeInt8 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                    this.RangeInt16N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                    this.RangeInt16 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                    this.RangeInt32N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                    this.RangeInt32 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                    this.RangeInt64N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                    this.RangeInt64 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.String:
                    this.String = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                    this.UDoubleN = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                    this.UDouble = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                    this.UInt16N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                    this.UInt16 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                    this.UInt32N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                    this.UInt32 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                    this.UInt64N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                    this.UInt64 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                    this.UInt8N = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                    this.UInt8 = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                    this.Enum = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                    this.EnumNull = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                    this.WildCard = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                    this.WildCardNull = ex;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                    this.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                    this.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                    this.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.List:
                    this.List = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    this.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                    this.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                    this.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                    this.KeyRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                    this.ValRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(ushort index, object obj)
        {
            TestObject_Notifying_RPC_FieldIndex enu = (TestObject_Notifying_RPC_FieldIndex)index;
            switch (enu)
            {
                case TestObject_Notifying_RPC_FieldIndex.BoolN:
                    this.BoolN = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Bool:
                    this.Bool = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.CharN:
                    this.CharN = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Char:
                    this.Char = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTimeNull:
                    this.DateTimeNull = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DateTime:
                    this.DateTime = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN:
                    this.DoubleN = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double:
                    this.Double = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Double_Ranged:
                    this.Double_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN:
                    this.FloatN = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float:
                    this.Float = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Float_Ranged:
                    this.Float_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N:
                    this.Int16N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16:
                    this.Int16 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N:
                    this.Int32N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32:
                    this.Int32 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N:
                    this.Int64N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64:
                    this.Int64 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N:
                    this.Int8N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8:
                    this.Int8 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Unsafe:
                    this.Unsafe = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2IntN:
                    this.P2IntN = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P2Int:
                    this.P2Int = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3DoubleN:
                    this.P3DoubleN = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Double:
                    this.P3Double = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3IntN:
                    this.P3IntN = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.P3Int:
                    this.P3Int = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.PercentN:
                    this.PercentN = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Percent:
                    this.Percent = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8N:
                    this.RangeInt8N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt8:
                    this.RangeInt8 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16N:
                    this.RangeInt16N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt16:
                    this.RangeInt16 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32N:
                    this.RangeInt32N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt32:
                    this.RangeInt32 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64N:
                    this.RangeInt64N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeInt64:
                    this.RangeInt64 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.String:
                    this.String = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN:
                    this.UDoubleN = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble:
                    this.UDouble = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N:
                    this.UInt16N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16:
                    this.UInt16 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N:
                    this.UInt32N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32:
                    this.UInt32 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N:
                    this.UInt64N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64:
                    this.UInt64 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N:
                    this.UInt8N = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8:
                    this.UInt8 = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Enum:
                    this.Enum = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.EnumNull:
                    this.EnumNull = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCard:
                    this.WildCard = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.WildCardNull:
                    this.WildCardNull = (Exception)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref:
                    this.Ref = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter:
                    this.RefGetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter:
                    this.RefSetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.List:
                    this.List = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefList:
                    this.RefList = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.Dict:
                    this.Dict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.RefDict:
                    this.RefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.KeyRefDict:
                    this.KeyRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.ValRefDict:
                    this.ValRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_Notifying_RPC_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestObject_Notifying_RPC_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (BoolN != null)
                {
                    fg.AppendLine($"BoolN => {BoolN.ToStringSafe()}");
                }
                if (Bool != null)
                {
                    fg.AppendLine($"Bool => {Bool.ToStringSafe()}");
                }
                if (CharN != null)
                {
                    fg.AppendLine($"CharN => {CharN.ToStringSafe()}");
                }
                if (Char != null)
                {
                    fg.AppendLine($"Char => {Char.ToStringSafe()}");
                }
                if (DateTimeNull != null)
                {
                    fg.AppendLine($"DateTimeNull => {DateTimeNull.ToStringSafe()}");
                }
                if (DateTime != null)
                {
                    fg.AppendLine($"DateTime => {DateTime.ToStringSafe()}");
                }
                if (DoubleN != null)
                {
                    fg.AppendLine($"DoubleN => {DoubleN.ToStringSafe()}");
                }
                if (DoubleN_Ranged != null)
                {
                    fg.AppendLine($"DoubleN_Ranged => {DoubleN_Ranged.ToStringSafe()}");
                }
                if (Double != null)
                {
                    fg.AppendLine($"Double => {Double.ToStringSafe()}");
                }
                if (Double_Ranged != null)
                {
                    fg.AppendLine($"Double_Ranged => {Double_Ranged.ToStringSafe()}");
                }
                if (FloatN != null)
                {
                    fg.AppendLine($"FloatN => {FloatN.ToStringSafe()}");
                }
                if (FloatN_Ranged != null)
                {
                    fg.AppendLine($"FloatN_Ranged => {FloatN_Ranged.ToStringSafe()}");
                }
                if (Float != null)
                {
                    fg.AppendLine($"Float => {Float.ToStringSafe()}");
                }
                if (Float_Ranged != null)
                {
                    fg.AppendLine($"Float_Ranged => {Float_Ranged.ToStringSafe()}");
                }
                if (Int16N != null)
                {
                    fg.AppendLine($"Int16N => {Int16N.ToStringSafe()}");
                }
                if (Int16N_Ranged != null)
                {
                    fg.AppendLine($"Int16N_Ranged => {Int16N_Ranged.ToStringSafe()}");
                }
                if (Int16 != null)
                {
                    fg.AppendLine($"Int16 => {Int16.ToStringSafe()}");
                }
                if (Int16_Ranged != null)
                {
                    fg.AppendLine($"Int16_Ranged => {Int16_Ranged.ToStringSafe()}");
                }
                if (Int32N != null)
                {
                    fg.AppendLine($"Int32N => {Int32N.ToStringSafe()}");
                }
                if (Int32N_Ranged != null)
                {
                    fg.AppendLine($"Int32N_Ranged => {Int32N_Ranged.ToStringSafe()}");
                }
                if (Int32 != null)
                {
                    fg.AppendLine($"Int32 => {Int32.ToStringSafe()}");
                }
                if (Int32_Ranged != null)
                {
                    fg.AppendLine($"Int32_Ranged => {Int32_Ranged.ToStringSafe()}");
                }
                if (Int64N != null)
                {
                    fg.AppendLine($"Int64N => {Int64N.ToStringSafe()}");
                }
                if (Int64N_Ranged != null)
                {
                    fg.AppendLine($"Int64N_Ranged => {Int64N_Ranged.ToStringSafe()}");
                }
                if (Int64 != null)
                {
                    fg.AppendLine($"Int64 => {Int64.ToStringSafe()}");
                }
                if (Int64_Ranged != null)
                {
                    fg.AppendLine($"Int64_Ranged => {Int64_Ranged.ToStringSafe()}");
                }
                if (Int8N != null)
                {
                    fg.AppendLine($"Int8N => {Int8N.ToStringSafe()}");
                }
                if (Int8N_Ranged != null)
                {
                    fg.AppendLine($"Int8N_Ranged => {Int8N_Ranged.ToStringSafe()}");
                }
                if (Int8 != null)
                {
                    fg.AppendLine($"Int8 => {Int8.ToStringSafe()}");
                }
                if (Int8_Ranged != null)
                {
                    fg.AppendLine($"Int8_Ranged => {Int8_Ranged.ToStringSafe()}");
                }
                if (Unsafe != null)
                {
                    fg.AppendLine($"Unsafe => {Unsafe.ToStringSafe()}");
                }
                if (P2IntN != null)
                {
                    fg.AppendLine($"P2IntN => {P2IntN.ToStringSafe()}");
                }
                if (P2Int != null)
                {
                    fg.AppendLine($"P2Int => {P2Int.ToStringSafe()}");
                }
                if (P3DoubleN != null)
                {
                    fg.AppendLine($"P3DoubleN => {P3DoubleN.ToStringSafe()}");
                }
                if (P3Double != null)
                {
                    fg.AppendLine($"P3Double => {P3Double.ToStringSafe()}");
                }
                if (P3IntN != null)
                {
                    fg.AppendLine($"P3IntN => {P3IntN.ToStringSafe()}");
                }
                if (P3Int != null)
                {
                    fg.AppendLine($"P3Int => {P3Int.ToStringSafe()}");
                }
                if (PercentN != null)
                {
                    fg.AppendLine($"PercentN => {PercentN.ToStringSafe()}");
                }
                if (Percent != null)
                {
                    fg.AppendLine($"Percent => {Percent.ToStringSafe()}");
                }
                if (RangeInt8N != null)
                {
                    fg.AppendLine($"RangeInt8N => {RangeInt8N.ToStringSafe()}");
                }
                if (RangeInt8 != null)
                {
                    fg.AppendLine($"RangeInt8 => {RangeInt8.ToStringSafe()}");
                }
                if (RangeInt16N != null)
                {
                    fg.AppendLine($"RangeInt16N => {RangeInt16N.ToStringSafe()}");
                }
                if (RangeInt16 != null)
                {
                    fg.AppendLine($"RangeInt16 => {RangeInt16.ToStringSafe()}");
                }
                if (RangeInt32N != null)
                {
                    fg.AppendLine($"RangeInt32N => {RangeInt32N.ToStringSafe()}");
                }
                if (RangeInt32 != null)
                {
                    fg.AppendLine($"RangeInt32 => {RangeInt32.ToStringSafe()}");
                }
                if (RangeInt64N != null)
                {
                    fg.AppendLine($"RangeInt64N => {RangeInt64N.ToStringSafe()}");
                }
                if (RangeInt64 != null)
                {
                    fg.AppendLine($"RangeInt64 => {RangeInt64.ToStringSafe()}");
                }
                if (RangeUInt8N != null)
                {
                    fg.AppendLine($"RangeUInt8N => {RangeUInt8N.ToStringSafe()}");
                }
                if (RangeUInt8 != null)
                {
                    fg.AppendLine($"RangeUInt8 => {RangeUInt8.ToStringSafe()}");
                }
                if (RangeUInt16N != null)
                {
                    fg.AppendLine($"RangeUInt16N => {RangeUInt16N.ToStringSafe()}");
                }
                if (RangeUInt16 != null)
                {
                    fg.AppendLine($"RangeUInt16 => {RangeUInt16.ToStringSafe()}");
                }
                if (RangeUInt32N != null)
                {
                    fg.AppendLine($"RangeUInt32N => {RangeUInt32N.ToStringSafe()}");
                }
                if (RangeUInt32 != null)
                {
                    fg.AppendLine($"RangeUInt32 => {RangeUInt32.ToStringSafe()}");
                }
                if (RangeUInt64N != null)
                {
                    fg.AppendLine($"RangeUInt64N => {RangeUInt64N.ToStringSafe()}");
                }
                if (RangeUInt64 != null)
                {
                    fg.AppendLine($"RangeUInt64 => {RangeUInt64.ToStringSafe()}");
                }
                if (String != null)
                {
                    fg.AppendLine($"String => {String.ToStringSafe()}");
                }
                if (UDoubleN != null)
                {
                    fg.AppendLine($"UDoubleN => {UDoubleN.ToStringSafe()}");
                }
                if (UDoubleN_Ranged != null)
                {
                    fg.AppendLine($"UDoubleN_Ranged => {UDoubleN_Ranged.ToStringSafe()}");
                }
                if (UDouble != null)
                {
                    fg.AppendLine($"UDouble => {UDouble.ToStringSafe()}");
                }
                if (UDouble_Ranged != null)
                {
                    fg.AppendLine($"UDouble_Ranged => {UDouble_Ranged.ToStringSafe()}");
                }
                if (UInt16N != null)
                {
                    fg.AppendLine($"UInt16N => {UInt16N.ToStringSafe()}");
                }
                if (UInt16N_Ranged != null)
                {
                    fg.AppendLine($"UInt16N_Ranged => {UInt16N_Ranged.ToStringSafe()}");
                }
                if (UInt16 != null)
                {
                    fg.AppendLine($"UInt16 => {UInt16.ToStringSafe()}");
                }
                if (UInt16_Ranged != null)
                {
                    fg.AppendLine($"UInt16_Ranged => {UInt16_Ranged.ToStringSafe()}");
                }
                if (UInt32N != null)
                {
                    fg.AppendLine($"UInt32N => {UInt32N.ToStringSafe()}");
                }
                if (UInt32N_Ranged != null)
                {
                    fg.AppendLine($"UInt32N_Ranged => {UInt32N_Ranged.ToStringSafe()}");
                }
                if (UInt32 != null)
                {
                    fg.AppendLine($"UInt32 => {UInt32.ToStringSafe()}");
                }
                if (UInt32_Ranged != null)
                {
                    fg.AppendLine($"UInt32_Ranged => {UInt32_Ranged.ToStringSafe()}");
                }
                if (UInt64N != null)
                {
                    fg.AppendLine($"UInt64N => {UInt64N.ToStringSafe()}");
                }
                if (UInt64N_Ranged != null)
                {
                    fg.AppendLine($"UInt64N_Ranged => {UInt64N_Ranged.ToStringSafe()}");
                }
                if (UInt64 != null)
                {
                    fg.AppendLine($"UInt64 => {UInt64.ToStringSafe()}");
                }
                if (UInt64_Ranged != null)
                {
                    fg.AppendLine($"UInt64_Ranged => {UInt64_Ranged.ToStringSafe()}");
                }
                if (UInt8N != null)
                {
                    fg.AppendLine($"UInt8N => {UInt8N.ToStringSafe()}");
                }
                if (UInt8N_Ranged != null)
                {
                    fg.AppendLine($"UInt8N_Ranged => {UInt8N_Ranged.ToStringSafe()}");
                }
                if (UInt8 != null)
                {
                    fg.AppendLine($"UInt8 => {UInt8.ToStringSafe()}");
                }
                if (UInt8_Ranged != null)
                {
                    fg.AppendLine($"UInt8_Ranged => {UInt8_Ranged.ToStringSafe()}");
                }
                if (Enum != null)
                {
                    fg.AppendLine($"Enum => {Enum.ToStringSafe()}");
                }
                if (EnumNull != null)
                {
                    fg.AppendLine($"EnumNull => {EnumNull.ToStringSafe()}");
                }
                if (WildCard != null)
                {
                    fg.AppendLine($"WildCard => {WildCard.ToStringSafe()}");
                }
                if (WildCardNull != null)
                {
                    fg.AppendLine($"WildCardNull => {WildCardNull.ToStringSafe()}");
                }
                if (Ref != null)
                {
                    Ref.ToString(fg);
                }
                if (Ref_NotNull != null)
                {
                    Ref_NotNull.ToString(fg);
                }
                if (Ref_Singleton != null)
                {
                    Ref_Singleton.ToString(fg);
                }
                if (RefGetter != null)
                {
                    RefGetter.ToString(fg);
                }
                if (RefGetter_NotNull != null)
                {
                    RefGetter_NotNull.ToString(fg);
                }
                if (RefGetter_Singleton != null)
                {
                    RefGetter_Singleton.ToString(fg);
                }
                if (RefSetter != null)
                {
                    RefSetter.ToString(fg);
                }
                if (RefSetter_NotNull != null)
                {
                    RefSetter_NotNull.ToString(fg);
                }
                if (RefSetter_Singleton != null)
                {
                    RefSetter_Singleton.ToString(fg);
                }
                if (List != null)
                {
                    fg.AppendLine("List =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (List.Overall != null)
                        {
                            fg.AppendLine(List.Overall.ToString());
                        }
                        if (List.Specific != null)
                        {
                            foreach (var subItem in List.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefList != null)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefList.Overall != null)
                        {
                            fg.AppendLine(RefList.Overall.ToString());
                        }
                        if (RefList.Specific != null)
                        {
                            foreach (var subItem in RefList.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (Dict != null)
                {
                    fg.AppendLine("Dict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Dict.Overall != null)
                        {
                            fg.AppendLine(Dict.Overall.ToString());
                        }
                        if (Dict.Specific != null)
                        {
                            foreach (var subItem in Dict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Key.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Value.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (RefDict != null)
                {
                    fg.AppendLine("RefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefDict.Overall != null)
                        {
                            fg.AppendLine(RefDict.Overall.ToString());
                        }
                        if (RefDict.Specific != null)
                        {
                            foreach (var subItem in RefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Key.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Value.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (KeyRefDict != null)
                {
                    fg.AppendLine("KeyRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (KeyRefDict.Overall != null)
                        {
                            fg.AppendLine(KeyRefDict.Overall.ToString());
                        }
                        if (KeyRefDict.Specific != null)
                        {
                            foreach (var subItem in KeyRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Key.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Value.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (ValRefDict != null)
                {
                    fg.AppendLine("ValRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (ValRefDict.Overall != null)
                        {
                            fg.AppendLine(ValRefDict.Overall.ToString());
                        }
                        if (ValRefDict.Specific != null)
                        {
                            foreach (var subItem in ValRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Key.ToStringSafe()}");
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Value.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (DictKeyedValue != null)
                {
                    fg.AppendLine("DictKeyedValue =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (DictKeyedValue.Overall != null)
                        {
                            fg.AppendLine(DictKeyedValue.Overall.ToString());
                        }
                        if (DictKeyedValue.Specific != null)
                        {
                            foreach (var subItem in DictKeyedValue.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($"KeyField => {subItem.ToStringSafe()}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TestObject_Notifying_RPC_ErrorMask Combine(TestObject_Notifying_RPC_ErrorMask rhs)
        {
            var ret = new TestObject_Notifying_RPC_ErrorMask();
            ret.BoolN = this.BoolN.Combine(rhs.BoolN);
            ret.Bool = this.Bool.Combine(rhs.Bool);
            ret.CharN = this.CharN.Combine(rhs.CharN);
            ret.Char = this.Char.Combine(rhs.Char);
            ret.DateTimeNull = this.DateTimeNull.Combine(rhs.DateTimeNull);
            ret.DateTime = this.DateTime.Combine(rhs.DateTime);
            ret.DoubleN = this.DoubleN.Combine(rhs.DoubleN);
            ret.DoubleN_Ranged = this.DoubleN_Ranged.Combine(rhs.DoubleN_Ranged);
            ret.Double = this.Double.Combine(rhs.Double);
            ret.Double_Ranged = this.Double_Ranged.Combine(rhs.Double_Ranged);
            ret.FloatN = this.FloatN.Combine(rhs.FloatN);
            ret.FloatN_Ranged = this.FloatN_Ranged.Combine(rhs.FloatN_Ranged);
            ret.Float = this.Float.Combine(rhs.Float);
            ret.Float_Ranged = this.Float_Ranged.Combine(rhs.Float_Ranged);
            ret.Int16N = this.Int16N.Combine(rhs.Int16N);
            ret.Int16N_Ranged = this.Int16N_Ranged.Combine(rhs.Int16N_Ranged);
            ret.Int16 = this.Int16.Combine(rhs.Int16);
            ret.Int16_Ranged = this.Int16_Ranged.Combine(rhs.Int16_Ranged);
            ret.Int32N = this.Int32N.Combine(rhs.Int32N);
            ret.Int32N_Ranged = this.Int32N_Ranged.Combine(rhs.Int32N_Ranged);
            ret.Int32 = this.Int32.Combine(rhs.Int32);
            ret.Int32_Ranged = this.Int32_Ranged.Combine(rhs.Int32_Ranged);
            ret.Int64N = this.Int64N.Combine(rhs.Int64N);
            ret.Int64N_Ranged = this.Int64N_Ranged.Combine(rhs.Int64N_Ranged);
            ret.Int64 = this.Int64.Combine(rhs.Int64);
            ret.Int64_Ranged = this.Int64_Ranged.Combine(rhs.Int64_Ranged);
            ret.Int8N = this.Int8N.Combine(rhs.Int8N);
            ret.Int8N_Ranged = this.Int8N_Ranged.Combine(rhs.Int8N_Ranged);
            ret.Int8 = this.Int8.Combine(rhs.Int8);
            ret.Int8_Ranged = this.Int8_Ranged.Combine(rhs.Int8_Ranged);
            ret.Unsafe = this.Unsafe.Combine(rhs.Unsafe);
            ret.P2IntN = this.P2IntN.Combine(rhs.P2IntN);
            ret.P2Int = this.P2Int.Combine(rhs.P2Int);
            ret.P3DoubleN = this.P3DoubleN.Combine(rhs.P3DoubleN);
            ret.P3Double = this.P3Double.Combine(rhs.P3Double);
            ret.P3IntN = this.P3IntN.Combine(rhs.P3IntN);
            ret.P3Int = this.P3Int.Combine(rhs.P3Int);
            ret.PercentN = this.PercentN.Combine(rhs.PercentN);
            ret.Percent = this.Percent.Combine(rhs.Percent);
            ret.RangeInt8N = this.RangeInt8N.Combine(rhs.RangeInt8N);
            ret.RangeInt8 = this.RangeInt8.Combine(rhs.RangeInt8);
            ret.RangeInt16N = this.RangeInt16N.Combine(rhs.RangeInt16N);
            ret.RangeInt16 = this.RangeInt16.Combine(rhs.RangeInt16);
            ret.RangeInt32N = this.RangeInt32N.Combine(rhs.RangeInt32N);
            ret.RangeInt32 = this.RangeInt32.Combine(rhs.RangeInt32);
            ret.RangeInt64N = this.RangeInt64N.Combine(rhs.RangeInt64N);
            ret.RangeInt64 = this.RangeInt64.Combine(rhs.RangeInt64);
            ret.RangeUInt8N = this.RangeUInt8N.Combine(rhs.RangeUInt8N);
            ret.RangeUInt8 = this.RangeUInt8.Combine(rhs.RangeUInt8);
            ret.RangeUInt16N = this.RangeUInt16N.Combine(rhs.RangeUInt16N);
            ret.RangeUInt16 = this.RangeUInt16.Combine(rhs.RangeUInt16);
            ret.RangeUInt32N = this.RangeUInt32N.Combine(rhs.RangeUInt32N);
            ret.RangeUInt32 = this.RangeUInt32.Combine(rhs.RangeUInt32);
            ret.RangeUInt64N = this.RangeUInt64N.Combine(rhs.RangeUInt64N);
            ret.RangeUInt64 = this.RangeUInt64.Combine(rhs.RangeUInt64);
            ret.String = this.String.Combine(rhs.String);
            ret.UDoubleN = this.UDoubleN.Combine(rhs.UDoubleN);
            ret.UDoubleN_Ranged = this.UDoubleN_Ranged.Combine(rhs.UDoubleN_Ranged);
            ret.UDouble = this.UDouble.Combine(rhs.UDouble);
            ret.UDouble_Ranged = this.UDouble_Ranged.Combine(rhs.UDouble_Ranged);
            ret.UInt16N = this.UInt16N.Combine(rhs.UInt16N);
            ret.UInt16N_Ranged = this.UInt16N_Ranged.Combine(rhs.UInt16N_Ranged);
            ret.UInt16 = this.UInt16.Combine(rhs.UInt16);
            ret.UInt16_Ranged = this.UInt16_Ranged.Combine(rhs.UInt16_Ranged);
            ret.UInt32N = this.UInt32N.Combine(rhs.UInt32N);
            ret.UInt32N_Ranged = this.UInt32N_Ranged.Combine(rhs.UInt32N_Ranged);
            ret.UInt32 = this.UInt32.Combine(rhs.UInt32);
            ret.UInt32_Ranged = this.UInt32_Ranged.Combine(rhs.UInt32_Ranged);
            ret.UInt64N = this.UInt64N.Combine(rhs.UInt64N);
            ret.UInt64N_Ranged = this.UInt64N_Ranged.Combine(rhs.UInt64N_Ranged);
            ret.UInt64 = this.UInt64.Combine(rhs.UInt64);
            ret.UInt64_Ranged = this.UInt64_Ranged.Combine(rhs.UInt64_Ranged);
            ret.UInt8N = this.UInt8N.Combine(rhs.UInt8N);
            ret.UInt8N_Ranged = this.UInt8N_Ranged.Combine(rhs.UInt8N_Ranged);
            ret.UInt8 = this.UInt8.Combine(rhs.UInt8);
            ret.UInt8_Ranged = this.UInt8_Ranged.Combine(rhs.UInt8_Ranged);
            ret.Enum = this.Enum.Combine(rhs.Enum);
            ret.EnumNull = this.EnumNull.Combine(rhs.EnumNull);
            ret.WildCard = this.WildCard.Combine(rhs.WildCard);
            ret.WildCardNull = this.WildCardNull.Combine(rhs.WildCardNull);
            ret.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.Ref.Overall.Combine(rhs.Ref.Overall), this.Ref.Specific.Combine(rhs.Ref.Specific));
            ret.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.Ref_NotNull.Overall.Combine(rhs.Ref_NotNull.Overall), this.Ref_NotNull.Specific.Combine(rhs.Ref_NotNull.Specific));
            ret.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.Ref_Singleton.Overall.Combine(rhs.Ref_Singleton.Overall), this.Ref_Singleton.Specific.Combine(rhs.Ref_Singleton.Specific));
            ret.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefGetter.Overall.Combine(rhs.RefGetter.Overall), this.RefGetter.Specific.Combine(rhs.RefGetter.Specific));
            ret.RefGetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefGetter_NotNull.Overall.Combine(rhs.RefGetter_NotNull.Overall), this.RefGetter_NotNull.Specific.Combine(rhs.RefGetter_NotNull.Specific));
            ret.RefGetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefGetter_Singleton.Overall.Combine(rhs.RefGetter_Singleton.Overall), this.RefGetter_Singleton.Specific.Combine(rhs.RefGetter_Singleton.Specific));
            ret.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefSetter.Overall.Combine(rhs.RefSetter.Overall), this.RefSetter.Specific.Combine(rhs.RefSetter.Specific));
            ret.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefSetter_NotNull.Overall.Combine(rhs.RefSetter_NotNull.Overall), this.RefSetter_NotNull.Specific.Combine(rhs.RefSetter_NotNull.Specific));
            ret.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefSetter_Singleton.Overall.Combine(rhs.RefSetter_Singleton.Overall), this.RefSetter_Singleton.Specific.Combine(rhs.RefSetter_Singleton.Specific));
            ret.List = new MaskItem<Exception, IEnumerable<Exception>>(this.List.Overall.Combine(rhs.List.Overall), new List<Exception>(this.List.Specific.And(rhs.List.Specific)));
            ret.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.RefList.Overall.Combine(rhs.RefList.Overall), new List<MaskItem<Exception, ObjectToRef_ErrorMask>>(this.RefList.Specific.And(rhs.RefList.Specific)));
            ret.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(this.Dict.Overall.Combine(rhs.Dict.Overall), new List<KeyValuePair<Exception, Exception>>(this.Dict.Specific.And(rhs.Dict.Specific)));
            ret.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(this.RefDict.Overall.Combine(rhs.RefDict.Overall), new List<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.RefDict.Specific.And(rhs.RefDict.Specific)));
            ret.KeyRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>(this.KeyRefDict.Overall.Combine(rhs.KeyRefDict.Overall), new List<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>(this.KeyRefDict.Specific.And(rhs.KeyRefDict.Specific)));
            ret.ValRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(this.ValRefDict.Overall.Combine(rhs.ValRefDict.Overall), new List<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.ValRefDict.Specific.And(rhs.ValRefDict.Specific)));
            ret.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.DictKeyedValue.Overall.Combine(rhs.DictKeyedValue.Overall), new List<MaskItem<Exception, ObjectToRef_ErrorMask>>(this.DictKeyedValue.Specific.And(rhs.DictKeyedValue.Specific)));
            return ret;
        }
        public static TestObject_Notifying_RPC_ErrorMask Combine(TestObject_Notifying_RPC_ErrorMask lhs, TestObject_Notifying_RPC_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TestObject_Notifying_RPC_CopyMask
    {
        #region Members
        public bool BoolN;
        public bool Bool;
        public bool CharN;
        public bool Char;
        public bool DateTimeNull;
        public bool DateTime;
        public bool DoubleN;
        public bool DoubleN_Ranged;
        public bool Double;
        public bool Double_Ranged;
        public bool FloatN;
        public bool FloatN_Ranged;
        public bool Float;
        public bool Float_Ranged;
        public bool Int16N;
        public bool Int16N_Ranged;
        public bool Int16;
        public bool Int16_Ranged;
        public bool Int32N;
        public bool Int32N_Ranged;
        public bool Int32;
        public bool Int32_Ranged;
        public bool Int64N;
        public bool Int64N_Ranged;
        public bool Int64;
        public bool Int64_Ranged;
        public bool Int8N;
        public bool Int8N_Ranged;
        public bool Int8;
        public bool Int8_Ranged;
        public bool Unsafe;
        public bool P2IntN;
        public bool P2Int;
        public bool P3DoubleN;
        public bool P3Double;
        public bool P3IntN;
        public bool P3Int;
        public bool PercentN;
        public bool Percent;
        public bool RangeInt8N;
        public bool RangeInt8;
        public bool RangeInt16N;
        public bool RangeInt16;
        public bool RangeInt32N;
        public bool RangeInt32;
        public bool RangeInt64N;
        public bool RangeInt64;
        public bool RangeUInt8N;
        public bool RangeUInt8;
        public bool RangeUInt16N;
        public bool RangeUInt16;
        public bool RangeUInt32N;
        public bool RangeUInt32;
        public bool RangeUInt64N;
        public bool RangeUInt64;
        public bool String;
        public bool UDoubleN;
        public bool UDoubleN_Ranged;
        public bool UDouble;
        public bool UDouble_Ranged;
        public bool UInt16N;
        public bool UInt16N_Ranged;
        public bool UInt16;
        public bool UInt16_Ranged;
        public bool UInt32N;
        public bool UInt32N_Ranged;
        public bool UInt32;
        public bool UInt32_Ranged;
        public bool UInt64N;
        public bool UInt64N_Ranged;
        public bool UInt64;
        public bool UInt64_Ranged;
        public bool UInt8N;
        public bool UInt8N_Ranged;
        public bool UInt8;
        public bool UInt8_Ranged;
        public bool Enum;
        public bool EnumNull;
        public bool WildCard;
        public bool WildCardNull;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> Ref_Singleton;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter_NotNull;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> RefSetter_Singleton;
        public CopyOption List;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefList;
        public bool Dict;
        public MaskItem<bool, KeyValuePair<(RefCopyType Type, ObjectToRef_CopyMask Mask), (RefCopyType Type, ObjectToRef_CopyMask Mask)>> RefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> KeyRefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> ValRefDict;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> DictKeyedValue;
        #endregion

    }
    #endregion


    #endregion

}
