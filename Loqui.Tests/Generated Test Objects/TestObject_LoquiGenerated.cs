/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loqui;
using Noggog;
using Noggog.Notifying;
using Loqui.Tests.Internals;
using Loqui.Tests;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using Noggog.Xml;
using Loqui.Xml;
using System.Diagnostics;

namespace Loqui.Tests
{
    #region Class
    public partial class TestObject : ITestObject, ILoquiObjectSetter, IEquatable<TestObject>
    {
        ILoquiRegistration ILoquiObject.Registration => TestObject_Registration.Instance;
        public static TestObject_Registration Registration => TestObject_Registration.Instance;

        #region Ctor
        public TestObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ByteArray
        private Byte[] _ByteArray;
        public Byte[] ByteArray
        {
            get => _ByteArray;
            set { this._ByteArray = value; }
        }
        #endregion
        #region ByteArrayNull
        private Byte[] _ByteArrayNull;
        public Byte[] ByteArrayNull
        {
            get => _ByteArrayNull;
            set { this._ByteArrayNull = value; }
        }
        #endregion
        #region ByteArrayNotNull
        private Byte[] _ByteArrayNotNull = new byte[3];
        public Byte[] ByteArrayNotNull
        {
            get => _ByteArrayNotNull;
            set
            {
                this._ByteArrayNotNull = value;
                if (value == null)
                {
                    this._ByteArrayNotNull = new byte[3];
                }
            }
        }
        #endregion
        #region ByteArraySingleton
        private Byte[] _ByteArraySingleton = new byte[3];
        public Byte[] ByteArraySingleton
        {
            get => _ByteArraySingleton;
            protected set
            {
                this._ByteArraySingleton = value;
                if (value == null)
                {
                    this._ByteArraySingleton = new byte[3];
                }
            }
        }
        #endregion
        #region BoolN
        public Boolean? BoolN { get; set; }
        #endregion
        #region Bool
        public Boolean Bool { get; set; }
        #endregion
        #region CharN
        public Char? CharN { get; set; }
        #endregion
        #region Char
        public Char Char { get; set; }
        #endregion
        #region DateTimeNull
        public DateTime? DateTimeNull { get; set; }
        #endregion
        #region DateTime
        public DateTime DateTime { get; set; }
        #endregion
        #region DoubleN
        public Double? DoubleN { get; set; }
        #endregion
        #region DoubleN_Ranged
        private Double? _DoubleN_Ranged;
        public Double? DoubleN_Ranged
        {
            get => _DoubleN_Ranged;
            set
            {
                this._DoubleN_Ranged = value?.PutInRange(DoubleN_Ranged_Range.Min, DoubleN_Ranged_Range.Max);
            }
        }
        public static RangeDouble DoubleN_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region Double
        public Double Double { get; set; }
        #endregion
        #region Double_Ranged
        private Double _Double_Ranged;
        public Double Double_Ranged
        {
            get => _Double_Ranged;
            set
            {
                this._Double_Ranged = value.PutInRange(Double_Ranged_Range.Min, Double_Ranged_Range.Max);
            }
        }
        public static RangeDouble Double_Ranged_Range = new RangeDouble(-5.41d, 5.51d);
        #endregion
        #region FloatN
        public Single? FloatN { get; set; }
        #endregion
        #region FloatN_Ranged
        private Single? _FloatN_Ranged;
        public Single? FloatN_Ranged
        {
            get => _FloatN_Ranged;
            set
            {
                this._FloatN_Ranged = value?.PutInRange(FloatN_Ranged_Range.Min, FloatN_Ranged_Range.Max);
            }
        }
        public static RangeFloat FloatN_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Float
        public Single Float { get; set; }
        #endregion
        #region Float_Ranged
        private Single _Float_Ranged;
        public Single Float_Ranged
        {
            get => _Float_Ranged;
            set
            {
                this._Float_Ranged = value.PutInRange(Float_Ranged_Range.Min, Float_Ranged_Range.Max);
            }
        }
        public static RangeFloat Float_Ranged_Range = new RangeFloat(-5.41f, 5.51f);
        #endregion
        #region Int16N
        public Int16? Int16N { get; set; }
        #endregion
        #region Int16N_Ranged
        private Int16? _Int16N_Ranged;
        public Int16? Int16N_Ranged
        {
            get => _Int16N_Ranged;
            set
            {
                this._Int16N_Ranged = value?.PutInRange(Int16N_Ranged_Range.Min, Int16N_Ranged_Range.Max);
            }
        }
        public static RangeInt16 Int16N_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int16
        public Int16 Int16 { get; set; }
        #endregion
        #region Int16_Ranged
        private Int16 _Int16_Ranged;
        public Int16 Int16_Ranged
        {
            get => _Int16_Ranged;
            set
            {
                this._Int16_Ranged = value.PutInRange(Int16_Ranged_Range.Min, Int16_Ranged_Range.Max);
            }
        }
        public static RangeInt16 Int16_Ranged_Range = new RangeInt16(-6, 7);
        #endregion
        #region Int32N
        public Int32? Int32N { get; set; }
        #endregion
        #region Int32N_Ranged
        private Int32? _Int32N_Ranged;
        public Int32? Int32N_Ranged
        {
            get => _Int32N_Ranged;
            set
            {
                this._Int32N_Ranged = value?.PutInRange(Int32N_Ranged_Range.Min, Int32N_Ranged_Range.Max);
            }
        }
        public static RangeInt32 Int32N_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int32
        public Int32 Int32 { get; set; }
        #endregion
        #region Int32_Ranged
        private Int32 _Int32_Ranged;
        public Int32 Int32_Ranged
        {
            get => _Int32_Ranged;
            set
            {
                this._Int32_Ranged = value.PutInRange(Int32_Ranged_Range.Min, Int32_Ranged_Range.Max);
            }
        }
        public static RangeInt32 Int32_Ranged_Range = new RangeInt32(-6, 7);
        #endregion
        #region Int64N
        public Int64? Int64N { get; set; }
        #endregion
        #region Int64N_Ranged
        private Int64? _Int64N_Ranged;
        public Int64? Int64N_Ranged
        {
            get => _Int64N_Ranged;
            set
            {
                this._Int64N_Ranged = value?.PutInRange(Int64N_Ranged_Range.Min, Int64N_Ranged_Range.Max);
            }
        }
        public static RangeInt64 Int64N_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int64
        public Int64 Int64 { get; set; }
        #endregion
        #region Int64_Ranged
        private Int64 _Int64_Ranged;
        public Int64 Int64_Ranged
        {
            get => _Int64_Ranged;
            set
            {
                this._Int64_Ranged = value.PutInRange(Int64_Ranged_Range.Min, Int64_Ranged_Range.Max);
            }
        }
        public static RangeInt64 Int64_Ranged_Range = new RangeInt64(-6, 7);
        #endregion
        #region Int8N
        public SByte? Int8N { get; set; }
        #endregion
        #region Int8N_Ranged
        private SByte? _Int8N_Ranged;
        public SByte? Int8N_Ranged
        {
            get => _Int8N_Ranged;
            set
            {
                this._Int8N_Ranged = value?.PutInRange(Int8N_Ranged_Range.Min, Int8N_Ranged_Range.Max);
            }
        }
        public static RangeInt8 Int8N_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Int8
        public SByte Int8 { get; set; }
        #endregion
        #region Int8_Ranged
        private SByte _Int8_Ranged;
        public SByte Int8_Ranged
        {
            get => _Int8_Ranged;
            set
            {
                this._Int8_Ranged = value.PutInRange(Int8_Ranged_Range.Min, Int8_Ranged_Range.Max);
            }
        }
        public static RangeInt8 Int8_Ranged_Range = new RangeInt8(-6, 7);
        #endregion
        #region Unsafe
        public bool Unsafe { get; set; }
        #endregion
        #region UnsafeLoqui
        public ObjectToRef UnsafeLoqui { get; set; }
        #endregion
        #region UnsafeNull
        public ObjectToRef UnsafeNull { get; set; }
        #endregion
        #region P2IntN
        public P2Int? P2IntN { get; set; }
        #endregion
        #region P2Int
        public P2Int P2Int { get; set; }
        #endregion
        #region P3DoubleN
        public P3Double? P3DoubleN { get; set; }
        #endregion
        #region P3Double
        public P3Double P3Double { get; set; }
        #endregion
        #region P3IntN
        public P3Int? P3IntN { get; set; }
        #endregion
        #region P3Int
        public P3Int P3Int { get; set; }
        #endregion
        #region PercentN
        public Percent? PercentN { get; set; }
        #endregion
        #region Percent
        public Percent Percent { get; set; }
        #endregion
        #region RangeInt8N
        public RangeInt8? RangeInt8N { get; set; }
        #endregion
        #region RangeInt8
        public RangeInt8 RangeInt8 { get; set; }
        #endregion
        #region RangeInt16N
        public RangeInt16? RangeInt16N { get; set; }
        #endregion
        #region RangeInt16
        public RangeInt16 RangeInt16 { get; set; }
        #endregion
        #region RangeInt32N
        public RangeInt32? RangeInt32N { get; set; }
        #endregion
        #region RangeInt32
        public RangeInt32 RangeInt32 { get; set; }
        #endregion
        #region RangeInt64N
        public RangeInt64? RangeInt64N { get; set; }
        #endregion
        #region RangeInt64
        public RangeInt64 RangeInt64 { get; set; }
        #endregion
        #region RangeUInt8N
        public RangeUInt8? RangeUInt8N { get; set; }
        #endregion
        #region RangeUInt8
        public RangeUInt8 RangeUInt8 { get; set; }
        #endregion
        #region RangeUInt16N
        public RangeUInt16? RangeUInt16N { get; set; }
        #endregion
        #region RangeUInt16
        public RangeUInt16 RangeUInt16 { get; set; }
        #endregion
        #region RangeUInt32N
        public RangeUInt32? RangeUInt32N { get; set; }
        #endregion
        #region RangeUInt32
        public RangeUInt32 RangeUInt32 { get; set; }
        #endregion
        #region RangeUInt64N
        public RangeUInt64? RangeUInt64N { get; set; }
        #endregion
        #region RangeUInt64
        public RangeUInt64 RangeUInt64 { get; set; }
        #endregion
        #region String
        public String String { get; set; }
        #endregion
        #region FilePath
        public FilePath FilePath { get; set; }
        #endregion
        #region FilePathNull
        public FilePath? FilePathNull { get; set; }
        #endregion
        #region DirectoryPath
        public DirectoryPath DirectoryPath { get; set; }
        #endregion
        #region DirectoryPathNull
        public DirectoryPath? DirectoryPathNull { get; set; }
        #endregion
        #region UDoubleN
        public UDouble? UDoubleN { get; set; }
        #endregion
        #region UDoubleN_Ranged
        private UDouble? _UDoubleN_Ranged;
        public UDouble? UDoubleN_Ranged
        {
            get => _UDoubleN_Ranged;
            set
            {
                this._UDoubleN_Ranged = value?.PutInRange(UDoubleN_Ranged_Range.Min, UDoubleN_Ranged_Range.Max);
            }
        }
        public static RangeUDouble UDoubleN_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UDouble
        public UDouble UDouble { get; set; }
        #endregion
        #region UDouble_Ranged
        private UDouble _UDouble_Ranged;
        public UDouble UDouble_Ranged
        {
            get => _UDouble_Ranged;
            set
            {
                this._UDouble_Ranged = value.PutInRange(UDouble_Ranged_Range.Min, UDouble_Ranged_Range.Max);
            }
        }
        public static RangeUDouble UDouble_Ranged_Range = new RangeUDouble(3.5d, 6.4d);
        #endregion
        #region UInt16N
        public UInt16? UInt16N { get; set; }
        #endregion
        #region UInt16N_Ranged
        private UInt16? _UInt16N_Ranged;
        public UInt16? UInt16N_Ranged
        {
            get => _UInt16N_Ranged;
            set
            {
                this._UInt16N_Ranged = value?.PutInRange(UInt16N_Ranged_Range.Min, UInt16N_Ranged_Range.Max);
            }
        }
        public static RangeUInt16 UInt16N_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt16
        public UInt16 UInt16 { get; set; }
        #endregion
        #region UInt16_Ranged
        private UInt16 _UInt16_Ranged;
        public UInt16 UInt16_Ranged
        {
            get => _UInt16_Ranged;
            set
            {
                this._UInt16_Ranged = value.PutInRange(UInt16_Ranged_Range.Min, UInt16_Ranged_Range.Max);
            }
        }
        public static RangeUInt16 UInt16_Ranged_Range = new RangeUInt16(3, 6);
        #endregion
        #region UInt32N
        public UInt32? UInt32N { get; set; }
        #endregion
        #region UInt32N_Ranged
        private UInt32? _UInt32N_Ranged;
        public UInt32? UInt32N_Ranged
        {
            get => _UInt32N_Ranged;
            set
            {
                this._UInt32N_Ranged = value?.PutInRange(UInt32N_Ranged_Range.Min, UInt32N_Ranged_Range.Max);
            }
        }
        public static RangeUInt32 UInt32N_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt32
        public UInt32 UInt32 { get; set; }
        #endregion
        #region UInt32_Ranged
        private UInt32 _UInt32_Ranged;
        public UInt32 UInt32_Ranged
        {
            get => _UInt32_Ranged;
            set
            {
                this._UInt32_Ranged = value.PutInRange(UInt32_Ranged_Range.Min, UInt32_Ranged_Range.Max);
            }
        }
        public static RangeUInt32 UInt32_Ranged_Range = new RangeUInt32(3, 6);
        #endregion
        #region UInt64N
        public UInt64? UInt64N { get; set; }
        #endregion
        #region UInt64N_Ranged
        private UInt64? _UInt64N_Ranged;
        public UInt64? UInt64N_Ranged
        {
            get => _UInt64N_Ranged;
            set
            {
                this._UInt64N_Ranged = value?.PutInRange(UInt64N_Ranged_Range.Min, UInt64N_Ranged_Range.Max);
            }
        }
        public static RangeUInt64 UInt64N_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt64
        public UInt64 UInt64 { get; set; }
        #endregion
        #region UInt64_Ranged
        private UInt64 _UInt64_Ranged;
        public UInt64 UInt64_Ranged
        {
            get => _UInt64_Ranged;
            set
            {
                this._UInt64_Ranged = value.PutInRange(UInt64_Ranged_Range.Min, UInt64_Ranged_Range.Max);
            }
        }
        public static RangeUInt64 UInt64_Ranged_Range = new RangeUInt64(3, 6);
        #endregion
        #region UInt8N
        public Byte? UInt8N { get; set; }
        #endregion
        #region UInt8N_Ranged
        private Byte? _UInt8N_Ranged;
        public Byte? UInt8N_Ranged
        {
            get => _UInt8N_Ranged;
            set
            {
                this._UInt8N_Ranged = value?.PutInRange(UInt8N_Ranged_Range.Min, UInt8N_Ranged_Range.Max);
            }
        }
        public static RangeUInt8 UInt8N_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region UInt8
        public Byte UInt8 { get; set; }
        #endregion
        #region UInt8_Ranged
        private Byte _UInt8_Ranged;
        public Byte UInt8_Ranged
        {
            get => _UInt8_Ranged;
            set
            {
                this._UInt8_Ranged = value.PutInRange(UInt8_Ranged_Range.Min, UInt8_Ranged_Range.Max);
            }
        }
        public static RangeUInt8 UInt8_Ranged_Range = new RangeUInt8(3, 6);
        #endregion
        #region Enum
        public TestEnum Enum { get; set; }
        #endregion
        #region EnumNull
        public TestEnum? EnumNull { get; set; }
        #endregion
        #region WildCard
        protected Object _WildCard;
        public Object WildCard
        {
            get => this._WildCard;
            set => this._WildCard = WildcardLink.Validate(value);
        }
        Object ITestObjectGetter.WildCard => this.WildCard;
        #endregion
        #region WildCardLoqui
        protected Object _WildCardLoqui;
        public Object WildCardLoqui
        {
            get => this._WildCardLoqui;
            set => this._WildCardLoqui = WildcardLink.Validate(value);
        }
        Object ITestObjectGetter.WildCardLoqui => this.WildCardLoqui;
        #endregion
        #region WildCardNull
        protected Object _WildCardNull;
        public Object WildCardNull
        {
            get => this._WildCardNull;
            set => this._WildCardNull = WildcardLink.Validate(value);
        }
        Object ITestObjectGetter.WildCardNull => this.WildCardNull;
        #endregion
        #region Ref
        public ObjectToRef Ref { get; set; }
        #endregion
        #region Ref_NotNull
        private ObjectToRef _Ref_NotNull = new ObjectToRef();
        public ObjectToRef Ref_NotNull
        {
            get => _Ref_NotNull;
            set => _Ref_NotNull = value ?? new ObjectToRef();
        }
        #endregion
        #region Ref_Singleton
        private ObjectToRef _Ref_Singleton_Object = new ObjectToRef();
        public ObjectToRef Ref_Singleton => _Ref_Singleton_Object;
        #endregion
        #region RefGetter
        public IObjectToRefGetter RefGetter { get; set; }
        #endregion
        #region RefGetter_NotNull
        private IObjectToRefGetter _RefGetter_NotNull = new ObjectToRef();
        public IObjectToRefGetter RefGetter_NotNull
        {
            get => _RefGetter_NotNull;
            set => _RefGetter_NotNull = value ?? new ObjectToRef();
        }
        #endregion
        #region RefGetter_Singleton
        private ObjectToRef _RefGetter_Singleton_Object = new ObjectToRef();
        public IObjectToRefGetter RefGetter_Singleton => _RefGetter_Singleton_Object;
        #endregion
        #region RefSetter
        public IObjectToRef RefSetter { get; set; }
        #endregion
        #region RefSetter_NotNull
        private IObjectToRef _RefSetter_NotNull = new ObjectToRef();
        public IObjectToRef RefSetter_NotNull
        {
            get => _RefSetter_NotNull;
            set => _RefSetter_NotNull = value ?? new ObjectToRef();
        }
        #endregion
        #region RefSetter_Singleton
        private ObjectToRef _RefSetter_Singleton_Object = new ObjectToRef();
        public IObjectToRef RefSetter_Singleton => _RefSetter_Singleton_Object;
        #endregion
        #region List
        private readonly INotifyingList<Boolean> _List = new NotifyingList<Boolean>();
        public INotifyingList<Boolean> List => _List;
        #region Interface Members
        INotifyingList<Boolean> ITestObject.List => _List;
        INotifyingListGetter<Boolean> ITestObjectGetter.List => _List;
        #endregion

        #endregion
        #region RefList
        private readonly INotifyingList<ObjectToRef> _RefList = new NotifyingList<ObjectToRef>();
        public INotifyingList<ObjectToRef> RefList => _RefList;
        #region Interface Members
        INotifyingList<ObjectToRef> ITestObject.RefList => _RefList;
        INotifyingListGetter<ObjectToRef> ITestObjectGetter.RefList => _RefList;
        #endregion

        #endregion
        #region Dict
        private readonly INotifyingDictionary<String, Boolean> _Dict = new NotifyingDictionary<String, Boolean>();
        public INotifyingDictionary<String, Boolean> Dict { get { return _Dict; } }
        #region Interface Members
        INotifyingDictionary<String, Boolean> ITestObject.Dict => _Dict;
        INotifyingDictionaryGetter<String, Boolean> ITestObjectGetter.Dict => _Dict;
        #endregion

        #endregion
        #region RefDict
        private readonly INotifyingDictionary<ObjectToRef, ObjectToRef> _RefDict = new NotifyingDictionary<ObjectToRef, ObjectToRef>();
        public INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get { return _RefDict; } }
        #region Interface Members
        INotifyingDictionary<ObjectToRef, ObjectToRef> ITestObject.RefDict => _RefDict;
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> ITestObjectGetter.RefDict => _RefDict;
        #endregion

        #endregion
        #region KeyRefDict
        private readonly INotifyingDictionary<ObjectToRef, Boolean> _KeyRefDict = new NotifyingDictionary<ObjectToRef, Boolean>();
        public INotifyingDictionary<ObjectToRef, Boolean> KeyRefDict { get { return _KeyRefDict; } }
        #region Interface Members
        INotifyingDictionary<ObjectToRef, Boolean> ITestObject.KeyRefDict => _KeyRefDict;
        INotifyingDictionaryGetter<ObjectToRef, Boolean> ITestObjectGetter.KeyRefDict => _KeyRefDict;
        #endregion

        #endregion
        #region ValRefDict
        private readonly INotifyingDictionary<String, ObjectToRef> _ValRefDict = new NotifyingDictionary<String, ObjectToRef>();
        public INotifyingDictionary<String, ObjectToRef> ValRefDict { get { return _ValRefDict; } }
        #region Interface Members
        INotifyingDictionary<String, ObjectToRef> ITestObject.ValRefDict => _ValRefDict;
        INotifyingDictionaryGetter<String, ObjectToRef> ITestObjectGetter.ValRefDict => _ValRefDict;
        #endregion

        #endregion
        #region DictKeyedValue
        private readonly INotifyingKeyedCollection<Int32, ObjectToRef> _DictKeyedValue = new NotifyingKeyedCollection<Int32, ObjectToRef>((item) => item.KeyField);
        public INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue => _DictKeyedValue;
        #region Interface Members
        INotifyingKeyedCollection<Int32, ObjectToRef> ITestObject.DictKeyedValue => _DictKeyedValue;
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> ITestObjectGetter.DictKeyedValue => _DictKeyedValue;
        #endregion

        #endregion

        #region Loqui Getter Interface

        protected object GetNthObject(ushort index) => TestObjectCommon.GetNthObject(index, this);
        object ILoquiObjectGetter.GetNthObject(ushort index) => this.GetNthObject(index);

        protected bool GetNthObjectHasBeenSet(ushort index) => TestObjectCommon.GetNthObjectHasBeenSet(index, this);
        bool ILoquiObjectGetter.GetNthObjectHasBeenSet(ushort index) => this.GetNthObjectHasBeenSet(index);

        protected void UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => TestObjectCommon.UnsetNthObject(index, this, cmds);
        void ILoquiObjectSetter.UnsetNthObject(ushort index, NotifyingUnsetParameters? cmds) => this.UnsetNthObject(index, cmds);

        #endregion

        #region Loqui Interface
        protected void SetNthObjectHasBeenSet(ushort index, bool on)
        {
            TestObjectCommon.SetNthObjectHasBeenSet(index, on, this);
        }
        void ILoquiObjectSetter.SetNthObjectHasBeenSet(ushort index, bool on) => this.SetNthObjectHasBeenSet(index, on);

        #endregion

        #region To String
        public override string ToString()
        {
            return TestObjectCommon.ToString(this, printMask: null);
        }

        public string ToString(
            string name = null,
            TestObject_Mask<bool> printMask = null)
        {
            return TestObjectCommon.ToString(this, name: name, printMask: printMask);
        }

        public void ToString(
            FileGeneration fg,
            string name = null)
        {
            TestObjectCommon.ToString(this, fg, name: name, printMask: null);
        }

        #endregion

        public TestObject_Mask<bool> GetHasBeenSetMask()
        {
            return TestObjectCommon.GetHasBeenSetMask(this);
        }
        #region Equals and Hash
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject rhs)
        {
            if (rhs == null) return false;
            if (!ByteArray.EqualsFast(rhs.ByteArray)) return false;
            if (!ByteArrayNull.EqualsFast(rhs.ByteArrayNull)) return false;
            if (!ByteArrayNotNull.EqualsFast(rhs.ByteArrayNotNull)) return false;
            if (!ByteArraySingleton.EqualsFast(rhs.ByteArraySingleton)) return false;
            if (BoolN != rhs.BoolN) return false;
            if (Bool != rhs.Bool) return false;
            if (CharN != rhs.CharN) return false;
            if (Char != rhs.Char) return false;
            if (DateTimeNull != rhs.DateTimeNull) return false;
            if (DateTime != rhs.DateTime) return false;
            if (DoubleN != rhs.DoubleN) return false;
            if (DoubleN_Ranged != rhs.DoubleN_Ranged) return false;
            if (Double != rhs.Double) return false;
            if (Double_Ranged != rhs.Double_Ranged) return false;
            if (FloatN != rhs.FloatN) return false;
            if (FloatN_Ranged != rhs.FloatN_Ranged) return false;
            if (Float != rhs.Float) return false;
            if (Float_Ranged != rhs.Float_Ranged) return false;
            if (Int16N != rhs.Int16N) return false;
            if (Int16N_Ranged != rhs.Int16N_Ranged) return false;
            if (Int16 != rhs.Int16) return false;
            if (Int16_Ranged != rhs.Int16_Ranged) return false;
            if (Int32N != rhs.Int32N) return false;
            if (Int32N_Ranged != rhs.Int32N_Ranged) return false;
            if (Int32 != rhs.Int32) return false;
            if (Int32_Ranged != rhs.Int32_Ranged) return false;
            if (Int64N != rhs.Int64N) return false;
            if (Int64N_Ranged != rhs.Int64N_Ranged) return false;
            if (Int64 != rhs.Int64) return false;
            if (Int64_Ranged != rhs.Int64_Ranged) return false;
            if (Int8N != rhs.Int8N) return false;
            if (Int8N_Ranged != rhs.Int8N_Ranged) return false;
            if (Int8 != rhs.Int8) return false;
            if (Int8_Ranged != rhs.Int8_Ranged) return false;
            if (!object.Equals(Unsafe, rhs.Unsafe)) return false;
            if (!object.Equals(UnsafeLoqui, rhs.UnsafeLoqui)) return false;
            if (!object.Equals(UnsafeNull, rhs.UnsafeNull)) return false;
            if (P2IntN != rhs.P2IntN) return false;
            if (P2Int != rhs.P2Int) return false;
            if (P3DoubleN != rhs.P3DoubleN) return false;
            if (P3Double != rhs.P3Double) return false;
            if (P3IntN != rhs.P3IntN) return false;
            if (P3Int != rhs.P3Int) return false;
            if (PercentN != rhs.PercentN) return false;
            if (Percent != rhs.Percent) return false;
            if (RangeInt8N != rhs.RangeInt8N) return false;
            if (RangeInt8 != rhs.RangeInt8) return false;
            if (RangeInt16N != rhs.RangeInt16N) return false;
            if (RangeInt16 != rhs.RangeInt16) return false;
            if (RangeInt32N != rhs.RangeInt32N) return false;
            if (RangeInt32 != rhs.RangeInt32) return false;
            if (RangeInt64N != rhs.RangeInt64N) return false;
            if (RangeInt64 != rhs.RangeInt64) return false;
            if (RangeUInt8N != rhs.RangeUInt8N) return false;
            if (RangeUInt8 != rhs.RangeUInt8) return false;
            if (RangeUInt16N != rhs.RangeUInt16N) return false;
            if (RangeUInt16 != rhs.RangeUInt16) return false;
            if (RangeUInt32N != rhs.RangeUInt32N) return false;
            if (RangeUInt32 != rhs.RangeUInt32) return false;
            if (RangeUInt64N != rhs.RangeUInt64N) return false;
            if (RangeUInt64 != rhs.RangeUInt64) return false;
            if (!object.Equals(String, rhs.String)) return false;
            if (!object.Equals(FilePath, rhs.FilePath)) return false;
            if (!object.Equals(FilePathNull, rhs.FilePathNull)) return false;
            if (!object.Equals(DirectoryPath, rhs.DirectoryPath)) return false;
            if (!object.Equals(DirectoryPathNull, rhs.DirectoryPathNull)) return false;
            if (UDoubleN != rhs.UDoubleN) return false;
            if (UDoubleN_Ranged != rhs.UDoubleN_Ranged) return false;
            if (UDouble != rhs.UDouble) return false;
            if (UDouble_Ranged != rhs.UDouble_Ranged) return false;
            if (UInt16N != rhs.UInt16N) return false;
            if (UInt16N_Ranged != rhs.UInt16N_Ranged) return false;
            if (UInt16 != rhs.UInt16) return false;
            if (UInt16_Ranged != rhs.UInt16_Ranged) return false;
            if (UInt32N != rhs.UInt32N) return false;
            if (UInt32N_Ranged != rhs.UInt32N_Ranged) return false;
            if (UInt32 != rhs.UInt32) return false;
            if (UInt32_Ranged != rhs.UInt32_Ranged) return false;
            if (UInt64N != rhs.UInt64N) return false;
            if (UInt64N_Ranged != rhs.UInt64N_Ranged) return false;
            if (UInt64 != rhs.UInt64) return false;
            if (UInt64_Ranged != rhs.UInt64_Ranged) return false;
            if (UInt8N != rhs.UInt8N) return false;
            if (UInt8N_Ranged != rhs.UInt8N_Ranged) return false;
            if (UInt8 != rhs.UInt8) return false;
            if (UInt8_Ranged != rhs.UInt8_Ranged) return false;
            if (Enum != rhs.Enum) return false;
            if (EnumNull != rhs.EnumNull) return false;
            if (!object.Equals(WildCard, rhs.WildCard)) return false;
            if (!object.Equals(WildCardLoqui, rhs.WildCardLoqui)) return false;
            if (!object.Equals(WildCardNull, rhs.WildCardNull)) return false;
            if (!object.Equals(Ref, rhs.Ref)) return false;
            if (!object.Equals(Ref_NotNull, rhs.Ref_NotNull)) return false;
            if (!object.Equals(Ref_Singleton, rhs.Ref_Singleton)) return false;
            if (!object.Equals(RefGetter, rhs.RefGetter)) return false;
            if (!object.Equals(RefGetter_NotNull, rhs.RefGetter_NotNull)) return false;
            if (!object.Equals(RefGetter_Singleton, rhs.RefGetter_Singleton)) return false;
            if (!object.Equals(RefSetter, rhs.RefSetter)) return false;
            if (!object.Equals(RefSetter_NotNull, rhs.RefSetter_NotNull)) return false;
            if (!object.Equals(RefSetter_Singleton, rhs.RefSetter_Singleton)) return false;
            if (!List.SequenceEqual(rhs.List)) return false;
            if (!RefList.SequenceEqual(rhs.RefList)) return false;
            if (!Dict.SequenceEqual(rhs.Dict)) return false;
            if (!RefDict.SequenceEqual(rhs.RefDict)) return false;
            if (!KeyRefDict.SequenceEqual(rhs.KeyRefDict)) return false;
            if (!ValRefDict.SequenceEqual(rhs.ValRefDict)) return false;
            if (!DictKeyedValue.SequenceEqual(rhs.DictKeyedValue)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int ret = 0;
            ret = HashHelper.GetHashCode(ByteArray).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ByteArrayNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ByteArrayNotNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ByteArraySingleton).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(BoolN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Bool).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(CharN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Char).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DateTimeNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DateTime).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DoubleN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DoubleN_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Double).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Double_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FloatN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FloatN_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Float).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Float_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int16N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int16N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int16).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int16_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int32N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int32N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int32).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int32_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int64N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int64N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int64).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int64_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int8N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int8N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int8).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Int8_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Unsafe).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UnsafeLoqui).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UnsafeNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P2IntN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P2Int).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P3DoubleN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P3Double).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P3IntN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(P3Int).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(PercentN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Percent).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt8N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt8).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt16N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt16).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt32N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt32).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt64N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeInt64).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt8N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt8).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt16N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt16).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt32N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt32).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt64N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RangeUInt64).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(String).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FilePath).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(FilePathNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectoryPath).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DirectoryPathNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UDoubleN).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UDoubleN_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UDouble).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UDouble_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt16N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt16N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt16).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt16_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt32N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt32N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt32).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt32_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt64N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt64N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt64).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt64_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt8N).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt8N_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt8).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(UInt8_Ranged).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Enum).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(EnumNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WildCard).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WildCardLoqui).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(WildCardNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ref).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ref_NotNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Ref_Singleton).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefGetter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefGetter_NotNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefGetter_Singleton).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefSetter).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefSetter_NotNull).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefSetter_Singleton).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(List).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefList).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(Dict).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(RefDict).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(KeyRefDict).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(ValRefDict).CombineHashCode(ret);
            ret = HashHelper.GetHashCode(DictKeyedValue).CombineHashCode(ret);
            return ret;
        }

        #endregion


        #region XML Translation
        #region XML Create
        [DebuggerStepThrough]
        public static TestObject Create_XML(XElement root)
        {
            return Create_XML(
                root: root,
                doMasks: false,
                errorMask: out var errorMask);
        }

        [DebuggerStepThrough]
        public static TestObject Create_XML(
            XElement root,
            out TestObject_ErrorMask errorMask)
        {
            return Create_XML(
                root: root,
                doMasks: true,
                errorMask: out errorMask);
        }

        [DebuggerStepThrough]
        public static TestObject Create_XML(
            XElement root,
            bool doMasks,
            out TestObject_ErrorMask errorMask)
        {
            var ret = Create_XML(
                root: root,
                doMasks: doMasks);
            errorMask = ret.ErrorMask;
            return ret.Object;
        }

        [DebuggerStepThrough]
        public static (TestObject Object, TestObject_ErrorMask ErrorMask) Create_XML(
            XElement root,
            bool doMasks)
        {
            TestObject_ErrorMask errMaskRet = null;
            var ret = Create_XML_Internal(
                root: root,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestObject_ErrorMask()) : default(Func<TestObject_ErrorMask>));
            return (ret, errMaskRet);
        }

        public static TestObject Create_XML(string path)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(root: root);
        }

        public static TestObject Create_XML(
            string path,
            out TestObject_ErrorMask errorMask)
        {
            var root = XDocument.Load(path).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        public static TestObject Create_XML(Stream stream)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(root: root);
        }

        public static TestObject Create_XML(
            Stream stream,
            out TestObject_ErrorMask errorMask)
        {
            var root = XDocument.Load(stream).Root;
            return Create_XML(
                root: root,
                errorMask: out errorMask);
        }

        #endregion

        #region XML Copy In
        public void CopyIn_XML(
            XElement root,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject, TestObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: false,
                mask: out var errorMask,
                cmds: cmds);
        }

        public virtual void CopyIn_XML(
            XElement root,
            out TestObject_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            LoquiXmlTranslation<TestObject, TestObject_ErrorMask>.Instance.CopyIn(
                root: root,
                item: this,
                skipProtected: true,
                doMasks: true,
                mask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            string path,
            out TestObject_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(path).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                cmds: cmds);
        }

        public void CopyIn_XML(
            Stream stream,
            out TestObject_ErrorMask errorMask,
            NotifyingFireParameters? cmds = null)
        {
            var root = XDocument.Load(stream).Root;
            this.CopyIn_XML(
                root: root,
                errorMask: out errorMask,
                cmds: cmds);
        }

        #endregion

        #region XML Write
        public virtual void Write_XML(
            XmlWriter writer,
            out TestObject_ErrorMask errorMask,
            string name = null)
        {
            errorMask = (TestObject_ErrorMask)this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: true);
        }

        public virtual void Write_XML(
            string path,
            out TestObject_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public virtual void Write_XML(
            Stream stream,
            out TestObject_ErrorMask errorMask,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name,
                    errorMask: out errorMask);
            }
        }

        public void Write_XML(
            XmlWriter writer,
            string name = null)
        {
            this.Write_XML_Internal(
                writer: writer,
                name: name,
                doMasks: false);
        }

        public void Write_XML(
            string path,
            string name = null)
        {
            using (var writer = new XmlTextWriter(path, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        public void Write_XML(
            Stream stream,
            string name = null)
        {
            using (var writer = new XmlTextWriter(stream, Encoding.ASCII))
            {
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 3;
                Write_XML(
                    writer: writer,
                    name: name);
            }
        }

        protected object Write_XML_Internal(
            XmlWriter writer,
            bool doMasks,
            string name = null)
        {
            TestObjectCommon.Write_XML(
                writer: writer,
                item: this,
                doMasks: doMasks,
                errorMask: out var errorMask);
            return errorMask;
        }
        #endregion

        private static TestObject Create_XML_Internal(
            XElement root,
            Func<TestObject_ErrorMask> errorMask)
        {
            var ret = new TestObject();
            try
            {
                foreach (var elem in root.Elements())
                {
                    Fill_XML_Internal(
                        item: ret,
                        root: elem,
                        name: elem.Name.LocalName,
                        errorMask: errorMask);
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
            return ret;
        }

        protected static void Fill_XML_Internal(
            TestObject item,
            XElement root,
            string name,
            Func<TestObject_ErrorMask> errorMask)
        {
            switch (name)
            {
                case "ByteArray":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item._ByteArray = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ByteArray,
                            subMask);
                    }
                    break;
                case "ByteArrayNull":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item._ByteArrayNull = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ByteArrayNull,
                            subMask);
                    }
                    break;
                case "ByteArrayNotNull":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item._ByteArrayNotNull = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ByteArrayNotNull,
                            subMask);
                    }
                    break;
                case "ByteArraySingleton":
                    {
                        Exception subMask;
                        var tryGet = ByteArrayXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item._ByteArraySingleton = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ByteArraySingleton,
                            subMask);
                    }
                    break;
                case "BoolN":
                    {
                        Exception subMask;
                        var tryGet = BooleanXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.BoolN = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.BoolN,
                            subMask);
                    }
                    break;
                case "Bool":
                    {
                        Exception subMask;
                        var tryGet = BooleanXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Bool = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Bool,
                            subMask);
                    }
                    break;
                case "CharN":
                    {
                        Exception subMask;
                        var tryGet = CharXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.CharN = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.CharN,
                            subMask);
                    }
                    break;
                case "Char":
                    {
                        Exception subMask;
                        var tryGet = CharXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Char = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Char,
                            subMask);
                    }
                    break;
                case "DateTimeNull":
                    {
                        Exception subMask;
                        var tryGet = DateTimeXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.DateTimeNull = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DateTimeNull,
                            subMask);
                    }
                    break;
                case "DateTime":
                    {
                        Exception subMask;
                        var tryGet = DateTimeXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.DateTime = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DateTime,
                            subMask);
                    }
                    break;
                case "DoubleN":
                    {
                        Exception subMask;
                        var tryGet = DoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.DoubleN = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DoubleN,
                            subMask);
                    }
                    break;
                case "DoubleN_Ranged":
                    {
                        Exception subMask;
                        var tryGet = DoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.DoubleN_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DoubleN_Ranged,
                            subMask);
                    }
                    break;
                case "Double":
                    {
                        Exception subMask;
                        var tryGet = DoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Double = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Double,
                            subMask);
                    }
                    break;
                case "Double_Ranged":
                    {
                        Exception subMask;
                        var tryGet = DoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Double_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Double_Ranged,
                            subMask);
                    }
                    break;
                case "FloatN":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.FloatN = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.FloatN,
                            subMask);
                    }
                    break;
                case "FloatN_Ranged":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.FloatN_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.FloatN_Ranged,
                            subMask);
                    }
                    break;
                case "Float":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Float = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Float,
                            subMask);
                    }
                    break;
                case "Float_Ranged":
                    {
                        Exception subMask;
                        var tryGet = FloatXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Float_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Float_Ranged,
                            subMask);
                    }
                    break;
                case "Int16N":
                    {
                        Exception subMask;
                        var tryGet = Int16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int16N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int16N,
                            subMask);
                    }
                    break;
                case "Int16N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int16N_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int16N_Ranged,
                            subMask);
                    }
                    break;
                case "Int16":
                    {
                        Exception subMask;
                        var tryGet = Int16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int16 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int16,
                            subMask);
                    }
                    break;
                case "Int16_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int16_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int16_Ranged,
                            subMask);
                    }
                    break;
                case "Int32N":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int32N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int32N,
                            subMask);
                    }
                    break;
                case "Int32N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int32N_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int32N_Ranged,
                            subMask);
                    }
                    break;
                case "Int32":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int32 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int32,
                            subMask);
                    }
                    break;
                case "Int32_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int32_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int32_Ranged,
                            subMask);
                    }
                    break;
                case "Int64N":
                    {
                        Exception subMask;
                        var tryGet = Int64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int64N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int64N,
                            subMask);
                    }
                    break;
                case "Int64N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int64N_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int64N_Ranged,
                            subMask);
                    }
                    break;
                case "Int64":
                    {
                        Exception subMask;
                        var tryGet = Int64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int64 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int64,
                            subMask);
                    }
                    break;
                case "Int64_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int64_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int64_Ranged,
                            subMask);
                    }
                    break;
                case "Int8N":
                    {
                        Exception subMask;
                        var tryGet = Int8XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int8N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int8N,
                            subMask);
                    }
                    break;
                case "Int8N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int8XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int8N_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int8N_Ranged,
                            subMask);
                    }
                    break;
                case "Int8":
                    {
                        Exception subMask;
                        var tryGet = Int8XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int8 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int8,
                            subMask);
                    }
                    break;
                case "Int8_Ranged":
                    {
                        Exception subMask;
                        var tryGet = Int8XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Int8_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int8_Ranged,
                            subMask);
                    }
                    break;
                case "Unsafe":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Unsafe = (bool)tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Unsafe,
                            subMask);
                    }
                    break;
                case "UnsafeLoqui":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UnsafeLoqui = (ObjectToRef)tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UnsafeLoqui,
                            subMask);
                    }
                    break;
                case "UnsafeNull":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UnsafeNull = (ObjectToRef)tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UnsafeNull,
                            subMask);
                    }
                    break;
                case "P2IntN":
                    {
                        Exception subMask;
                        var tryGet = P2IntXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.P2IntN = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P2IntN,
                            subMask);
                    }
                    break;
                case "P2Int":
                    {
                        Exception subMask;
                        var tryGet = P2IntXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.P2Int = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P2Int,
                            subMask);
                    }
                    break;
                case "P3DoubleN":
                    {
                        Exception subMask;
                        var tryGet = P3DoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.P3DoubleN = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P3DoubleN,
                            subMask);
                    }
                    break;
                case "P3Double":
                    {
                        Exception subMask;
                        var tryGet = P3DoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.P3Double = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P3Double,
                            subMask);
                    }
                    break;
                case "P3IntN":
                    {
                        Exception subMask;
                        var tryGet = P3IntXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.P3IntN = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P3IntN,
                            subMask);
                    }
                    break;
                case "P3Int":
                    {
                        Exception subMask;
                        var tryGet = P3IntXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.P3Int = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P3Int,
                            subMask);
                    }
                    break;
                case "PercentN":
                    {
                        Exception subMask;
                        var tryGet = PercentXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.PercentN = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.PercentN,
                            subMask);
                    }
                    break;
                case "Percent":
                    {
                        Exception subMask;
                        var tryGet = PercentXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Percent = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Percent,
                            subMask);
                    }
                    break;
                case "RangeInt8N":
                    {
                        Exception subMask;
                        var tryGet = RangeInt8XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeInt8N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt8N,
                            subMask);
                    }
                    break;
                case "RangeInt8":
                    {
                        Exception subMask;
                        var tryGet = RangeInt8XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeInt8 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt8,
                            subMask);
                    }
                    break;
                case "RangeInt16N":
                    {
                        Exception subMask;
                        var tryGet = RangeInt16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeInt16N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt16N,
                            subMask);
                    }
                    break;
                case "RangeInt16":
                    {
                        Exception subMask;
                        var tryGet = RangeInt16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeInt16 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt16,
                            subMask);
                    }
                    break;
                case "RangeInt32N":
                    {
                        Exception subMask;
                        var tryGet = RangeInt32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeInt32N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt32N,
                            subMask);
                    }
                    break;
                case "RangeInt32":
                    {
                        Exception subMask;
                        var tryGet = RangeInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeInt32 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt32,
                            subMask);
                    }
                    break;
                case "RangeInt64N":
                    {
                        Exception subMask;
                        var tryGet = RangeInt64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeInt64N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt64N,
                            subMask);
                    }
                    break;
                case "RangeInt64":
                    {
                        Exception subMask;
                        var tryGet = RangeInt64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeInt64 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt64,
                            subMask);
                    }
                    break;
                case "RangeUInt8N":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt8XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeUInt8N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt8N,
                            subMask);
                    }
                    break;
                case "RangeUInt8":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt8XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeUInt8 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt8,
                            subMask);
                    }
                    break;
                case "RangeUInt16N":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeUInt16N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt16N,
                            subMask);
                    }
                    break;
                case "RangeUInt16":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeUInt16 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt16,
                            subMask);
                    }
                    break;
                case "RangeUInt32N":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeUInt32N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt32N,
                            subMask);
                    }
                    break;
                case "RangeUInt32":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeUInt32 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt32,
                            subMask);
                    }
                    break;
                case "RangeUInt64N":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeUInt64N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt64N,
                            subMask);
                    }
                    break;
                case "RangeUInt64":
                    {
                        Exception subMask;
                        var tryGet = RangeUInt64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RangeUInt64 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt64,
                            subMask);
                    }
                    break;
                case "String":
                    {
                        Exception subMask;
                        var tryGet = StringXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.String = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.String,
                            subMask);
                    }
                    break;
                case "FilePath":
                    {
                        Exception subMask;
                        var tryGet = FilePathXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.FilePath = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.FilePath,
                            subMask);
                    }
                    break;
                case "FilePathNull":
                    {
                        Exception subMask;
                        var tryGet = FilePathXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.FilePathNull = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.FilePathNull,
                            subMask);
                    }
                    break;
                case "DirectoryPath":
                    {
                        Exception subMask;
                        var tryGet = DirectoryPathXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.DirectoryPath = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DirectoryPath,
                            subMask);
                    }
                    break;
                case "DirectoryPathNull":
                    {
                        Exception subMask;
                        var tryGet = DirectoryPathXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.DirectoryPathNull = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DirectoryPathNull,
                            subMask);
                    }
                    break;
                case "UDoubleN":
                    {
                        Exception subMask;
                        var tryGet = UDoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UDoubleN = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UDoubleN,
                            subMask);
                    }
                    break;
                case "UDoubleN_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UDoubleXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UDoubleN_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UDoubleN_Ranged,
                            subMask);
                    }
                    break;
                case "UDouble":
                    {
                        Exception subMask;
                        var tryGet = UDoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UDouble = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UDouble,
                            subMask);
                    }
                    break;
                case "UDouble_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UDoubleXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UDouble_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UDouble_Ranged,
                            subMask);
                    }
                    break;
                case "UInt16N":
                    {
                        Exception subMask;
                        var tryGet = UInt16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt16N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt16N,
                            subMask);
                    }
                    break;
                case "UInt16N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt16XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt16N_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt16N_Ranged,
                            subMask);
                    }
                    break;
                case "UInt16":
                    {
                        Exception subMask;
                        var tryGet = UInt16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt16 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt16,
                            subMask);
                    }
                    break;
                case "UInt16_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt16XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt16_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt16_Ranged,
                            subMask);
                    }
                    break;
                case "UInt32N":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt32N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt32N,
                            subMask);
                    }
                    break;
                case "UInt32N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt32N_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt32N_Ranged,
                            subMask);
                    }
                    break;
                case "UInt32":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt32 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt32,
                            subMask);
                    }
                    break;
                case "UInt32_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt32XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt32_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt32_Ranged,
                            subMask);
                    }
                    break;
                case "UInt64N":
                    {
                        Exception subMask;
                        var tryGet = UInt64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt64N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt64N,
                            subMask);
                    }
                    break;
                case "UInt64N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt64XmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt64N_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt64N_Ranged,
                            subMask);
                    }
                    break;
                case "UInt64":
                    {
                        Exception subMask;
                        var tryGet = UInt64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt64 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt64,
                            subMask);
                    }
                    break;
                case "UInt64_Ranged":
                    {
                        Exception subMask;
                        var tryGet = UInt64XmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt64_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt64_Ranged,
                            subMask);
                    }
                    break;
                case "UInt8N":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt8N = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt8N,
                            subMask);
                    }
                    break;
                case "UInt8N_Ranged":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.Parse(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt8N_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt8N_Ranged,
                            subMask);
                    }
                    break;
                case "UInt8":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt8 = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt8,
                            subMask);
                    }
                    break;
                case "UInt8_Ranged":
                    {
                        Exception subMask;
                        var tryGet = ByteXmlTranslation.Instance.ParseNonNull(
                            root,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.UInt8_Ranged = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt8_Ranged,
                            subMask);
                    }
                    break;
                case "Enum":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<TestEnum>.Instance.Parse(
                            root,
                            nullable: false,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Enum = tryGet.Value.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Enum,
                            subMask);
                    }
                    break;
                case "EnumNull":
                    {
                        Exception subMask;
                        var tryGet = EnumXmlTranslation<TestEnum>.Instance.Parse(
                            root,
                            nullable: true,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.EnumNull = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.EnumNull,
                            subMask);
                    }
                    break;
                case "WildCard":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.WildCard = (Object)tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.WildCard,
                            subMask);
                    }
                    break;
                case "WildCardLoqui":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.WildCardLoqui = (Object)tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.WildCardLoqui,
                            subMask);
                    }
                    break;
                case "WildCardNull":
                    {
                        object subMask;
                        var tryGet = WildcardXmlTranslation.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.WildCardNull = (Object)tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.WildCardNull,
                            subMask);
                    }
                    break;
                case "Ref":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            mask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Ref = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Ref,
                            subMask);
                    }
                    break;
                case "Ref_NotNull":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            mask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.Ref_NotNull = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Ref_NotNull,
                            subMask);
                    }
                    break;
                case "Ref_Singleton":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tmp = ObjectToRef.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out ObjectToRef_ErrorMask createMask);
                        ObjectToRefCommon.CopyFieldsFrom(
                            item: item._Ref_Singleton_Object,
                            rhs: tmp,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            doMasks: errorMask != null,
                            errorMask: out ObjectToRef_ErrorMask copyMask);
                        var loquiMask = ObjectToRef_ErrorMask.Combine(createMask, copyMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Ref_Singleton,
                            subMask);
                    }
                    break;
                case "RefGetter":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            mask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RefGetter = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefGetter,
                            subMask);
                    }
                    break;
                case "RefGetter_NotNull":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            mask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RefGetter_NotNull = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefGetter_NotNull,
                            subMask);
                    }
                    break;
                case "RefGetter_Singleton":
                    break;
                case "RefSetter":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            mask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RefSetter = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefSetter,
                            subMask);
                    }
                    break;
                case "RefSetter_NotNull":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tryGet = LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            mask: out subMask);
                        if (tryGet.Succeeded)
                        {
                            item.RefSetter_NotNull = tryGet.Value;
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefSetter_NotNull,
                            subMask);
                    }
                    break;
                case "RefSetter_Singleton":
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        var tmp = ObjectToRef.Create_XML(
                            root: root,
                            doMasks: errorMask != null,
                            errorMask: out ObjectToRef_ErrorMask createMask);
                        ObjectToRefCommon.CopyFieldsFrom(
                            item: item._RefSetter_Singleton_Object,
                            rhs: tmp,
                            def: null,
                            cmds: null,
                            copyMask: null,
                            doMasks: errorMask != null,
                            errorMask: out ObjectToRef_ErrorMask copyMask);
                        var loquiMask = ObjectToRef_ErrorMask.Combine(createMask, copyMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefSetter_Singleton,
                            subMask);
                    }
                    break;
                case "List":
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        var listTryGet = ListXmlTranslation<Boolean, Exception>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out Exception listSubMask) =>
                            {
                                return BooleanXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: listDoMasks,
                                    errorMask: out listSubMask).Bubble((o) => o.Value);
                            }
                            );
                        if (listTryGet.Succeeded)
                        {
                            item._List.SetTo(listTryGet.Value);
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.List,
                            subMask);
                    }
                    break;
                case "RefList":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> subMask;
                        var listTryGet = ListXmlTranslation<ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            transl: (XElement r, bool listDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> listSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: listDoMasks,
                                    mask: out listSubMask);
                            }
                            );
                        if (listTryGet.Succeeded)
                        {
                            item._RefList.SetTo(listTryGet.Value);
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefList,
                            subMask);
                    }
                    break;
                case "Dict":
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> subMask;
                        var dictTryGet = DictXmlTranslation<String, Boolean, Exception, Exception>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            keyTransl: (XElement r, bool dictDoMasks, out Exception dictSubMask) =>
                            {
                                return StringXmlTranslation.Instance.Parse(
                                    r,
                                    doMasks: dictDoMasks,
                                    errorMask: out dictSubMask);
                            }
                            ,
                            valTransl: (XElement r, bool dictDoMasks, out Exception dictSubMask) =>
                            {
                                return BooleanXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: dictDoMasks,
                                    errorMask: out dictSubMask).Bubble((o) => o.Value);
                            }
                            );
                        if (dictTryGet.Succeeded)
                        {
                            item._Dict.SetTo(dictTryGet.Value, cmds: null);
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Dict,
                            subMask);
                    }
                    break;
                case "RefDict":
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>> subMask;
                        var dictTryGet = DictXmlTranslation<ObjectToRef, ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            keyTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            ,
                            valTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            );
                        if (dictTryGet.Succeeded)
                        {
                            item._RefDict.SetTo(dictTryGet.Value, cmds: null);
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefDict,
                            subMask);
                    }
                    break;
                case "KeyRefDict":
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>> subMask;
                        var dictTryGet = DictXmlTranslation<ObjectToRef, Boolean, MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            keyTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            ,
                            valTransl: (XElement r, bool dictDoMasks, out Exception dictSubMask) =>
                            {
                                return BooleanXmlTranslation.Instance.Parse(
                                    r,
                                    nullable: false,
                                    doMasks: dictDoMasks,
                                    errorMask: out dictSubMask).Bubble((o) => o.Value);
                            }
                            );
                        if (dictTryGet.Succeeded)
                        {
                            item._KeyRefDict.SetTo(dictTryGet.Value, cmds: null);
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.KeyRefDict,
                            subMask);
                    }
                    break;
                case "ValRefDict":
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>> subMask;
                        var dictTryGet = DictXmlTranslation<String, ObjectToRef, Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            keyTransl: (XElement r, bool dictDoMasks, out Exception dictSubMask) =>
                            {
                                return StringXmlTranslation.Instance.Parse(
                                    r,
                                    doMasks: dictDoMasks,
                                    errorMask: out dictSubMask);
                            }
                            ,
                            valTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            );
                        if (dictTryGet.Succeeded)
                        {
                            item._ValRefDict.SetTo(dictTryGet.Value, cmds: null);
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ValRefDict,
                            subMask);
                    }
                    break;
                case "DictKeyedValue":
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> subMask;
                        var dictTryGet = KeyedDictXmlTranslation<Int32, ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Parse(
                            root: root,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            valTransl: (XElement r, bool dictDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                return LoquiXmlTranslation<ObjectToRef, ObjectToRef_ErrorMask>.Instance.Parse(
                                    root: r,
                                    doMasks: dictDoMasks,
                                    mask: out dictSubMask);
                            }
                            );
                        if (dictTryGet.Succeeded)
                        {
                            item._DictKeyedValue.SetTo(dictTryGet.Value, cmds: null);
                        }
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DictKeyedValue,
                            subMask);
                    }
                    break;
                default:
                    break;
            }
        }

        #endregion

        public TestObject Copy(
            TestObject_CopyMask copyMask = null,
            ITestObjectGetter def = null)
        {
            return TestObject.Copy(
                this,
                copyMask: copyMask,
                def: def);
        }

        public static TestObject Copy(
            ITestObject item,
            TestObject_CopyMask copyMask = null,
            ITestObjectGetter def = null)
        {
            TestObject ret;
            if (item.GetType().Equals(typeof(TestObject)))
            {
                ret = new TestObject();
            }
            else
            {
                ret = (TestObject)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        public static CopyType CopyGeneric<CopyType>(
            CopyType item,
            TestObject_CopyMask copyMask = null,
            ITestObjectGetter def = null)
            where CopyType : class, ITestObject
        {
            CopyType ret;
            if (item.GetType().Equals(typeof(TestObject)))
            {
                ret = new TestObject() as CopyType;
            }
            else
            {
                ret = (CopyType)Activator.CreateInstance(item.GetType());
            }
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                doMasks: false,
                errorMask: null,
                cmds: null,
                def: def);
            return ret;
        }

        public static TestObject Copy_ToLoqui(
            ITestObjectGetter item,
            TestObject_CopyMask copyMask = null,
            ITestObjectGetter def = null)
        {
            var ret = new TestObject();
            ret.CopyFieldsFrom(
                item,
                copyMask: copyMask,
                def: def);
            return ret;
        }

        void ILoquiObjectSetter.SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds) => this.SetNthObject(index, obj, cmds);
        protected void SetNthObject(ushort index, object obj, NotifyingFireParameters? cmds = null)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                    this._ByteArray = (Byte[])obj;
                    break;
                case TestObject_FieldIndex.ByteArrayNull:
                    this._ByteArrayNull = (Byte[])obj;
                    break;
                case TestObject_FieldIndex.ByteArrayNotNull:
                    this._ByteArrayNotNull = (Byte[])obj;
                    break;
                case TestObject_FieldIndex.ByteArraySingleton:
                    this._ByteArraySingleton = (Byte[])obj;
                    break;
                case TestObject_FieldIndex.BoolN:
                    this.BoolN = (Boolean?)obj;
                    break;
                case TestObject_FieldIndex.Bool:
                    this.Bool = (Boolean)obj;
                    break;
                case TestObject_FieldIndex.CharN:
                    this.CharN = (Char?)obj;
                    break;
                case TestObject_FieldIndex.Char:
                    this.Char = (Char)obj;
                    break;
                case TestObject_FieldIndex.DateTimeNull:
                    this.DateTimeNull = (DateTime?)obj;
                    break;
                case TestObject_FieldIndex.DateTime:
                    this.DateTime = (DateTime)obj;
                    break;
                case TestObject_FieldIndex.DoubleN:
                    this.DoubleN = (Double?)obj;
                    break;
                case TestObject_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = (Double?)obj;
                    break;
                case TestObject_FieldIndex.Double:
                    this.Double = (Double)obj;
                    break;
                case TestObject_FieldIndex.Double_Ranged:
                    this.Double_Ranged = (Double)obj;
                    break;
                case TestObject_FieldIndex.FloatN:
                    this.FloatN = (Single?)obj;
                    break;
                case TestObject_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = (Single?)obj;
                    break;
                case TestObject_FieldIndex.Float:
                    this.Float = (Single)obj;
                    break;
                case TestObject_FieldIndex.Float_Ranged:
                    this.Float_Ranged = (Single)obj;
                    break;
                case TestObject_FieldIndex.Int16N:
                    this.Int16N = (Int16?)obj;
                    break;
                case TestObject_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = (Int16?)obj;
                    break;
                case TestObject_FieldIndex.Int16:
                    this.Int16 = (Int16)obj;
                    break;
                case TestObject_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = (Int16)obj;
                    break;
                case TestObject_FieldIndex.Int32N:
                    this.Int32N = (Int32?)obj;
                    break;
                case TestObject_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = (Int32?)obj;
                    break;
                case TestObject_FieldIndex.Int32:
                    this.Int32 = (Int32)obj;
                    break;
                case TestObject_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = (Int32)obj;
                    break;
                case TestObject_FieldIndex.Int64N:
                    this.Int64N = (Int64?)obj;
                    break;
                case TestObject_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = (Int64?)obj;
                    break;
                case TestObject_FieldIndex.Int64:
                    this.Int64 = (Int64)obj;
                    break;
                case TestObject_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = (Int64)obj;
                    break;
                case TestObject_FieldIndex.Int8N:
                    this.Int8N = (SByte?)obj;
                    break;
                case TestObject_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = (SByte?)obj;
                    break;
                case TestObject_FieldIndex.Int8:
                    this.Int8 = (SByte)obj;
                    break;
                case TestObject_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = (SByte)obj;
                    break;
                case TestObject_FieldIndex.Unsafe:
                    this.Unsafe = (bool)obj;
                    break;
                case TestObject_FieldIndex.UnsafeLoqui:
                    this.UnsafeLoqui = (ObjectToRef)obj;
                    break;
                case TestObject_FieldIndex.UnsafeNull:
                    this.UnsafeNull = (ObjectToRef)obj;
                    break;
                case TestObject_FieldIndex.P2IntN:
                    this.P2IntN = (P2Int?)obj;
                    break;
                case TestObject_FieldIndex.P2Int:
                    this.P2Int = (P2Int)obj;
                    break;
                case TestObject_FieldIndex.P3DoubleN:
                    this.P3DoubleN = (P3Double?)obj;
                    break;
                case TestObject_FieldIndex.P3Double:
                    this.P3Double = (P3Double)obj;
                    break;
                case TestObject_FieldIndex.P3IntN:
                    this.P3IntN = (P3Int?)obj;
                    break;
                case TestObject_FieldIndex.P3Int:
                    this.P3Int = (P3Int)obj;
                    break;
                case TestObject_FieldIndex.PercentN:
                    this.PercentN = (Percent?)obj;
                    break;
                case TestObject_FieldIndex.Percent:
                    this.Percent = (Percent)obj;
                    break;
                case TestObject_FieldIndex.RangeInt8N:
                    this.RangeInt8N = (RangeInt8?)obj;
                    break;
                case TestObject_FieldIndex.RangeInt8:
                    this.RangeInt8 = (RangeInt8)obj;
                    break;
                case TestObject_FieldIndex.RangeInt16N:
                    this.RangeInt16N = (RangeInt16?)obj;
                    break;
                case TestObject_FieldIndex.RangeInt16:
                    this.RangeInt16 = (RangeInt16)obj;
                    break;
                case TestObject_FieldIndex.RangeInt32N:
                    this.RangeInt32N = (RangeInt32?)obj;
                    break;
                case TestObject_FieldIndex.RangeInt32:
                    this.RangeInt32 = (RangeInt32)obj;
                    break;
                case TestObject_FieldIndex.RangeInt64N:
                    this.RangeInt64N = (RangeInt64?)obj;
                    break;
                case TestObject_FieldIndex.RangeInt64:
                    this.RangeInt64 = (RangeInt64)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = (RangeUInt8?)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = (RangeUInt8)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = (RangeUInt16?)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = (RangeUInt16)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = (RangeUInt32?)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = (RangeUInt32)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = (RangeUInt64?)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = (RangeUInt64)obj;
                    break;
                case TestObject_FieldIndex.String:
                    this.String = (String)obj;
                    break;
                case TestObject_FieldIndex.FilePath:
                    this.FilePath = (FilePath)obj;
                    break;
                case TestObject_FieldIndex.FilePathNull:
                    this.FilePathNull = (FilePath?)obj;
                    break;
                case TestObject_FieldIndex.DirectoryPath:
                    this.DirectoryPath = (DirectoryPath)obj;
                    break;
                case TestObject_FieldIndex.DirectoryPathNull:
                    this.DirectoryPathNull = (DirectoryPath?)obj;
                    break;
                case TestObject_FieldIndex.UDoubleN:
                    this.UDoubleN = (UDouble?)obj;
                    break;
                case TestObject_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = (UDouble?)obj;
                    break;
                case TestObject_FieldIndex.UDouble:
                    this.UDouble = (UDouble)obj;
                    break;
                case TestObject_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = (UDouble)obj;
                    break;
                case TestObject_FieldIndex.UInt16N:
                    this.UInt16N = (UInt16?)obj;
                    break;
                case TestObject_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = (UInt16?)obj;
                    break;
                case TestObject_FieldIndex.UInt16:
                    this.UInt16 = (UInt16)obj;
                    break;
                case TestObject_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = (UInt16)obj;
                    break;
                case TestObject_FieldIndex.UInt32N:
                    this.UInt32N = (UInt32?)obj;
                    break;
                case TestObject_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = (UInt32?)obj;
                    break;
                case TestObject_FieldIndex.UInt32:
                    this.UInt32 = (UInt32)obj;
                    break;
                case TestObject_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = (UInt32)obj;
                    break;
                case TestObject_FieldIndex.UInt64N:
                    this.UInt64N = (UInt64?)obj;
                    break;
                case TestObject_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = (UInt64?)obj;
                    break;
                case TestObject_FieldIndex.UInt64:
                    this.UInt64 = (UInt64)obj;
                    break;
                case TestObject_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = (UInt64)obj;
                    break;
                case TestObject_FieldIndex.UInt8N:
                    this.UInt8N = (Byte?)obj;
                    break;
                case TestObject_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = (Byte?)obj;
                    break;
                case TestObject_FieldIndex.UInt8:
                    this.UInt8 = (Byte)obj;
                    break;
                case TestObject_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = (Byte)obj;
                    break;
                case TestObject_FieldIndex.Enum:
                    this.Enum = (TestEnum)obj;
                    break;
                case TestObject_FieldIndex.EnumNull:
                    this.EnumNull = (TestEnum?)obj;
                    break;
                case TestObject_FieldIndex.WildCard:
                    this.WildCard = (Object)obj;
                    break;
                case TestObject_FieldIndex.WildCardLoqui:
                    this.WildCardLoqui = (Object)obj;
                    break;
                case TestObject_FieldIndex.WildCardNull:
                    this.WildCardNull = (Object)obj;
                    break;
                case TestObject_FieldIndex.Ref:
                    this.Ref = (ObjectToRef)obj;
                    break;
                case TestObject_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = (ObjectToRef)obj;
                    break;
                case TestObject_FieldIndex.Ref_Singleton:
                    this._Ref_Singleton_Object.CopyFieldsFrom(rhs: (ObjectToRef)obj, cmds: cmds);
                    break;
                case TestObject_FieldIndex.RefGetter:
                    this.RefGetter = (IObjectToRefGetter)obj;
                    break;
                case TestObject_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = (IObjectToRefGetter)obj;
                    break;
                case TestObject_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Cannot set singleton member RefGetter_Singleton");
                case TestObject_FieldIndex.RefSetter:
                    this.RefSetter = (IObjectToRef)obj;
                    break;
                case TestObject_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = (IObjectToRef)obj;
                    break;
                case TestObject_FieldIndex.RefSetter_Singleton:
                    this._RefSetter_Singleton_Object.CopyFieldsFrom(rhs: (IObjectToRef)obj, cmds: cmds);
                    break;
                case TestObject_FieldIndex.List:
                    this._List.SetTo((IEnumerable<Boolean>)obj, cmds);
                    break;
                case TestObject_FieldIndex.RefList:
                    this._RefList.SetTo((IEnumerable<ObjectToRef>)obj, cmds);
                    break;
                case TestObject_FieldIndex.Dict:
                    this.Dict.SetTo(
                        ((NotifyingDictionary<String, Boolean>)obj).Select(
                            (i) => new KeyValuePair<String, Boolean>(
                                i.Key,
                                i.Value)),
                        cmds);
                    break;
                case TestObject_FieldIndex.RefDict:
                    this.RefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                i.Key.Copy(),
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_FieldIndex.KeyRefDict:
                    this.KeyRefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, Boolean>)obj).Select(
                            (i) => new KeyValuePair<ObjectToRef, Boolean>(
                                i.Key.Copy(),
                                i.Value)),
                        cmds);
                    break;
                case TestObject_FieldIndex.ValRefDict:
                    this.ValRefDict.SetTo(
                        ((NotifyingDictionary<String, ObjectToRef>)obj).Select(
                            (i) => new KeyValuePair<String, ObjectToRef>(
                                i.Key,
                                i.Value.Copy())),
                        cmds);
                    break;
                case TestObject_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)(NotifyingDictionary<Int32, ObjectToRef>)obj),
                        cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        partial void ClearPartial(NotifyingUnsetParameters? cmds);

        protected void CallClearPartial_Internal(NotifyingUnsetParameters? cmds)
        {
            ClearPartial(cmds);
        }

        public void Clear(NotifyingUnsetParameters? cmds = null)
        {
            CallClearPartial_Internal(cmds);
            TestObjectCommon.Clear(this, cmds);
        }


        public static TestObject Create(IEnumerable<KeyValuePair<ushort, object>> fields)
        {
            var ret = new TestObject();
            foreach (var pair in fields)
            {
                CopyInInternal_TestObject(ret, pair);
            }
            return ret;
        }

        protected static void CopyInInternal_TestObject(TestObject obj, KeyValuePair<ushort, object> pair)
        {
            if (!EnumExt.TryParse(pair.Key, out TestObject_FieldIndex enu))
            {
                throw new ArgumentException($"Unknown index: {pair.Key}");
            }
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                    obj._ByteArray = (Byte[])pair.Value;
                    break;
                case TestObject_FieldIndex.ByteArrayNull:
                    obj._ByteArrayNull = (Byte[])pair.Value;
                    break;
                case TestObject_FieldIndex.ByteArrayNotNull:
                    obj._ByteArrayNotNull = (Byte[])pair.Value;
                    break;
                case TestObject_FieldIndex.ByteArraySingleton:
                    obj._ByteArraySingleton = (Byte[])pair.Value;
                    break;
                case TestObject_FieldIndex.BoolN:
                    obj.BoolN = (Boolean?)pair.Value;
                    break;
                case TestObject_FieldIndex.Bool:
                    obj.Bool = (Boolean)pair.Value;
                    break;
                case TestObject_FieldIndex.CharN:
                    obj.CharN = (Char?)pair.Value;
                    break;
                case TestObject_FieldIndex.Char:
                    obj.Char = (Char)pair.Value;
                    break;
                case TestObject_FieldIndex.DateTimeNull:
                    obj.DateTimeNull = (DateTime?)pair.Value;
                    break;
                case TestObject_FieldIndex.DateTime:
                    obj.DateTime = (DateTime)pair.Value;
                    break;
                case TestObject_FieldIndex.DoubleN:
                    obj.DoubleN = (Double?)pair.Value;
                    break;
                case TestObject_FieldIndex.DoubleN_Ranged:
                    obj.DoubleN_Ranged = (Double?)pair.Value;
                    break;
                case TestObject_FieldIndex.Double:
                    obj.Double = (Double)pair.Value;
                    break;
                case TestObject_FieldIndex.Double_Ranged:
                    obj.Double_Ranged = (Double)pair.Value;
                    break;
                case TestObject_FieldIndex.FloatN:
                    obj.FloatN = (Single?)pair.Value;
                    break;
                case TestObject_FieldIndex.FloatN_Ranged:
                    obj.FloatN_Ranged = (Single?)pair.Value;
                    break;
                case TestObject_FieldIndex.Float:
                    obj.Float = (Single)pair.Value;
                    break;
                case TestObject_FieldIndex.Float_Ranged:
                    obj.Float_Ranged = (Single)pair.Value;
                    break;
                case TestObject_FieldIndex.Int16N:
                    obj.Int16N = (Int16?)pair.Value;
                    break;
                case TestObject_FieldIndex.Int16N_Ranged:
                    obj.Int16N_Ranged = (Int16?)pair.Value;
                    break;
                case TestObject_FieldIndex.Int16:
                    obj.Int16 = (Int16)pair.Value;
                    break;
                case TestObject_FieldIndex.Int16_Ranged:
                    obj.Int16_Ranged = (Int16)pair.Value;
                    break;
                case TestObject_FieldIndex.Int32N:
                    obj.Int32N = (Int32?)pair.Value;
                    break;
                case TestObject_FieldIndex.Int32N_Ranged:
                    obj.Int32N_Ranged = (Int32?)pair.Value;
                    break;
                case TestObject_FieldIndex.Int32:
                    obj.Int32 = (Int32)pair.Value;
                    break;
                case TestObject_FieldIndex.Int32_Ranged:
                    obj.Int32_Ranged = (Int32)pair.Value;
                    break;
                case TestObject_FieldIndex.Int64N:
                    obj.Int64N = (Int64?)pair.Value;
                    break;
                case TestObject_FieldIndex.Int64N_Ranged:
                    obj.Int64N_Ranged = (Int64?)pair.Value;
                    break;
                case TestObject_FieldIndex.Int64:
                    obj.Int64 = (Int64)pair.Value;
                    break;
                case TestObject_FieldIndex.Int64_Ranged:
                    obj.Int64_Ranged = (Int64)pair.Value;
                    break;
                case TestObject_FieldIndex.Int8N:
                    obj.Int8N = (SByte?)pair.Value;
                    break;
                case TestObject_FieldIndex.Int8N_Ranged:
                    obj.Int8N_Ranged = (SByte?)pair.Value;
                    break;
                case TestObject_FieldIndex.Int8:
                    obj.Int8 = (SByte)pair.Value;
                    break;
                case TestObject_FieldIndex.Int8_Ranged:
                    obj.Int8_Ranged = (SByte)pair.Value;
                    break;
                case TestObject_FieldIndex.Unsafe:
                    obj.Unsafe = (bool)pair.Value;
                    break;
                case TestObject_FieldIndex.UnsafeLoqui:
                    obj.UnsafeLoqui = (ObjectToRef)pair.Value;
                    break;
                case TestObject_FieldIndex.UnsafeNull:
                    obj.UnsafeNull = (ObjectToRef)pair.Value;
                    break;
                case TestObject_FieldIndex.P2IntN:
                    obj.P2IntN = (P2Int?)pair.Value;
                    break;
                case TestObject_FieldIndex.P2Int:
                    obj.P2Int = (P2Int)pair.Value;
                    break;
                case TestObject_FieldIndex.P3DoubleN:
                    obj.P3DoubleN = (P3Double?)pair.Value;
                    break;
                case TestObject_FieldIndex.P3Double:
                    obj.P3Double = (P3Double)pair.Value;
                    break;
                case TestObject_FieldIndex.P3IntN:
                    obj.P3IntN = (P3Int?)pair.Value;
                    break;
                case TestObject_FieldIndex.P3Int:
                    obj.P3Int = (P3Int)pair.Value;
                    break;
                case TestObject_FieldIndex.PercentN:
                    obj.PercentN = (Percent?)pair.Value;
                    break;
                case TestObject_FieldIndex.Percent:
                    obj.Percent = (Percent)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeInt8N:
                    obj.RangeInt8N = (RangeInt8?)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeInt8:
                    obj.RangeInt8 = (RangeInt8)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeInt16N:
                    obj.RangeInt16N = (RangeInt16?)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeInt16:
                    obj.RangeInt16 = (RangeInt16)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeInt32N:
                    obj.RangeInt32N = (RangeInt32?)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeInt32:
                    obj.RangeInt32 = (RangeInt32)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeInt64N:
                    obj.RangeInt64N = (RangeInt64?)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeInt64:
                    obj.RangeInt64 = (RangeInt64)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeUInt8N:
                    obj.RangeUInt8N = (RangeUInt8?)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeUInt8:
                    obj.RangeUInt8 = (RangeUInt8)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeUInt16N:
                    obj.RangeUInt16N = (RangeUInt16?)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeUInt16:
                    obj.RangeUInt16 = (RangeUInt16)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeUInt32N:
                    obj.RangeUInt32N = (RangeUInt32?)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeUInt32:
                    obj.RangeUInt32 = (RangeUInt32)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeUInt64N:
                    obj.RangeUInt64N = (RangeUInt64?)pair.Value;
                    break;
                case TestObject_FieldIndex.RangeUInt64:
                    obj.RangeUInt64 = (RangeUInt64)pair.Value;
                    break;
                case TestObject_FieldIndex.String:
                    obj.String = (String)pair.Value;
                    break;
                case TestObject_FieldIndex.FilePath:
                    obj.FilePath = (FilePath)pair.Value;
                    break;
                case TestObject_FieldIndex.FilePathNull:
                    obj.FilePathNull = (FilePath?)pair.Value;
                    break;
                case TestObject_FieldIndex.DirectoryPath:
                    obj.DirectoryPath = (DirectoryPath)pair.Value;
                    break;
                case TestObject_FieldIndex.DirectoryPathNull:
                    obj.DirectoryPathNull = (DirectoryPath?)pair.Value;
                    break;
                case TestObject_FieldIndex.UDoubleN:
                    obj.UDoubleN = (UDouble?)pair.Value;
                    break;
                case TestObject_FieldIndex.UDoubleN_Ranged:
                    obj.UDoubleN_Ranged = (UDouble?)pair.Value;
                    break;
                case TestObject_FieldIndex.UDouble:
                    obj.UDouble = (UDouble)pair.Value;
                    break;
                case TestObject_FieldIndex.UDouble_Ranged:
                    obj.UDouble_Ranged = (UDouble)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt16N:
                    obj.UInt16N = (UInt16?)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt16N_Ranged:
                    obj.UInt16N_Ranged = (UInt16?)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt16:
                    obj.UInt16 = (UInt16)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt16_Ranged:
                    obj.UInt16_Ranged = (UInt16)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt32N:
                    obj.UInt32N = (UInt32?)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt32N_Ranged:
                    obj.UInt32N_Ranged = (UInt32?)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt32:
                    obj.UInt32 = (UInt32)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt32_Ranged:
                    obj.UInt32_Ranged = (UInt32)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt64N:
                    obj.UInt64N = (UInt64?)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt64N_Ranged:
                    obj.UInt64N_Ranged = (UInt64?)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt64:
                    obj.UInt64 = (UInt64)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt64_Ranged:
                    obj.UInt64_Ranged = (UInt64)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt8N:
                    obj.UInt8N = (Byte?)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt8N_Ranged:
                    obj.UInt8N_Ranged = (Byte?)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt8:
                    obj.UInt8 = (Byte)pair.Value;
                    break;
                case TestObject_FieldIndex.UInt8_Ranged:
                    obj.UInt8_Ranged = (Byte)pair.Value;
                    break;
                case TestObject_FieldIndex.Enum:
                    obj.Enum = (TestEnum)pair.Value;
                    break;
                case TestObject_FieldIndex.EnumNull:
                    obj.EnumNull = (TestEnum?)pair.Value;
                    break;
                case TestObject_FieldIndex.WildCard:
                    obj.WildCard = (Object)pair.Value;
                    break;
                case TestObject_FieldIndex.WildCardLoqui:
                    obj.WildCardLoqui = (Object)pair.Value;
                    break;
                case TestObject_FieldIndex.WildCardNull:
                    obj.WildCardNull = (Object)pair.Value;
                    break;
                case TestObject_FieldIndex.Ref:
                    obj.Ref = (ObjectToRef)pair.Value;
                    break;
                case TestObject_FieldIndex.Ref_NotNull:
                    obj.Ref_NotNull = (ObjectToRef)pair.Value;
                    break;
                case TestObject_FieldIndex.Ref_Singleton:
                    obj._Ref_Singleton_Object.CopyFieldsFrom(rhs: (ObjectToRef)pair.Value, cmds: null);
                    break;
                case TestObject_FieldIndex.RefGetter:
                    obj.RefGetter = (IObjectToRefGetter)pair.Value;
                    break;
                case TestObject_FieldIndex.RefGetter_NotNull:
                    obj.RefGetter_NotNull = (IObjectToRefGetter)pair.Value;
                    break;
                case TestObject_FieldIndex.RefGetter_Singleton:
                    obj._RefGetter_Singleton_Object.CopyFieldsFrom(rhs: (IObjectToRefGetter)pair.Value, cmds: null);
                    break;
                case TestObject_FieldIndex.RefSetter:
                    obj.RefSetter = (IObjectToRef)pair.Value;
                    break;
                case TestObject_FieldIndex.RefSetter_NotNull:
                    obj.RefSetter_NotNull = (IObjectToRef)pair.Value;
                    break;
                case TestObject_FieldIndex.RefSetter_Singleton:
                    obj._RefSetter_Singleton_Object.CopyFieldsFrom(rhs: (IObjectToRef)pair.Value, cmds: null);
                    break;
                case TestObject_FieldIndex.List:
                    obj._List.SetTo((IEnumerable<Boolean>)pair.Value, null);
                    break;
                case TestObject_FieldIndex.RefList:
                    obj._RefList.SetTo((IEnumerable<ObjectToRef>)pair.Value, null);
                    break;
                case TestObject_FieldIndex.Dict:
                    obj.Dict.SetTo(
                        ((NotifyingDictionary<String, Boolean>)pair.Value).Select(
                            (i) => new KeyValuePair<String, Boolean>(
                                i.Key,
                                i.Value)),
                        null);
                    break;
                case TestObject_FieldIndex.RefDict:
                    obj.RefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, ObjectToRef>)pair.Value).Select(
                            (i) => new KeyValuePair<ObjectToRef, ObjectToRef>(
                                i.Key.Copy(),
                                i.Value.Copy())),
                        null);
                    break;
                case TestObject_FieldIndex.KeyRefDict:
                    obj.KeyRefDict.SetTo(
                        ((NotifyingDictionary<ObjectToRef, Boolean>)pair.Value).Select(
                            (i) => new KeyValuePair<ObjectToRef, Boolean>(
                                i.Key.Copy(),
                                i.Value)),
                        null);
                    break;
                case TestObject_FieldIndex.ValRefDict:
                    obj.ValRefDict.SetTo(
                        ((NotifyingDictionary<String, ObjectToRef>)pair.Value).Select(
                            (i) => new KeyValuePair<String, ObjectToRef>(
                                i.Key,
                                i.Value.Copy())),
                        null);
                    break;
                case TestObject_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.SetTo(
                        ((IEnumerable<ObjectToRef>)(NotifyingDictionary<Int32, ObjectToRef>)pair.Value),
                        null);
                    break;
                default:
                    throw new ArgumentException($"Unknown enum type: {enu}");
            }
        }
        public static void CopyIn(IEnumerable<KeyValuePair<ushort, object>> fields, TestObject obj)
        {
            ILoquiObjectExt.CopyFieldsIn(obj, fields, def: null, skipProtected: false, cmds: null);
        }

    }
    #endregion

    #region Interface
    public interface ITestObject : ITestObjectGetter, ILoquiClass<ITestObject, ITestObjectGetter>, ILoquiClass<TestObject, ITestObjectGetter>
    {
        new Byte[] ByteArray { get; set; }

        new Byte[] ByteArrayNull { get; set; }

        new Byte[] ByteArrayNotNull { get; set; }

        new Boolean? BoolN { get; set; }

        new Boolean Bool { get; set; }

        new Char? CharN { get; set; }

        new Char Char { get; set; }

        new DateTime? DateTimeNull { get; set; }

        new DateTime DateTime { get; set; }

        new Double? DoubleN { get; set; }

        new Double? DoubleN_Ranged { get; set; }

        new Double Double { get; set; }

        new Double Double_Ranged { get; set; }

        new Single? FloatN { get; set; }

        new Single? FloatN_Ranged { get; set; }

        new Single Float { get; set; }

        new Single Float_Ranged { get; set; }

        new Int16? Int16N { get; set; }

        new Int16? Int16N_Ranged { get; set; }

        new Int16 Int16 { get; set; }

        new Int16 Int16_Ranged { get; set; }

        new Int32? Int32N { get; set; }

        new Int32? Int32N_Ranged { get; set; }

        new Int32 Int32 { get; set; }

        new Int32 Int32_Ranged { get; set; }

        new Int64? Int64N { get; set; }

        new Int64? Int64N_Ranged { get; set; }

        new Int64 Int64 { get; set; }

        new Int64 Int64_Ranged { get; set; }

        new SByte? Int8N { get; set; }

        new SByte? Int8N_Ranged { get; set; }

        new SByte Int8 { get; set; }

        new SByte Int8_Ranged { get; set; }

        new bool Unsafe { get; set; }

        new ObjectToRef UnsafeLoqui { get; set; }

        new ObjectToRef UnsafeNull { get; set; }

        new P2Int? P2IntN { get; set; }

        new P2Int P2Int { get; set; }

        new P3Double? P3DoubleN { get; set; }

        new P3Double P3Double { get; set; }

        new P3Int? P3IntN { get; set; }

        new P3Int P3Int { get; set; }

        new Percent? PercentN { get; set; }

        new Percent Percent { get; set; }

        new RangeInt8? RangeInt8N { get; set; }

        new RangeInt8 RangeInt8 { get; set; }

        new RangeInt16? RangeInt16N { get; set; }

        new RangeInt16 RangeInt16 { get; set; }

        new RangeInt32? RangeInt32N { get; set; }

        new RangeInt32 RangeInt32 { get; set; }

        new RangeInt64? RangeInt64N { get; set; }

        new RangeInt64 RangeInt64 { get; set; }

        new RangeUInt8? RangeUInt8N { get; set; }

        new RangeUInt8 RangeUInt8 { get; set; }

        new RangeUInt16? RangeUInt16N { get; set; }

        new RangeUInt16 RangeUInt16 { get; set; }

        new RangeUInt32? RangeUInt32N { get; set; }

        new RangeUInt32 RangeUInt32 { get; set; }

        new RangeUInt64? RangeUInt64N { get; set; }

        new RangeUInt64 RangeUInt64 { get; set; }

        new String String { get; set; }

        new FilePath FilePath { get; set; }

        new FilePath? FilePathNull { get; set; }

        new DirectoryPath DirectoryPath { get; set; }

        new DirectoryPath? DirectoryPathNull { get; set; }

        new UDouble? UDoubleN { get; set; }

        new UDouble? UDoubleN_Ranged { get; set; }

        new UDouble UDouble { get; set; }

        new UDouble UDouble_Ranged { get; set; }

        new UInt16? UInt16N { get; set; }

        new UInt16? UInt16N_Ranged { get; set; }

        new UInt16 UInt16 { get; set; }

        new UInt16 UInt16_Ranged { get; set; }

        new UInt32? UInt32N { get; set; }

        new UInt32? UInt32N_Ranged { get; set; }

        new UInt32 UInt32 { get; set; }

        new UInt32 UInt32_Ranged { get; set; }

        new UInt64? UInt64N { get; set; }

        new UInt64? UInt64N_Ranged { get; set; }

        new UInt64 UInt64 { get; set; }

        new UInt64 UInt64_Ranged { get; set; }

        new Byte? UInt8N { get; set; }

        new Byte? UInt8N_Ranged { get; set; }

        new Byte UInt8 { get; set; }

        new Byte UInt8_Ranged { get; set; }

        new TestEnum Enum { get; set; }

        new TestEnum? EnumNull { get; set; }

        new Object WildCard { get; set; }

        new Object WildCardLoqui { get; set; }

        new Object WildCardNull { get; set; }

        new ObjectToRef Ref { get; set; }

        new ObjectToRef Ref_NotNull { get; set; }

        new IObjectToRefGetter RefGetter { get; set; }

        new IObjectToRefGetter RefGetter_NotNull { get; set; }

        new IObjectToRef RefSetter { get; set; }

        new IObjectToRef RefSetter_NotNull { get; set; }

        new INotifyingList<Boolean> List { get; }
        new INotifyingList<ObjectToRef> RefList { get; }
        new INotifyingDictionary<String, Boolean> Dict { get; }
        new INotifyingDictionary<ObjectToRef, ObjectToRef> RefDict { get; }
        new INotifyingDictionary<ObjectToRef, Boolean> KeyRefDict { get; }
        new INotifyingDictionary<String, ObjectToRef> ValRefDict { get; }
        new INotifyingKeyedCollection<Int32, ObjectToRef> DictKeyedValue { get; }
    }

    public interface ITestObjectGetter : ILoquiObject
    {
        #region ByteArray
        Byte[] ByteArray { get; }

        #endregion
        #region ByteArrayNull
        Byte[] ByteArrayNull { get; }

        #endregion
        #region ByteArrayNotNull
        Byte[] ByteArrayNotNull { get; }

        #endregion
        #region ByteArraySingleton
        Byte[] ByteArraySingleton { get; }

        #endregion
        #region BoolN
        Boolean? BoolN { get; }

        #endregion
        #region Bool
        Boolean Bool { get; }

        #endregion
        #region CharN
        Char? CharN { get; }

        #endregion
        #region Char
        Char Char { get; }

        #endregion
        #region DateTimeNull
        DateTime? DateTimeNull { get; }

        #endregion
        #region DateTime
        DateTime DateTime { get; }

        #endregion
        #region DoubleN
        Double? DoubleN { get; }

        #endregion
        #region DoubleN_Ranged
        Double? DoubleN_Ranged { get; }

        #endregion
        #region Double
        Double Double { get; }

        #endregion
        #region Double_Ranged
        Double Double_Ranged { get; }

        #endregion
        #region FloatN
        Single? FloatN { get; }

        #endregion
        #region FloatN_Ranged
        Single? FloatN_Ranged { get; }

        #endregion
        #region Float
        Single Float { get; }

        #endregion
        #region Float_Ranged
        Single Float_Ranged { get; }

        #endregion
        #region Int16N
        Int16? Int16N { get; }

        #endregion
        #region Int16N_Ranged
        Int16? Int16N_Ranged { get; }

        #endregion
        #region Int16
        Int16 Int16 { get; }

        #endregion
        #region Int16_Ranged
        Int16 Int16_Ranged { get; }

        #endregion
        #region Int32N
        Int32? Int32N { get; }

        #endregion
        #region Int32N_Ranged
        Int32? Int32N_Ranged { get; }

        #endregion
        #region Int32
        Int32 Int32 { get; }

        #endregion
        #region Int32_Ranged
        Int32 Int32_Ranged { get; }

        #endregion
        #region Int64N
        Int64? Int64N { get; }

        #endregion
        #region Int64N_Ranged
        Int64? Int64N_Ranged { get; }

        #endregion
        #region Int64
        Int64 Int64 { get; }

        #endregion
        #region Int64_Ranged
        Int64 Int64_Ranged { get; }

        #endregion
        #region Int8N
        SByte? Int8N { get; }

        #endregion
        #region Int8N_Ranged
        SByte? Int8N_Ranged { get; }

        #endregion
        #region Int8
        SByte Int8 { get; }

        #endregion
        #region Int8_Ranged
        SByte Int8_Ranged { get; }

        #endregion
        #region Unsafe
        bool Unsafe { get; }

        #endregion
        #region UnsafeLoqui
        ObjectToRef UnsafeLoqui { get; }

        #endregion
        #region UnsafeNull
        ObjectToRef UnsafeNull { get; }

        #endregion
        #region P2IntN
        P2Int? P2IntN { get; }

        #endregion
        #region P2Int
        P2Int P2Int { get; }

        #endregion
        #region P3DoubleN
        P3Double? P3DoubleN { get; }

        #endregion
        #region P3Double
        P3Double P3Double { get; }

        #endregion
        #region P3IntN
        P3Int? P3IntN { get; }

        #endregion
        #region P3Int
        P3Int P3Int { get; }

        #endregion
        #region PercentN
        Percent? PercentN { get; }

        #endregion
        #region Percent
        Percent Percent { get; }

        #endregion
        #region RangeInt8N
        RangeInt8? RangeInt8N { get; }

        #endregion
        #region RangeInt8
        RangeInt8 RangeInt8 { get; }

        #endregion
        #region RangeInt16N
        RangeInt16? RangeInt16N { get; }

        #endregion
        #region RangeInt16
        RangeInt16 RangeInt16 { get; }

        #endregion
        #region RangeInt32N
        RangeInt32? RangeInt32N { get; }

        #endregion
        #region RangeInt32
        RangeInt32 RangeInt32 { get; }

        #endregion
        #region RangeInt64N
        RangeInt64? RangeInt64N { get; }

        #endregion
        #region RangeInt64
        RangeInt64 RangeInt64 { get; }

        #endregion
        #region RangeUInt8N
        RangeUInt8? RangeUInt8N { get; }

        #endregion
        #region RangeUInt8
        RangeUInt8 RangeUInt8 { get; }

        #endregion
        #region RangeUInt16N
        RangeUInt16? RangeUInt16N { get; }

        #endregion
        #region RangeUInt16
        RangeUInt16 RangeUInt16 { get; }

        #endregion
        #region RangeUInt32N
        RangeUInt32? RangeUInt32N { get; }

        #endregion
        #region RangeUInt32
        RangeUInt32 RangeUInt32 { get; }

        #endregion
        #region RangeUInt64N
        RangeUInt64? RangeUInt64N { get; }

        #endregion
        #region RangeUInt64
        RangeUInt64 RangeUInt64 { get; }

        #endregion
        #region String
        String String { get; }

        #endregion
        #region FilePath
        FilePath FilePath { get; }

        #endregion
        #region FilePathNull
        FilePath? FilePathNull { get; }

        #endregion
        #region DirectoryPath
        DirectoryPath DirectoryPath { get; }

        #endregion
        #region DirectoryPathNull
        DirectoryPath? DirectoryPathNull { get; }

        #endregion
        #region UDoubleN
        UDouble? UDoubleN { get; }

        #endregion
        #region UDoubleN_Ranged
        UDouble? UDoubleN_Ranged { get; }

        #endregion
        #region UDouble
        UDouble UDouble { get; }

        #endregion
        #region UDouble_Ranged
        UDouble UDouble_Ranged { get; }

        #endregion
        #region UInt16N
        UInt16? UInt16N { get; }

        #endregion
        #region UInt16N_Ranged
        UInt16? UInt16N_Ranged { get; }

        #endregion
        #region UInt16
        UInt16 UInt16 { get; }

        #endregion
        #region UInt16_Ranged
        UInt16 UInt16_Ranged { get; }

        #endregion
        #region UInt32N
        UInt32? UInt32N { get; }

        #endregion
        #region UInt32N_Ranged
        UInt32? UInt32N_Ranged { get; }

        #endregion
        #region UInt32
        UInt32 UInt32 { get; }

        #endregion
        #region UInt32_Ranged
        UInt32 UInt32_Ranged { get; }

        #endregion
        #region UInt64N
        UInt64? UInt64N { get; }

        #endregion
        #region UInt64N_Ranged
        UInt64? UInt64N_Ranged { get; }

        #endregion
        #region UInt64
        UInt64 UInt64 { get; }

        #endregion
        #region UInt64_Ranged
        UInt64 UInt64_Ranged { get; }

        #endregion
        #region UInt8N
        Byte? UInt8N { get; }

        #endregion
        #region UInt8N_Ranged
        Byte? UInt8N_Ranged { get; }

        #endregion
        #region UInt8
        Byte UInt8 { get; }

        #endregion
        #region UInt8_Ranged
        Byte UInt8_Ranged { get; }

        #endregion
        #region Enum
        TestEnum Enum { get; }

        #endregion
        #region EnumNull
        TestEnum? EnumNull { get; }

        #endregion
        #region WildCard
        Object WildCard { get; }

        #endregion
        #region WildCardLoqui
        Object WildCardLoqui { get; }

        #endregion
        #region WildCardNull
        Object WildCardNull { get; }

        #endregion
        #region Ref
        ObjectToRef Ref { get; }

        #endregion
        #region Ref_NotNull
        ObjectToRef Ref_NotNull { get; }

        #endregion
        #region Ref_Singleton
        ObjectToRef Ref_Singleton { get; }

        #endregion
        #region RefGetter
        IObjectToRefGetter RefGetter { get; }

        #endregion
        #region RefGetter_NotNull
        IObjectToRefGetter RefGetter_NotNull { get; }

        #endregion
        #region RefGetter_Singleton
        IObjectToRefGetter RefGetter_Singleton { get; }

        #endregion
        #region RefSetter
        IObjectToRef RefSetter { get; }

        #endregion
        #region RefSetter_NotNull
        IObjectToRef RefSetter_NotNull { get; }

        #endregion
        #region RefSetter_Singleton
        IObjectToRef RefSetter_Singleton { get; }

        #endregion
        #region List
        INotifyingListGetter<Boolean> List { get; }
        #endregion
        #region RefList
        INotifyingListGetter<ObjectToRef> RefList { get; }
        #endregion
        #region Dict
        INotifyingDictionaryGetter<String, Boolean> Dict { get; }
        #endregion
        #region RefDict
        INotifyingDictionaryGetter<ObjectToRef, ObjectToRef> RefDict { get; }
        #endregion
        #region KeyRefDict
        INotifyingDictionaryGetter<ObjectToRef, Boolean> KeyRefDict { get; }
        #endregion
        #region ValRefDict
        INotifyingDictionaryGetter<String, ObjectToRef> ValRefDict { get; }
        #endregion
        #region DictKeyedValue
        INotifyingKeyedCollectionGetter<Int32, ObjectToRef> DictKeyedValue { get; }
        #endregion

    }

    #endregion

}

namespace Loqui.Tests.Internals
{
    #region Field Index
    public enum TestObject_FieldIndex
    {
        ByteArray = 0,
        ByteArrayNull = 1,
        ByteArrayNotNull = 2,
        ByteArraySingleton = 3,
        BoolN = 4,
        Bool = 5,
        CharN = 6,
        Char = 7,
        DateTimeNull = 8,
        DateTime = 9,
        DoubleN = 10,
        DoubleN_Ranged = 11,
        Double = 12,
        Double_Ranged = 13,
        FloatN = 14,
        FloatN_Ranged = 15,
        Float = 16,
        Float_Ranged = 17,
        Int16N = 18,
        Int16N_Ranged = 19,
        Int16 = 20,
        Int16_Ranged = 21,
        Int32N = 22,
        Int32N_Ranged = 23,
        Int32 = 24,
        Int32_Ranged = 25,
        Int64N = 26,
        Int64N_Ranged = 27,
        Int64 = 28,
        Int64_Ranged = 29,
        Int8N = 30,
        Int8N_Ranged = 31,
        Int8 = 32,
        Int8_Ranged = 33,
        Unsafe = 34,
        UnsafeLoqui = 35,
        UnsafeNull = 36,
        P2IntN = 37,
        P2Int = 38,
        P3DoubleN = 39,
        P3Double = 40,
        P3IntN = 41,
        P3Int = 42,
        PercentN = 43,
        Percent = 44,
        RangeInt8N = 45,
        RangeInt8 = 46,
        RangeInt16N = 47,
        RangeInt16 = 48,
        RangeInt32N = 49,
        RangeInt32 = 50,
        RangeInt64N = 51,
        RangeInt64 = 52,
        RangeUInt8N = 53,
        RangeUInt8 = 54,
        RangeUInt16N = 55,
        RangeUInt16 = 56,
        RangeUInt32N = 57,
        RangeUInt32 = 58,
        RangeUInt64N = 59,
        RangeUInt64 = 60,
        String = 61,
        FilePath = 62,
        FilePathNull = 63,
        DirectoryPath = 64,
        DirectoryPathNull = 65,
        UDoubleN = 66,
        UDoubleN_Ranged = 67,
        UDouble = 68,
        UDouble_Ranged = 69,
        UInt16N = 70,
        UInt16N_Ranged = 71,
        UInt16 = 72,
        UInt16_Ranged = 73,
        UInt32N = 74,
        UInt32N_Ranged = 75,
        UInt32 = 76,
        UInt32_Ranged = 77,
        UInt64N = 78,
        UInt64N_Ranged = 79,
        UInt64 = 80,
        UInt64_Ranged = 81,
        UInt8N = 82,
        UInt8N_Ranged = 83,
        UInt8 = 84,
        UInt8_Ranged = 85,
        Enum = 86,
        EnumNull = 87,
        WildCard = 88,
        WildCardLoqui = 89,
        WildCardNull = 90,
        Ref = 91,
        Ref_NotNull = 92,
        Ref_Singleton = 93,
        RefGetter = 94,
        RefGetter_NotNull = 95,
        RefGetter_Singleton = 96,
        RefSetter = 97,
        RefSetter_NotNull = 98,
        RefSetter_Singleton = 99,
        List = 100,
        RefList = 101,
        Dict = 102,
        RefDict = 103,
        KeyRefDict = 104,
        ValRefDict = 105,
        DictKeyedValue = 106,
    }
    #endregion

    #region Registration
    public class TestObject_Registration : ILoquiRegistration
    {
        public static readonly TestObject_Registration Instance = new TestObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_LoquiTests.ProtocolKey;

        public static readonly ObjectKey ObjectKey = new ObjectKey(
            protocolKey: ProtocolDefinition_LoquiTests.ProtocolKey,
            msgID: 7,
            version: 0);

        public const string GUID = "b62b10f3-41c2-40b2-a9fd-90cfbd1bd2c7";

        public const ushort FieldCount = 107;

        public static readonly Type MaskType = typeof(TestObject_Mask<>);

        public static readonly Type ErrorMaskType = typeof(TestObject_ErrorMask);

        public static readonly Type ClassType = typeof(TestObject);

        public static readonly Type GetterType = typeof(ITestObjectGetter);

        public static readonly Type SetterType = typeof(ITestObject);

        public static readonly Type CommonType = typeof(TestObjectCommon);

        public const string FullName = "Loqui.Tests.TestObject";

        public const string Name = "TestObject";

        public const string Namespace = "Loqui.Tests";

        public const byte GenericCount = 0;

        public static readonly Type GenericRegistrationType = null;

        public static ushort? GetNameIndex(StringCaseAgnostic str)
        {
            switch (str.Upper)
            {
                case "BYTEARRAY":
                    return (ushort)TestObject_FieldIndex.ByteArray;
                case "BYTEARRAYNULL":
                    return (ushort)TestObject_FieldIndex.ByteArrayNull;
                case "BYTEARRAYNOTNULL":
                    return (ushort)TestObject_FieldIndex.ByteArrayNotNull;
                case "BYTEARRAYSINGLETON":
                    return (ushort)TestObject_FieldIndex.ByteArraySingleton;
                case "BOOLN":
                    return (ushort)TestObject_FieldIndex.BoolN;
                case "BOOL":
                    return (ushort)TestObject_FieldIndex.Bool;
                case "CHARN":
                    return (ushort)TestObject_FieldIndex.CharN;
                case "CHAR":
                    return (ushort)TestObject_FieldIndex.Char;
                case "DATETIMENULL":
                    return (ushort)TestObject_FieldIndex.DateTimeNull;
                case "DATETIME":
                    return (ushort)TestObject_FieldIndex.DateTime;
                case "DOUBLEN":
                    return (ushort)TestObject_FieldIndex.DoubleN;
                case "DOUBLEN_RANGED":
                    return (ushort)TestObject_FieldIndex.DoubleN_Ranged;
                case "DOUBLE":
                    return (ushort)TestObject_FieldIndex.Double;
                case "DOUBLE_RANGED":
                    return (ushort)TestObject_FieldIndex.Double_Ranged;
                case "FLOATN":
                    return (ushort)TestObject_FieldIndex.FloatN;
                case "FLOATN_RANGED":
                    return (ushort)TestObject_FieldIndex.FloatN_Ranged;
                case "FLOAT":
                    return (ushort)TestObject_FieldIndex.Float;
                case "FLOAT_RANGED":
                    return (ushort)TestObject_FieldIndex.Float_Ranged;
                case "INT16N":
                    return (ushort)TestObject_FieldIndex.Int16N;
                case "INT16N_RANGED":
                    return (ushort)TestObject_FieldIndex.Int16N_Ranged;
                case "INT16":
                    return (ushort)TestObject_FieldIndex.Int16;
                case "INT16_RANGED":
                    return (ushort)TestObject_FieldIndex.Int16_Ranged;
                case "INT32N":
                    return (ushort)TestObject_FieldIndex.Int32N;
                case "INT32N_RANGED":
                    return (ushort)TestObject_FieldIndex.Int32N_Ranged;
                case "INT32":
                    return (ushort)TestObject_FieldIndex.Int32;
                case "INT32_RANGED":
                    return (ushort)TestObject_FieldIndex.Int32_Ranged;
                case "INT64N":
                    return (ushort)TestObject_FieldIndex.Int64N;
                case "INT64N_RANGED":
                    return (ushort)TestObject_FieldIndex.Int64N_Ranged;
                case "INT64":
                    return (ushort)TestObject_FieldIndex.Int64;
                case "INT64_RANGED":
                    return (ushort)TestObject_FieldIndex.Int64_Ranged;
                case "INT8N":
                    return (ushort)TestObject_FieldIndex.Int8N;
                case "INT8N_RANGED":
                    return (ushort)TestObject_FieldIndex.Int8N_Ranged;
                case "INT8":
                    return (ushort)TestObject_FieldIndex.Int8;
                case "INT8_RANGED":
                    return (ushort)TestObject_FieldIndex.Int8_Ranged;
                case "UNSAFE":
                    return (ushort)TestObject_FieldIndex.Unsafe;
                case "UNSAFELOQUI":
                    return (ushort)TestObject_FieldIndex.UnsafeLoqui;
                case "UNSAFENULL":
                    return (ushort)TestObject_FieldIndex.UnsafeNull;
                case "P2INTN":
                    return (ushort)TestObject_FieldIndex.P2IntN;
                case "P2INT":
                    return (ushort)TestObject_FieldIndex.P2Int;
                case "P3DOUBLEN":
                    return (ushort)TestObject_FieldIndex.P3DoubleN;
                case "P3DOUBLE":
                    return (ushort)TestObject_FieldIndex.P3Double;
                case "P3INTN":
                    return (ushort)TestObject_FieldIndex.P3IntN;
                case "P3INT":
                    return (ushort)TestObject_FieldIndex.P3Int;
                case "PERCENTN":
                    return (ushort)TestObject_FieldIndex.PercentN;
                case "PERCENT":
                    return (ushort)TestObject_FieldIndex.Percent;
                case "RANGEINT8N":
                    return (ushort)TestObject_FieldIndex.RangeInt8N;
                case "RANGEINT8":
                    return (ushort)TestObject_FieldIndex.RangeInt8;
                case "RANGEINT16N":
                    return (ushort)TestObject_FieldIndex.RangeInt16N;
                case "RANGEINT16":
                    return (ushort)TestObject_FieldIndex.RangeInt16;
                case "RANGEINT32N":
                    return (ushort)TestObject_FieldIndex.RangeInt32N;
                case "RANGEINT32":
                    return (ushort)TestObject_FieldIndex.RangeInt32;
                case "RANGEINT64N":
                    return (ushort)TestObject_FieldIndex.RangeInt64N;
                case "RANGEINT64":
                    return (ushort)TestObject_FieldIndex.RangeInt64;
                case "RANGEUINT8N":
                    return (ushort)TestObject_FieldIndex.RangeUInt8N;
                case "RANGEUINT8":
                    return (ushort)TestObject_FieldIndex.RangeUInt8;
                case "RANGEUINT16N":
                    return (ushort)TestObject_FieldIndex.RangeUInt16N;
                case "RANGEUINT16":
                    return (ushort)TestObject_FieldIndex.RangeUInt16;
                case "RANGEUINT32N":
                    return (ushort)TestObject_FieldIndex.RangeUInt32N;
                case "RANGEUINT32":
                    return (ushort)TestObject_FieldIndex.RangeUInt32;
                case "RANGEUINT64N":
                    return (ushort)TestObject_FieldIndex.RangeUInt64N;
                case "RANGEUINT64":
                    return (ushort)TestObject_FieldIndex.RangeUInt64;
                case "STRING":
                    return (ushort)TestObject_FieldIndex.String;
                case "FILEPATH":
                    return (ushort)TestObject_FieldIndex.FilePath;
                case "FILEPATHNULL":
                    return (ushort)TestObject_FieldIndex.FilePathNull;
                case "DIRECTORYPATH":
                    return (ushort)TestObject_FieldIndex.DirectoryPath;
                case "DIRECTORYPATHNULL":
                    return (ushort)TestObject_FieldIndex.DirectoryPathNull;
                case "UDOUBLEN":
                    return (ushort)TestObject_FieldIndex.UDoubleN;
                case "UDOUBLEN_RANGED":
                    return (ushort)TestObject_FieldIndex.UDoubleN_Ranged;
                case "UDOUBLE":
                    return (ushort)TestObject_FieldIndex.UDouble;
                case "UDOUBLE_RANGED":
                    return (ushort)TestObject_FieldIndex.UDouble_Ranged;
                case "UINT16N":
                    return (ushort)TestObject_FieldIndex.UInt16N;
                case "UINT16N_RANGED":
                    return (ushort)TestObject_FieldIndex.UInt16N_Ranged;
                case "UINT16":
                    return (ushort)TestObject_FieldIndex.UInt16;
                case "UINT16_RANGED":
                    return (ushort)TestObject_FieldIndex.UInt16_Ranged;
                case "UINT32N":
                    return (ushort)TestObject_FieldIndex.UInt32N;
                case "UINT32N_RANGED":
                    return (ushort)TestObject_FieldIndex.UInt32N_Ranged;
                case "UINT32":
                    return (ushort)TestObject_FieldIndex.UInt32;
                case "UINT32_RANGED":
                    return (ushort)TestObject_FieldIndex.UInt32_Ranged;
                case "UINT64N":
                    return (ushort)TestObject_FieldIndex.UInt64N;
                case "UINT64N_RANGED":
                    return (ushort)TestObject_FieldIndex.UInt64N_Ranged;
                case "UINT64":
                    return (ushort)TestObject_FieldIndex.UInt64;
                case "UINT64_RANGED":
                    return (ushort)TestObject_FieldIndex.UInt64_Ranged;
                case "UINT8N":
                    return (ushort)TestObject_FieldIndex.UInt8N;
                case "UINT8N_RANGED":
                    return (ushort)TestObject_FieldIndex.UInt8N_Ranged;
                case "UINT8":
                    return (ushort)TestObject_FieldIndex.UInt8;
                case "UINT8_RANGED":
                    return (ushort)TestObject_FieldIndex.UInt8_Ranged;
                case "ENUM":
                    return (ushort)TestObject_FieldIndex.Enum;
                case "ENUMNULL":
                    return (ushort)TestObject_FieldIndex.EnumNull;
                case "WILDCARD":
                    return (ushort)TestObject_FieldIndex.WildCard;
                case "WILDCARDLOQUI":
                    return (ushort)TestObject_FieldIndex.WildCardLoqui;
                case "WILDCARDNULL":
                    return (ushort)TestObject_FieldIndex.WildCardNull;
                case "REF":
                    return (ushort)TestObject_FieldIndex.Ref;
                case "REF_NOTNULL":
                    return (ushort)TestObject_FieldIndex.Ref_NotNull;
                case "REF_SINGLETON":
                    return (ushort)TestObject_FieldIndex.Ref_Singleton;
                case "REFGETTER":
                    return (ushort)TestObject_FieldIndex.RefGetter;
                case "REFGETTER_NOTNULL":
                    return (ushort)TestObject_FieldIndex.RefGetter_NotNull;
                case "REFGETTER_SINGLETON":
                    return (ushort)TestObject_FieldIndex.RefGetter_Singleton;
                case "REFSETTER":
                    return (ushort)TestObject_FieldIndex.RefSetter;
                case "REFSETTER_NOTNULL":
                    return (ushort)TestObject_FieldIndex.RefSetter_NotNull;
                case "REFSETTER_SINGLETON":
                    return (ushort)TestObject_FieldIndex.RefSetter_Singleton;
                case "LIST":
                    return (ushort)TestObject_FieldIndex.List;
                case "REFLIST":
                    return (ushort)TestObject_FieldIndex.RefList;
                case "DICT":
                    return (ushort)TestObject_FieldIndex.Dict;
                case "REFDICT":
                    return (ushort)TestObject_FieldIndex.RefDict;
                case "KEYREFDICT":
                    return (ushort)TestObject_FieldIndex.KeyRefDict;
                case "VALREFDICT":
                    return (ushort)TestObject_FieldIndex.ValRefDict;
                case "DICTKEYEDVALUE":
                    return (ushort)TestObject_FieldIndex.DictKeyedValue;
                default:
                    return null;
            }
        }

        public static bool GetNthIsEnumerable(ushort index)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.List:
                case TestObject_FieldIndex.RefList:
                    return true;
                case TestObject_FieldIndex.ByteArray:
                case TestObject_FieldIndex.ByteArrayNull:
                case TestObject_FieldIndex.ByteArrayNotNull:
                case TestObject_FieldIndex.ByteArraySingleton:
                case TestObject_FieldIndex.BoolN:
                case TestObject_FieldIndex.Bool:
                case TestObject_FieldIndex.CharN:
                case TestObject_FieldIndex.Char:
                case TestObject_FieldIndex.DateTimeNull:
                case TestObject_FieldIndex.DateTime:
                case TestObject_FieldIndex.DoubleN:
                case TestObject_FieldIndex.DoubleN_Ranged:
                case TestObject_FieldIndex.Double:
                case TestObject_FieldIndex.Double_Ranged:
                case TestObject_FieldIndex.FloatN:
                case TestObject_FieldIndex.FloatN_Ranged:
                case TestObject_FieldIndex.Float:
                case TestObject_FieldIndex.Float_Ranged:
                case TestObject_FieldIndex.Int16N:
                case TestObject_FieldIndex.Int16N_Ranged:
                case TestObject_FieldIndex.Int16:
                case TestObject_FieldIndex.Int16_Ranged:
                case TestObject_FieldIndex.Int32N:
                case TestObject_FieldIndex.Int32N_Ranged:
                case TestObject_FieldIndex.Int32:
                case TestObject_FieldIndex.Int32_Ranged:
                case TestObject_FieldIndex.Int64N:
                case TestObject_FieldIndex.Int64N_Ranged:
                case TestObject_FieldIndex.Int64:
                case TestObject_FieldIndex.Int64_Ranged:
                case TestObject_FieldIndex.Int8N:
                case TestObject_FieldIndex.Int8N_Ranged:
                case TestObject_FieldIndex.Int8:
                case TestObject_FieldIndex.Int8_Ranged:
                case TestObject_FieldIndex.Unsafe:
                case TestObject_FieldIndex.UnsafeLoqui:
                case TestObject_FieldIndex.UnsafeNull:
                case TestObject_FieldIndex.P2IntN:
                case TestObject_FieldIndex.P2Int:
                case TestObject_FieldIndex.P3DoubleN:
                case TestObject_FieldIndex.P3Double:
                case TestObject_FieldIndex.P3IntN:
                case TestObject_FieldIndex.P3Int:
                case TestObject_FieldIndex.PercentN:
                case TestObject_FieldIndex.Percent:
                case TestObject_FieldIndex.RangeInt8N:
                case TestObject_FieldIndex.RangeInt8:
                case TestObject_FieldIndex.RangeInt16N:
                case TestObject_FieldIndex.RangeInt16:
                case TestObject_FieldIndex.RangeInt32N:
                case TestObject_FieldIndex.RangeInt32:
                case TestObject_FieldIndex.RangeInt64N:
                case TestObject_FieldIndex.RangeInt64:
                case TestObject_FieldIndex.RangeUInt8N:
                case TestObject_FieldIndex.RangeUInt8:
                case TestObject_FieldIndex.RangeUInt16N:
                case TestObject_FieldIndex.RangeUInt16:
                case TestObject_FieldIndex.RangeUInt32N:
                case TestObject_FieldIndex.RangeUInt32:
                case TestObject_FieldIndex.RangeUInt64N:
                case TestObject_FieldIndex.RangeUInt64:
                case TestObject_FieldIndex.String:
                case TestObject_FieldIndex.FilePath:
                case TestObject_FieldIndex.FilePathNull:
                case TestObject_FieldIndex.DirectoryPath:
                case TestObject_FieldIndex.DirectoryPathNull:
                case TestObject_FieldIndex.UDoubleN:
                case TestObject_FieldIndex.UDoubleN_Ranged:
                case TestObject_FieldIndex.UDouble:
                case TestObject_FieldIndex.UDouble_Ranged:
                case TestObject_FieldIndex.UInt16N:
                case TestObject_FieldIndex.UInt16N_Ranged:
                case TestObject_FieldIndex.UInt16:
                case TestObject_FieldIndex.UInt16_Ranged:
                case TestObject_FieldIndex.UInt32N:
                case TestObject_FieldIndex.UInt32N_Ranged:
                case TestObject_FieldIndex.UInt32:
                case TestObject_FieldIndex.UInt32_Ranged:
                case TestObject_FieldIndex.UInt64N:
                case TestObject_FieldIndex.UInt64N_Ranged:
                case TestObject_FieldIndex.UInt64:
                case TestObject_FieldIndex.UInt64_Ranged:
                case TestObject_FieldIndex.UInt8N:
                case TestObject_FieldIndex.UInt8N_Ranged:
                case TestObject_FieldIndex.UInt8:
                case TestObject_FieldIndex.UInt8_Ranged:
                case TestObject_FieldIndex.Enum:
                case TestObject_FieldIndex.EnumNull:
                case TestObject_FieldIndex.WildCard:
                case TestObject_FieldIndex.WildCardLoqui:
                case TestObject_FieldIndex.WildCardNull:
                case TestObject_FieldIndex.Ref:
                case TestObject_FieldIndex.Ref_NotNull:
                case TestObject_FieldIndex.Ref_Singleton:
                case TestObject_FieldIndex.RefGetter:
                case TestObject_FieldIndex.RefGetter_NotNull:
                case TestObject_FieldIndex.RefGetter_Singleton:
                case TestObject_FieldIndex.RefSetter:
                case TestObject_FieldIndex.RefSetter_NotNull:
                case TestObject_FieldIndex.RefSetter_Singleton:
                case TestObject_FieldIndex.Dict:
                case TestObject_FieldIndex.RefDict:
                case TestObject_FieldIndex.KeyRefDict:
                case TestObject_FieldIndex.ValRefDict:
                case TestObject_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsLoqui(ushort index)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.Ref:
                case TestObject_FieldIndex.Ref_NotNull:
                case TestObject_FieldIndex.Ref_Singleton:
                case TestObject_FieldIndex.RefGetter:
                case TestObject_FieldIndex.RefGetter_NotNull:
                case TestObject_FieldIndex.RefGetter_Singleton:
                case TestObject_FieldIndex.RefSetter:
                case TestObject_FieldIndex.RefSetter_NotNull:
                case TestObject_FieldIndex.RefSetter_Singleton:
                case TestObject_FieldIndex.RefList:
                    return true;
                case TestObject_FieldIndex.ByteArray:
                case TestObject_FieldIndex.ByteArrayNull:
                case TestObject_FieldIndex.ByteArrayNotNull:
                case TestObject_FieldIndex.ByteArraySingleton:
                case TestObject_FieldIndex.BoolN:
                case TestObject_FieldIndex.Bool:
                case TestObject_FieldIndex.CharN:
                case TestObject_FieldIndex.Char:
                case TestObject_FieldIndex.DateTimeNull:
                case TestObject_FieldIndex.DateTime:
                case TestObject_FieldIndex.DoubleN:
                case TestObject_FieldIndex.DoubleN_Ranged:
                case TestObject_FieldIndex.Double:
                case TestObject_FieldIndex.Double_Ranged:
                case TestObject_FieldIndex.FloatN:
                case TestObject_FieldIndex.FloatN_Ranged:
                case TestObject_FieldIndex.Float:
                case TestObject_FieldIndex.Float_Ranged:
                case TestObject_FieldIndex.Int16N:
                case TestObject_FieldIndex.Int16N_Ranged:
                case TestObject_FieldIndex.Int16:
                case TestObject_FieldIndex.Int16_Ranged:
                case TestObject_FieldIndex.Int32N:
                case TestObject_FieldIndex.Int32N_Ranged:
                case TestObject_FieldIndex.Int32:
                case TestObject_FieldIndex.Int32_Ranged:
                case TestObject_FieldIndex.Int64N:
                case TestObject_FieldIndex.Int64N_Ranged:
                case TestObject_FieldIndex.Int64:
                case TestObject_FieldIndex.Int64_Ranged:
                case TestObject_FieldIndex.Int8N:
                case TestObject_FieldIndex.Int8N_Ranged:
                case TestObject_FieldIndex.Int8:
                case TestObject_FieldIndex.Int8_Ranged:
                case TestObject_FieldIndex.Unsafe:
                case TestObject_FieldIndex.UnsafeLoqui:
                case TestObject_FieldIndex.UnsafeNull:
                case TestObject_FieldIndex.P2IntN:
                case TestObject_FieldIndex.P2Int:
                case TestObject_FieldIndex.P3DoubleN:
                case TestObject_FieldIndex.P3Double:
                case TestObject_FieldIndex.P3IntN:
                case TestObject_FieldIndex.P3Int:
                case TestObject_FieldIndex.PercentN:
                case TestObject_FieldIndex.Percent:
                case TestObject_FieldIndex.RangeInt8N:
                case TestObject_FieldIndex.RangeInt8:
                case TestObject_FieldIndex.RangeInt16N:
                case TestObject_FieldIndex.RangeInt16:
                case TestObject_FieldIndex.RangeInt32N:
                case TestObject_FieldIndex.RangeInt32:
                case TestObject_FieldIndex.RangeInt64N:
                case TestObject_FieldIndex.RangeInt64:
                case TestObject_FieldIndex.RangeUInt8N:
                case TestObject_FieldIndex.RangeUInt8:
                case TestObject_FieldIndex.RangeUInt16N:
                case TestObject_FieldIndex.RangeUInt16:
                case TestObject_FieldIndex.RangeUInt32N:
                case TestObject_FieldIndex.RangeUInt32:
                case TestObject_FieldIndex.RangeUInt64N:
                case TestObject_FieldIndex.RangeUInt64:
                case TestObject_FieldIndex.String:
                case TestObject_FieldIndex.FilePath:
                case TestObject_FieldIndex.FilePathNull:
                case TestObject_FieldIndex.DirectoryPath:
                case TestObject_FieldIndex.DirectoryPathNull:
                case TestObject_FieldIndex.UDoubleN:
                case TestObject_FieldIndex.UDoubleN_Ranged:
                case TestObject_FieldIndex.UDouble:
                case TestObject_FieldIndex.UDouble_Ranged:
                case TestObject_FieldIndex.UInt16N:
                case TestObject_FieldIndex.UInt16N_Ranged:
                case TestObject_FieldIndex.UInt16:
                case TestObject_FieldIndex.UInt16_Ranged:
                case TestObject_FieldIndex.UInt32N:
                case TestObject_FieldIndex.UInt32N_Ranged:
                case TestObject_FieldIndex.UInt32:
                case TestObject_FieldIndex.UInt32_Ranged:
                case TestObject_FieldIndex.UInt64N:
                case TestObject_FieldIndex.UInt64N_Ranged:
                case TestObject_FieldIndex.UInt64:
                case TestObject_FieldIndex.UInt64_Ranged:
                case TestObject_FieldIndex.UInt8N:
                case TestObject_FieldIndex.UInt8N_Ranged:
                case TestObject_FieldIndex.UInt8:
                case TestObject_FieldIndex.UInt8_Ranged:
                case TestObject_FieldIndex.Enum:
                case TestObject_FieldIndex.EnumNull:
                case TestObject_FieldIndex.WildCard:
                case TestObject_FieldIndex.WildCardLoqui:
                case TestObject_FieldIndex.WildCardNull:
                case TestObject_FieldIndex.List:
                case TestObject_FieldIndex.Dict:
                case TestObject_FieldIndex.RefDict:
                case TestObject_FieldIndex.KeyRefDict:
                case TestObject_FieldIndex.ValRefDict:
                case TestObject_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthIsSingleton(ushort index)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.Ref_Singleton:
                case TestObject_FieldIndex.RefGetter_Singleton:
                case TestObject_FieldIndex.RefSetter_Singleton:
                    return true;
                case TestObject_FieldIndex.ByteArray:
                case TestObject_FieldIndex.ByteArrayNull:
                case TestObject_FieldIndex.ByteArrayNotNull:
                case TestObject_FieldIndex.ByteArraySingleton:
                case TestObject_FieldIndex.BoolN:
                case TestObject_FieldIndex.Bool:
                case TestObject_FieldIndex.CharN:
                case TestObject_FieldIndex.Char:
                case TestObject_FieldIndex.DateTimeNull:
                case TestObject_FieldIndex.DateTime:
                case TestObject_FieldIndex.DoubleN:
                case TestObject_FieldIndex.DoubleN_Ranged:
                case TestObject_FieldIndex.Double:
                case TestObject_FieldIndex.Double_Ranged:
                case TestObject_FieldIndex.FloatN:
                case TestObject_FieldIndex.FloatN_Ranged:
                case TestObject_FieldIndex.Float:
                case TestObject_FieldIndex.Float_Ranged:
                case TestObject_FieldIndex.Int16N:
                case TestObject_FieldIndex.Int16N_Ranged:
                case TestObject_FieldIndex.Int16:
                case TestObject_FieldIndex.Int16_Ranged:
                case TestObject_FieldIndex.Int32N:
                case TestObject_FieldIndex.Int32N_Ranged:
                case TestObject_FieldIndex.Int32:
                case TestObject_FieldIndex.Int32_Ranged:
                case TestObject_FieldIndex.Int64N:
                case TestObject_FieldIndex.Int64N_Ranged:
                case TestObject_FieldIndex.Int64:
                case TestObject_FieldIndex.Int64_Ranged:
                case TestObject_FieldIndex.Int8N:
                case TestObject_FieldIndex.Int8N_Ranged:
                case TestObject_FieldIndex.Int8:
                case TestObject_FieldIndex.Int8_Ranged:
                case TestObject_FieldIndex.Unsafe:
                case TestObject_FieldIndex.UnsafeLoqui:
                case TestObject_FieldIndex.UnsafeNull:
                case TestObject_FieldIndex.P2IntN:
                case TestObject_FieldIndex.P2Int:
                case TestObject_FieldIndex.P3DoubleN:
                case TestObject_FieldIndex.P3Double:
                case TestObject_FieldIndex.P3IntN:
                case TestObject_FieldIndex.P3Int:
                case TestObject_FieldIndex.PercentN:
                case TestObject_FieldIndex.Percent:
                case TestObject_FieldIndex.RangeInt8N:
                case TestObject_FieldIndex.RangeInt8:
                case TestObject_FieldIndex.RangeInt16N:
                case TestObject_FieldIndex.RangeInt16:
                case TestObject_FieldIndex.RangeInt32N:
                case TestObject_FieldIndex.RangeInt32:
                case TestObject_FieldIndex.RangeInt64N:
                case TestObject_FieldIndex.RangeInt64:
                case TestObject_FieldIndex.RangeUInt8N:
                case TestObject_FieldIndex.RangeUInt8:
                case TestObject_FieldIndex.RangeUInt16N:
                case TestObject_FieldIndex.RangeUInt16:
                case TestObject_FieldIndex.RangeUInt32N:
                case TestObject_FieldIndex.RangeUInt32:
                case TestObject_FieldIndex.RangeUInt64N:
                case TestObject_FieldIndex.RangeUInt64:
                case TestObject_FieldIndex.String:
                case TestObject_FieldIndex.FilePath:
                case TestObject_FieldIndex.FilePathNull:
                case TestObject_FieldIndex.DirectoryPath:
                case TestObject_FieldIndex.DirectoryPathNull:
                case TestObject_FieldIndex.UDoubleN:
                case TestObject_FieldIndex.UDoubleN_Ranged:
                case TestObject_FieldIndex.UDouble:
                case TestObject_FieldIndex.UDouble_Ranged:
                case TestObject_FieldIndex.UInt16N:
                case TestObject_FieldIndex.UInt16N_Ranged:
                case TestObject_FieldIndex.UInt16:
                case TestObject_FieldIndex.UInt16_Ranged:
                case TestObject_FieldIndex.UInt32N:
                case TestObject_FieldIndex.UInt32N_Ranged:
                case TestObject_FieldIndex.UInt32:
                case TestObject_FieldIndex.UInt32_Ranged:
                case TestObject_FieldIndex.UInt64N:
                case TestObject_FieldIndex.UInt64N_Ranged:
                case TestObject_FieldIndex.UInt64:
                case TestObject_FieldIndex.UInt64_Ranged:
                case TestObject_FieldIndex.UInt8N:
                case TestObject_FieldIndex.UInt8N_Ranged:
                case TestObject_FieldIndex.UInt8:
                case TestObject_FieldIndex.UInt8_Ranged:
                case TestObject_FieldIndex.Enum:
                case TestObject_FieldIndex.EnumNull:
                case TestObject_FieldIndex.WildCard:
                case TestObject_FieldIndex.WildCardLoqui:
                case TestObject_FieldIndex.WildCardNull:
                case TestObject_FieldIndex.Ref:
                case TestObject_FieldIndex.Ref_NotNull:
                case TestObject_FieldIndex.RefGetter:
                case TestObject_FieldIndex.RefGetter_NotNull:
                case TestObject_FieldIndex.RefSetter:
                case TestObject_FieldIndex.RefSetter_NotNull:
                case TestObject_FieldIndex.List:
                case TestObject_FieldIndex.RefList:
                case TestObject_FieldIndex.Dict:
                case TestObject_FieldIndex.RefDict:
                case TestObject_FieldIndex.KeyRefDict:
                case TestObject_FieldIndex.ValRefDict:
                case TestObject_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static string GetNthName(ushort index)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                    return "ByteArray";
                case TestObject_FieldIndex.ByteArrayNull:
                    return "ByteArrayNull";
                case TestObject_FieldIndex.ByteArrayNotNull:
                    return "ByteArrayNotNull";
                case TestObject_FieldIndex.ByteArraySingleton:
                    return "ByteArraySingleton";
                case TestObject_FieldIndex.BoolN:
                    return "BoolN";
                case TestObject_FieldIndex.Bool:
                    return "Bool";
                case TestObject_FieldIndex.CharN:
                    return "CharN";
                case TestObject_FieldIndex.Char:
                    return "Char";
                case TestObject_FieldIndex.DateTimeNull:
                    return "DateTimeNull";
                case TestObject_FieldIndex.DateTime:
                    return "DateTime";
                case TestObject_FieldIndex.DoubleN:
                    return "DoubleN";
                case TestObject_FieldIndex.DoubleN_Ranged:
                    return "DoubleN_Ranged";
                case TestObject_FieldIndex.Double:
                    return "Double";
                case TestObject_FieldIndex.Double_Ranged:
                    return "Double_Ranged";
                case TestObject_FieldIndex.FloatN:
                    return "FloatN";
                case TestObject_FieldIndex.FloatN_Ranged:
                    return "FloatN_Ranged";
                case TestObject_FieldIndex.Float:
                    return "Float";
                case TestObject_FieldIndex.Float_Ranged:
                    return "Float_Ranged";
                case TestObject_FieldIndex.Int16N:
                    return "Int16N";
                case TestObject_FieldIndex.Int16N_Ranged:
                    return "Int16N_Ranged";
                case TestObject_FieldIndex.Int16:
                    return "Int16";
                case TestObject_FieldIndex.Int16_Ranged:
                    return "Int16_Ranged";
                case TestObject_FieldIndex.Int32N:
                    return "Int32N";
                case TestObject_FieldIndex.Int32N_Ranged:
                    return "Int32N_Ranged";
                case TestObject_FieldIndex.Int32:
                    return "Int32";
                case TestObject_FieldIndex.Int32_Ranged:
                    return "Int32_Ranged";
                case TestObject_FieldIndex.Int64N:
                    return "Int64N";
                case TestObject_FieldIndex.Int64N_Ranged:
                    return "Int64N_Ranged";
                case TestObject_FieldIndex.Int64:
                    return "Int64";
                case TestObject_FieldIndex.Int64_Ranged:
                    return "Int64_Ranged";
                case TestObject_FieldIndex.Int8N:
                    return "Int8N";
                case TestObject_FieldIndex.Int8N_Ranged:
                    return "Int8N_Ranged";
                case TestObject_FieldIndex.Int8:
                    return "Int8";
                case TestObject_FieldIndex.Int8_Ranged:
                    return "Int8_Ranged";
                case TestObject_FieldIndex.Unsafe:
                    return "Unsafe";
                case TestObject_FieldIndex.UnsafeLoqui:
                    return "UnsafeLoqui";
                case TestObject_FieldIndex.UnsafeNull:
                    return "UnsafeNull";
                case TestObject_FieldIndex.P2IntN:
                    return "P2IntN";
                case TestObject_FieldIndex.P2Int:
                    return "P2Int";
                case TestObject_FieldIndex.P3DoubleN:
                    return "P3DoubleN";
                case TestObject_FieldIndex.P3Double:
                    return "P3Double";
                case TestObject_FieldIndex.P3IntN:
                    return "P3IntN";
                case TestObject_FieldIndex.P3Int:
                    return "P3Int";
                case TestObject_FieldIndex.PercentN:
                    return "PercentN";
                case TestObject_FieldIndex.Percent:
                    return "Percent";
                case TestObject_FieldIndex.RangeInt8N:
                    return "RangeInt8N";
                case TestObject_FieldIndex.RangeInt8:
                    return "RangeInt8";
                case TestObject_FieldIndex.RangeInt16N:
                    return "RangeInt16N";
                case TestObject_FieldIndex.RangeInt16:
                    return "RangeInt16";
                case TestObject_FieldIndex.RangeInt32N:
                    return "RangeInt32N";
                case TestObject_FieldIndex.RangeInt32:
                    return "RangeInt32";
                case TestObject_FieldIndex.RangeInt64N:
                    return "RangeInt64N";
                case TestObject_FieldIndex.RangeInt64:
                    return "RangeInt64";
                case TestObject_FieldIndex.RangeUInt8N:
                    return "RangeUInt8N";
                case TestObject_FieldIndex.RangeUInt8:
                    return "RangeUInt8";
                case TestObject_FieldIndex.RangeUInt16N:
                    return "RangeUInt16N";
                case TestObject_FieldIndex.RangeUInt16:
                    return "RangeUInt16";
                case TestObject_FieldIndex.RangeUInt32N:
                    return "RangeUInt32N";
                case TestObject_FieldIndex.RangeUInt32:
                    return "RangeUInt32";
                case TestObject_FieldIndex.RangeUInt64N:
                    return "RangeUInt64N";
                case TestObject_FieldIndex.RangeUInt64:
                    return "RangeUInt64";
                case TestObject_FieldIndex.String:
                    return "String";
                case TestObject_FieldIndex.FilePath:
                    return "FilePath";
                case TestObject_FieldIndex.FilePathNull:
                    return "FilePathNull";
                case TestObject_FieldIndex.DirectoryPath:
                    return "DirectoryPath";
                case TestObject_FieldIndex.DirectoryPathNull:
                    return "DirectoryPathNull";
                case TestObject_FieldIndex.UDoubleN:
                    return "UDoubleN";
                case TestObject_FieldIndex.UDoubleN_Ranged:
                    return "UDoubleN_Ranged";
                case TestObject_FieldIndex.UDouble:
                    return "UDouble";
                case TestObject_FieldIndex.UDouble_Ranged:
                    return "UDouble_Ranged";
                case TestObject_FieldIndex.UInt16N:
                    return "UInt16N";
                case TestObject_FieldIndex.UInt16N_Ranged:
                    return "UInt16N_Ranged";
                case TestObject_FieldIndex.UInt16:
                    return "UInt16";
                case TestObject_FieldIndex.UInt16_Ranged:
                    return "UInt16_Ranged";
                case TestObject_FieldIndex.UInt32N:
                    return "UInt32N";
                case TestObject_FieldIndex.UInt32N_Ranged:
                    return "UInt32N_Ranged";
                case TestObject_FieldIndex.UInt32:
                    return "UInt32";
                case TestObject_FieldIndex.UInt32_Ranged:
                    return "UInt32_Ranged";
                case TestObject_FieldIndex.UInt64N:
                    return "UInt64N";
                case TestObject_FieldIndex.UInt64N_Ranged:
                    return "UInt64N_Ranged";
                case TestObject_FieldIndex.UInt64:
                    return "UInt64";
                case TestObject_FieldIndex.UInt64_Ranged:
                    return "UInt64_Ranged";
                case TestObject_FieldIndex.UInt8N:
                    return "UInt8N";
                case TestObject_FieldIndex.UInt8N_Ranged:
                    return "UInt8N_Ranged";
                case TestObject_FieldIndex.UInt8:
                    return "UInt8";
                case TestObject_FieldIndex.UInt8_Ranged:
                    return "UInt8_Ranged";
                case TestObject_FieldIndex.Enum:
                    return "Enum";
                case TestObject_FieldIndex.EnumNull:
                    return "EnumNull";
                case TestObject_FieldIndex.WildCard:
                    return "WildCard";
                case TestObject_FieldIndex.WildCardLoqui:
                    return "WildCardLoqui";
                case TestObject_FieldIndex.WildCardNull:
                    return "WildCardNull";
                case TestObject_FieldIndex.Ref:
                    return "Ref";
                case TestObject_FieldIndex.Ref_NotNull:
                    return "Ref_NotNull";
                case TestObject_FieldIndex.Ref_Singleton:
                    return "Ref_Singleton";
                case TestObject_FieldIndex.RefGetter:
                    return "RefGetter";
                case TestObject_FieldIndex.RefGetter_NotNull:
                    return "RefGetter_NotNull";
                case TestObject_FieldIndex.RefGetter_Singleton:
                    return "RefGetter_Singleton";
                case TestObject_FieldIndex.RefSetter:
                    return "RefSetter";
                case TestObject_FieldIndex.RefSetter_NotNull:
                    return "RefSetter_NotNull";
                case TestObject_FieldIndex.RefSetter_Singleton:
                    return "RefSetter_Singleton";
                case TestObject_FieldIndex.List:
                    return "List";
                case TestObject_FieldIndex.RefList:
                    return "RefList";
                case TestObject_FieldIndex.Dict:
                    return "Dict";
                case TestObject_FieldIndex.RefDict:
                    return "RefDict";
                case TestObject_FieldIndex.KeyRefDict:
                    return "KeyRefDict";
                case TestObject_FieldIndex.ValRefDict:
                    return "ValRefDict";
                case TestObject_FieldIndex.DictKeyedValue:
                    return "DictKeyedValue";
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsNthDerivative(ushort index)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                case TestObject_FieldIndex.ByteArrayNull:
                case TestObject_FieldIndex.ByteArrayNotNull:
                case TestObject_FieldIndex.ByteArraySingleton:
                case TestObject_FieldIndex.BoolN:
                case TestObject_FieldIndex.Bool:
                case TestObject_FieldIndex.CharN:
                case TestObject_FieldIndex.Char:
                case TestObject_FieldIndex.DateTimeNull:
                case TestObject_FieldIndex.DateTime:
                case TestObject_FieldIndex.DoubleN:
                case TestObject_FieldIndex.DoubleN_Ranged:
                case TestObject_FieldIndex.Double:
                case TestObject_FieldIndex.Double_Ranged:
                case TestObject_FieldIndex.FloatN:
                case TestObject_FieldIndex.FloatN_Ranged:
                case TestObject_FieldIndex.Float:
                case TestObject_FieldIndex.Float_Ranged:
                case TestObject_FieldIndex.Int16N:
                case TestObject_FieldIndex.Int16N_Ranged:
                case TestObject_FieldIndex.Int16:
                case TestObject_FieldIndex.Int16_Ranged:
                case TestObject_FieldIndex.Int32N:
                case TestObject_FieldIndex.Int32N_Ranged:
                case TestObject_FieldIndex.Int32:
                case TestObject_FieldIndex.Int32_Ranged:
                case TestObject_FieldIndex.Int64N:
                case TestObject_FieldIndex.Int64N_Ranged:
                case TestObject_FieldIndex.Int64:
                case TestObject_FieldIndex.Int64_Ranged:
                case TestObject_FieldIndex.Int8N:
                case TestObject_FieldIndex.Int8N_Ranged:
                case TestObject_FieldIndex.Int8:
                case TestObject_FieldIndex.Int8_Ranged:
                case TestObject_FieldIndex.Unsafe:
                case TestObject_FieldIndex.UnsafeLoqui:
                case TestObject_FieldIndex.UnsafeNull:
                case TestObject_FieldIndex.P2IntN:
                case TestObject_FieldIndex.P2Int:
                case TestObject_FieldIndex.P3DoubleN:
                case TestObject_FieldIndex.P3Double:
                case TestObject_FieldIndex.P3IntN:
                case TestObject_FieldIndex.P3Int:
                case TestObject_FieldIndex.PercentN:
                case TestObject_FieldIndex.Percent:
                case TestObject_FieldIndex.RangeInt8N:
                case TestObject_FieldIndex.RangeInt8:
                case TestObject_FieldIndex.RangeInt16N:
                case TestObject_FieldIndex.RangeInt16:
                case TestObject_FieldIndex.RangeInt32N:
                case TestObject_FieldIndex.RangeInt32:
                case TestObject_FieldIndex.RangeInt64N:
                case TestObject_FieldIndex.RangeInt64:
                case TestObject_FieldIndex.RangeUInt8N:
                case TestObject_FieldIndex.RangeUInt8:
                case TestObject_FieldIndex.RangeUInt16N:
                case TestObject_FieldIndex.RangeUInt16:
                case TestObject_FieldIndex.RangeUInt32N:
                case TestObject_FieldIndex.RangeUInt32:
                case TestObject_FieldIndex.RangeUInt64N:
                case TestObject_FieldIndex.RangeUInt64:
                case TestObject_FieldIndex.String:
                case TestObject_FieldIndex.FilePath:
                case TestObject_FieldIndex.FilePathNull:
                case TestObject_FieldIndex.DirectoryPath:
                case TestObject_FieldIndex.DirectoryPathNull:
                case TestObject_FieldIndex.UDoubleN:
                case TestObject_FieldIndex.UDoubleN_Ranged:
                case TestObject_FieldIndex.UDouble:
                case TestObject_FieldIndex.UDouble_Ranged:
                case TestObject_FieldIndex.UInt16N:
                case TestObject_FieldIndex.UInt16N_Ranged:
                case TestObject_FieldIndex.UInt16:
                case TestObject_FieldIndex.UInt16_Ranged:
                case TestObject_FieldIndex.UInt32N:
                case TestObject_FieldIndex.UInt32N_Ranged:
                case TestObject_FieldIndex.UInt32:
                case TestObject_FieldIndex.UInt32_Ranged:
                case TestObject_FieldIndex.UInt64N:
                case TestObject_FieldIndex.UInt64N_Ranged:
                case TestObject_FieldIndex.UInt64:
                case TestObject_FieldIndex.UInt64_Ranged:
                case TestObject_FieldIndex.UInt8N:
                case TestObject_FieldIndex.UInt8N_Ranged:
                case TestObject_FieldIndex.UInt8:
                case TestObject_FieldIndex.UInt8_Ranged:
                case TestObject_FieldIndex.Enum:
                case TestObject_FieldIndex.EnumNull:
                case TestObject_FieldIndex.WildCard:
                case TestObject_FieldIndex.WildCardLoqui:
                case TestObject_FieldIndex.WildCardNull:
                case TestObject_FieldIndex.Ref:
                case TestObject_FieldIndex.Ref_NotNull:
                case TestObject_FieldIndex.Ref_Singleton:
                case TestObject_FieldIndex.RefGetter:
                case TestObject_FieldIndex.RefGetter_NotNull:
                case TestObject_FieldIndex.RefGetter_Singleton:
                case TestObject_FieldIndex.RefSetter:
                case TestObject_FieldIndex.RefSetter_NotNull:
                case TestObject_FieldIndex.RefSetter_Singleton:
                case TestObject_FieldIndex.List:
                case TestObject_FieldIndex.RefList:
                case TestObject_FieldIndex.Dict:
                case TestObject_FieldIndex.RefDict:
                case TestObject_FieldIndex.KeyRefDict:
                case TestObject_FieldIndex.ValRefDict:
                case TestObject_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool IsProtected(ushort index)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArraySingleton:
                case TestObject_FieldIndex.Ref_Singleton:
                case TestObject_FieldIndex.RefGetter_Singleton:
                case TestObject_FieldIndex.RefSetter_Singleton:
                    return true;
                case TestObject_FieldIndex.ByteArray:
                case TestObject_FieldIndex.ByteArrayNull:
                case TestObject_FieldIndex.ByteArrayNotNull:
                case TestObject_FieldIndex.BoolN:
                case TestObject_FieldIndex.Bool:
                case TestObject_FieldIndex.CharN:
                case TestObject_FieldIndex.Char:
                case TestObject_FieldIndex.DateTimeNull:
                case TestObject_FieldIndex.DateTime:
                case TestObject_FieldIndex.DoubleN:
                case TestObject_FieldIndex.DoubleN_Ranged:
                case TestObject_FieldIndex.Double:
                case TestObject_FieldIndex.Double_Ranged:
                case TestObject_FieldIndex.FloatN:
                case TestObject_FieldIndex.FloatN_Ranged:
                case TestObject_FieldIndex.Float:
                case TestObject_FieldIndex.Float_Ranged:
                case TestObject_FieldIndex.Int16N:
                case TestObject_FieldIndex.Int16N_Ranged:
                case TestObject_FieldIndex.Int16:
                case TestObject_FieldIndex.Int16_Ranged:
                case TestObject_FieldIndex.Int32N:
                case TestObject_FieldIndex.Int32N_Ranged:
                case TestObject_FieldIndex.Int32:
                case TestObject_FieldIndex.Int32_Ranged:
                case TestObject_FieldIndex.Int64N:
                case TestObject_FieldIndex.Int64N_Ranged:
                case TestObject_FieldIndex.Int64:
                case TestObject_FieldIndex.Int64_Ranged:
                case TestObject_FieldIndex.Int8N:
                case TestObject_FieldIndex.Int8N_Ranged:
                case TestObject_FieldIndex.Int8:
                case TestObject_FieldIndex.Int8_Ranged:
                case TestObject_FieldIndex.Unsafe:
                case TestObject_FieldIndex.UnsafeLoqui:
                case TestObject_FieldIndex.UnsafeNull:
                case TestObject_FieldIndex.P2IntN:
                case TestObject_FieldIndex.P2Int:
                case TestObject_FieldIndex.P3DoubleN:
                case TestObject_FieldIndex.P3Double:
                case TestObject_FieldIndex.P3IntN:
                case TestObject_FieldIndex.P3Int:
                case TestObject_FieldIndex.PercentN:
                case TestObject_FieldIndex.Percent:
                case TestObject_FieldIndex.RangeInt8N:
                case TestObject_FieldIndex.RangeInt8:
                case TestObject_FieldIndex.RangeInt16N:
                case TestObject_FieldIndex.RangeInt16:
                case TestObject_FieldIndex.RangeInt32N:
                case TestObject_FieldIndex.RangeInt32:
                case TestObject_FieldIndex.RangeInt64N:
                case TestObject_FieldIndex.RangeInt64:
                case TestObject_FieldIndex.RangeUInt8N:
                case TestObject_FieldIndex.RangeUInt8:
                case TestObject_FieldIndex.RangeUInt16N:
                case TestObject_FieldIndex.RangeUInt16:
                case TestObject_FieldIndex.RangeUInt32N:
                case TestObject_FieldIndex.RangeUInt32:
                case TestObject_FieldIndex.RangeUInt64N:
                case TestObject_FieldIndex.RangeUInt64:
                case TestObject_FieldIndex.String:
                case TestObject_FieldIndex.FilePath:
                case TestObject_FieldIndex.FilePathNull:
                case TestObject_FieldIndex.DirectoryPath:
                case TestObject_FieldIndex.DirectoryPathNull:
                case TestObject_FieldIndex.UDoubleN:
                case TestObject_FieldIndex.UDoubleN_Ranged:
                case TestObject_FieldIndex.UDouble:
                case TestObject_FieldIndex.UDouble_Ranged:
                case TestObject_FieldIndex.UInt16N:
                case TestObject_FieldIndex.UInt16N_Ranged:
                case TestObject_FieldIndex.UInt16:
                case TestObject_FieldIndex.UInt16_Ranged:
                case TestObject_FieldIndex.UInt32N:
                case TestObject_FieldIndex.UInt32N_Ranged:
                case TestObject_FieldIndex.UInt32:
                case TestObject_FieldIndex.UInt32_Ranged:
                case TestObject_FieldIndex.UInt64N:
                case TestObject_FieldIndex.UInt64N_Ranged:
                case TestObject_FieldIndex.UInt64:
                case TestObject_FieldIndex.UInt64_Ranged:
                case TestObject_FieldIndex.UInt8N:
                case TestObject_FieldIndex.UInt8N_Ranged:
                case TestObject_FieldIndex.UInt8:
                case TestObject_FieldIndex.UInt8_Ranged:
                case TestObject_FieldIndex.Enum:
                case TestObject_FieldIndex.EnumNull:
                case TestObject_FieldIndex.WildCard:
                case TestObject_FieldIndex.WildCardLoqui:
                case TestObject_FieldIndex.WildCardNull:
                case TestObject_FieldIndex.Ref:
                case TestObject_FieldIndex.Ref_NotNull:
                case TestObject_FieldIndex.RefGetter:
                case TestObject_FieldIndex.RefGetter_NotNull:
                case TestObject_FieldIndex.RefSetter:
                case TestObject_FieldIndex.RefSetter_NotNull:
                case TestObject_FieldIndex.List:
                case TestObject_FieldIndex.RefList:
                case TestObject_FieldIndex.Dict:
                case TestObject_FieldIndex.RefDict:
                case TestObject_FieldIndex.KeyRefDict:
                case TestObject_FieldIndex.ValRefDict:
                case TestObject_FieldIndex.DictKeyedValue:
                    return false;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static Type GetNthType(ushort index)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                    return typeof(Byte[]);
                case TestObject_FieldIndex.ByteArrayNull:
                    return typeof(Byte[]);
                case TestObject_FieldIndex.ByteArrayNotNull:
                    return typeof(Byte[]);
                case TestObject_FieldIndex.ByteArraySingleton:
                    return typeof(Byte[]);
                case TestObject_FieldIndex.BoolN:
                    return typeof(Boolean?);
                case TestObject_FieldIndex.Bool:
                    return typeof(Boolean);
                case TestObject_FieldIndex.CharN:
                    return typeof(Char?);
                case TestObject_FieldIndex.Char:
                    return typeof(Char);
                case TestObject_FieldIndex.DateTimeNull:
                    return typeof(DateTime?);
                case TestObject_FieldIndex.DateTime:
                    return typeof(DateTime);
                case TestObject_FieldIndex.DoubleN:
                    return typeof(Double?);
                case TestObject_FieldIndex.DoubleN_Ranged:
                    return typeof(Double?);
                case TestObject_FieldIndex.Double:
                    return typeof(Double);
                case TestObject_FieldIndex.Double_Ranged:
                    return typeof(Double);
                case TestObject_FieldIndex.FloatN:
                    return typeof(Single?);
                case TestObject_FieldIndex.FloatN_Ranged:
                    return typeof(Single?);
                case TestObject_FieldIndex.Float:
                    return typeof(Single);
                case TestObject_FieldIndex.Float_Ranged:
                    return typeof(Single);
                case TestObject_FieldIndex.Int16N:
                    return typeof(Int16?);
                case TestObject_FieldIndex.Int16N_Ranged:
                    return typeof(Int16?);
                case TestObject_FieldIndex.Int16:
                    return typeof(Int16);
                case TestObject_FieldIndex.Int16_Ranged:
                    return typeof(Int16);
                case TestObject_FieldIndex.Int32N:
                    return typeof(Int32?);
                case TestObject_FieldIndex.Int32N_Ranged:
                    return typeof(Int32?);
                case TestObject_FieldIndex.Int32:
                    return typeof(Int32);
                case TestObject_FieldIndex.Int32_Ranged:
                    return typeof(Int32);
                case TestObject_FieldIndex.Int64N:
                    return typeof(Int64?);
                case TestObject_FieldIndex.Int64N_Ranged:
                    return typeof(Int64?);
                case TestObject_FieldIndex.Int64:
                    return typeof(Int64);
                case TestObject_FieldIndex.Int64_Ranged:
                    return typeof(Int64);
                case TestObject_FieldIndex.Int8N:
                    return typeof(SByte?);
                case TestObject_FieldIndex.Int8N_Ranged:
                    return typeof(SByte?);
                case TestObject_FieldIndex.Int8:
                    return typeof(SByte);
                case TestObject_FieldIndex.Int8_Ranged:
                    return typeof(SByte);
                case TestObject_FieldIndex.Unsafe:
                    return typeof(bool);
                case TestObject_FieldIndex.UnsafeLoqui:
                    return typeof(ObjectToRef);
                case TestObject_FieldIndex.UnsafeNull:
                    return typeof(ObjectToRef);
                case TestObject_FieldIndex.P2IntN:
                    return typeof(P2Int?);
                case TestObject_FieldIndex.P2Int:
                    return typeof(P2Int);
                case TestObject_FieldIndex.P3DoubleN:
                    return typeof(P3Double?);
                case TestObject_FieldIndex.P3Double:
                    return typeof(P3Double);
                case TestObject_FieldIndex.P3IntN:
                    return typeof(P3Int?);
                case TestObject_FieldIndex.P3Int:
                    return typeof(P3Int);
                case TestObject_FieldIndex.PercentN:
                    return typeof(Percent?);
                case TestObject_FieldIndex.Percent:
                    return typeof(Percent);
                case TestObject_FieldIndex.RangeInt8N:
                    return typeof(RangeInt8?);
                case TestObject_FieldIndex.RangeInt8:
                    return typeof(RangeInt8);
                case TestObject_FieldIndex.RangeInt16N:
                    return typeof(RangeInt16?);
                case TestObject_FieldIndex.RangeInt16:
                    return typeof(RangeInt16);
                case TestObject_FieldIndex.RangeInt32N:
                    return typeof(RangeInt32?);
                case TestObject_FieldIndex.RangeInt32:
                    return typeof(RangeInt32);
                case TestObject_FieldIndex.RangeInt64N:
                    return typeof(RangeInt64?);
                case TestObject_FieldIndex.RangeInt64:
                    return typeof(RangeInt64);
                case TestObject_FieldIndex.RangeUInt8N:
                    return typeof(RangeUInt8?);
                case TestObject_FieldIndex.RangeUInt8:
                    return typeof(RangeUInt8);
                case TestObject_FieldIndex.RangeUInt16N:
                    return typeof(RangeUInt16?);
                case TestObject_FieldIndex.RangeUInt16:
                    return typeof(RangeUInt16);
                case TestObject_FieldIndex.RangeUInt32N:
                    return typeof(RangeUInt32?);
                case TestObject_FieldIndex.RangeUInt32:
                    return typeof(RangeUInt32);
                case TestObject_FieldIndex.RangeUInt64N:
                    return typeof(RangeUInt64?);
                case TestObject_FieldIndex.RangeUInt64:
                    return typeof(RangeUInt64);
                case TestObject_FieldIndex.String:
                    return typeof(String);
                case TestObject_FieldIndex.FilePath:
                    return typeof(FilePath);
                case TestObject_FieldIndex.FilePathNull:
                    return typeof(FilePath?);
                case TestObject_FieldIndex.DirectoryPath:
                    return typeof(DirectoryPath);
                case TestObject_FieldIndex.DirectoryPathNull:
                    return typeof(DirectoryPath?);
                case TestObject_FieldIndex.UDoubleN:
                    return typeof(UDouble?);
                case TestObject_FieldIndex.UDoubleN_Ranged:
                    return typeof(UDouble?);
                case TestObject_FieldIndex.UDouble:
                    return typeof(UDouble);
                case TestObject_FieldIndex.UDouble_Ranged:
                    return typeof(UDouble);
                case TestObject_FieldIndex.UInt16N:
                    return typeof(UInt16?);
                case TestObject_FieldIndex.UInt16N_Ranged:
                    return typeof(UInt16?);
                case TestObject_FieldIndex.UInt16:
                    return typeof(UInt16);
                case TestObject_FieldIndex.UInt16_Ranged:
                    return typeof(UInt16);
                case TestObject_FieldIndex.UInt32N:
                    return typeof(UInt32?);
                case TestObject_FieldIndex.UInt32N_Ranged:
                    return typeof(UInt32?);
                case TestObject_FieldIndex.UInt32:
                    return typeof(UInt32);
                case TestObject_FieldIndex.UInt32_Ranged:
                    return typeof(UInt32);
                case TestObject_FieldIndex.UInt64N:
                    return typeof(UInt64?);
                case TestObject_FieldIndex.UInt64N_Ranged:
                    return typeof(UInt64?);
                case TestObject_FieldIndex.UInt64:
                    return typeof(UInt64);
                case TestObject_FieldIndex.UInt64_Ranged:
                    return typeof(UInt64);
                case TestObject_FieldIndex.UInt8N:
                    return typeof(Byte?);
                case TestObject_FieldIndex.UInt8N_Ranged:
                    return typeof(Byte?);
                case TestObject_FieldIndex.UInt8:
                    return typeof(Byte);
                case TestObject_FieldIndex.UInt8_Ranged:
                    return typeof(Byte);
                case TestObject_FieldIndex.Enum:
                    return typeof(TestEnum);
                case TestObject_FieldIndex.EnumNull:
                    return typeof(TestEnum?);
                case TestObject_FieldIndex.WildCard:
                    return typeof(Object);
                case TestObject_FieldIndex.WildCardLoqui:
                    return typeof(Object);
                case TestObject_FieldIndex.WildCardNull:
                    return typeof(Object);
                case TestObject_FieldIndex.Ref:
                    return typeof(ObjectToRef);
                case TestObject_FieldIndex.Ref_NotNull:
                    return typeof(ObjectToRef);
                case TestObject_FieldIndex.Ref_Singleton:
                    return typeof(ObjectToRef);
                case TestObject_FieldIndex.RefGetter:
                    return typeof(IObjectToRefGetter);
                case TestObject_FieldIndex.RefGetter_NotNull:
                    return typeof(IObjectToRefGetter);
                case TestObject_FieldIndex.RefGetter_Singleton:
                    return typeof(IObjectToRefGetter);
                case TestObject_FieldIndex.RefSetter:
                    return typeof(IObjectToRef);
                case TestObject_FieldIndex.RefSetter_NotNull:
                    return typeof(IObjectToRef);
                case TestObject_FieldIndex.RefSetter_Singleton:
                    return typeof(IObjectToRef);
                case TestObject_FieldIndex.List:
                    return typeof(NotifyingList<Boolean>);
                case TestObject_FieldIndex.RefList:
                    return typeof(NotifyingList<ObjectToRef>);
                case TestObject_FieldIndex.Dict:
                    return typeof(NotifyingDictionary<String, Boolean>);
                case TestObject_FieldIndex.RefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, ObjectToRef>);
                case TestObject_FieldIndex.KeyRefDict:
                    return typeof(NotifyingDictionary<ObjectToRef, Boolean>);
                case TestObject_FieldIndex.ValRefDict:
                    return typeof(NotifyingDictionary<String, ObjectToRef>);
                case TestObject_FieldIndex.DictKeyedValue:
                    return typeof(NotifyingDictionary<Int32, ObjectToRef>);
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ObjectKey ILoquiRegistration.ObjectKey => ObjectKey;
        string ILoquiRegistration.GUID => GUID;
        int ILoquiRegistration.FieldCount => FieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type ILoquiRegistration.CommonType => CommonType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => GetNameIndex(name);
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => GetNthIsEnumerable(index);
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => GetNthIsLoqui(index);
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => GetNthIsSingleton(index);
        string ILoquiRegistration.GetNthName(ushort index) => GetNthName(index);
        bool ILoquiRegistration.IsNthDerivative(ushort index) => IsNthDerivative(index);
        bool ILoquiRegistration.IsProtected(ushort index) => IsProtected(index);
        Type ILoquiRegistration.GetNthType(ushort index) => GetNthType(index);
        #endregion

    }
    #endregion

    #region Extensions
    public static partial class TestObjectCommon
    {
        #region Copy Fields From
        public static void CopyFieldsFrom(
            this ITestObject item,
            ITestObjectGetter rhs,
            TestObject_CopyMask copyMask = null,
            ITestObjectGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObjectCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: false,
                errorMask: null,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITestObject item,
            ITestObjectGetter rhs,
            out TestObject_ErrorMask errorMask,
            TestObject_CopyMask copyMask = null,
            ITestObjectGetter def = null,
            NotifyingFireParameters? cmds = null)
        {
            TestObjectCommon.CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: out errorMask,
                copyMask: copyMask,
                cmds: cmds);
        }

        public static void CopyFieldsFrom(
            this ITestObject item,
            ITestObjectGetter rhs,
            ITestObjectGetter def,
            bool doMasks,
            out TestObject_ErrorMask errorMask,
            TestObject_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            TestObject_ErrorMask retErrorMask = null;
            Func<TestObject_ErrorMask> maskGetter = () =>
            {
                if (retErrorMask == null)
                {
                    retErrorMask = new TestObject_ErrorMask();
                }
                return retErrorMask;
            };
            CopyFieldsFrom(
                item: item,
                rhs: rhs,
                def: def,
                doMasks: true,
                errorMask: maskGetter,
                copyMask: copyMask,
                cmds: cmds);
            errorMask = retErrorMask;
        }

        public static void CopyFieldsFrom(
            this ITestObject item,
            ITestObjectGetter rhs,
            ITestObjectGetter def,
            bool doMasks,
            Func<TestObject_ErrorMask> errorMask,
            TestObject_CopyMask copyMask,
            NotifyingFireParameters? cmds)
        {
            if (copyMask?.ByteArray ?? true)
            {
                item.ByteArray = rhs.ByteArray;
            }
            if (copyMask?.ByteArrayNull ?? true)
            {
                item.ByteArrayNull = rhs.ByteArrayNull;
            }
            if (copyMask?.ByteArrayNotNull ?? true)
            {
                item.ByteArrayNotNull = rhs.ByteArrayNotNull;
            }
            if (copyMask?.BoolN ?? true)
            {
                item.BoolN = rhs.BoolN;
            }
            if (copyMask?.Bool ?? true)
            {
                item.Bool = rhs.Bool;
            }
            if (copyMask?.CharN ?? true)
            {
                item.CharN = rhs.CharN;
            }
            if (copyMask?.Char ?? true)
            {
                item.Char = rhs.Char;
            }
            if (copyMask?.DateTimeNull ?? true)
            {
                item.DateTimeNull = rhs.DateTimeNull;
            }
            if (copyMask?.DateTime ?? true)
            {
                item.DateTime = rhs.DateTime;
            }
            if (copyMask?.DoubleN ?? true)
            {
                item.DoubleN = rhs.DoubleN;
            }
            if (copyMask?.DoubleN_Ranged ?? true)
            {
                item.DoubleN_Ranged = rhs.DoubleN_Ranged;
            }
            if (copyMask?.Double ?? true)
            {
                item.Double = rhs.Double;
            }
            if (copyMask?.Double_Ranged ?? true)
            {
                item.Double_Ranged = rhs.Double_Ranged;
            }
            if (copyMask?.FloatN ?? true)
            {
                item.FloatN = rhs.FloatN;
            }
            if (copyMask?.FloatN_Ranged ?? true)
            {
                item.FloatN_Ranged = rhs.FloatN_Ranged;
            }
            if (copyMask?.Float ?? true)
            {
                item.Float = rhs.Float;
            }
            if (copyMask?.Float_Ranged ?? true)
            {
                item.Float_Ranged = rhs.Float_Ranged;
            }
            if (copyMask?.Int16N ?? true)
            {
                item.Int16N = rhs.Int16N;
            }
            if (copyMask?.Int16N_Ranged ?? true)
            {
                item.Int16N_Ranged = rhs.Int16N_Ranged;
            }
            if (copyMask?.Int16 ?? true)
            {
                item.Int16 = rhs.Int16;
            }
            if (copyMask?.Int16_Ranged ?? true)
            {
                item.Int16_Ranged = rhs.Int16_Ranged;
            }
            if (copyMask?.Int32N ?? true)
            {
                item.Int32N = rhs.Int32N;
            }
            if (copyMask?.Int32N_Ranged ?? true)
            {
                item.Int32N_Ranged = rhs.Int32N_Ranged;
            }
            if (copyMask?.Int32 ?? true)
            {
                item.Int32 = rhs.Int32;
            }
            if (copyMask?.Int32_Ranged ?? true)
            {
                item.Int32_Ranged = rhs.Int32_Ranged;
            }
            if (copyMask?.Int64N ?? true)
            {
                item.Int64N = rhs.Int64N;
            }
            if (copyMask?.Int64N_Ranged ?? true)
            {
                item.Int64N_Ranged = rhs.Int64N_Ranged;
            }
            if (copyMask?.Int64 ?? true)
            {
                item.Int64 = rhs.Int64;
            }
            if (copyMask?.Int64_Ranged ?? true)
            {
                item.Int64_Ranged = rhs.Int64_Ranged;
            }
            if (copyMask?.Int8N ?? true)
            {
                item.Int8N = rhs.Int8N;
            }
            if (copyMask?.Int8N_Ranged ?? true)
            {
                item.Int8N_Ranged = rhs.Int8N_Ranged;
            }
            if (copyMask?.Int8 ?? true)
            {
                item.Int8 = rhs.Int8;
            }
            if (copyMask?.Int8_Ranged ?? true)
            {
                item.Int8_Ranged = rhs.Int8_Ranged;
            }
            if (copyMask?.Unsafe ?? true)
            {
                item.Unsafe = rhs.Unsafe;
            }
            if (copyMask?.UnsafeLoqui ?? true)
            {
                item.UnsafeLoqui = rhs.UnsafeLoqui;
            }
            if (copyMask?.UnsafeNull ?? true)
            {
                item.UnsafeNull = rhs.UnsafeNull;
            }
            if (copyMask?.P2IntN ?? true)
            {
                item.P2IntN = rhs.P2IntN;
            }
            if (copyMask?.P2Int ?? true)
            {
                item.P2Int = rhs.P2Int;
            }
            if (copyMask?.P3DoubleN ?? true)
            {
                item.P3DoubleN = rhs.P3DoubleN;
            }
            if (copyMask?.P3Double ?? true)
            {
                item.P3Double = rhs.P3Double;
            }
            if (copyMask?.P3IntN ?? true)
            {
                item.P3IntN = rhs.P3IntN;
            }
            if (copyMask?.P3Int ?? true)
            {
                item.P3Int = rhs.P3Int;
            }
            if (copyMask?.PercentN ?? true)
            {
                item.PercentN = rhs.PercentN;
            }
            if (copyMask?.Percent ?? true)
            {
                item.Percent = rhs.Percent;
            }
            if (copyMask?.RangeInt8N ?? true)
            {
                item.RangeInt8N = rhs.RangeInt8N;
            }
            if (copyMask?.RangeInt8 ?? true)
            {
                item.RangeInt8 = rhs.RangeInt8;
            }
            if (copyMask?.RangeInt16N ?? true)
            {
                item.RangeInt16N = rhs.RangeInt16N;
            }
            if (copyMask?.RangeInt16 ?? true)
            {
                item.RangeInt16 = rhs.RangeInt16;
            }
            if (copyMask?.RangeInt32N ?? true)
            {
                item.RangeInt32N = rhs.RangeInt32N;
            }
            if (copyMask?.RangeInt32 ?? true)
            {
                item.RangeInt32 = rhs.RangeInt32;
            }
            if (copyMask?.RangeInt64N ?? true)
            {
                item.RangeInt64N = rhs.RangeInt64N;
            }
            if (copyMask?.RangeInt64 ?? true)
            {
                item.RangeInt64 = rhs.RangeInt64;
            }
            if (copyMask?.RangeUInt8N ?? true)
            {
                item.RangeUInt8N = rhs.RangeUInt8N;
            }
            if (copyMask?.RangeUInt8 ?? true)
            {
                item.RangeUInt8 = rhs.RangeUInt8;
            }
            if (copyMask?.RangeUInt16N ?? true)
            {
                item.RangeUInt16N = rhs.RangeUInt16N;
            }
            if (copyMask?.RangeUInt16 ?? true)
            {
                item.RangeUInt16 = rhs.RangeUInt16;
            }
            if (copyMask?.RangeUInt32N ?? true)
            {
                item.RangeUInt32N = rhs.RangeUInt32N;
            }
            if (copyMask?.RangeUInt32 ?? true)
            {
                item.RangeUInt32 = rhs.RangeUInt32;
            }
            if (copyMask?.RangeUInt64N ?? true)
            {
                item.RangeUInt64N = rhs.RangeUInt64N;
            }
            if (copyMask?.RangeUInt64 ?? true)
            {
                item.RangeUInt64 = rhs.RangeUInt64;
            }
            if (copyMask?.String ?? true)
            {
                item.String = rhs.String;
            }
            if (copyMask?.FilePath ?? true)
            {
                item.FilePath = rhs.FilePath;
            }
            if (copyMask?.FilePathNull ?? true)
            {
                item.FilePathNull = rhs.FilePathNull;
            }
            if (copyMask?.DirectoryPath ?? true)
            {
                item.DirectoryPath = rhs.DirectoryPath;
            }
            if (copyMask?.DirectoryPathNull ?? true)
            {
                item.DirectoryPathNull = rhs.DirectoryPathNull;
            }
            if (copyMask?.UDoubleN ?? true)
            {
                item.UDoubleN = rhs.UDoubleN;
            }
            if (copyMask?.UDoubleN_Ranged ?? true)
            {
                item.UDoubleN_Ranged = rhs.UDoubleN_Ranged;
            }
            if (copyMask?.UDouble ?? true)
            {
                item.UDouble = rhs.UDouble;
            }
            if (copyMask?.UDouble_Ranged ?? true)
            {
                item.UDouble_Ranged = rhs.UDouble_Ranged;
            }
            if (copyMask?.UInt16N ?? true)
            {
                item.UInt16N = rhs.UInt16N;
            }
            if (copyMask?.UInt16N_Ranged ?? true)
            {
                item.UInt16N_Ranged = rhs.UInt16N_Ranged;
            }
            if (copyMask?.UInt16 ?? true)
            {
                item.UInt16 = rhs.UInt16;
            }
            if (copyMask?.UInt16_Ranged ?? true)
            {
                item.UInt16_Ranged = rhs.UInt16_Ranged;
            }
            if (copyMask?.UInt32N ?? true)
            {
                item.UInt32N = rhs.UInt32N;
            }
            if (copyMask?.UInt32N_Ranged ?? true)
            {
                item.UInt32N_Ranged = rhs.UInt32N_Ranged;
            }
            if (copyMask?.UInt32 ?? true)
            {
                item.UInt32 = rhs.UInt32;
            }
            if (copyMask?.UInt32_Ranged ?? true)
            {
                item.UInt32_Ranged = rhs.UInt32_Ranged;
            }
            if (copyMask?.UInt64N ?? true)
            {
                item.UInt64N = rhs.UInt64N;
            }
            if (copyMask?.UInt64N_Ranged ?? true)
            {
                item.UInt64N_Ranged = rhs.UInt64N_Ranged;
            }
            if (copyMask?.UInt64 ?? true)
            {
                item.UInt64 = rhs.UInt64;
            }
            if (copyMask?.UInt64_Ranged ?? true)
            {
                item.UInt64_Ranged = rhs.UInt64_Ranged;
            }
            if (copyMask?.UInt8N ?? true)
            {
                item.UInt8N = rhs.UInt8N;
            }
            if (copyMask?.UInt8N_Ranged ?? true)
            {
                item.UInt8N_Ranged = rhs.UInt8N_Ranged;
            }
            if (copyMask?.UInt8 ?? true)
            {
                item.UInt8 = rhs.UInt8;
            }
            if (copyMask?.UInt8_Ranged ?? true)
            {
                item.UInt8_Ranged = rhs.UInt8_Ranged;
            }
            if (copyMask?.Enum ?? true)
            {
                item.Enum = rhs.Enum;
            }
            if (copyMask?.EnumNull ?? true)
            {
                item.EnumNull = rhs.EnumNull;
            }
            if (copyMask?.WildCard ?? true)
            {
                item.WildCard = rhs.WildCard;
            }
            if (copyMask?.WildCardLoqui ?? true)
            {
                item.WildCardLoqui = rhs.WildCardLoqui;
            }
            if (copyMask?.WildCardNull ?? true)
            {
                item.WildCardNull = rhs.WildCardNull;
            }
            if (copyMask?.Ref.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.Ref?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Ref = rhs.Ref;
                            break;
                        case CopyOption.CopyIn:
                            ObjectToRefCommon.CopyFieldsFrom(
                                item: item.Ref,
                                rhs: rhs.Ref,
                                def: def?.Ref,
                                doMasks: doMasks,
                                errorMask: (doMasks ? new Func<ObjectToRef_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.Ref.Specific == null)
                                    {
                                        baseMask.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                    }
                                    return baseMask.Ref.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.Ref.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Ref == null)
                            {
                                item.Ref = null;
                            }
                            else
                            {
                                item.Ref = ObjectToRef.Copy(
                                    rhs.Ref,
                                    copyMask?.Ref?.Specific,
                                    def?.Ref);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ref?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.Ref, ex);
                }
            }
            if (copyMask?.Ref_NotNull.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.Ref_NotNull?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.Ref_NotNull = rhs.Ref_NotNull;
                            break;
                        case CopyOption.CopyIn:
                            ObjectToRefCommon.CopyFieldsFrom(
                                item: item.Ref_NotNull,
                                rhs: rhs.Ref_NotNull,
                                def: def?.Ref_NotNull,
                                doMasks: doMasks,
                                errorMask: (doMasks ? new Func<ObjectToRef_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.Ref_NotNull.Specific == null)
                                    {
                                        baseMask.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                    }
                                    return baseMask.Ref_NotNull.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.Ref_NotNull.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.Ref_NotNull == null)
                            {
                                item.Ref_NotNull = null;
                            }
                            else
                            {
                                item.Ref_NotNull = ObjectToRef.Copy(
                                    rhs.Ref_NotNull,
                                    copyMask?.Ref_NotNull?.Specific,
                                    def?.Ref_NotNull);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.Ref_NotNull?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.Ref_NotNull, ex);
                }
            }
            if (copyMask?.Ref_Singleton.Overall ?? true)
            {
                try
                {
                    ObjectToRefCommon.CopyFieldsFrom(
                        item: item.Ref_Singleton,
                        rhs: rhs.Ref_Singleton,
                        def: def?.Ref_Singleton,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<ObjectToRef_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.Ref_Singleton.Specific == null)
                            {
                                baseMask.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                            }
                            return baseMask.Ref_Singleton.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.Ref_Singleton.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.Ref_Singleton, ex);
                }
            }
            if (copyMask?.RefGetter.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.RefGetter?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.RefGetter = rhs.RefGetter;
                            break;
                        case CopyOption.CopyIn:
                        case CopyOption.MakeCopy:
                            if (rhs.RefGetter == null)
                            {
                                item.RefGetter = null;
                            }
                            else
                            {
                                item.RefGetter = ObjectToRef.Copy_ToLoqui(
                                    rhs.RefGetter,
                                    copyMask?.RefGetter?.Specific,
                                    def?.RefGetter);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefGetter?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.RefGetter, ex);
                }
            }
            if (copyMask?.RefGetter_NotNull.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.RefGetter_NotNull?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.RefGetter_NotNull = rhs.RefGetter_NotNull;
                            break;
                        case CopyOption.CopyIn:
                        case CopyOption.MakeCopy:
                            if (rhs.RefGetter_NotNull == null)
                            {
                                item.RefGetter_NotNull = null;
                            }
                            else
                            {
                                item.RefGetter_NotNull = ObjectToRef.Copy_ToLoqui(
                                    rhs.RefGetter_NotNull,
                                    copyMask?.RefGetter_NotNull?.Specific,
                                    def?.RefGetter_NotNull);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefGetter_NotNull?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.RefGetter_NotNull, ex);
                }
            }
            if (copyMask?.RefSetter.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.RefSetter?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.RefSetter = rhs.RefSetter;
                            break;
                        case CopyOption.CopyIn:
                            ObjectToRefCommon.CopyFieldsFrom(
                                item: item.RefSetter,
                                rhs: rhs.RefSetter,
                                def: def?.RefSetter,
                                doMasks: doMasks,
                                errorMask: (doMasks ? new Func<ObjectToRef_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.RefSetter.Specific == null)
                                    {
                                        baseMask.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                    }
                                    return baseMask.RefSetter.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.RefSetter.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.RefSetter == null)
                            {
                                item.RefSetter = null;
                            }
                            else
                            {
                                item.RefSetter = ObjectToRef.Copy(
                                    rhs.RefSetter,
                                    copyMask?.RefSetter?.Specific,
                                    def?.RefSetter);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefSetter?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.RefSetter, ex);
                }
            }
            if (copyMask?.RefSetter_NotNull.Overall != CopyOption.Skip)
            {
                try
                {
                    switch (copyMask?.RefSetter_NotNull?.Overall ?? CopyOption.Reference)
                    {
                        case CopyOption.Reference:
                            item.RefSetter_NotNull = rhs.RefSetter_NotNull;
                            break;
                        case CopyOption.CopyIn:
                            ObjectToRefCommon.CopyFieldsFrom(
                                item: item.RefSetter_NotNull,
                                rhs: rhs.RefSetter_NotNull,
                                def: def?.RefSetter_NotNull,
                                doMasks: doMasks,
                                errorMask: (doMasks ? new Func<ObjectToRef_ErrorMask>(() =>
                                {
                                    var baseMask = errorMask();
                                    if (baseMask.RefSetter_NotNull.Specific == null)
                                    {
                                        baseMask.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                                    }
                                    return baseMask.RefSetter_NotNull.Specific;
                                }
                                ) : null),
                                copyMask: copyMask?.RefSetter_NotNull.Specific,
                                cmds: cmds);
                            break;
                        case CopyOption.MakeCopy:
                            if (rhs.RefSetter_NotNull == null)
                            {
                                item.RefSetter_NotNull = null;
                            }
                            else
                            {
                                item.RefSetter_NotNull = ObjectToRef.Copy(
                                    rhs.RefSetter_NotNull,
                                    copyMask?.RefSetter_NotNull?.Specific,
                                    def?.RefSetter_NotNull);
                            }
                            break;
                        default:
                            throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefSetter_NotNull?.Overall}. Cannot execute copy.");
                    }
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.RefSetter_NotNull, ex);
                }
            }
            if (copyMask?.RefSetter_Singleton.Overall ?? true)
            {
                try
                {
                    ObjectToRefCommon.CopyFieldsFrom(
                        item: item.RefSetter_Singleton,
                        rhs: rhs.RefSetter_Singleton,
                        def: def?.RefSetter_Singleton,
                        doMasks: doMasks,
                        errorMask: (doMasks ? new Func<ObjectToRef_ErrorMask>(() =>
                        {
                            var baseMask = errorMask();
                            if (baseMask.RefSetter_Singleton.Specific == null)
                            {
                                baseMask.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(null, new ObjectToRef_ErrorMask());
                            }
                            return baseMask.RefSetter_Singleton.Specific;
                        }
                        ) : null),
                        copyMask: copyMask?.RefSetter_Singleton.Specific,
                        cmds: cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.RefSetter_Singleton, ex);
                }
            }
            if (copyMask?.List != CopyOption.Skip)
            {
                try
                {
                    item.List.SetToWithDefault(
                        rhs.List,
                        def?.List,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.List, ex);
                }
            }
            if (copyMask?.RefList.Overall != CopyOption.Skip)
            {
                try
                {
                    item.RefList.SetToWithDefault(
                        rhs.RefList,
                        def?.RefList,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.RefList.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    if (r == null) return default(ObjectToRef);
                                    return ObjectToRef.Copy(
                                        r,
                                        copyMask?.RefList?.Specific,
                                        def: d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.RefList.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.RefList, ex);
                }
            }
            if (copyMask?.Dict ?? true)
            {
                try
                {
                    item.Dict.SetToWithDefault(
                        rhs.Dict,
                        def?.Dict,
                        cmds);
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.Dict, ex);
                }
            }
            if (copyMask?.RefDict.Overall ?? true)
            {
                try
                {
                    item.RefDict.SetToWithDefault(
                        rhs.RefDict,
                        def?.RefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef key;
                            switch (copyMask?.RefDict?.Specific.Key.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    key = k;
                                    break;
                                case RefCopyType.MakeCopy:
                                    key = k.Copy(copyMask: copyMask?.RefDict?.Specific.Key.Mask);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.RefDict.Overall}. Cannot execute copy.");
                            }
                            ObjectToRef val;
                            switch (copyMask?.RefDict?.Specific.Value.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    val = v;
                                    break;
                                case RefCopyType.MakeCopy:
                                    val = v.Copy(copyMask?.RefDict?.Specific.Value.Mask, d);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.RefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<ObjectToRef, ObjectToRef>(key, val);
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.RefDict, ex);
                }
            }
            if (copyMask?.KeyRefDict.Overall ?? true)
            {
                try
                {
                    item.KeyRefDict.SetToWithDefault(
                        rhs.KeyRefDict,
                        def?.KeyRefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef key;
                            switch (copyMask?.KeyRefDict?.Specific.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    key = k;
                                    break;
                                case RefCopyType.MakeCopy:
                                    key = k.Copy(copyMask: copyMask?.KeyRefDict?.Specific.Mask);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.KeyRefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<ObjectToRef, Boolean>(key, v);
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.KeyRefDict, ex);
                }
            }
            if (copyMask?.ValRefDict.Overall ?? true)
            {
                try
                {
                    item.ValRefDict.SetToWithDefault(
                        rhs.ValRefDict,
                        def?.ValRefDict,
                        cmds,
                        (k, v, d) =>
                        {
                            ObjectToRef val;
                            switch (copyMask?.ValRefDict?.Specific.Type ?? RefCopyType.Reference)
                            {
                                case RefCopyType.Reference:
                                    val = v;
                                    break;
                                case RefCopyType.MakeCopy:
                                    val = v.Copy(copyMask?.ValRefDict?.Specific.Mask, d);
                                    break;
                                default:
                                    throw new NotImplementedException($"Unknown RefCopyType {copyMask?.ValRefDict.Overall}. Cannot execute copy.");
                            }
                            return new KeyValuePair<String, ObjectToRef>(k, val);
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.ValRefDict, ex);
                }
            }
            if (copyMask?.DictKeyedValue.Overall != CopyOption.Skip)
            {
                try
                {
                    item.DictKeyedValue.SetToWithDefault(
                        rhs.DictKeyedValue,
                        def?.DictKeyedValue,
                        cmds,
                        (r, d) =>
                        {
                            switch (copyMask?.DictKeyedValue.Overall ?? CopyOption.Reference)
                            {
                                case CopyOption.Reference:
                                    return r;
                                case CopyOption.MakeCopy:
                                    return r.Copy(copyMask?.DictKeyedValue.Specific, d);
                                default:
                                    throw new NotImplementedException($"Unknown CopyOption {copyMask?.DictKeyedValue.Overall}. Cannot execute copy.");
                            }
                        }
                        );
                }
                catch (Exception ex)
                when (doMasks)
                {
                    errorMask().SetNthException((int)TestObject_FieldIndex.DictKeyedValue, ex);
                }
            }
        }

        #endregion

        public static void SetNthObjectHasBeenSet(
            ushort index,
            bool on,
            ITestObject obj,
            NotifyingFireParameters? cmds = null)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                    break;
                case TestObject_FieldIndex.ByteArrayNull:
                    break;
                case TestObject_FieldIndex.ByteArrayNotNull:
                    break;
                case TestObject_FieldIndex.ByteArraySingleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_FieldIndex.BoolN:
                    break;
                case TestObject_FieldIndex.Bool:
                    break;
                case TestObject_FieldIndex.CharN:
                    break;
                case TestObject_FieldIndex.Char:
                    break;
                case TestObject_FieldIndex.DateTimeNull:
                    break;
                case TestObject_FieldIndex.DateTime:
                    break;
                case TestObject_FieldIndex.DoubleN:
                    break;
                case TestObject_FieldIndex.DoubleN_Ranged:
                    break;
                case TestObject_FieldIndex.Double:
                    break;
                case TestObject_FieldIndex.Double_Ranged:
                    break;
                case TestObject_FieldIndex.FloatN:
                    break;
                case TestObject_FieldIndex.FloatN_Ranged:
                    break;
                case TestObject_FieldIndex.Float:
                    break;
                case TestObject_FieldIndex.Float_Ranged:
                    break;
                case TestObject_FieldIndex.Int16N:
                    break;
                case TestObject_FieldIndex.Int16N_Ranged:
                    break;
                case TestObject_FieldIndex.Int16:
                    break;
                case TestObject_FieldIndex.Int16_Ranged:
                    break;
                case TestObject_FieldIndex.Int32N:
                    break;
                case TestObject_FieldIndex.Int32N_Ranged:
                    break;
                case TestObject_FieldIndex.Int32:
                    break;
                case TestObject_FieldIndex.Int32_Ranged:
                    break;
                case TestObject_FieldIndex.Int64N:
                    break;
                case TestObject_FieldIndex.Int64N_Ranged:
                    break;
                case TestObject_FieldIndex.Int64:
                    break;
                case TestObject_FieldIndex.Int64_Ranged:
                    break;
                case TestObject_FieldIndex.Int8N:
                    break;
                case TestObject_FieldIndex.Int8N_Ranged:
                    break;
                case TestObject_FieldIndex.Int8:
                    break;
                case TestObject_FieldIndex.Int8_Ranged:
                    break;
                case TestObject_FieldIndex.Unsafe:
                    break;
                case TestObject_FieldIndex.UnsafeLoqui:
                    break;
                case TestObject_FieldIndex.UnsafeNull:
                    break;
                case TestObject_FieldIndex.P2IntN:
                    break;
                case TestObject_FieldIndex.P2Int:
                    break;
                case TestObject_FieldIndex.P3DoubleN:
                    break;
                case TestObject_FieldIndex.P3Double:
                    break;
                case TestObject_FieldIndex.P3IntN:
                    break;
                case TestObject_FieldIndex.P3Int:
                    break;
                case TestObject_FieldIndex.PercentN:
                    break;
                case TestObject_FieldIndex.Percent:
                    break;
                case TestObject_FieldIndex.RangeInt8N:
                    break;
                case TestObject_FieldIndex.RangeInt8:
                    break;
                case TestObject_FieldIndex.RangeInt16N:
                    break;
                case TestObject_FieldIndex.RangeInt16:
                    break;
                case TestObject_FieldIndex.RangeInt32N:
                    break;
                case TestObject_FieldIndex.RangeInt32:
                    break;
                case TestObject_FieldIndex.RangeInt64N:
                    break;
                case TestObject_FieldIndex.RangeInt64:
                    break;
                case TestObject_FieldIndex.RangeUInt8N:
                    break;
                case TestObject_FieldIndex.RangeUInt8:
                    break;
                case TestObject_FieldIndex.RangeUInt16N:
                    break;
                case TestObject_FieldIndex.RangeUInt16:
                    break;
                case TestObject_FieldIndex.RangeUInt32N:
                    break;
                case TestObject_FieldIndex.RangeUInt32:
                    break;
                case TestObject_FieldIndex.RangeUInt64N:
                    break;
                case TestObject_FieldIndex.RangeUInt64:
                    break;
                case TestObject_FieldIndex.String:
                    break;
                case TestObject_FieldIndex.FilePath:
                    break;
                case TestObject_FieldIndex.FilePathNull:
                    break;
                case TestObject_FieldIndex.DirectoryPath:
                    break;
                case TestObject_FieldIndex.DirectoryPathNull:
                    break;
                case TestObject_FieldIndex.UDoubleN:
                    break;
                case TestObject_FieldIndex.UDoubleN_Ranged:
                    break;
                case TestObject_FieldIndex.UDouble:
                    break;
                case TestObject_FieldIndex.UDouble_Ranged:
                    break;
                case TestObject_FieldIndex.UInt16N:
                    break;
                case TestObject_FieldIndex.UInt16N_Ranged:
                    break;
                case TestObject_FieldIndex.UInt16:
                    break;
                case TestObject_FieldIndex.UInt16_Ranged:
                    break;
                case TestObject_FieldIndex.UInt32N:
                    break;
                case TestObject_FieldIndex.UInt32N_Ranged:
                    break;
                case TestObject_FieldIndex.UInt32:
                    break;
                case TestObject_FieldIndex.UInt32_Ranged:
                    break;
                case TestObject_FieldIndex.UInt64N:
                    break;
                case TestObject_FieldIndex.UInt64N_Ranged:
                    break;
                case TestObject_FieldIndex.UInt64:
                    break;
                case TestObject_FieldIndex.UInt64_Ranged:
                    break;
                case TestObject_FieldIndex.UInt8N:
                    break;
                case TestObject_FieldIndex.UInt8N_Ranged:
                    break;
                case TestObject_FieldIndex.UInt8:
                    break;
                case TestObject_FieldIndex.UInt8_Ranged:
                    break;
                case TestObject_FieldIndex.Enum:
                    break;
                case TestObject_FieldIndex.EnumNull:
                    break;
                case TestObject_FieldIndex.WildCard:
                    break;
                case TestObject_FieldIndex.WildCardLoqui:
                    break;
                case TestObject_FieldIndex.WildCardNull:
                    break;
                case TestObject_FieldIndex.Ref:
                    break;
                case TestObject_FieldIndex.Ref_NotNull:
                    break;
                case TestObject_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_FieldIndex.RefGetter:
                    break;
                case TestObject_FieldIndex.RefGetter_NotNull:
                    break;
                case TestObject_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_FieldIndex.RefSetter:
                    break;
                case TestObject_FieldIndex.RefSetter_NotNull:
                    break;
                case TestObject_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_FieldIndex.List:
                    obj.List.HasBeenSet = on;
                    break;
                case TestObject_FieldIndex.RefList:
                    obj.RefList.HasBeenSet = on;
                    break;
                case TestObject_FieldIndex.Dict:
                    obj.Dict.HasBeenSet = on;
                    break;
                case TestObject_FieldIndex.RefDict:
                    obj.RefDict.HasBeenSet = on;
                    break;
                case TestObject_FieldIndex.KeyRefDict:
                    obj.KeyRefDict.HasBeenSet = on;
                    break;
                case TestObject_FieldIndex.ValRefDict:
                    obj.ValRefDict.HasBeenSet = on;
                    break;
                case TestObject_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.HasBeenSet = on;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void UnsetNthObject(
            ushort index,
            ITestObject obj,
            NotifyingUnsetParameters? cmds = null)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                    obj.ByteArray = default(Byte[]);
                    break;
                case TestObject_FieldIndex.ByteArrayNull:
                    obj.ByteArrayNull = default(Byte[]);
                    break;
                case TestObject_FieldIndex.ByteArrayNotNull:
                    obj.ByteArrayNotNull = default(Byte[]);
                    break;
                case TestObject_FieldIndex.ByteArraySingleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_FieldIndex.BoolN:
                    obj.BoolN = default(Boolean?);
                    break;
                case TestObject_FieldIndex.Bool:
                    obj.Bool = default(Boolean);
                    break;
                case TestObject_FieldIndex.CharN:
                    obj.CharN = default(Char?);
                    break;
                case TestObject_FieldIndex.Char:
                    obj.Char = default(Char);
                    break;
                case TestObject_FieldIndex.DateTimeNull:
                    obj.DateTimeNull = default(DateTime?);
                    break;
                case TestObject_FieldIndex.DateTime:
                    obj.DateTime = default(DateTime);
                    break;
                case TestObject_FieldIndex.DoubleN:
                    obj.DoubleN = default(Double?);
                    break;
                case TestObject_FieldIndex.DoubleN_Ranged:
                    obj.DoubleN_Ranged = default(Double?);
                    break;
                case TestObject_FieldIndex.Double:
                    obj.Double = default(Double);
                    break;
                case TestObject_FieldIndex.Double_Ranged:
                    obj.Double_Ranged = default(Double);
                    break;
                case TestObject_FieldIndex.FloatN:
                    obj.FloatN = default(Single?);
                    break;
                case TestObject_FieldIndex.FloatN_Ranged:
                    obj.FloatN_Ranged = default(Single?);
                    break;
                case TestObject_FieldIndex.Float:
                    obj.Float = default(Single);
                    break;
                case TestObject_FieldIndex.Float_Ranged:
                    obj.Float_Ranged = default(Single);
                    break;
                case TestObject_FieldIndex.Int16N:
                    obj.Int16N = default(Int16?);
                    break;
                case TestObject_FieldIndex.Int16N_Ranged:
                    obj.Int16N_Ranged = default(Int16?);
                    break;
                case TestObject_FieldIndex.Int16:
                    obj.Int16 = default(Int16);
                    break;
                case TestObject_FieldIndex.Int16_Ranged:
                    obj.Int16_Ranged = default(Int16);
                    break;
                case TestObject_FieldIndex.Int32N:
                    obj.Int32N = default(Int32?);
                    break;
                case TestObject_FieldIndex.Int32N_Ranged:
                    obj.Int32N_Ranged = default(Int32?);
                    break;
                case TestObject_FieldIndex.Int32:
                    obj.Int32 = default(Int32);
                    break;
                case TestObject_FieldIndex.Int32_Ranged:
                    obj.Int32_Ranged = default(Int32);
                    break;
                case TestObject_FieldIndex.Int64N:
                    obj.Int64N = default(Int64?);
                    break;
                case TestObject_FieldIndex.Int64N_Ranged:
                    obj.Int64N_Ranged = default(Int64?);
                    break;
                case TestObject_FieldIndex.Int64:
                    obj.Int64 = default(Int64);
                    break;
                case TestObject_FieldIndex.Int64_Ranged:
                    obj.Int64_Ranged = default(Int64);
                    break;
                case TestObject_FieldIndex.Int8N:
                    obj.Int8N = default(SByte?);
                    break;
                case TestObject_FieldIndex.Int8N_Ranged:
                    obj.Int8N_Ranged = default(SByte?);
                    break;
                case TestObject_FieldIndex.Int8:
                    obj.Int8 = default(SByte);
                    break;
                case TestObject_FieldIndex.Int8_Ranged:
                    obj.Int8_Ranged = default(SByte);
                    break;
                case TestObject_FieldIndex.Unsafe:
                    obj.Unsafe = default(bool);
                    break;
                case TestObject_FieldIndex.UnsafeLoqui:
                    obj.UnsafeLoqui = default(ObjectToRef);
                    break;
                case TestObject_FieldIndex.UnsafeNull:
                    obj.UnsafeNull = default(ObjectToRef);
                    break;
                case TestObject_FieldIndex.P2IntN:
                    obj.P2IntN = default(P2Int?);
                    break;
                case TestObject_FieldIndex.P2Int:
                    obj.P2Int = default(P2Int);
                    break;
                case TestObject_FieldIndex.P3DoubleN:
                    obj.P3DoubleN = default(P3Double?);
                    break;
                case TestObject_FieldIndex.P3Double:
                    obj.P3Double = default(P3Double);
                    break;
                case TestObject_FieldIndex.P3IntN:
                    obj.P3IntN = default(P3Int?);
                    break;
                case TestObject_FieldIndex.P3Int:
                    obj.P3Int = default(P3Int);
                    break;
                case TestObject_FieldIndex.PercentN:
                    obj.PercentN = default(Percent?);
                    break;
                case TestObject_FieldIndex.Percent:
                    obj.Percent = default(Percent);
                    break;
                case TestObject_FieldIndex.RangeInt8N:
                    obj.RangeInt8N = default(RangeInt8?);
                    break;
                case TestObject_FieldIndex.RangeInt8:
                    obj.RangeInt8 = default(RangeInt8);
                    break;
                case TestObject_FieldIndex.RangeInt16N:
                    obj.RangeInt16N = default(RangeInt16?);
                    break;
                case TestObject_FieldIndex.RangeInt16:
                    obj.RangeInt16 = default(RangeInt16);
                    break;
                case TestObject_FieldIndex.RangeInt32N:
                    obj.RangeInt32N = default(RangeInt32?);
                    break;
                case TestObject_FieldIndex.RangeInt32:
                    obj.RangeInt32 = default(RangeInt32);
                    break;
                case TestObject_FieldIndex.RangeInt64N:
                    obj.RangeInt64N = default(RangeInt64?);
                    break;
                case TestObject_FieldIndex.RangeInt64:
                    obj.RangeInt64 = default(RangeInt64);
                    break;
                case TestObject_FieldIndex.RangeUInt8N:
                    obj.RangeUInt8N = default(RangeUInt8?);
                    break;
                case TestObject_FieldIndex.RangeUInt8:
                    obj.RangeUInt8 = default(RangeUInt8);
                    break;
                case TestObject_FieldIndex.RangeUInt16N:
                    obj.RangeUInt16N = default(RangeUInt16?);
                    break;
                case TestObject_FieldIndex.RangeUInt16:
                    obj.RangeUInt16 = default(RangeUInt16);
                    break;
                case TestObject_FieldIndex.RangeUInt32N:
                    obj.RangeUInt32N = default(RangeUInt32?);
                    break;
                case TestObject_FieldIndex.RangeUInt32:
                    obj.RangeUInt32 = default(RangeUInt32);
                    break;
                case TestObject_FieldIndex.RangeUInt64N:
                    obj.RangeUInt64N = default(RangeUInt64?);
                    break;
                case TestObject_FieldIndex.RangeUInt64:
                    obj.RangeUInt64 = default(RangeUInt64);
                    break;
                case TestObject_FieldIndex.String:
                    obj.String = default(String);
                    break;
                case TestObject_FieldIndex.FilePath:
                    obj.FilePath = default(FilePath);
                    break;
                case TestObject_FieldIndex.FilePathNull:
                    obj.FilePathNull = default(FilePath?);
                    break;
                case TestObject_FieldIndex.DirectoryPath:
                    obj.DirectoryPath = default(DirectoryPath);
                    break;
                case TestObject_FieldIndex.DirectoryPathNull:
                    obj.DirectoryPathNull = default(DirectoryPath?);
                    break;
                case TestObject_FieldIndex.UDoubleN:
                    obj.UDoubleN = default(UDouble?);
                    break;
                case TestObject_FieldIndex.UDoubleN_Ranged:
                    obj.UDoubleN_Ranged = default(UDouble?);
                    break;
                case TestObject_FieldIndex.UDouble:
                    obj.UDouble = default(UDouble);
                    break;
                case TestObject_FieldIndex.UDouble_Ranged:
                    obj.UDouble_Ranged = default(UDouble);
                    break;
                case TestObject_FieldIndex.UInt16N:
                    obj.UInt16N = default(UInt16?);
                    break;
                case TestObject_FieldIndex.UInt16N_Ranged:
                    obj.UInt16N_Ranged = default(UInt16?);
                    break;
                case TestObject_FieldIndex.UInt16:
                    obj.UInt16 = default(UInt16);
                    break;
                case TestObject_FieldIndex.UInt16_Ranged:
                    obj.UInt16_Ranged = default(UInt16);
                    break;
                case TestObject_FieldIndex.UInt32N:
                    obj.UInt32N = default(UInt32?);
                    break;
                case TestObject_FieldIndex.UInt32N_Ranged:
                    obj.UInt32N_Ranged = default(UInt32?);
                    break;
                case TestObject_FieldIndex.UInt32:
                    obj.UInt32 = default(UInt32);
                    break;
                case TestObject_FieldIndex.UInt32_Ranged:
                    obj.UInt32_Ranged = default(UInt32);
                    break;
                case TestObject_FieldIndex.UInt64N:
                    obj.UInt64N = default(UInt64?);
                    break;
                case TestObject_FieldIndex.UInt64N_Ranged:
                    obj.UInt64N_Ranged = default(UInt64?);
                    break;
                case TestObject_FieldIndex.UInt64:
                    obj.UInt64 = default(UInt64);
                    break;
                case TestObject_FieldIndex.UInt64_Ranged:
                    obj.UInt64_Ranged = default(UInt64);
                    break;
                case TestObject_FieldIndex.UInt8N:
                    obj.UInt8N = default(Byte?);
                    break;
                case TestObject_FieldIndex.UInt8N_Ranged:
                    obj.UInt8N_Ranged = default(Byte?);
                    break;
                case TestObject_FieldIndex.UInt8:
                    obj.UInt8 = default(Byte);
                    break;
                case TestObject_FieldIndex.UInt8_Ranged:
                    obj.UInt8_Ranged = default(Byte);
                    break;
                case TestObject_FieldIndex.Enum:
                    obj.Enum = default(TestEnum);
                    break;
                case TestObject_FieldIndex.EnumNull:
                    obj.EnumNull = default(TestEnum?);
                    break;
                case TestObject_FieldIndex.WildCard:
                    obj.WildCard = default(Object);
                    break;
                case TestObject_FieldIndex.WildCardLoqui:
                    obj.WildCardLoqui = default(Object);
                    break;
                case TestObject_FieldIndex.WildCardNull:
                    obj.WildCardNull = default(Object);
                    break;
                case TestObject_FieldIndex.Ref:
                    obj.Ref = default(ObjectToRef);
                    break;
                case TestObject_FieldIndex.Ref_NotNull:
                    obj.Ref_NotNull = default(ObjectToRef);
                    break;
                case TestObject_FieldIndex.Ref_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_FieldIndex.RefGetter:
                    obj.RefGetter = default(IObjectToRefGetter);
                    break;
                case TestObject_FieldIndex.RefGetter_NotNull:
                    obj.RefGetter_NotNull = default(IObjectToRefGetter);
                    break;
                case TestObject_FieldIndex.RefGetter_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_FieldIndex.RefSetter:
                    obj.RefSetter = default(IObjectToRef);
                    break;
                case TestObject_FieldIndex.RefSetter_NotNull:
                    obj.RefSetter_NotNull = default(IObjectToRef);
                    break;
                case TestObject_FieldIndex.RefSetter_Singleton:
                    throw new ArgumentException("Tried to set at a readonly index " + index);
                case TestObject_FieldIndex.List:
                    obj.List.Unset(cmds);
                    break;
                case TestObject_FieldIndex.RefList:
                    obj.RefList.Unset(cmds);
                    break;
                case TestObject_FieldIndex.Dict:
                    obj.Dict.Unset(cmds);
                    break;
                case TestObject_FieldIndex.RefDict:
                    obj.RefDict.Unset(cmds);
                    break;
                case TestObject_FieldIndex.KeyRefDict:
                    obj.KeyRefDict.Unset(cmds);
                    break;
                case TestObject_FieldIndex.ValRefDict:
                    obj.ValRefDict.Unset(cmds);
                    break;
                case TestObject_FieldIndex.DictKeyedValue:
                    obj.DictKeyedValue.Unset(cmds);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static bool GetNthObjectHasBeenSet(
            ushort index,
            ITestObject obj)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                case TestObject_FieldIndex.ByteArrayNull:
                case TestObject_FieldIndex.ByteArrayNotNull:
                case TestObject_FieldIndex.ByteArraySingleton:
                case TestObject_FieldIndex.BoolN:
                case TestObject_FieldIndex.Bool:
                case TestObject_FieldIndex.CharN:
                case TestObject_FieldIndex.Char:
                case TestObject_FieldIndex.DateTimeNull:
                case TestObject_FieldIndex.DateTime:
                case TestObject_FieldIndex.DoubleN:
                case TestObject_FieldIndex.DoubleN_Ranged:
                case TestObject_FieldIndex.Double:
                case TestObject_FieldIndex.Double_Ranged:
                case TestObject_FieldIndex.FloatN:
                case TestObject_FieldIndex.FloatN_Ranged:
                case TestObject_FieldIndex.Float:
                case TestObject_FieldIndex.Float_Ranged:
                case TestObject_FieldIndex.Int16N:
                case TestObject_FieldIndex.Int16N_Ranged:
                case TestObject_FieldIndex.Int16:
                case TestObject_FieldIndex.Int16_Ranged:
                case TestObject_FieldIndex.Int32N:
                case TestObject_FieldIndex.Int32N_Ranged:
                case TestObject_FieldIndex.Int32:
                case TestObject_FieldIndex.Int32_Ranged:
                case TestObject_FieldIndex.Int64N:
                case TestObject_FieldIndex.Int64N_Ranged:
                case TestObject_FieldIndex.Int64:
                case TestObject_FieldIndex.Int64_Ranged:
                case TestObject_FieldIndex.Int8N:
                case TestObject_FieldIndex.Int8N_Ranged:
                case TestObject_FieldIndex.Int8:
                case TestObject_FieldIndex.Int8_Ranged:
                case TestObject_FieldIndex.Unsafe:
                case TestObject_FieldIndex.UnsafeLoqui:
                case TestObject_FieldIndex.UnsafeNull:
                case TestObject_FieldIndex.P2IntN:
                case TestObject_FieldIndex.P2Int:
                case TestObject_FieldIndex.P3DoubleN:
                case TestObject_FieldIndex.P3Double:
                case TestObject_FieldIndex.P3IntN:
                case TestObject_FieldIndex.P3Int:
                case TestObject_FieldIndex.PercentN:
                case TestObject_FieldIndex.Percent:
                case TestObject_FieldIndex.RangeInt8N:
                case TestObject_FieldIndex.RangeInt8:
                case TestObject_FieldIndex.RangeInt16N:
                case TestObject_FieldIndex.RangeInt16:
                case TestObject_FieldIndex.RangeInt32N:
                case TestObject_FieldIndex.RangeInt32:
                case TestObject_FieldIndex.RangeInt64N:
                case TestObject_FieldIndex.RangeInt64:
                case TestObject_FieldIndex.RangeUInt8N:
                case TestObject_FieldIndex.RangeUInt8:
                case TestObject_FieldIndex.RangeUInt16N:
                case TestObject_FieldIndex.RangeUInt16:
                case TestObject_FieldIndex.RangeUInt32N:
                case TestObject_FieldIndex.RangeUInt32:
                case TestObject_FieldIndex.RangeUInt64N:
                case TestObject_FieldIndex.RangeUInt64:
                case TestObject_FieldIndex.String:
                case TestObject_FieldIndex.FilePath:
                case TestObject_FieldIndex.FilePathNull:
                case TestObject_FieldIndex.DirectoryPath:
                case TestObject_FieldIndex.DirectoryPathNull:
                case TestObject_FieldIndex.UDoubleN:
                case TestObject_FieldIndex.UDoubleN_Ranged:
                case TestObject_FieldIndex.UDouble:
                case TestObject_FieldIndex.UDouble_Ranged:
                case TestObject_FieldIndex.UInt16N:
                case TestObject_FieldIndex.UInt16N_Ranged:
                case TestObject_FieldIndex.UInt16:
                case TestObject_FieldIndex.UInt16_Ranged:
                case TestObject_FieldIndex.UInt32N:
                case TestObject_FieldIndex.UInt32N_Ranged:
                case TestObject_FieldIndex.UInt32:
                case TestObject_FieldIndex.UInt32_Ranged:
                case TestObject_FieldIndex.UInt64N:
                case TestObject_FieldIndex.UInt64N_Ranged:
                case TestObject_FieldIndex.UInt64:
                case TestObject_FieldIndex.UInt64_Ranged:
                case TestObject_FieldIndex.UInt8N:
                case TestObject_FieldIndex.UInt8N_Ranged:
                case TestObject_FieldIndex.UInt8:
                case TestObject_FieldIndex.UInt8_Ranged:
                case TestObject_FieldIndex.Enum:
                case TestObject_FieldIndex.EnumNull:
                case TestObject_FieldIndex.WildCard:
                case TestObject_FieldIndex.WildCardLoqui:
                case TestObject_FieldIndex.WildCardNull:
                case TestObject_FieldIndex.Ref:
                case TestObject_FieldIndex.Ref_NotNull:
                case TestObject_FieldIndex.Ref_Singleton:
                case TestObject_FieldIndex.RefGetter:
                case TestObject_FieldIndex.RefGetter_NotNull:
                case TestObject_FieldIndex.RefGetter_Singleton:
                case TestObject_FieldIndex.RefSetter:
                case TestObject_FieldIndex.RefSetter_NotNull:
                case TestObject_FieldIndex.RefSetter_Singleton:
                case TestObject_FieldIndex.List:
                case TestObject_FieldIndex.RefList:
                case TestObject_FieldIndex.Dict:
                case TestObject_FieldIndex.RefDict:
                case TestObject_FieldIndex.KeyRefDict:
                case TestObject_FieldIndex.ValRefDict:
                case TestObject_FieldIndex.DictKeyedValue:
                    return true;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static object GetNthObject(
            ushort index,
            ITestObjectGetter obj)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                    return obj.ByteArray;
                case TestObject_FieldIndex.ByteArrayNull:
                    return obj.ByteArrayNull;
                case TestObject_FieldIndex.ByteArrayNotNull:
                    return obj.ByteArrayNotNull;
                case TestObject_FieldIndex.ByteArraySingleton:
                    return obj.ByteArraySingleton;
                case TestObject_FieldIndex.BoolN:
                    return obj.BoolN;
                case TestObject_FieldIndex.Bool:
                    return obj.Bool;
                case TestObject_FieldIndex.CharN:
                    return obj.CharN;
                case TestObject_FieldIndex.Char:
                    return obj.Char;
                case TestObject_FieldIndex.DateTimeNull:
                    return obj.DateTimeNull;
                case TestObject_FieldIndex.DateTime:
                    return obj.DateTime;
                case TestObject_FieldIndex.DoubleN:
                    return obj.DoubleN;
                case TestObject_FieldIndex.DoubleN_Ranged:
                    return obj.DoubleN_Ranged;
                case TestObject_FieldIndex.Double:
                    return obj.Double;
                case TestObject_FieldIndex.Double_Ranged:
                    return obj.Double_Ranged;
                case TestObject_FieldIndex.FloatN:
                    return obj.FloatN;
                case TestObject_FieldIndex.FloatN_Ranged:
                    return obj.FloatN_Ranged;
                case TestObject_FieldIndex.Float:
                    return obj.Float;
                case TestObject_FieldIndex.Float_Ranged:
                    return obj.Float_Ranged;
                case TestObject_FieldIndex.Int16N:
                    return obj.Int16N;
                case TestObject_FieldIndex.Int16N_Ranged:
                    return obj.Int16N_Ranged;
                case TestObject_FieldIndex.Int16:
                    return obj.Int16;
                case TestObject_FieldIndex.Int16_Ranged:
                    return obj.Int16_Ranged;
                case TestObject_FieldIndex.Int32N:
                    return obj.Int32N;
                case TestObject_FieldIndex.Int32N_Ranged:
                    return obj.Int32N_Ranged;
                case TestObject_FieldIndex.Int32:
                    return obj.Int32;
                case TestObject_FieldIndex.Int32_Ranged:
                    return obj.Int32_Ranged;
                case TestObject_FieldIndex.Int64N:
                    return obj.Int64N;
                case TestObject_FieldIndex.Int64N_Ranged:
                    return obj.Int64N_Ranged;
                case TestObject_FieldIndex.Int64:
                    return obj.Int64;
                case TestObject_FieldIndex.Int64_Ranged:
                    return obj.Int64_Ranged;
                case TestObject_FieldIndex.Int8N:
                    return obj.Int8N;
                case TestObject_FieldIndex.Int8N_Ranged:
                    return obj.Int8N_Ranged;
                case TestObject_FieldIndex.Int8:
                    return obj.Int8;
                case TestObject_FieldIndex.Int8_Ranged:
                    return obj.Int8_Ranged;
                case TestObject_FieldIndex.Unsafe:
                    return obj.Unsafe;
                case TestObject_FieldIndex.UnsafeLoqui:
                    return obj.UnsafeLoqui;
                case TestObject_FieldIndex.UnsafeNull:
                    return obj.UnsafeNull;
                case TestObject_FieldIndex.P2IntN:
                    return obj.P2IntN;
                case TestObject_FieldIndex.P2Int:
                    return obj.P2Int;
                case TestObject_FieldIndex.P3DoubleN:
                    return obj.P3DoubleN;
                case TestObject_FieldIndex.P3Double:
                    return obj.P3Double;
                case TestObject_FieldIndex.P3IntN:
                    return obj.P3IntN;
                case TestObject_FieldIndex.P3Int:
                    return obj.P3Int;
                case TestObject_FieldIndex.PercentN:
                    return obj.PercentN;
                case TestObject_FieldIndex.Percent:
                    return obj.Percent;
                case TestObject_FieldIndex.RangeInt8N:
                    return obj.RangeInt8N;
                case TestObject_FieldIndex.RangeInt8:
                    return obj.RangeInt8;
                case TestObject_FieldIndex.RangeInt16N:
                    return obj.RangeInt16N;
                case TestObject_FieldIndex.RangeInt16:
                    return obj.RangeInt16;
                case TestObject_FieldIndex.RangeInt32N:
                    return obj.RangeInt32N;
                case TestObject_FieldIndex.RangeInt32:
                    return obj.RangeInt32;
                case TestObject_FieldIndex.RangeInt64N:
                    return obj.RangeInt64N;
                case TestObject_FieldIndex.RangeInt64:
                    return obj.RangeInt64;
                case TestObject_FieldIndex.RangeUInt8N:
                    return obj.RangeUInt8N;
                case TestObject_FieldIndex.RangeUInt8:
                    return obj.RangeUInt8;
                case TestObject_FieldIndex.RangeUInt16N:
                    return obj.RangeUInt16N;
                case TestObject_FieldIndex.RangeUInt16:
                    return obj.RangeUInt16;
                case TestObject_FieldIndex.RangeUInt32N:
                    return obj.RangeUInt32N;
                case TestObject_FieldIndex.RangeUInt32:
                    return obj.RangeUInt32;
                case TestObject_FieldIndex.RangeUInt64N:
                    return obj.RangeUInt64N;
                case TestObject_FieldIndex.RangeUInt64:
                    return obj.RangeUInt64;
                case TestObject_FieldIndex.String:
                    return obj.String;
                case TestObject_FieldIndex.FilePath:
                    return obj.FilePath;
                case TestObject_FieldIndex.FilePathNull:
                    return obj.FilePathNull;
                case TestObject_FieldIndex.DirectoryPath:
                    return obj.DirectoryPath;
                case TestObject_FieldIndex.DirectoryPathNull:
                    return obj.DirectoryPathNull;
                case TestObject_FieldIndex.UDoubleN:
                    return obj.UDoubleN;
                case TestObject_FieldIndex.UDoubleN_Ranged:
                    return obj.UDoubleN_Ranged;
                case TestObject_FieldIndex.UDouble:
                    return obj.UDouble;
                case TestObject_FieldIndex.UDouble_Ranged:
                    return obj.UDouble_Ranged;
                case TestObject_FieldIndex.UInt16N:
                    return obj.UInt16N;
                case TestObject_FieldIndex.UInt16N_Ranged:
                    return obj.UInt16N_Ranged;
                case TestObject_FieldIndex.UInt16:
                    return obj.UInt16;
                case TestObject_FieldIndex.UInt16_Ranged:
                    return obj.UInt16_Ranged;
                case TestObject_FieldIndex.UInt32N:
                    return obj.UInt32N;
                case TestObject_FieldIndex.UInt32N_Ranged:
                    return obj.UInt32N_Ranged;
                case TestObject_FieldIndex.UInt32:
                    return obj.UInt32;
                case TestObject_FieldIndex.UInt32_Ranged:
                    return obj.UInt32_Ranged;
                case TestObject_FieldIndex.UInt64N:
                    return obj.UInt64N;
                case TestObject_FieldIndex.UInt64N_Ranged:
                    return obj.UInt64N_Ranged;
                case TestObject_FieldIndex.UInt64:
                    return obj.UInt64;
                case TestObject_FieldIndex.UInt64_Ranged:
                    return obj.UInt64_Ranged;
                case TestObject_FieldIndex.UInt8N:
                    return obj.UInt8N;
                case TestObject_FieldIndex.UInt8N_Ranged:
                    return obj.UInt8N_Ranged;
                case TestObject_FieldIndex.UInt8:
                    return obj.UInt8;
                case TestObject_FieldIndex.UInt8_Ranged:
                    return obj.UInt8_Ranged;
                case TestObject_FieldIndex.Enum:
                    return obj.Enum;
                case TestObject_FieldIndex.EnumNull:
                    return obj.EnumNull;
                case TestObject_FieldIndex.WildCard:
                    return obj.WildCard;
                case TestObject_FieldIndex.WildCardLoqui:
                    return obj.WildCardLoqui;
                case TestObject_FieldIndex.WildCardNull:
                    return obj.WildCardNull;
                case TestObject_FieldIndex.Ref:
                    return obj.Ref;
                case TestObject_FieldIndex.Ref_NotNull:
                    return obj.Ref_NotNull;
                case TestObject_FieldIndex.Ref_Singleton:
                    return obj.Ref_Singleton;
                case TestObject_FieldIndex.RefGetter:
                    return obj.RefGetter;
                case TestObject_FieldIndex.RefGetter_NotNull:
                    return obj.RefGetter_NotNull;
                case TestObject_FieldIndex.RefGetter_Singleton:
                    return obj.RefGetter_Singleton;
                case TestObject_FieldIndex.RefSetter:
                    return obj.RefSetter;
                case TestObject_FieldIndex.RefSetter_NotNull:
                    return obj.RefSetter_NotNull;
                case TestObject_FieldIndex.RefSetter_Singleton:
                    return obj.RefSetter_Singleton;
                case TestObject_FieldIndex.List:
                    return obj.List;
                case TestObject_FieldIndex.RefList:
                    return obj.RefList;
                case TestObject_FieldIndex.Dict:
                    return obj.Dict;
                case TestObject_FieldIndex.RefDict:
                    return obj.RefDict;
                case TestObject_FieldIndex.KeyRefDict:
                    return obj.KeyRefDict;
                case TestObject_FieldIndex.ValRefDict:
                    return obj.ValRefDict;
                case TestObject_FieldIndex.DictKeyedValue:
                    return obj.DictKeyedValue;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public static void Clear(
            ITestObject item,
            NotifyingUnsetParameters? cmds = null)
        {
            item.ByteArray = default(Byte[]);
            item.ByteArrayNull = default(Byte[]);
            item.ByteArrayNotNull = default(Byte[]);
            item.BoolN = default(Boolean?);
            item.Bool = default(Boolean);
            item.CharN = default(Char?);
            item.Char = default(Char);
            item.DateTimeNull = default(DateTime?);
            item.DateTime = default(DateTime);
            item.DoubleN = default(Double?);
            item.DoubleN_Ranged = default(Double?);
            item.Double = default(Double);
            item.Double_Ranged = default(Double);
            item.FloatN = default(Single?);
            item.FloatN_Ranged = default(Single?);
            item.Float = default(Single);
            item.Float_Ranged = default(Single);
            item.Int16N = default(Int16?);
            item.Int16N_Ranged = default(Int16?);
            item.Int16 = default(Int16);
            item.Int16_Ranged = default(Int16);
            item.Int32N = default(Int32?);
            item.Int32N_Ranged = default(Int32?);
            item.Int32 = default(Int32);
            item.Int32_Ranged = default(Int32);
            item.Int64N = default(Int64?);
            item.Int64N_Ranged = default(Int64?);
            item.Int64 = default(Int64);
            item.Int64_Ranged = default(Int64);
            item.Int8N = default(SByte?);
            item.Int8N_Ranged = default(SByte?);
            item.Int8 = default(SByte);
            item.Int8_Ranged = default(SByte);
            item.Unsafe = default(bool);
            item.UnsafeLoqui = default(ObjectToRef);
            item.UnsafeNull = default(ObjectToRef);
            item.P2IntN = default(P2Int?);
            item.P2Int = default(P2Int);
            item.P3DoubleN = default(P3Double?);
            item.P3Double = default(P3Double);
            item.P3IntN = default(P3Int?);
            item.P3Int = default(P3Int);
            item.PercentN = default(Percent?);
            item.Percent = default(Percent);
            item.RangeInt8N = default(RangeInt8?);
            item.RangeInt8 = default(RangeInt8);
            item.RangeInt16N = default(RangeInt16?);
            item.RangeInt16 = default(RangeInt16);
            item.RangeInt32N = default(RangeInt32?);
            item.RangeInt32 = default(RangeInt32);
            item.RangeInt64N = default(RangeInt64?);
            item.RangeInt64 = default(RangeInt64);
            item.RangeUInt8N = default(RangeUInt8?);
            item.RangeUInt8 = default(RangeUInt8);
            item.RangeUInt16N = default(RangeUInt16?);
            item.RangeUInt16 = default(RangeUInt16);
            item.RangeUInt32N = default(RangeUInt32?);
            item.RangeUInt32 = default(RangeUInt32);
            item.RangeUInt64N = default(RangeUInt64?);
            item.RangeUInt64 = default(RangeUInt64);
            item.String = default(String);
            item.FilePath = default(FilePath);
            item.FilePathNull = default(FilePath?);
            item.DirectoryPath = default(DirectoryPath);
            item.DirectoryPathNull = default(DirectoryPath?);
            item.UDoubleN = default(UDouble?);
            item.UDoubleN_Ranged = default(UDouble?);
            item.UDouble = default(UDouble);
            item.UDouble_Ranged = default(UDouble);
            item.UInt16N = default(UInt16?);
            item.UInt16N_Ranged = default(UInt16?);
            item.UInt16 = default(UInt16);
            item.UInt16_Ranged = default(UInt16);
            item.UInt32N = default(UInt32?);
            item.UInt32N_Ranged = default(UInt32?);
            item.UInt32 = default(UInt32);
            item.UInt32_Ranged = default(UInt32);
            item.UInt64N = default(UInt64?);
            item.UInt64N_Ranged = default(UInt64?);
            item.UInt64 = default(UInt64);
            item.UInt64_Ranged = default(UInt64);
            item.UInt8N = default(Byte?);
            item.UInt8N_Ranged = default(Byte?);
            item.UInt8 = default(Byte);
            item.UInt8_Ranged = default(Byte);
            item.Enum = default(TestEnum);
            item.EnumNull = default(TestEnum?);
            item.WildCard = default(Object);
            item.WildCardLoqui = default(Object);
            item.WildCardNull = default(Object);
            item.Ref = default(ObjectToRef);
            item.Ref_NotNull = default(ObjectToRef);
            item.RefGetter = default(IObjectToRefGetter);
            item.RefGetter_NotNull = default(IObjectToRefGetter);
            item.RefSetter = default(IObjectToRef);
            item.RefSetter_NotNull = default(IObjectToRef);
            item.List.Unset(cmds.ToUnsetParams());
            item.RefList.Unset(cmds.ToUnsetParams());
            item.Dict.Unset(cmds.ToUnsetParams());
            item.RefDict.Unset(cmds.ToUnsetParams());
            item.KeyRefDict.Unset(cmds.ToUnsetParams());
            item.ValRefDict.Unset(cmds.ToUnsetParams());
            item.DictKeyedValue.Unset(cmds.ToUnsetParams());
        }

        public static TestObject_Mask<bool> GetEqualsMask(
            this ITestObjectGetter item,
            ITestObjectGetter rhs)
        {
            var ret = new TestObject_Mask<bool>();
            FillEqualsMask(item, rhs, ret);
            return ret;
        }

        public static void FillEqualsMask(
            ITestObjectGetter item,
            ITestObjectGetter rhs,
            TestObject_Mask<bool> ret)
        {
            if (rhs == null) return;
            ret.ByteArray = item.ByteArray.EqualsFast(rhs.ByteArray);
            ret.ByteArrayNull = item.ByteArrayNull.EqualsFast(rhs.ByteArrayNull);
            ret.ByteArrayNotNull = item.ByteArrayNotNull.EqualsFast(rhs.ByteArrayNotNull);
            ret.ByteArraySingleton = item.ByteArraySingleton.EqualsFast(rhs.ByteArraySingleton);
            ret.BoolN = item.BoolN == rhs.BoolN;
            ret.Bool = item.Bool == rhs.Bool;
            ret.CharN = item.CharN == rhs.CharN;
            ret.Char = item.Char == rhs.Char;
            ret.DateTimeNull = item.DateTimeNull == rhs.DateTimeNull;
            ret.DateTime = item.DateTime == rhs.DateTime;
            ret.DoubleN = item.DoubleN == rhs.DoubleN;
            ret.DoubleN_Ranged = item.DoubleN_Ranged == rhs.DoubleN_Ranged;
            ret.Double = item.Double == rhs.Double;
            ret.Double_Ranged = item.Double_Ranged == rhs.Double_Ranged;
            ret.FloatN = item.FloatN == rhs.FloatN;
            ret.FloatN_Ranged = item.FloatN_Ranged == rhs.FloatN_Ranged;
            ret.Float = item.Float == rhs.Float;
            ret.Float_Ranged = item.Float_Ranged == rhs.Float_Ranged;
            ret.Int16N = item.Int16N == rhs.Int16N;
            ret.Int16N_Ranged = item.Int16N_Ranged == rhs.Int16N_Ranged;
            ret.Int16 = item.Int16 == rhs.Int16;
            ret.Int16_Ranged = item.Int16_Ranged == rhs.Int16_Ranged;
            ret.Int32N = item.Int32N == rhs.Int32N;
            ret.Int32N_Ranged = item.Int32N_Ranged == rhs.Int32N_Ranged;
            ret.Int32 = item.Int32 == rhs.Int32;
            ret.Int32_Ranged = item.Int32_Ranged == rhs.Int32_Ranged;
            ret.Int64N = item.Int64N == rhs.Int64N;
            ret.Int64N_Ranged = item.Int64N_Ranged == rhs.Int64N_Ranged;
            ret.Int64 = item.Int64 == rhs.Int64;
            ret.Int64_Ranged = item.Int64_Ranged == rhs.Int64_Ranged;
            ret.Int8N = item.Int8N == rhs.Int8N;
            ret.Int8N_Ranged = item.Int8N_Ranged == rhs.Int8N_Ranged;
            ret.Int8 = item.Int8 == rhs.Int8;
            ret.Int8_Ranged = item.Int8_Ranged == rhs.Int8_Ranged;
            ret.Unsafe = object.Equals(item.Unsafe, rhs.Unsafe);
            ret.UnsafeLoqui = object.Equals(item.UnsafeLoqui, rhs.UnsafeLoqui);
            ret.UnsafeNull = object.Equals(item.UnsafeNull, rhs.UnsafeNull);
            ret.P2IntN = item.P2IntN == rhs.P2IntN;
            ret.P2Int = item.P2Int == rhs.P2Int;
            ret.P3DoubleN = item.P3DoubleN == rhs.P3DoubleN;
            ret.P3Double = item.P3Double == rhs.P3Double;
            ret.P3IntN = item.P3IntN == rhs.P3IntN;
            ret.P3Int = item.P3Int == rhs.P3Int;
            ret.PercentN = item.PercentN == rhs.PercentN;
            ret.Percent = item.Percent == rhs.Percent;
            ret.RangeInt8N = item.RangeInt8N == rhs.RangeInt8N;
            ret.RangeInt8 = item.RangeInt8 == rhs.RangeInt8;
            ret.RangeInt16N = item.RangeInt16N == rhs.RangeInt16N;
            ret.RangeInt16 = item.RangeInt16 == rhs.RangeInt16;
            ret.RangeInt32N = item.RangeInt32N == rhs.RangeInt32N;
            ret.RangeInt32 = item.RangeInt32 == rhs.RangeInt32;
            ret.RangeInt64N = item.RangeInt64N == rhs.RangeInt64N;
            ret.RangeInt64 = item.RangeInt64 == rhs.RangeInt64;
            ret.RangeUInt8N = item.RangeUInt8N == rhs.RangeUInt8N;
            ret.RangeUInt8 = item.RangeUInt8 == rhs.RangeUInt8;
            ret.RangeUInt16N = item.RangeUInt16N == rhs.RangeUInt16N;
            ret.RangeUInt16 = item.RangeUInt16 == rhs.RangeUInt16;
            ret.RangeUInt32N = item.RangeUInt32N == rhs.RangeUInt32N;
            ret.RangeUInt32 = item.RangeUInt32 == rhs.RangeUInt32;
            ret.RangeUInt64N = item.RangeUInt64N == rhs.RangeUInt64N;
            ret.RangeUInt64 = item.RangeUInt64 == rhs.RangeUInt64;
            ret.String = object.Equals(item.String, rhs.String);
            ret.FilePath = object.Equals(item.FilePath, rhs.FilePath);
            ret.FilePathNull = object.Equals(item.FilePathNull, rhs.FilePathNull);
            ret.DirectoryPath = object.Equals(item.DirectoryPath, rhs.DirectoryPath);
            ret.DirectoryPathNull = object.Equals(item.DirectoryPathNull, rhs.DirectoryPathNull);
            ret.UDoubleN = item.UDoubleN == rhs.UDoubleN;
            ret.UDoubleN_Ranged = item.UDoubleN_Ranged == rhs.UDoubleN_Ranged;
            ret.UDouble = item.UDouble == rhs.UDouble;
            ret.UDouble_Ranged = item.UDouble_Ranged == rhs.UDouble_Ranged;
            ret.UInt16N = item.UInt16N == rhs.UInt16N;
            ret.UInt16N_Ranged = item.UInt16N_Ranged == rhs.UInt16N_Ranged;
            ret.UInt16 = item.UInt16 == rhs.UInt16;
            ret.UInt16_Ranged = item.UInt16_Ranged == rhs.UInt16_Ranged;
            ret.UInt32N = item.UInt32N == rhs.UInt32N;
            ret.UInt32N_Ranged = item.UInt32N_Ranged == rhs.UInt32N_Ranged;
            ret.UInt32 = item.UInt32 == rhs.UInt32;
            ret.UInt32_Ranged = item.UInt32_Ranged == rhs.UInt32_Ranged;
            ret.UInt64N = item.UInt64N == rhs.UInt64N;
            ret.UInt64N_Ranged = item.UInt64N_Ranged == rhs.UInt64N_Ranged;
            ret.UInt64 = item.UInt64 == rhs.UInt64;
            ret.UInt64_Ranged = item.UInt64_Ranged == rhs.UInt64_Ranged;
            ret.UInt8N = item.UInt8N == rhs.UInt8N;
            ret.UInt8N_Ranged = item.UInt8N_Ranged == rhs.UInt8N_Ranged;
            ret.UInt8 = item.UInt8 == rhs.UInt8;
            ret.UInt8_Ranged = item.UInt8_Ranged == rhs.UInt8_Ranged;
            ret.Enum = item.Enum == rhs.Enum;
            ret.EnumNull = item.EnumNull == rhs.EnumNull;
            ret.WildCard = object.Equals(item.WildCard, rhs.WildCard);
            ret.WildCardLoqui = object.Equals(item.WildCardLoqui, rhs.WildCardLoqui);
            ret.WildCardNull = object.Equals(item.WildCardNull, rhs.WildCardNull);
            ret.Ref = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.Ref.Specific = ObjectToRefCommon.GetEqualsMask(item.Ref, rhs.Ref);
            ret.Ref.Overall = ret.Ref.Specific.AllEqual((b) => b);
            ret.Ref_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.Ref_NotNull.Specific = ObjectToRefCommon.GetEqualsMask(item.Ref_NotNull, rhs.Ref_NotNull);
            ret.Ref_NotNull.Overall = ret.Ref_NotNull.Specific.AllEqual((b) => b);
            ret.Ref_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.Ref_Singleton.Specific = ObjectToRefCommon.GetEqualsMask(item.Ref_Singleton, rhs.Ref_Singleton);
            ret.Ref_Singleton.Overall = ret.Ref_Singleton.Specific.AllEqual((b) => b);
            ret.RefGetter = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefGetter.Specific = ObjectToRefCommon.GetEqualsMask(item.RefGetter, rhs.RefGetter);
            ret.RefGetter.Overall = ret.RefGetter.Specific.AllEqual((b) => b);
            ret.RefGetter_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefGetter_NotNull.Specific = ObjectToRefCommon.GetEqualsMask(item.RefGetter_NotNull, rhs.RefGetter_NotNull);
            ret.RefGetter_NotNull.Overall = ret.RefGetter_NotNull.Specific.AllEqual((b) => b);
            ret.RefGetter_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefGetter_Singleton.Specific = ObjectToRefCommon.GetEqualsMask(item.RefGetter_Singleton, rhs.RefGetter_Singleton);
            ret.RefGetter_Singleton.Overall = ret.RefGetter_Singleton.Specific.AllEqual((b) => b);
            ret.RefSetter = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefSetter.Specific = ObjectToRefCommon.GetEqualsMask(item.RefSetter, rhs.RefSetter);
            ret.RefSetter.Overall = ret.RefSetter.Specific.AllEqual((b) => b);
            ret.RefSetter_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefSetter_NotNull.Specific = ObjectToRefCommon.GetEqualsMask(item.RefSetter_NotNull, rhs.RefSetter_NotNull);
            ret.RefSetter_NotNull.Overall = ret.RefSetter_NotNull.Specific.AllEqual((b) => b);
            ret.RefSetter_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>();
            ret.RefSetter_Singleton.Specific = ObjectToRefCommon.GetEqualsMask(item.RefSetter_Singleton, rhs.RefSetter_Singleton);
            ret.RefSetter_Singleton.Overall = ret.RefSetter_Singleton.Specific.AllEqual((b) => b);
            ret.List = new MaskItem<bool, IEnumerable<bool>>();
            ret.List.Specific = item.List.SelectAgainst<Boolean, bool>(rhs.List, ((l, r) => object.Equals(l, r)), out ret.List.Overall);
            ret.List.Overall = ret.List.Overall && ret.List.Specific.All((b) => b);
            ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
            ret.RefList.Specific = item.RefList.SelectAgainst<ObjectToRef, MaskItem<bool, ObjectToRef_Mask<bool>>>(rhs.RefList, ((l, r) =>
            {
                MaskItem<bool, ObjectToRef_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                itemRet.Specific = ObjectToRefCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.RefList.Overall);
            ret.RefList.Overall = ret.RefList.Overall && ret.RefList.Specific.All((b) => b.Overall);
            ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>();
            ret.Dict.Specific = item.Dict.SelectAgainst<KeyValuePair<String, Boolean>, KeyValuePair<bool, bool>>(rhs.Dict, ((l, r) => new KeyValuePair<bool, bool>(object.Equals(l.Key, r.Key), object.Equals(l.Value, r.Value))), out ret.Dict.Overall);
            ret.Dict.Overall = ret.Dict.Overall && ret.Dict.Specific.All((b) => b.Key && b.Value);
            ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
            ret.RefDict.Specific = item.RefDict.SelectAgainst<KeyValuePair<ObjectToRef, ObjectToRef>, KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>(rhs.RefDict, ((l, r) =>
            {
                MaskItem<bool, ObjectToRef_Mask<bool>> keyItemRet;
                MaskItem<bool, ObjectToRef_Mask<bool>> valItemRet;
                keyItemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                keyItemRet.Specific = ObjectToRefCommon.GetEqualsMask(l.Key, r.Key);
                keyItemRet.Overall = keyItemRet.Specific.AllEqual((b) => b);
                valItemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                valItemRet.Specific = ObjectToRefCommon.GetEqualsMask(l.Value, r.Value);
                valItemRet.Overall = valItemRet.Specific.AllEqual((b) => b);
                return new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>(keyItemRet, valItemRet);
            }
            ), out ret.RefDict.Overall);
            ret.RefDict.Overall = ret.RefDict.Overall && ret.RefDict.Specific.All((b) => b.Key.Overall && b.Value.Overall );
            ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>();
            ret.KeyRefDict.Specific = item.KeyRefDict.SelectAgainst<KeyValuePair<ObjectToRef, Boolean>, KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>(rhs.KeyRefDict, ((l, r) =>
            {
                MaskItem<bool, ObjectToRef_Mask<bool>> keyItemRet;
                bool valItemRet = object.Equals(l.Value, r.Value);
                keyItemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                keyItemRet.Specific = ObjectToRefCommon.GetEqualsMask(l.Key, r.Key);
                keyItemRet.Overall = keyItemRet.Specific.AllEqual((b) => b);
                return new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>(keyItemRet, valItemRet);
            }
            ), out ret.KeyRefDict.Overall);
            ret.KeyRefDict.Overall = ret.KeyRefDict.Overall && ret.KeyRefDict.Specific.All((b) => b.Key.Overall && b.Value);
            ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>();
            ret.ValRefDict.Specific = item.ValRefDict.SelectAgainst<KeyValuePair<String, ObjectToRef>, KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>(rhs.ValRefDict, ((l, r) =>
            {
                bool keyItemRet = object.Equals(l.Key, r.Key);
                MaskItem<bool, ObjectToRef_Mask<bool>> valItemRet;
                valItemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                valItemRet.Specific = ObjectToRefCommon.GetEqualsMask(l.Value, r.Value);
                valItemRet.Overall = valItemRet.Specific.AllEqual((b) => b);
                return new KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>(keyItemRet, valItemRet);
            }
            ), out ret.ValRefDict.Overall);
            ret.ValRefDict.Overall = ret.ValRefDict.Overall && ret.ValRefDict.Specific.All((b) => b.Key && b.Value.Overall);
            ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>();
            ret.DictKeyedValue.Specific = item.DictKeyedValue.Values.SelectAgainst<ObjectToRef, MaskItem<bool, ObjectToRef_Mask<bool>>>(rhs.DictKeyedValue.Values, ((l, r) =>
            {
                MaskItem<bool, ObjectToRef_Mask<bool>> itemRet;
                itemRet = new MaskItem<bool, ObjectToRef_Mask<bool>>();
                itemRet.Specific = ObjectToRefCommon.GetEqualsMask(l, r);
                itemRet.Overall = itemRet.Specific.AllEqual((b) => b);
                return itemRet;
            }
            ), out ret.DictKeyedValue.Overall);
            ret.DictKeyedValue.Overall = ret.DictKeyedValue.Overall && ret.DictKeyedValue.Specific.All((b) => b.Overall);
        }

        public static string ToString(
            this ITestObjectGetter item,
            string name = null,
            TestObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            item.ToString(fg, name, printMask);
            return fg.ToString();
        }

        public static void ToString(
            this ITestObjectGetter item,
            FileGeneration fg,
            string name = null,
            TestObject_Mask<bool> printMask = null)
        {
            if (name == null)
            {
                fg.AppendLine($"{nameof(TestObject)} =>");
            }
            else
            {
                fg.AppendLine($"{name} ({nameof(TestObject)}) =>");
            }
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ByteArray ?? true)
                {
                    fg.AppendLine($"ByteArray => {item.ByteArray}");
                }
                if (printMask?.ByteArrayNull ?? true)
                {
                    fg.AppendLine($"ByteArrayNull => {item.ByteArrayNull}");
                }
                if (printMask?.ByteArrayNotNull ?? true)
                {
                    fg.AppendLine($"ByteArrayNotNull => {item.ByteArrayNotNull}");
                }
                if (printMask?.ByteArraySingleton ?? true)
                {
                    fg.AppendLine($"ByteArraySingleton => {item.ByteArraySingleton}");
                }
                if (printMask?.BoolN ?? true)
                {
                    fg.AppendLine($"BoolN => {item.BoolN}");
                }
                if (printMask?.Bool ?? true)
                {
                    fg.AppendLine($"Bool => {item.Bool}");
                }
                if (printMask?.CharN ?? true)
                {
                    fg.AppendLine($"CharN => {item.CharN}");
                }
                if (printMask?.Char ?? true)
                {
                    fg.AppendLine($"Char => {item.Char}");
                }
                if (printMask?.DateTimeNull ?? true)
                {
                    fg.AppendLine($"DateTimeNull => {item.DateTimeNull}");
                }
                if (printMask?.DateTime ?? true)
                {
                    fg.AppendLine($"DateTime => {item.DateTime}");
                }
                if (printMask?.DoubleN ?? true)
                {
                    fg.AppendLine($"DoubleN => {item.DoubleN}");
                }
                if (printMask?.DoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"DoubleN_Ranged => {item.DoubleN_Ranged}");
                }
                if (printMask?.Double ?? true)
                {
                    fg.AppendLine($"Double => {item.Double}");
                }
                if (printMask?.Double_Ranged ?? true)
                {
                    fg.AppendLine($"Double_Ranged => {item.Double_Ranged}");
                }
                if (printMask?.FloatN ?? true)
                {
                    fg.AppendLine($"FloatN => {item.FloatN}");
                }
                if (printMask?.FloatN_Ranged ?? true)
                {
                    fg.AppendLine($"FloatN_Ranged => {item.FloatN_Ranged}");
                }
                if (printMask?.Float ?? true)
                {
                    fg.AppendLine($"Float => {item.Float}");
                }
                if (printMask?.Float_Ranged ?? true)
                {
                    fg.AppendLine($"Float_Ranged => {item.Float_Ranged}");
                }
                if (printMask?.Int16N ?? true)
                {
                    fg.AppendLine($"Int16N => {item.Int16N}");
                }
                if (printMask?.Int16N_Ranged ?? true)
                {
                    fg.AppendLine($"Int16N_Ranged => {item.Int16N_Ranged}");
                }
                if (printMask?.Int16 ?? true)
                {
                    fg.AppendLine($"Int16 => {item.Int16}");
                }
                if (printMask?.Int16_Ranged ?? true)
                {
                    fg.AppendLine($"Int16_Ranged => {item.Int16_Ranged}");
                }
                if (printMask?.Int32N ?? true)
                {
                    fg.AppendLine($"Int32N => {item.Int32N}");
                }
                if (printMask?.Int32N_Ranged ?? true)
                {
                    fg.AppendLine($"Int32N_Ranged => {item.Int32N_Ranged}");
                }
                if (printMask?.Int32 ?? true)
                {
                    fg.AppendLine($"Int32 => {item.Int32}");
                }
                if (printMask?.Int32_Ranged ?? true)
                {
                    fg.AppendLine($"Int32_Ranged => {item.Int32_Ranged}");
                }
                if (printMask?.Int64N ?? true)
                {
                    fg.AppendLine($"Int64N => {item.Int64N}");
                }
                if (printMask?.Int64N_Ranged ?? true)
                {
                    fg.AppendLine($"Int64N_Ranged => {item.Int64N_Ranged}");
                }
                if (printMask?.Int64 ?? true)
                {
                    fg.AppendLine($"Int64 => {item.Int64}");
                }
                if (printMask?.Int64_Ranged ?? true)
                {
                    fg.AppendLine($"Int64_Ranged => {item.Int64_Ranged}");
                }
                if (printMask?.Int8N ?? true)
                {
                    fg.AppendLine($"Int8N => {item.Int8N}");
                }
                if (printMask?.Int8N_Ranged ?? true)
                {
                    fg.AppendLine($"Int8N_Ranged => {item.Int8N_Ranged}");
                }
                if (printMask?.Int8 ?? true)
                {
                    fg.AppendLine($"Int8 => {item.Int8}");
                }
                if (printMask?.Int8_Ranged ?? true)
                {
                    fg.AppendLine($"Int8_Ranged => {item.Int8_Ranged}");
                }
                if (printMask?.Unsafe ?? true)
                {
                    fg.AppendLine($"Unsafe => {item.Unsafe}");
                }
                if (printMask?.UnsafeLoqui ?? true)
                {
                    fg.AppendLine($"UnsafeLoqui => {item.UnsafeLoqui}");
                }
                if (printMask?.UnsafeNull ?? true)
                {
                    fg.AppendLine($"UnsafeNull => {item.UnsafeNull}");
                }
                if (printMask?.P2IntN ?? true)
                {
                    fg.AppendLine($"P2IntN => {item.P2IntN}");
                }
                if (printMask?.P2Int ?? true)
                {
                    fg.AppendLine($"P2Int => {item.P2Int}");
                }
                if (printMask?.P3DoubleN ?? true)
                {
                    fg.AppendLine($"P3DoubleN => {item.P3DoubleN}");
                }
                if (printMask?.P3Double ?? true)
                {
                    fg.AppendLine($"P3Double => {item.P3Double}");
                }
                if (printMask?.P3IntN ?? true)
                {
                    fg.AppendLine($"P3IntN => {item.P3IntN}");
                }
                if (printMask?.P3Int ?? true)
                {
                    fg.AppendLine($"P3Int => {item.P3Int}");
                }
                if (printMask?.PercentN ?? true)
                {
                    fg.AppendLine($"PercentN => {item.PercentN}");
                }
                if (printMask?.Percent ?? true)
                {
                    fg.AppendLine($"Percent => {item.Percent}");
                }
                if (printMask?.RangeInt8N ?? true)
                {
                    fg.AppendLine($"RangeInt8N => {item.RangeInt8N}");
                }
                if (printMask?.RangeInt8 ?? true)
                {
                    fg.AppendLine($"RangeInt8 => {item.RangeInt8}");
                }
                if (printMask?.RangeInt16N ?? true)
                {
                    fg.AppendLine($"RangeInt16N => {item.RangeInt16N}");
                }
                if (printMask?.RangeInt16 ?? true)
                {
                    fg.AppendLine($"RangeInt16 => {item.RangeInt16}");
                }
                if (printMask?.RangeInt32N ?? true)
                {
                    fg.AppendLine($"RangeInt32N => {item.RangeInt32N}");
                }
                if (printMask?.RangeInt32 ?? true)
                {
                    fg.AppendLine($"RangeInt32 => {item.RangeInt32}");
                }
                if (printMask?.RangeInt64N ?? true)
                {
                    fg.AppendLine($"RangeInt64N => {item.RangeInt64N}");
                }
                if (printMask?.RangeInt64 ?? true)
                {
                    fg.AppendLine($"RangeInt64 => {item.RangeInt64}");
                }
                if (printMask?.RangeUInt8N ?? true)
                {
                    fg.AppendLine($"RangeUInt8N => {item.RangeUInt8N}");
                }
                if (printMask?.RangeUInt8 ?? true)
                {
                    fg.AppendLine($"RangeUInt8 => {item.RangeUInt8}");
                }
                if (printMask?.RangeUInt16N ?? true)
                {
                    fg.AppendLine($"RangeUInt16N => {item.RangeUInt16N}");
                }
                if (printMask?.RangeUInt16 ?? true)
                {
                    fg.AppendLine($"RangeUInt16 => {item.RangeUInt16}");
                }
                if (printMask?.RangeUInt32N ?? true)
                {
                    fg.AppendLine($"RangeUInt32N => {item.RangeUInt32N}");
                }
                if (printMask?.RangeUInt32 ?? true)
                {
                    fg.AppendLine($"RangeUInt32 => {item.RangeUInt32}");
                }
                if (printMask?.RangeUInt64N ?? true)
                {
                    fg.AppendLine($"RangeUInt64N => {item.RangeUInt64N}");
                }
                if (printMask?.RangeUInt64 ?? true)
                {
                    fg.AppendLine($"RangeUInt64 => {item.RangeUInt64}");
                }
                if (printMask?.String ?? true)
                {
                    fg.AppendLine($"String => {item.String}");
                }
                if (printMask?.FilePath ?? true)
                {
                    fg.AppendLine($"FilePath => {item.FilePath}");
                }
                if (printMask?.FilePathNull ?? true)
                {
                    fg.AppendLine($"FilePathNull => {item.FilePathNull}");
                }
                if (printMask?.DirectoryPath ?? true)
                {
                    fg.AppendLine($"DirectoryPath => {item.DirectoryPath}");
                }
                if (printMask?.DirectoryPathNull ?? true)
                {
                    fg.AppendLine($"DirectoryPathNull => {item.DirectoryPathNull}");
                }
                if (printMask?.UDoubleN ?? true)
                {
                    fg.AppendLine($"UDoubleN => {item.UDoubleN}");
                }
                if (printMask?.UDoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"UDoubleN_Ranged => {item.UDoubleN_Ranged}");
                }
                if (printMask?.UDouble ?? true)
                {
                    fg.AppendLine($"UDouble => {item.UDouble}");
                }
                if (printMask?.UDouble_Ranged ?? true)
                {
                    fg.AppendLine($"UDouble_Ranged => {item.UDouble_Ranged}");
                }
                if (printMask?.UInt16N ?? true)
                {
                    fg.AppendLine($"UInt16N => {item.UInt16N}");
                }
                if (printMask?.UInt16N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16N_Ranged => {item.UInt16N_Ranged}");
                }
                if (printMask?.UInt16 ?? true)
                {
                    fg.AppendLine($"UInt16 => {item.UInt16}");
                }
                if (printMask?.UInt16_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16_Ranged => {item.UInt16_Ranged}");
                }
                if (printMask?.UInt32N ?? true)
                {
                    fg.AppendLine($"UInt32N => {item.UInt32N}");
                }
                if (printMask?.UInt32N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32N_Ranged => {item.UInt32N_Ranged}");
                }
                if (printMask?.UInt32 ?? true)
                {
                    fg.AppendLine($"UInt32 => {item.UInt32}");
                }
                if (printMask?.UInt32_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32_Ranged => {item.UInt32_Ranged}");
                }
                if (printMask?.UInt64N ?? true)
                {
                    fg.AppendLine($"UInt64N => {item.UInt64N}");
                }
                if (printMask?.UInt64N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64N_Ranged => {item.UInt64N_Ranged}");
                }
                if (printMask?.UInt64 ?? true)
                {
                    fg.AppendLine($"UInt64 => {item.UInt64}");
                }
                if (printMask?.UInt64_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64_Ranged => {item.UInt64_Ranged}");
                }
                if (printMask?.UInt8N ?? true)
                {
                    fg.AppendLine($"UInt8N => {item.UInt8N}");
                }
                if (printMask?.UInt8N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8N_Ranged => {item.UInt8N_Ranged}");
                }
                if (printMask?.UInt8 ?? true)
                {
                    fg.AppendLine($"UInt8 => {item.UInt8}");
                }
                if (printMask?.UInt8_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8_Ranged => {item.UInt8_Ranged}");
                }
                if (printMask?.Enum ?? true)
                {
                    fg.AppendLine($"Enum => {item.Enum}");
                }
                if (printMask?.EnumNull ?? true)
                {
                    fg.AppendLine($"EnumNull => {item.EnumNull}");
                }
                if (printMask?.WildCard ?? true)
                {
                    fg.AppendLine($"WildCard => {item.WildCard}");
                }
                if (printMask?.WildCardLoqui ?? true)
                {
                    fg.AppendLine($"WildCardLoqui => {item.WildCardLoqui}");
                }
                if (printMask?.WildCardNull ?? true)
                {
                    fg.AppendLine($"WildCardNull => {item.WildCardNull}");
                }
                if (printMask?.Ref?.Overall ?? true)
                {
                    item.Ref?.ToString(fg, "Ref");
                }
                if (printMask?.Ref_NotNull?.Overall ?? true)
                {
                    item.Ref_NotNull?.ToString(fg, "Ref_NotNull");
                }
                if (printMask?.Ref_Singleton?.Overall ?? true)
                {
                    item.Ref_Singleton?.ToString(fg, "Ref_Singleton");
                }
                if (printMask?.RefGetter?.Overall ?? true)
                {
                    item.RefGetter?.ToString(fg, "RefGetter");
                }
                if (printMask?.RefGetter_NotNull?.Overall ?? true)
                {
                    item.RefGetter_NotNull?.ToString(fg, "RefGetter_NotNull");
                }
                if (printMask?.RefGetter_Singleton?.Overall ?? true)
                {
                    item.RefGetter_Singleton?.ToString(fg, "RefGetter_Singleton");
                }
                if (printMask?.RefSetter?.Overall ?? true)
                {
                    item.RefSetter?.ToString(fg, "RefSetter");
                }
                if (printMask?.RefSetter_NotNull?.Overall ?? true)
                {
                    item.RefSetter_NotNull?.ToString(fg, "RefSetter_NotNull");
                }
                if (printMask?.RefSetter_Singleton?.Overall ?? true)
                {
                    item.RefSetter_Singleton?.ToString(fg, "RefSetter_Singleton");
                }
                if (printMask?.List?.Overall ?? true)
                {
                    fg.AppendLine("List =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.List)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Item => {subItem}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefList?.Overall ?? true)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.RefList)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Dict?.Overall ?? true)
                {
                    fg.AppendLine("Dict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.Dict)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Key => {subItem.Key}");
                                fg.AppendLine($"Value => {subItem.Value}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefDict?.Overall ?? true)
                {
                    fg.AppendLine("RefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.RefDict)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.Key?.ToString(fg, "Key");
                                subItem.Value?.ToString(fg, "Value");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.KeyRefDict?.Overall ?? true)
                {
                    fg.AppendLine("KeyRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.KeyRefDict)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem.Key?.ToString(fg, "Key");
                                fg.AppendLine($"Value => {subItem.Value}");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.ValRefDict?.Overall ?? true)
                {
                    fg.AppendLine("ValRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.ValRefDict)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($"Key => {subItem.Key}");
                                subItem.Value?.ToString(fg, "Value");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DictKeyedValue?.Overall ?? true)
                {
                    fg.AppendLine("DictKeyedValue =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        foreach (var subItem in item.DictKeyedValue.Values)
                        {
                            fg.AppendLine("[");
                            using (new DepthWrapper(fg))
                            {
                                subItem?.ToString(fg, "Item");
                            }
                            fg.AppendLine("]");
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }

        public static bool HasBeenSet(
            this ITestObjectGetter item,
            TestObject_Mask<bool?> checkMask)
        {
            return true;
        }

        public static TestObject_Mask<bool> GetHasBeenSetMask(ITestObjectGetter item)
        {
            var ret = new TestObject_Mask<bool>();
            ret.ByteArray = true;
            ret.ByteArrayNull = true;
            ret.ByteArrayNotNull = true;
            ret.ByteArraySingleton = true;
            ret.BoolN = true;
            ret.Bool = true;
            ret.CharN = true;
            ret.Char = true;
            ret.DateTimeNull = true;
            ret.DateTime = true;
            ret.DoubleN = true;
            ret.DoubleN_Ranged = true;
            ret.Double = true;
            ret.Double_Ranged = true;
            ret.FloatN = true;
            ret.FloatN_Ranged = true;
            ret.Float = true;
            ret.Float_Ranged = true;
            ret.Int16N = true;
            ret.Int16N_Ranged = true;
            ret.Int16 = true;
            ret.Int16_Ranged = true;
            ret.Int32N = true;
            ret.Int32N_Ranged = true;
            ret.Int32 = true;
            ret.Int32_Ranged = true;
            ret.Int64N = true;
            ret.Int64N_Ranged = true;
            ret.Int64 = true;
            ret.Int64_Ranged = true;
            ret.Int8N = true;
            ret.Int8N_Ranged = true;
            ret.Int8 = true;
            ret.Int8_Ranged = true;
            ret.Unsafe = true;
            ret.UnsafeLoqui = true;
            ret.UnsafeNull = true;
            ret.P2IntN = true;
            ret.P2Int = true;
            ret.P3DoubleN = true;
            ret.P3Double = true;
            ret.P3IntN = true;
            ret.P3Int = true;
            ret.PercentN = true;
            ret.Percent = true;
            ret.RangeInt8N = true;
            ret.RangeInt8 = true;
            ret.RangeInt16N = true;
            ret.RangeInt16 = true;
            ret.RangeInt32N = true;
            ret.RangeInt32 = true;
            ret.RangeInt64N = true;
            ret.RangeInt64 = true;
            ret.RangeUInt8N = true;
            ret.RangeUInt8 = true;
            ret.RangeUInt16N = true;
            ret.RangeUInt16 = true;
            ret.RangeUInt32N = true;
            ret.RangeUInt32 = true;
            ret.RangeUInt64N = true;
            ret.RangeUInt64 = true;
            ret.String = true;
            ret.FilePath = true;
            ret.FilePathNull = true;
            ret.DirectoryPath = true;
            ret.DirectoryPathNull = true;
            ret.UDoubleN = true;
            ret.UDoubleN_Ranged = true;
            ret.UDouble = true;
            ret.UDouble_Ranged = true;
            ret.UInt16N = true;
            ret.UInt16N_Ranged = true;
            ret.UInt16 = true;
            ret.UInt16_Ranged = true;
            ret.UInt32N = true;
            ret.UInt32N_Ranged = true;
            ret.UInt32 = true;
            ret.UInt32_Ranged = true;
            ret.UInt64N = true;
            ret.UInt64N_Ranged = true;
            ret.UInt64 = true;
            ret.UInt64_Ranged = true;
            ret.UInt8N = true;
            ret.UInt8N_Ranged = true;
            ret.UInt8 = true;
            ret.UInt8_Ranged = true;
            ret.Enum = true;
            ret.EnumNull = true;
            ret.WildCard = true;
            ret.WildCardLoqui = true;
            ret.WildCardNull = true;
            ret.Ref = new MaskItem<bool, ObjectToRef_Mask<bool>>(true, ObjectToRefCommon.GetHasBeenSetMask(item.Ref));
            ret.Ref_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>(true, ObjectToRefCommon.GetHasBeenSetMask(item.Ref_NotNull));
            ret.Ref_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>(true, ObjectToRefCommon.GetHasBeenSetMask(item.Ref_Singleton));
            ret.RefGetter = new MaskItem<bool, ObjectToRef_Mask<bool>>(true, ObjectToRefCommon.GetHasBeenSetMask(item.RefGetter));
            ret.RefGetter_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>(true, ObjectToRefCommon.GetHasBeenSetMask(item.RefGetter_NotNull));
            ret.RefGetter_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>(true, ObjectToRefCommon.GetHasBeenSetMask(item.RefGetter_Singleton));
            ret.RefSetter = new MaskItem<bool, ObjectToRef_Mask<bool>>(true, ObjectToRefCommon.GetHasBeenSetMask(item.RefSetter));
            ret.RefSetter_NotNull = new MaskItem<bool, ObjectToRef_Mask<bool>>(true, ObjectToRefCommon.GetHasBeenSetMask(item.RefSetter_NotNull));
            ret.RefSetter_Singleton = new MaskItem<bool, ObjectToRef_Mask<bool>>(true, ObjectToRefCommon.GetHasBeenSetMask(item.RefSetter_Singleton));
            ret.List = new MaskItem<bool, IEnumerable<bool>>(item.List.HasBeenSet, null);
            ret.RefList = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>(item.RefList.HasBeenSet, item.RefList.Select((i) => new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.GetHasBeenSetMask())));
            ret.Dict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, bool>>>(item.Dict.HasBeenSet, null);
            ret.RefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>>>(
                item.RefDict.HasBeenSet, item.RefDict.Select((i) => new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, MaskItem<bool, ObjectToRef_Mask<bool>>>(
                    new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.Key.GetHasBeenSetMask()),
                    new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.Value.GetHasBeenSetMask()))));
            ret.KeyRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>>>(
                item.KeyRefDict.HasBeenSet, item.KeyRefDict.Select((i) => new KeyValuePair<MaskItem<bool, ObjectToRef_Mask<bool>>, bool>(
                    new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.Key.GetHasBeenSetMask()),
                    true)));
            ret.ValRefDict = new MaskItem<bool, IEnumerable<KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>>>(
                item.ValRefDict.HasBeenSet, item.ValRefDict.Select((i) => new KeyValuePair<bool, MaskItem<bool, ObjectToRef_Mask<bool>>>(
                    true,
                    new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.Value.GetHasBeenSetMask()))));
            ret.DictKeyedValue = new MaskItem<bool, IEnumerable<MaskItem<bool, ObjectToRef_Mask<bool>>>>(item.DictKeyedValue.HasBeenSet, item.DictKeyedValue.Values.Select((i) => new MaskItem<bool, ObjectToRef_Mask<bool>>(true, i.GetHasBeenSetMask())));
            return ret;
        }

        #region XML Translation
        #region XML Write
        public static void Write_XML(
            XmlWriter writer,
            ITestObjectGetter item,
            bool doMasks,
            out TestObject_ErrorMask errorMask,
            string name = null)
        {
            TestObject_ErrorMask errMaskRet = null;
            Write_XML_Internal(
                writer: writer,
                name: name,
                item: item,
                errorMask: doMasks ? () => errMaskRet ?? (errMaskRet = new TestObject_ErrorMask()) : default(Func<TestObject_ErrorMask>));
            errorMask = errMaskRet;
        }

        private static void Write_XML_Internal(
            XmlWriter writer,
            ITestObjectGetter item,
            Func<TestObject_ErrorMask> errorMask,
            string name = null)
        {
            try
            {
                using (new ElementWrapper(writer, name ?? "Loqui.Tests.TestObject"))
                {
                    if (name != null)
                    {
                        writer.WriteAttributeString("type", "Loqui.Tests.TestObject");
                    }
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ByteArray),
                            item.ByteArray,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ByteArray,
                            subMask);
                    }
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ByteArrayNull),
                            item.ByteArrayNull,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ByteArrayNull,
                            subMask);
                    }
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ByteArrayNotNull),
                            item.ByteArrayNotNull,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ByteArrayNotNull,
                            subMask);
                    }
                    {
                        Exception subMask;
                        ByteArrayXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.ByteArraySingleton),
                            item.ByteArraySingleton,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ByteArraySingleton,
                            subMask);
                    }
                    {
                        Exception subMask;
                        BooleanXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.BoolN),
                            item.BoolN,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.BoolN,
                            subMask);
                    }
                    {
                        Exception subMask;
                        BooleanXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Bool),
                            item.Bool,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Bool,
                            subMask);
                    }
                    {
                        Exception subMask;
                        CharXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.CharN),
                            item.CharN,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.CharN,
                            subMask);
                    }
                    {
                        Exception subMask;
                        CharXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Char),
                            item.Char,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Char,
                            subMask);
                    }
                    {
                        Exception subMask;
                        DateTimeXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DateTimeNull),
                            item.DateTimeNull,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DateTimeNull,
                            subMask);
                    }
                    {
                        Exception subMask;
                        DateTimeXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DateTime),
                            item.DateTime,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DateTime,
                            subMask);
                    }
                    {
                        Exception subMask;
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DoubleN),
                            item.DoubleN,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DoubleN,
                            subMask);
                    }
                    {
                        Exception subMask;
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DoubleN_Ranged),
                            item.DoubleN_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DoubleN_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Double),
                            item.Double,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Double,
                            subMask);
                    }
                    {
                        Exception subMask;
                        DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Double_Ranged),
                            item.Double_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Double_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FloatN),
                            item.FloatN,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.FloatN,
                            subMask);
                    }
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FloatN_Ranged),
                            item.FloatN_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.FloatN_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Float),
                            item.Float,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Float,
                            subMask);
                    }
                    {
                        Exception subMask;
                        FloatXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Float_Ranged),
                            item.Float_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Float_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16N),
                            item.Int16N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int16N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16N_Ranged),
                            item.Int16N_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int16N_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16),
                            item.Int16,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int16,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int16_Ranged),
                            item.Int16_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int16_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32N),
                            item.Int32N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int32N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32N_Ranged),
                            item.Int32N_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int32N_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32),
                            item.Int32,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int32,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int32_Ranged),
                            item.Int32_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int32_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64N),
                            item.Int64N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int64N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64N_Ranged),
                            item.Int64N_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int64N_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64),
                            item.Int64,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int64,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int64_Ranged),
                            item.Int64_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int64_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8N),
                            item.Int8N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int8N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8N_Ranged),
                            item.Int8N_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int8N_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8),
                            item.Int8,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int8,
                            subMask);
                    }
                    {
                        Exception subMask;
                        Int8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Int8_Ranged),
                            item.Int8_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Int8_Ranged,
                            subMask);
                    }
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.Unsafe),
                            item: item.Unsafe,
                            doMasks: errorMask != null,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Unsafe,
                            subMask);
                    }
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.UnsafeLoqui),
                            item: item.UnsafeLoqui,
                            doMasks: errorMask != null,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UnsafeLoqui,
                            subMask);
                    }
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.UnsafeNull),
                            item: item.UnsafeNull,
                            doMasks: errorMask != null,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UnsafeNull,
                            subMask);
                    }
                    {
                        Exception subMask;
                        P2IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P2IntN),
                            item.P2IntN,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P2IntN,
                            subMask);
                    }
                    {
                        Exception subMask;
                        P2IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P2Int),
                            item.P2Int,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P2Int,
                            subMask);
                    }
                    {
                        Exception subMask;
                        P3DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3DoubleN),
                            item.P3DoubleN,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P3DoubleN,
                            subMask);
                    }
                    {
                        Exception subMask;
                        P3DoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3Double),
                            item.P3Double,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P3Double,
                            subMask);
                    }
                    {
                        Exception subMask;
                        P3IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3IntN),
                            item.P3IntN,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P3IntN,
                            subMask);
                    }
                    {
                        Exception subMask;
                        P3IntXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.P3Int),
                            item.P3Int,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.P3Int,
                            subMask);
                    }
                    {
                        Exception subMask;
                        PercentXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.PercentN),
                            item.PercentN,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.PercentN,
                            subMask);
                    }
                    {
                        Exception subMask;
                        PercentXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.Percent),
                            item.Percent,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Percent,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt8N),
                            item.RangeInt8N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt8N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt8),
                            item.RangeInt8,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt8,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt16N),
                            item.RangeInt16N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt16N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt16),
                            item.RangeInt16,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt16,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt32N),
                            item.RangeInt32N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt32N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt32),
                            item.RangeInt32,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt32,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt64N),
                            item.RangeInt64N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt64N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeInt64),
                            item.RangeInt64,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeInt64,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeUInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt8N),
                            item.RangeUInt8N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt8N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeUInt8XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt8),
                            item.RangeUInt8,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt8,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeUInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt16N),
                            item.RangeUInt16N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt16N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeUInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt16),
                            item.RangeUInt16,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt16,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeUInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt32N),
                            item.RangeUInt32N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt32N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeUInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt32),
                            item.RangeUInt32,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt32,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeUInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt64N),
                            item.RangeUInt64N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt64N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        RangeUInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.RangeUInt64),
                            item.RangeUInt64,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RangeUInt64,
                            subMask);
                    }
                    {
                        Exception subMask;
                        StringXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.String),
                            item.String,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.String,
                            subMask);
                    }
                    {
                        Exception subMask;
                        FilePathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FilePath),
                            item.FilePath,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.FilePath,
                            subMask);
                    }
                    {
                        Exception subMask;
                        FilePathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.FilePathNull),
                            item.FilePathNull,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.FilePathNull,
                            subMask);
                    }
                    {
                        Exception subMask;
                        DirectoryPathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DirectoryPath),
                            item.DirectoryPath,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DirectoryPath,
                            subMask);
                    }
                    {
                        Exception subMask;
                        DirectoryPathXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.DirectoryPathNull),
                            item.DirectoryPathNull,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DirectoryPathNull,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDoubleN),
                            item.UDoubleN,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UDoubleN,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDoubleN_Ranged),
                            item.UDoubleN_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UDoubleN_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDouble),
                            item.UDouble,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UDouble,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UDoubleXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UDouble_Ranged),
                            item.UDouble_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UDouble_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16N),
                            item.UInt16N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt16N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16N_Ranged),
                            item.UInt16N_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt16N_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16),
                            item.UInt16,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt16,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt16XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt16_Ranged),
                            item.UInt16_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt16_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32N),
                            item.UInt32N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt32N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32N_Ranged),
                            item.UInt32N_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt32N_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32),
                            item.UInt32,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt32,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt32XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt32_Ranged),
                            item.UInt32_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt32_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64N),
                            item.UInt64N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt64N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64N_Ranged),
                            item.UInt64N_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt64N_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64),
                            item.UInt64,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt64,
                            subMask);
                    }
                    {
                        Exception subMask;
                        UInt64XmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt64_Ranged),
                            item.UInt64_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt64_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8N),
                            item.UInt8N,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt8N,
                            subMask);
                    }
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8N_Ranged),
                            item.UInt8N_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt8N_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8),
                            item.UInt8,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt8,
                            subMask);
                    }
                    {
                        Exception subMask;
                        ByteXmlTranslation.Instance.Write(
                            writer,
                            nameof(item.UInt8_Ranged),
                            item.UInt8_Ranged,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.UInt8_Ranged,
                            subMask);
                    }
                    {
                        Exception subMask;
                        EnumXmlTranslation<TestEnum>.Instance.Write(
                            writer,
                            nameof(item.Enum),
                            item.Enum,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Enum,
                            subMask);
                    }
                    {
                        Exception subMask;
                        EnumXmlTranslation<TestEnum>.Instance.Write(
                            writer,
                            nameof(item.EnumNull),
                            item.EnumNull,
                            doMasks: errorMask != null,
                            errorMask: out subMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.EnumNull,
                            subMask);
                    }
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.WildCard),
                            item: item.WildCard,
                            doMasks: errorMask != null,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.WildCard,
                            subMask);
                    }
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.WildCardLoqui),
                            item: item.WildCardLoqui,
                            doMasks: errorMask != null,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.WildCardLoqui,
                            subMask);
                    }
                    {
                        object subMask;
                        WildcardXmlTranslation.Instance.Write(
                            writer: writer,
                            name: nameof(item.WildCardNull),
                            item: item.WildCardNull,
                            doMasks: errorMask != null,
                            maskObj: out var unsafeErrMask);
                        subMask = (object)unsafeErrMask;
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.WildCardNull,
                            subMask);
                    }
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Ref,
                            name: nameof(item.Ref),
                            doMasks: errorMask != null,
                            mask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Ref,
                            subMask);
                    }
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Ref_NotNull,
                            name: nameof(item.Ref_NotNull),
                            doMasks: errorMask != null,
                            mask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Ref_NotNull,
                            subMask);
                    }
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.Ref_Singleton,
                            name: nameof(item.Ref_Singleton),
                            doMasks: errorMask != null,
                            mask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Ref_Singleton,
                            subMask);
                    }
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.RefGetter,
                            name: nameof(item.RefGetter),
                            doMasks: errorMask != null,
                            mask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefGetter,
                            subMask);
                    }
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.RefGetter_NotNull,
                            name: nameof(item.RefGetter_NotNull),
                            doMasks: errorMask != null,
                            mask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefGetter_NotNull,
                            subMask);
                    }
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.RefGetter_Singleton,
                            name: nameof(item.RefGetter_Singleton),
                            doMasks: errorMask != null,
                            mask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefGetter_Singleton,
                            subMask);
                    }
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.RefSetter,
                            name: nameof(item.RefSetter),
                            doMasks: errorMask != null,
                            mask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefSetter,
                            subMask);
                    }
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.RefSetter_NotNull,
                            name: nameof(item.RefSetter_NotNull),
                            doMasks: errorMask != null,
                            mask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefSetter_NotNull,
                            subMask);
                    }
                    {
                        MaskItem<Exception, ObjectToRef_ErrorMask> subMask;
                        LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                            writer: writer,
                            item: item.RefSetter_Singleton,
                            name: nameof(item.RefSetter_Singleton),
                            doMasks: errorMask != null,
                            mask: out ObjectToRef_ErrorMask loquiMask);
                        subMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefSetter_Singleton,
                            subMask);
                    }
                    {
                        MaskItem<Exception, IEnumerable<Exception>> subMask;
                        ListXmlTranslation<Boolean, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.List),
                            item: item.List,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            transl: (Boolean subItem, bool listDoMasks, out Exception listSubMask) =>
                            {
                                BooleanXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: errorMask != null,
                                    errorMask: out listSubMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.List,
                            subMask);
                    }
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> subMask;
                        ListXmlTranslation<ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.RefList),
                            item: item.RefList,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            transl: (ObjectToRef subItem, bool listDoMasks, out MaskItem<Exception, ObjectToRef_ErrorMask> listSubMask) =>
                            {
                                LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: errorMask != null,
                                    mask: out ObjectToRef_ErrorMask loquiMask);
                                listSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefList,
                            subMask);
                    }
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> subMask;
                        DictXmlTranslation<String, Boolean, Exception, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.Dict),
                            items: item.Dict,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            keyTransl: (String subItem, bool dictDoMask, out Exception dictSubMask) =>
                            {
                                StringXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: dictDoMask,
                                    errorMask: out dictSubMask);
                            }
                            ,
                            valTransl: (Boolean subItem, bool dictDoMask, out Exception dictSubMask) =>
                            {
                                BooleanXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: dictDoMask,
                                    errorMask: out dictSubMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.Dict,
                            subMask);
                    }
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>> subMask;
                        DictXmlTranslation<ObjectToRef, ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.RefDict),
                            items: item.RefDict,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            keyTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    mask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            ,
                            valTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    mask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.RefDict,
                            subMask);
                    }
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>> subMask;
                        DictXmlTranslation<ObjectToRef, Boolean, MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>.Instance.Write(
                            writer: writer,
                            name: nameof(item.KeyRefDict),
                            items: item.KeyRefDict,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            keyTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    mask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            ,
                            valTransl: (Boolean subItem, bool dictDoMask, out Exception dictSubMask) =>
                            {
                                BooleanXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: dictDoMask,
                                    errorMask: out dictSubMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.KeyRefDict,
                            subMask);
                    }
                    {
                        MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>> subMask;
                        DictXmlTranslation<String, ObjectToRef, Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.ValRefDict),
                            items: item.ValRefDict,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            keyTransl: (String subItem, bool dictDoMask, out Exception dictSubMask) =>
                            {
                                StringXmlTranslation.Instance.Write(
                                    writer,
                                    "Item",
                                    subItem,
                                    doMasks: dictDoMask,
                                    errorMask: out dictSubMask);
                            }
                            ,
                            valTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    mask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.ValRefDict,
                            subMask);
                    }
                    {
                        MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> subMask;
                        KeyedDictXmlTranslation<Int32, ObjectToRef, MaskItem<Exception, ObjectToRef_ErrorMask>>.Instance.Write(
                            writer: writer,
                            name: nameof(item.DictKeyedValue),
                            items: item.DictKeyedValue.Values,
                            doMasks: errorMask != null,
                            maskObj: out subMask,
                            valTransl: (ObjectToRef subItem, bool dictDoMask, out MaskItem<Exception, ObjectToRef_ErrorMask> dictSubMask) =>
                            {
                                LoquiXmlTranslation<IObjectToRefGetter, ObjectToRef_ErrorMask>.Instance.Write(
                                    writer: writer,
                                    item: subItem,
                                    name: "Item",
                                    doMasks: dictDoMask,
                                    mask: out ObjectToRef_ErrorMask loquiMask);
                                dictSubMask = loquiMask == null ? null : new MaskItem<Exception, ObjectToRef_ErrorMask>(null, loquiMask);
                            }
                            );
                        ErrorMask.HandleErrorMask(
                            errorMask,
                            (int)TestObject_FieldIndex.DictKeyedValue,
                            subMask);
                    }
                }
            }
            catch (Exception ex)
            when (errorMask != null)
            {
                errorMask().Overall = ex;
            }
        }
        #endregion

        #endregion

    }
    #endregion

    #region Modules

    #region Mask
    public class TestObject_Mask<T> : IMask<T>, IEquatable<TestObject_Mask<T>>
    {
        #region Ctors
        public TestObject_Mask()
        {
        }

        public TestObject_Mask(T initialValue)
        {
            this.ByteArray = initialValue;
            this.ByteArrayNull = initialValue;
            this.ByteArrayNotNull = initialValue;
            this.ByteArraySingleton = initialValue;
            this.BoolN = initialValue;
            this.Bool = initialValue;
            this.CharN = initialValue;
            this.Char = initialValue;
            this.DateTimeNull = initialValue;
            this.DateTime = initialValue;
            this.DoubleN = initialValue;
            this.DoubleN_Ranged = initialValue;
            this.Double = initialValue;
            this.Double_Ranged = initialValue;
            this.FloatN = initialValue;
            this.FloatN_Ranged = initialValue;
            this.Float = initialValue;
            this.Float_Ranged = initialValue;
            this.Int16N = initialValue;
            this.Int16N_Ranged = initialValue;
            this.Int16 = initialValue;
            this.Int16_Ranged = initialValue;
            this.Int32N = initialValue;
            this.Int32N_Ranged = initialValue;
            this.Int32 = initialValue;
            this.Int32_Ranged = initialValue;
            this.Int64N = initialValue;
            this.Int64N_Ranged = initialValue;
            this.Int64 = initialValue;
            this.Int64_Ranged = initialValue;
            this.Int8N = initialValue;
            this.Int8N_Ranged = initialValue;
            this.Int8 = initialValue;
            this.Int8_Ranged = initialValue;
            this.Unsafe = initialValue;
            this.UnsafeLoqui = initialValue;
            this.UnsafeNull = initialValue;
            this.P2IntN = initialValue;
            this.P2Int = initialValue;
            this.P3DoubleN = initialValue;
            this.P3Double = initialValue;
            this.P3IntN = initialValue;
            this.P3Int = initialValue;
            this.PercentN = initialValue;
            this.Percent = initialValue;
            this.RangeInt8N = initialValue;
            this.RangeInt8 = initialValue;
            this.RangeInt16N = initialValue;
            this.RangeInt16 = initialValue;
            this.RangeInt32N = initialValue;
            this.RangeInt32 = initialValue;
            this.RangeInt64N = initialValue;
            this.RangeInt64 = initialValue;
            this.RangeUInt8N = initialValue;
            this.RangeUInt8 = initialValue;
            this.RangeUInt16N = initialValue;
            this.RangeUInt16 = initialValue;
            this.RangeUInt32N = initialValue;
            this.RangeUInt32 = initialValue;
            this.RangeUInt64N = initialValue;
            this.RangeUInt64 = initialValue;
            this.String = initialValue;
            this.FilePath = initialValue;
            this.FilePathNull = initialValue;
            this.DirectoryPath = initialValue;
            this.DirectoryPathNull = initialValue;
            this.UDoubleN = initialValue;
            this.UDoubleN_Ranged = initialValue;
            this.UDouble = initialValue;
            this.UDouble_Ranged = initialValue;
            this.UInt16N = initialValue;
            this.UInt16N_Ranged = initialValue;
            this.UInt16 = initialValue;
            this.UInt16_Ranged = initialValue;
            this.UInt32N = initialValue;
            this.UInt32N_Ranged = initialValue;
            this.UInt32 = initialValue;
            this.UInt32_Ranged = initialValue;
            this.UInt64N = initialValue;
            this.UInt64N_Ranged = initialValue;
            this.UInt64 = initialValue;
            this.UInt64_Ranged = initialValue;
            this.UInt8N = initialValue;
            this.UInt8N_Ranged = initialValue;
            this.UInt8 = initialValue;
            this.UInt8_Ranged = initialValue;
            this.Enum = initialValue;
            this.EnumNull = initialValue;
            this.WildCard = initialValue;
            this.WildCardLoqui = initialValue;
            this.WildCardNull = initialValue;
            this.Ref = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.Ref_NotNull = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.Ref_Singleton = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefGetter = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefGetter_NotNull = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefGetter_Singleton = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefSetter = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefSetter_NotNull = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.RefSetter_Singleton = new MaskItem<T, ObjectToRef_Mask<T>>(initialValue, new ObjectToRef_Mask<T>(initialValue));
            this.List = new MaskItem<T, IEnumerable<T>>(initialValue, null);
            this.RefList = new MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>>(initialValue, null);
            this.Dict = new MaskItem<T, IEnumerable<KeyValuePair<T, T>>>(initialValue, null);
            this.RefDict = new MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>>(initialValue, null);
            this.KeyRefDict = new MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, T>>>(initialValue, null);
            this.ValRefDict = new MaskItem<T, IEnumerable<KeyValuePair<T, MaskItem<T, ObjectToRef_Mask<T>>>>>(initialValue, null);
            this.DictKeyedValue = new MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>>(initialValue, null);
        }
        #endregion

        #region Members
        public T ByteArray;
        public T ByteArrayNull;
        public T ByteArrayNotNull;
        public T ByteArraySingleton;
        public T BoolN;
        public T Bool;
        public T CharN;
        public T Char;
        public T DateTimeNull;
        public T DateTime;
        public T DoubleN;
        public T DoubleN_Ranged;
        public T Double;
        public T Double_Ranged;
        public T FloatN;
        public T FloatN_Ranged;
        public T Float;
        public T Float_Ranged;
        public T Int16N;
        public T Int16N_Ranged;
        public T Int16;
        public T Int16_Ranged;
        public T Int32N;
        public T Int32N_Ranged;
        public T Int32;
        public T Int32_Ranged;
        public T Int64N;
        public T Int64N_Ranged;
        public T Int64;
        public T Int64_Ranged;
        public T Int8N;
        public T Int8N_Ranged;
        public T Int8;
        public T Int8_Ranged;
        public T Unsafe;
        public T UnsafeLoqui;
        public T UnsafeNull;
        public T P2IntN;
        public T P2Int;
        public T P3DoubleN;
        public T P3Double;
        public T P3IntN;
        public T P3Int;
        public T PercentN;
        public T Percent;
        public T RangeInt8N;
        public T RangeInt8;
        public T RangeInt16N;
        public T RangeInt16;
        public T RangeInt32N;
        public T RangeInt32;
        public T RangeInt64N;
        public T RangeInt64;
        public T RangeUInt8N;
        public T RangeUInt8;
        public T RangeUInt16N;
        public T RangeUInt16;
        public T RangeUInt32N;
        public T RangeUInt32;
        public T RangeUInt64N;
        public T RangeUInt64;
        public T String;
        public T FilePath;
        public T FilePathNull;
        public T DirectoryPath;
        public T DirectoryPathNull;
        public T UDoubleN;
        public T UDoubleN_Ranged;
        public T UDouble;
        public T UDouble_Ranged;
        public T UInt16N;
        public T UInt16N_Ranged;
        public T UInt16;
        public T UInt16_Ranged;
        public T UInt32N;
        public T UInt32N_Ranged;
        public T UInt32;
        public T UInt32_Ranged;
        public T UInt64N;
        public T UInt64N_Ranged;
        public T UInt64;
        public T UInt64_Ranged;
        public T UInt8N;
        public T UInt8N_Ranged;
        public T UInt8;
        public T UInt8_Ranged;
        public T Enum;
        public T EnumNull;
        public T WildCard;
        public T WildCardLoqui;
        public T WildCardNull;
        public MaskItem<T, ObjectToRef_Mask<T>> Ref { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> Ref_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefGetter_Singleton { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_NotNull { get; set; }
        public MaskItem<T, ObjectToRef_Mask<T>> RefSetter_Singleton { get; set; }
        public MaskItem<T, IEnumerable<T>> List;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> RefList;
        public MaskItem<T, IEnumerable<KeyValuePair<T, T>>> Dict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, MaskItem<T, ObjectToRef_Mask<T>>>>> RefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<MaskItem<T, ObjectToRef_Mask<T>>, T>>> KeyRefDict;
        public MaskItem<T, IEnumerable<KeyValuePair<T, MaskItem<T, ObjectToRef_Mask<T>>>>> ValRefDict;
        public MaskItem<T, IEnumerable<MaskItem<T, ObjectToRef_Mask<T>>>> DictKeyedValue;
        #endregion

        #region Equals
        public override bool Equals(object obj)
        {
            if (!(obj is TestObject_Mask<T> rhs)) return false;
            return Equals(rhs);
        }

        public bool Equals(TestObject_Mask<T> rhs)
        {
            if (rhs == null) return false;
            if (!object.Equals(this.ByteArray, rhs.ByteArray)) return false;
            if (!object.Equals(this.ByteArrayNull, rhs.ByteArrayNull)) return false;
            if (!object.Equals(this.ByteArrayNotNull, rhs.ByteArrayNotNull)) return false;
            if (!object.Equals(this.ByteArraySingleton, rhs.ByteArraySingleton)) return false;
            if (!object.Equals(this.BoolN, rhs.BoolN)) return false;
            if (!object.Equals(this.Bool, rhs.Bool)) return false;
            if (!object.Equals(this.CharN, rhs.CharN)) return false;
            if (!object.Equals(this.Char, rhs.Char)) return false;
            if (!object.Equals(this.DateTimeNull, rhs.DateTimeNull)) return false;
            if (!object.Equals(this.DateTime, rhs.DateTime)) return false;
            if (!object.Equals(this.DoubleN, rhs.DoubleN)) return false;
            if (!object.Equals(this.DoubleN_Ranged, rhs.DoubleN_Ranged)) return false;
            if (!object.Equals(this.Double, rhs.Double)) return false;
            if (!object.Equals(this.Double_Ranged, rhs.Double_Ranged)) return false;
            if (!object.Equals(this.FloatN, rhs.FloatN)) return false;
            if (!object.Equals(this.FloatN_Ranged, rhs.FloatN_Ranged)) return false;
            if (!object.Equals(this.Float, rhs.Float)) return false;
            if (!object.Equals(this.Float_Ranged, rhs.Float_Ranged)) return false;
            if (!object.Equals(this.Int16N, rhs.Int16N)) return false;
            if (!object.Equals(this.Int16N_Ranged, rhs.Int16N_Ranged)) return false;
            if (!object.Equals(this.Int16, rhs.Int16)) return false;
            if (!object.Equals(this.Int16_Ranged, rhs.Int16_Ranged)) return false;
            if (!object.Equals(this.Int32N, rhs.Int32N)) return false;
            if (!object.Equals(this.Int32N_Ranged, rhs.Int32N_Ranged)) return false;
            if (!object.Equals(this.Int32, rhs.Int32)) return false;
            if (!object.Equals(this.Int32_Ranged, rhs.Int32_Ranged)) return false;
            if (!object.Equals(this.Int64N, rhs.Int64N)) return false;
            if (!object.Equals(this.Int64N_Ranged, rhs.Int64N_Ranged)) return false;
            if (!object.Equals(this.Int64, rhs.Int64)) return false;
            if (!object.Equals(this.Int64_Ranged, rhs.Int64_Ranged)) return false;
            if (!object.Equals(this.Int8N, rhs.Int8N)) return false;
            if (!object.Equals(this.Int8N_Ranged, rhs.Int8N_Ranged)) return false;
            if (!object.Equals(this.Int8, rhs.Int8)) return false;
            if (!object.Equals(this.Int8_Ranged, rhs.Int8_Ranged)) return false;
            if (!object.Equals(this.Unsafe, rhs.Unsafe)) return false;
            if (!object.Equals(this.UnsafeLoqui, rhs.UnsafeLoqui)) return false;
            if (!object.Equals(this.UnsafeNull, rhs.UnsafeNull)) return false;
            if (!object.Equals(this.P2IntN, rhs.P2IntN)) return false;
            if (!object.Equals(this.P2Int, rhs.P2Int)) return false;
            if (!object.Equals(this.P3DoubleN, rhs.P3DoubleN)) return false;
            if (!object.Equals(this.P3Double, rhs.P3Double)) return false;
            if (!object.Equals(this.P3IntN, rhs.P3IntN)) return false;
            if (!object.Equals(this.P3Int, rhs.P3Int)) return false;
            if (!object.Equals(this.PercentN, rhs.PercentN)) return false;
            if (!object.Equals(this.Percent, rhs.Percent)) return false;
            if (!object.Equals(this.RangeInt8N, rhs.RangeInt8N)) return false;
            if (!object.Equals(this.RangeInt8, rhs.RangeInt8)) return false;
            if (!object.Equals(this.RangeInt16N, rhs.RangeInt16N)) return false;
            if (!object.Equals(this.RangeInt16, rhs.RangeInt16)) return false;
            if (!object.Equals(this.RangeInt32N, rhs.RangeInt32N)) return false;
            if (!object.Equals(this.RangeInt32, rhs.RangeInt32)) return false;
            if (!object.Equals(this.RangeInt64N, rhs.RangeInt64N)) return false;
            if (!object.Equals(this.RangeInt64, rhs.RangeInt64)) return false;
            if (!object.Equals(this.RangeUInt8N, rhs.RangeUInt8N)) return false;
            if (!object.Equals(this.RangeUInt8, rhs.RangeUInt8)) return false;
            if (!object.Equals(this.RangeUInt16N, rhs.RangeUInt16N)) return false;
            if (!object.Equals(this.RangeUInt16, rhs.RangeUInt16)) return false;
            if (!object.Equals(this.RangeUInt32N, rhs.RangeUInt32N)) return false;
            if (!object.Equals(this.RangeUInt32, rhs.RangeUInt32)) return false;
            if (!object.Equals(this.RangeUInt64N, rhs.RangeUInt64N)) return false;
            if (!object.Equals(this.RangeUInt64, rhs.RangeUInt64)) return false;
            if (!object.Equals(this.String, rhs.String)) return false;
            if (!object.Equals(this.FilePath, rhs.FilePath)) return false;
            if (!object.Equals(this.FilePathNull, rhs.FilePathNull)) return false;
            if (!object.Equals(this.DirectoryPath, rhs.DirectoryPath)) return false;
            if (!object.Equals(this.DirectoryPathNull, rhs.DirectoryPathNull)) return false;
            if (!object.Equals(this.UDoubleN, rhs.UDoubleN)) return false;
            if (!object.Equals(this.UDoubleN_Ranged, rhs.UDoubleN_Ranged)) return false;
            if (!object.Equals(this.UDouble, rhs.UDouble)) return false;
            if (!object.Equals(this.UDouble_Ranged, rhs.UDouble_Ranged)) return false;
            if (!object.Equals(this.UInt16N, rhs.UInt16N)) return false;
            if (!object.Equals(this.UInt16N_Ranged, rhs.UInt16N_Ranged)) return false;
            if (!object.Equals(this.UInt16, rhs.UInt16)) return false;
            if (!object.Equals(this.UInt16_Ranged, rhs.UInt16_Ranged)) return false;
            if (!object.Equals(this.UInt32N, rhs.UInt32N)) return false;
            if (!object.Equals(this.UInt32N_Ranged, rhs.UInt32N_Ranged)) return false;
            if (!object.Equals(this.UInt32, rhs.UInt32)) return false;
            if (!object.Equals(this.UInt32_Ranged, rhs.UInt32_Ranged)) return false;
            if (!object.Equals(this.UInt64N, rhs.UInt64N)) return false;
            if (!object.Equals(this.UInt64N_Ranged, rhs.UInt64N_Ranged)) return false;
            if (!object.Equals(this.UInt64, rhs.UInt64)) return false;
            if (!object.Equals(this.UInt64_Ranged, rhs.UInt64_Ranged)) return false;
            if (!object.Equals(this.UInt8N, rhs.UInt8N)) return false;
            if (!object.Equals(this.UInt8N_Ranged, rhs.UInt8N_Ranged)) return false;
            if (!object.Equals(this.UInt8, rhs.UInt8)) return false;
            if (!object.Equals(this.UInt8_Ranged, rhs.UInt8_Ranged)) return false;
            if (!object.Equals(this.Enum, rhs.Enum)) return false;
            if (!object.Equals(this.EnumNull, rhs.EnumNull)) return false;
            if (!object.Equals(this.WildCard, rhs.WildCard)) return false;
            if (!object.Equals(this.WildCardLoqui, rhs.WildCardLoqui)) return false;
            if (!object.Equals(this.WildCardNull, rhs.WildCardNull)) return false;
            if (!object.Equals(this.Ref, rhs.Ref)) return false;
            if (!object.Equals(this.Ref_NotNull, rhs.Ref_NotNull)) return false;
            if (!object.Equals(this.Ref_Singleton, rhs.Ref_Singleton)) return false;
            if (!object.Equals(this.RefGetter, rhs.RefGetter)) return false;
            if (!object.Equals(this.RefGetter_NotNull, rhs.RefGetter_NotNull)) return false;
            if (!object.Equals(this.RefGetter_Singleton, rhs.RefGetter_Singleton)) return false;
            if (!object.Equals(this.RefSetter, rhs.RefSetter)) return false;
            if (!object.Equals(this.RefSetter_NotNull, rhs.RefSetter_NotNull)) return false;
            if (!object.Equals(this.RefSetter_Singleton, rhs.RefSetter_Singleton)) return false;
            if (!object.Equals(this.List, rhs.List)) return false;
            if (!object.Equals(this.RefList, rhs.RefList)) return false;
            if (!object.Equals(this.Dict, rhs.Dict)) return false;
            if (!object.Equals(this.RefDict, rhs.RefDict)) return false;
            if (!object.Equals(this.KeyRefDict, rhs.KeyRefDict)) return false;
            if (!object.Equals(this.ValRefDict, rhs.ValRefDict)) return false;
            if (!object.Equals(this.DictKeyedValue, rhs.DictKeyedValue)) return false;
            return true;
        }
        public override int GetHashCode()
        {
            int ret = 0;
            ret = ret.CombineHashCode(this.ByteArray?.GetHashCode());
            ret = ret.CombineHashCode(this.ByteArrayNull?.GetHashCode());
            ret = ret.CombineHashCode(this.ByteArrayNotNull?.GetHashCode());
            ret = ret.CombineHashCode(this.ByteArraySingleton?.GetHashCode());
            ret = ret.CombineHashCode(this.BoolN?.GetHashCode());
            ret = ret.CombineHashCode(this.Bool?.GetHashCode());
            ret = ret.CombineHashCode(this.CharN?.GetHashCode());
            ret = ret.CombineHashCode(this.Char?.GetHashCode());
            ret = ret.CombineHashCode(this.DateTimeNull?.GetHashCode());
            ret = ret.CombineHashCode(this.DateTime?.GetHashCode());
            ret = ret.CombineHashCode(this.DoubleN?.GetHashCode());
            ret = ret.CombineHashCode(this.DoubleN_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Double?.GetHashCode());
            ret = ret.CombineHashCode(this.Double_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.FloatN?.GetHashCode());
            ret = ret.CombineHashCode(this.FloatN_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Float?.GetHashCode());
            ret = ret.CombineHashCode(this.Float_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int16N?.GetHashCode());
            ret = ret.CombineHashCode(this.Int16N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int16?.GetHashCode());
            ret = ret.CombineHashCode(this.Int16_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int32N?.GetHashCode());
            ret = ret.CombineHashCode(this.Int32N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int32?.GetHashCode());
            ret = ret.CombineHashCode(this.Int32_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int64N?.GetHashCode());
            ret = ret.CombineHashCode(this.Int64N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int64?.GetHashCode());
            ret = ret.CombineHashCode(this.Int64_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int8N?.GetHashCode());
            ret = ret.CombineHashCode(this.Int8N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Int8?.GetHashCode());
            ret = ret.CombineHashCode(this.Int8_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Unsafe?.GetHashCode());
            ret = ret.CombineHashCode(this.UnsafeLoqui?.GetHashCode());
            ret = ret.CombineHashCode(this.UnsafeNull?.GetHashCode());
            ret = ret.CombineHashCode(this.P2IntN?.GetHashCode());
            ret = ret.CombineHashCode(this.P2Int?.GetHashCode());
            ret = ret.CombineHashCode(this.P3DoubleN?.GetHashCode());
            ret = ret.CombineHashCode(this.P3Double?.GetHashCode());
            ret = ret.CombineHashCode(this.P3IntN?.GetHashCode());
            ret = ret.CombineHashCode(this.P3Int?.GetHashCode());
            ret = ret.CombineHashCode(this.PercentN?.GetHashCode());
            ret = ret.CombineHashCode(this.Percent?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt8N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt8?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt16N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt16?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt32N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt32?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt64N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeInt64?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt8N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt8?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt16N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt16?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt32N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt32?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt64N?.GetHashCode());
            ret = ret.CombineHashCode(this.RangeUInt64?.GetHashCode());
            ret = ret.CombineHashCode(this.String?.GetHashCode());
            ret = ret.CombineHashCode(this.FilePath?.GetHashCode());
            ret = ret.CombineHashCode(this.FilePathNull?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectoryPath?.GetHashCode());
            ret = ret.CombineHashCode(this.DirectoryPathNull?.GetHashCode());
            ret = ret.CombineHashCode(this.UDoubleN?.GetHashCode());
            ret = ret.CombineHashCode(this.UDoubleN_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UDouble?.GetHashCode());
            ret = ret.CombineHashCode(this.UDouble_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt16N?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt16N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt16?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt16_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt32N?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt32N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt32?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt32_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt64N?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt64N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt64?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt64_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt8N?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt8N_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt8?.GetHashCode());
            ret = ret.CombineHashCode(this.UInt8_Ranged?.GetHashCode());
            ret = ret.CombineHashCode(this.Enum?.GetHashCode());
            ret = ret.CombineHashCode(this.EnumNull?.GetHashCode());
            ret = ret.CombineHashCode(this.WildCard?.GetHashCode());
            ret = ret.CombineHashCode(this.WildCardLoqui?.GetHashCode());
            ret = ret.CombineHashCode(this.WildCardNull?.GetHashCode());
            ret = ret.CombineHashCode(this.Ref?.GetHashCode());
            ret = ret.CombineHashCode(this.Ref_NotNull?.GetHashCode());
            ret = ret.CombineHashCode(this.Ref_Singleton?.GetHashCode());
            ret = ret.CombineHashCode(this.RefGetter?.GetHashCode());
            ret = ret.CombineHashCode(this.RefGetter_NotNull?.GetHashCode());
            ret = ret.CombineHashCode(this.RefGetter_Singleton?.GetHashCode());
            ret = ret.CombineHashCode(this.RefSetter?.GetHashCode());
            ret = ret.CombineHashCode(this.RefSetter_NotNull?.GetHashCode());
            ret = ret.CombineHashCode(this.RefSetter_Singleton?.GetHashCode());
            ret = ret.CombineHashCode(this.List?.GetHashCode());
            ret = ret.CombineHashCode(this.RefList?.GetHashCode());
            ret = ret.CombineHashCode(this.Dict?.GetHashCode());
            ret = ret.CombineHashCode(this.RefDict?.GetHashCode());
            ret = ret.CombineHashCode(this.KeyRefDict?.GetHashCode());
            ret = ret.CombineHashCode(this.ValRefDict?.GetHashCode());
            ret = ret.CombineHashCode(this.DictKeyedValue?.GetHashCode());
            return ret;
        }

        #endregion

        #region All Equal
        public bool AllEqual(Func<T, bool> eval)
        {
            if (!eval(this.ByteArray)) return false;
            if (!eval(this.ByteArrayNull)) return false;
            if (!eval(this.ByteArrayNotNull)) return false;
            if (!eval(this.ByteArraySingleton)) return false;
            if (!eval(this.BoolN)) return false;
            if (!eval(this.Bool)) return false;
            if (!eval(this.CharN)) return false;
            if (!eval(this.Char)) return false;
            if (!eval(this.DateTimeNull)) return false;
            if (!eval(this.DateTime)) return false;
            if (!eval(this.DoubleN)) return false;
            if (!eval(this.DoubleN_Ranged)) return false;
            if (!eval(this.Double)) return false;
            if (!eval(this.Double_Ranged)) return false;
            if (!eval(this.FloatN)) return false;
            if (!eval(this.FloatN_Ranged)) return false;
            if (!eval(this.Float)) return false;
            if (!eval(this.Float_Ranged)) return false;
            if (!eval(this.Int16N)) return false;
            if (!eval(this.Int16N_Ranged)) return false;
            if (!eval(this.Int16)) return false;
            if (!eval(this.Int16_Ranged)) return false;
            if (!eval(this.Int32N)) return false;
            if (!eval(this.Int32N_Ranged)) return false;
            if (!eval(this.Int32)) return false;
            if (!eval(this.Int32_Ranged)) return false;
            if (!eval(this.Int64N)) return false;
            if (!eval(this.Int64N_Ranged)) return false;
            if (!eval(this.Int64)) return false;
            if (!eval(this.Int64_Ranged)) return false;
            if (!eval(this.Int8N)) return false;
            if (!eval(this.Int8N_Ranged)) return false;
            if (!eval(this.Int8)) return false;
            if (!eval(this.Int8_Ranged)) return false;
            if (!eval(this.Unsafe)) return false;
            if (!eval(this.UnsafeLoqui)) return false;
            if (!eval(this.UnsafeNull)) return false;
            if (!eval(this.P2IntN)) return false;
            if (!eval(this.P2Int)) return false;
            if (!eval(this.P3DoubleN)) return false;
            if (!eval(this.P3Double)) return false;
            if (!eval(this.P3IntN)) return false;
            if (!eval(this.P3Int)) return false;
            if (!eval(this.PercentN)) return false;
            if (!eval(this.Percent)) return false;
            if (!eval(this.RangeInt8N)) return false;
            if (!eval(this.RangeInt8)) return false;
            if (!eval(this.RangeInt16N)) return false;
            if (!eval(this.RangeInt16)) return false;
            if (!eval(this.RangeInt32N)) return false;
            if (!eval(this.RangeInt32)) return false;
            if (!eval(this.RangeInt64N)) return false;
            if (!eval(this.RangeInt64)) return false;
            if (!eval(this.RangeUInt8N)) return false;
            if (!eval(this.RangeUInt8)) return false;
            if (!eval(this.RangeUInt16N)) return false;
            if (!eval(this.RangeUInt16)) return false;
            if (!eval(this.RangeUInt32N)) return false;
            if (!eval(this.RangeUInt32)) return false;
            if (!eval(this.RangeUInt64N)) return false;
            if (!eval(this.RangeUInt64)) return false;
            if (!eval(this.String)) return false;
            if (!eval(this.FilePath)) return false;
            if (!eval(this.FilePathNull)) return false;
            if (!eval(this.DirectoryPath)) return false;
            if (!eval(this.DirectoryPathNull)) return false;
            if (!eval(this.UDoubleN)) return false;
            if (!eval(this.UDoubleN_Ranged)) return false;
            if (!eval(this.UDouble)) return false;
            if (!eval(this.UDouble_Ranged)) return false;
            if (!eval(this.UInt16N)) return false;
            if (!eval(this.UInt16N_Ranged)) return false;
            if (!eval(this.UInt16)) return false;
            if (!eval(this.UInt16_Ranged)) return false;
            if (!eval(this.UInt32N)) return false;
            if (!eval(this.UInt32N_Ranged)) return false;
            if (!eval(this.UInt32)) return false;
            if (!eval(this.UInt32_Ranged)) return false;
            if (!eval(this.UInt64N)) return false;
            if (!eval(this.UInt64N_Ranged)) return false;
            if (!eval(this.UInt64)) return false;
            if (!eval(this.UInt64_Ranged)) return false;
            if (!eval(this.UInt8N)) return false;
            if (!eval(this.UInt8N_Ranged)) return false;
            if (!eval(this.UInt8)) return false;
            if (!eval(this.UInt8_Ranged)) return false;
            if (!eval(this.Enum)) return false;
            if (!eval(this.EnumNull)) return false;
            if (!eval(this.WildCard)) return false;
            if (!eval(this.WildCardLoqui)) return false;
            if (!eval(this.WildCardNull)) return false;
            if (Ref != null)
            {
                if (!eval(this.Ref.Overall)) return false;
                if (Ref.Specific != null && !Ref.Specific.AllEqual(eval)) return false;
            }
            if (Ref_NotNull != null)
            {
                if (!eval(this.Ref_NotNull.Overall)) return false;
                if (Ref_NotNull.Specific != null && !Ref_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (Ref_Singleton != null)
            {
                if (!eval(this.Ref_Singleton.Overall)) return false;
                if (Ref_Singleton.Specific != null && !Ref_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter != null)
            {
                if (!eval(this.RefGetter.Overall)) return false;
                if (RefGetter.Specific != null && !RefGetter.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter_NotNull != null)
            {
                if (!eval(this.RefGetter_NotNull.Overall)) return false;
                if (RefGetter_NotNull.Specific != null && !RefGetter_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (RefGetter_Singleton != null)
            {
                if (!eval(this.RefGetter_Singleton.Overall)) return false;
                if (RefGetter_Singleton.Specific != null && !RefGetter_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter != null)
            {
                if (!eval(this.RefSetter.Overall)) return false;
                if (RefSetter.Specific != null && !RefSetter.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter_NotNull != null)
            {
                if (!eval(this.RefSetter_NotNull.Overall)) return false;
                if (RefSetter_NotNull.Specific != null && !RefSetter_NotNull.Specific.AllEqual(eval)) return false;
            }
            if (RefSetter_Singleton != null)
            {
                if (!eval(this.RefSetter_Singleton.Overall)) return false;
                if (RefSetter_Singleton.Specific != null && !RefSetter_Singleton.Specific.AllEqual(eval)) return false;
            }
            if (List != null)
            {
                if (!eval(this.List.Overall)) return false;
                if (List.Specific != null)
                {
                    foreach (var item in List.Specific)
                    {
                        if (!eval(item)) return false;
                    }
                }
            }
            if (RefList != null)
            {
                if (!eval(this.RefList.Overall)) return false;
                if (RefList.Specific != null)
                {
                    foreach (var item in RefList.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            if (Dict != null)
            {
                if (!eval(this.Dict.Overall)) return false;
                if (Dict.Specific != null)
                {
                    foreach (var item in Dict.Specific)
                    {
                        if (!eval(item.Key)) return false;
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (RefDict != null)
            {
                if (!eval(this.RefDict.Overall)) return false;
                if (RefDict.Specific != null)
                {
                    foreach (var item in RefDict.Specific)
                    {
                        if (item.Key != null)
                        {
                            if (!eval(item.Key.Overall)) return false;
                            if (!item.Key.Specific?.AllEqual(eval) ?? false) return false;
                        }
                        if (item.Value != null)
                        {
                            if (!eval(item.Value.Overall)) return false;
                            if (!item.Value.Specific?.AllEqual(eval) ?? false) return false;
                        }
                    }
                }
            }
            if (KeyRefDict != null)
            {
                if (!eval(this.KeyRefDict.Overall)) return false;
                if (KeyRefDict.Specific != null)
                {
                    foreach (var item in KeyRefDict.Specific)
                    {
                        if (item.Key != null)
                        {
                            if (!eval(item.Key.Overall)) return false;
                            if (!item.Key.Specific?.AllEqual(eval) ?? false) return false;
                        }
                        if (!eval(item.Value)) return false;
                    }
                }
            }
            if (ValRefDict != null)
            {
                if (!eval(this.ValRefDict.Overall)) return false;
                if (ValRefDict.Specific != null)
                {
                    foreach (var item in ValRefDict.Specific)
                    {
                        if (!eval(item.Key)) return false;
                        if (item.Value != null)
                        {
                            if (!eval(item.Value.Overall)) return false;
                            if (!item.Value.Specific?.AllEqual(eval) ?? false) return false;
                        }
                    }
                }
            }
            if (DictKeyedValue != null)
            {
                if (!eval(this.DictKeyedValue.Overall)) return false;
                if (DictKeyedValue.Specific != null)
                {
                    foreach (var item in DictKeyedValue.Specific)
                    {
                        if (!eval(item.Overall)) return false;
                        if (!item.Specific?.AllEqual(eval) ?? false) return false;
                    }
                }
            }
            return true;
        }
        #endregion

        #region Translate
        public TestObject_Mask<R> Translate<R>(Func<T, R> eval)
        {
            var ret = new TestObject_Mask<R>();
            this.Translate_InternalFill(ret, eval);
            return ret;
        }

        protected void Translate_InternalFill<R>(TestObject_Mask<R> obj, Func<T, R> eval)
        {
            obj.ByteArray = eval(this.ByteArray);
            obj.ByteArrayNull = eval(this.ByteArrayNull);
            obj.ByteArrayNotNull = eval(this.ByteArrayNotNull);
            obj.ByteArraySingleton = eval(this.ByteArraySingleton);
            obj.BoolN = eval(this.BoolN);
            obj.Bool = eval(this.Bool);
            obj.CharN = eval(this.CharN);
            obj.Char = eval(this.Char);
            obj.DateTimeNull = eval(this.DateTimeNull);
            obj.DateTime = eval(this.DateTime);
            obj.DoubleN = eval(this.DoubleN);
            obj.DoubleN_Ranged = eval(this.DoubleN_Ranged);
            obj.Double = eval(this.Double);
            obj.Double_Ranged = eval(this.Double_Ranged);
            obj.FloatN = eval(this.FloatN);
            obj.FloatN_Ranged = eval(this.FloatN_Ranged);
            obj.Float = eval(this.Float);
            obj.Float_Ranged = eval(this.Float_Ranged);
            obj.Int16N = eval(this.Int16N);
            obj.Int16N_Ranged = eval(this.Int16N_Ranged);
            obj.Int16 = eval(this.Int16);
            obj.Int16_Ranged = eval(this.Int16_Ranged);
            obj.Int32N = eval(this.Int32N);
            obj.Int32N_Ranged = eval(this.Int32N_Ranged);
            obj.Int32 = eval(this.Int32);
            obj.Int32_Ranged = eval(this.Int32_Ranged);
            obj.Int64N = eval(this.Int64N);
            obj.Int64N_Ranged = eval(this.Int64N_Ranged);
            obj.Int64 = eval(this.Int64);
            obj.Int64_Ranged = eval(this.Int64_Ranged);
            obj.Int8N = eval(this.Int8N);
            obj.Int8N_Ranged = eval(this.Int8N_Ranged);
            obj.Int8 = eval(this.Int8);
            obj.Int8_Ranged = eval(this.Int8_Ranged);
            obj.Unsafe = eval(this.Unsafe);
            obj.UnsafeLoqui = eval(this.UnsafeLoqui);
            obj.UnsafeNull = eval(this.UnsafeNull);
            obj.P2IntN = eval(this.P2IntN);
            obj.P2Int = eval(this.P2Int);
            obj.P3DoubleN = eval(this.P3DoubleN);
            obj.P3Double = eval(this.P3Double);
            obj.P3IntN = eval(this.P3IntN);
            obj.P3Int = eval(this.P3Int);
            obj.PercentN = eval(this.PercentN);
            obj.Percent = eval(this.Percent);
            obj.RangeInt8N = eval(this.RangeInt8N);
            obj.RangeInt8 = eval(this.RangeInt8);
            obj.RangeInt16N = eval(this.RangeInt16N);
            obj.RangeInt16 = eval(this.RangeInt16);
            obj.RangeInt32N = eval(this.RangeInt32N);
            obj.RangeInt32 = eval(this.RangeInt32);
            obj.RangeInt64N = eval(this.RangeInt64N);
            obj.RangeInt64 = eval(this.RangeInt64);
            obj.RangeUInt8N = eval(this.RangeUInt8N);
            obj.RangeUInt8 = eval(this.RangeUInt8);
            obj.RangeUInt16N = eval(this.RangeUInt16N);
            obj.RangeUInt16 = eval(this.RangeUInt16);
            obj.RangeUInt32N = eval(this.RangeUInt32N);
            obj.RangeUInt32 = eval(this.RangeUInt32);
            obj.RangeUInt64N = eval(this.RangeUInt64N);
            obj.RangeUInt64 = eval(this.RangeUInt64);
            obj.String = eval(this.String);
            obj.FilePath = eval(this.FilePath);
            obj.FilePathNull = eval(this.FilePathNull);
            obj.DirectoryPath = eval(this.DirectoryPath);
            obj.DirectoryPathNull = eval(this.DirectoryPathNull);
            obj.UDoubleN = eval(this.UDoubleN);
            obj.UDoubleN_Ranged = eval(this.UDoubleN_Ranged);
            obj.UDouble = eval(this.UDouble);
            obj.UDouble_Ranged = eval(this.UDouble_Ranged);
            obj.UInt16N = eval(this.UInt16N);
            obj.UInt16N_Ranged = eval(this.UInt16N_Ranged);
            obj.UInt16 = eval(this.UInt16);
            obj.UInt16_Ranged = eval(this.UInt16_Ranged);
            obj.UInt32N = eval(this.UInt32N);
            obj.UInt32N_Ranged = eval(this.UInt32N_Ranged);
            obj.UInt32 = eval(this.UInt32);
            obj.UInt32_Ranged = eval(this.UInt32_Ranged);
            obj.UInt64N = eval(this.UInt64N);
            obj.UInt64N_Ranged = eval(this.UInt64N_Ranged);
            obj.UInt64 = eval(this.UInt64);
            obj.UInt64_Ranged = eval(this.UInt64_Ranged);
            obj.UInt8N = eval(this.UInt8N);
            obj.UInt8N_Ranged = eval(this.UInt8N_Ranged);
            obj.UInt8 = eval(this.UInt8);
            obj.UInt8_Ranged = eval(this.UInt8_Ranged);
            obj.Enum = eval(this.Enum);
            obj.EnumNull = eval(this.EnumNull);
            obj.WildCard = eval(this.WildCard);
            obj.WildCardLoqui = eval(this.WildCardLoqui);
            obj.WildCardNull = eval(this.WildCardNull);
            if (this.Ref != null)
            {
                obj.Ref = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.Ref.Overall = eval(this.Ref.Overall);
                if (this.Ref.Specific != null)
                {
                    obj.Ref.Specific = this.Ref.Specific.Translate(eval);
                }
            }
            if (this.Ref_NotNull != null)
            {
                obj.Ref_NotNull = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.Ref_NotNull.Overall = eval(this.Ref_NotNull.Overall);
                if (this.Ref_NotNull.Specific != null)
                {
                    obj.Ref_NotNull.Specific = this.Ref_NotNull.Specific.Translate(eval);
                }
            }
            if (this.Ref_Singleton != null)
            {
                obj.Ref_Singleton = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.Ref_Singleton.Overall = eval(this.Ref_Singleton.Overall);
                if (this.Ref_Singleton.Specific != null)
                {
                    obj.Ref_Singleton.Specific = this.Ref_Singleton.Specific.Translate(eval);
                }
            }
            if (this.RefGetter != null)
            {
                obj.RefGetter = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefGetter.Overall = eval(this.RefGetter.Overall);
                if (this.RefGetter.Specific != null)
                {
                    obj.RefGetter.Specific = this.RefGetter.Specific.Translate(eval);
                }
            }
            if (this.RefGetter_NotNull != null)
            {
                obj.RefGetter_NotNull = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefGetter_NotNull.Overall = eval(this.RefGetter_NotNull.Overall);
                if (this.RefGetter_NotNull.Specific != null)
                {
                    obj.RefGetter_NotNull.Specific = this.RefGetter_NotNull.Specific.Translate(eval);
                }
            }
            if (this.RefGetter_Singleton != null)
            {
                obj.RefGetter_Singleton = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefGetter_Singleton.Overall = eval(this.RefGetter_Singleton.Overall);
                if (this.RefGetter_Singleton.Specific != null)
                {
                    obj.RefGetter_Singleton.Specific = this.RefGetter_Singleton.Specific.Translate(eval);
                }
            }
            if (this.RefSetter != null)
            {
                obj.RefSetter = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefSetter.Overall = eval(this.RefSetter.Overall);
                if (this.RefSetter.Specific != null)
                {
                    obj.RefSetter.Specific = this.RefSetter.Specific.Translate(eval);
                }
            }
            if (this.RefSetter_NotNull != null)
            {
                obj.RefSetter_NotNull = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefSetter_NotNull.Overall = eval(this.RefSetter_NotNull.Overall);
                if (this.RefSetter_NotNull.Specific != null)
                {
                    obj.RefSetter_NotNull.Specific = this.RefSetter_NotNull.Specific.Translate(eval);
                }
            }
            if (this.RefSetter_Singleton != null)
            {
                obj.RefSetter_Singleton = new MaskItem<R, ObjectToRef_Mask<R>>();
                obj.RefSetter_Singleton.Overall = eval(this.RefSetter_Singleton.Overall);
                if (this.RefSetter_Singleton.Specific != null)
                {
                    obj.RefSetter_Singleton.Specific = this.RefSetter_Singleton.Specific.Translate(eval);
                }
            }
            if (List != null)
            {
                obj.List = new MaskItem<R, IEnumerable<R>>();
                obj.List.Overall = eval(this.List.Overall);
                if (List.Specific != null)
                {
                    List<R> l = new List<R>();
                    obj.List.Specific = l;
                    foreach (var item in List.Specific)
                    {
                        R mask = default(R);
                        mask = eval(item);
                        l.Add(mask);
                    }
                }
            }
            if (RefList != null)
            {
                obj.RefList = new MaskItem<R, IEnumerable<MaskItem<R, ObjectToRef_Mask<R>>>>();
                obj.RefList.Overall = eval(this.RefList.Overall);
                if (RefList.Specific != null)
                {
                    List<MaskItem<R, ObjectToRef_Mask<R>>> l = new List<MaskItem<R, ObjectToRef_Mask<R>>>();
                    obj.RefList.Specific = l;
                    foreach (var item in RefList.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> mask = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ObjectToRef_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
            if (Dict != null)
            {
                obj.Dict = new MaskItem<R, IEnumerable<KeyValuePair<R, R>>>();
                obj.Dict.Overall = eval(this.Dict.Overall);
                if (Dict.Specific != null)
                {
                    List<KeyValuePair<R, R>> l = new List<KeyValuePair<R, R>>();
                    obj.Dict.Specific = l;
                    foreach (var item in Dict.Specific)
                    {
                        R keyVal = eval(item.Key);
                        R valVal = eval(item.Value);
                        l.Add(new KeyValuePair<R, R>(keyVal, valVal));
                    }
                }
            }
            if (RefDict != null)
            {
                obj.RefDict = new MaskItem<R, IEnumerable<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>>>();
                obj.RefDict.Overall = eval(this.RefDict.Overall);
                if (RefDict.Specific != null)
                {
                    List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>> l = new List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>>();
                    obj.RefDict.Specific = l;
                    foreach (var item in RefDict.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> keyVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Key != null)
                        {
                            keyVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            keyVal.Overall = eval(item.Key.Overall);
                            if (item.Key.Specific != null)
                            {
                                keyVal.Specific = item.Key.Specific.Translate(eval);
                            }
                        }
                        MaskItem<R, ObjectToRef_Mask<R>> valVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Value != null)
                        {
                            valVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            valVal.Overall = eval(item.Value.Overall);
                            if (item.Value.Specific != null)
                            {
                                valVal.Specific = item.Value.Specific.Translate(eval);
                            }
                        }
                        l.Add(new KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, MaskItem<R, ObjectToRef_Mask<R>>>(keyVal, valVal));
                    }
                }
            }
            if (KeyRefDict != null)
            {
                obj.KeyRefDict = new MaskItem<R, IEnumerable<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>>>();
                obj.KeyRefDict.Overall = eval(this.KeyRefDict.Overall);
                if (KeyRefDict.Specific != null)
                {
                    List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>> l = new List<KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>>();
                    obj.KeyRefDict.Specific = l;
                    foreach (var item in KeyRefDict.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> keyVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Key != null)
                        {
                            keyVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            keyVal.Overall = eval(item.Key.Overall);
                            if (item.Key.Specific != null)
                            {
                                keyVal.Specific = item.Key.Specific.Translate(eval);
                            }
                        }
                        R valVal = eval(item.Value);
                        l.Add(new KeyValuePair<MaskItem<R, ObjectToRef_Mask<R>>, R>(keyVal, valVal));
                    }
                }
            }
            if (ValRefDict != null)
            {
                obj.ValRefDict = new MaskItem<R, IEnumerable<KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>>>();
                obj.ValRefDict.Overall = eval(this.ValRefDict.Overall);
                if (ValRefDict.Specific != null)
                {
                    List<KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>> l = new List<KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>>();
                    obj.ValRefDict.Specific = l;
                    foreach (var item in ValRefDict.Specific)
                    {
                        R keyVal = eval(item.Key);
                        MaskItem<R, ObjectToRef_Mask<R>> valVal = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item.Value != null)
                        {
                            valVal = new MaskItem<R, ObjectToRef_Mask<R>>();
                            valVal.Overall = eval(item.Value.Overall);
                            if (item.Value.Specific != null)
                            {
                                valVal.Specific = item.Value.Specific.Translate(eval);
                            }
                        }
                        l.Add(new KeyValuePair<R, MaskItem<R, ObjectToRef_Mask<R>>>(keyVal, valVal));
                    }
                }
            }
            if (DictKeyedValue != null)
            {
                obj.DictKeyedValue = new MaskItem<R, IEnumerable<MaskItem<R, ObjectToRef_Mask<R>>>>();
                obj.DictKeyedValue.Overall = eval(this.DictKeyedValue.Overall);
                if (DictKeyedValue.Specific != null)
                {
                    List<MaskItem<R, ObjectToRef_Mask<R>>> l = new List<MaskItem<R, ObjectToRef_Mask<R>>>();
                    obj.DictKeyedValue.Specific = l;
                    foreach (var item in DictKeyedValue.Specific)
                    {
                        MaskItem<R, ObjectToRef_Mask<R>> mask = default(MaskItem<R, ObjectToRef_Mask<R>>);
                        if (item != null)
                        {
                            mask = new MaskItem<R, ObjectToRef_Mask<R>>();
                            mask.Overall = eval(item.Overall);
                            if (item.Specific != null)
                            {
                                mask.Specific = item.Specific.Translate(eval);
                            }
                        }
                        l.Add(mask);
                    }
                }
            }
        }
        #endregion

        #region Clear Enumerables
        public void ClearEnumerables()
        {
            this.List.Specific = null;
            this.RefList.Specific = null;
            this.Dict.Specific = null;
            this.RefDict.Specific = null;
            this.KeyRefDict.Specific = null;
            this.ValRefDict.Specific = null;
            this.DictKeyedValue.Specific = null;
        }
        #endregion

        #region To String
        public override string ToString()
        {
            return ToString(printMask: null);
        }

        public string ToString(TestObject_Mask<bool> printMask = null)
        {
            var fg = new FileGeneration();
            ToString(fg, printMask);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg, TestObject_Mask<bool> printMask = null)
        {
            fg.AppendLine($"{nameof(TestObject_Mask<T>)} =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (printMask?.ByteArray ?? true)
                {
                    fg.AppendLine($"ByteArray => {ByteArray}");
                }
                if (printMask?.ByteArrayNull ?? true)
                {
                    fg.AppendLine($"ByteArrayNull => {ByteArrayNull}");
                }
                if (printMask?.ByteArrayNotNull ?? true)
                {
                    fg.AppendLine($"ByteArrayNotNull => {ByteArrayNotNull}");
                }
                if (printMask?.ByteArraySingleton ?? true)
                {
                    fg.AppendLine($"ByteArraySingleton => {ByteArraySingleton}");
                }
                if (printMask?.BoolN ?? true)
                {
                    fg.AppendLine($"BoolN => {BoolN}");
                }
                if (printMask?.Bool ?? true)
                {
                    fg.AppendLine($"Bool => {Bool}");
                }
                if (printMask?.CharN ?? true)
                {
                    fg.AppendLine($"CharN => {CharN}");
                }
                if (printMask?.Char ?? true)
                {
                    fg.AppendLine($"Char => {Char}");
                }
                if (printMask?.DateTimeNull ?? true)
                {
                    fg.AppendLine($"DateTimeNull => {DateTimeNull}");
                }
                if (printMask?.DateTime ?? true)
                {
                    fg.AppendLine($"DateTime => {DateTime}");
                }
                if (printMask?.DoubleN ?? true)
                {
                    fg.AppendLine($"DoubleN => {DoubleN}");
                }
                if (printMask?.DoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"DoubleN_Ranged => {DoubleN_Ranged}");
                }
                if (printMask?.Double ?? true)
                {
                    fg.AppendLine($"Double => {Double}");
                }
                if (printMask?.Double_Ranged ?? true)
                {
                    fg.AppendLine($"Double_Ranged => {Double_Ranged}");
                }
                if (printMask?.FloatN ?? true)
                {
                    fg.AppendLine($"FloatN => {FloatN}");
                }
                if (printMask?.FloatN_Ranged ?? true)
                {
                    fg.AppendLine($"FloatN_Ranged => {FloatN_Ranged}");
                }
                if (printMask?.Float ?? true)
                {
                    fg.AppendLine($"Float => {Float}");
                }
                if (printMask?.Float_Ranged ?? true)
                {
                    fg.AppendLine($"Float_Ranged => {Float_Ranged}");
                }
                if (printMask?.Int16N ?? true)
                {
                    fg.AppendLine($"Int16N => {Int16N}");
                }
                if (printMask?.Int16N_Ranged ?? true)
                {
                    fg.AppendLine($"Int16N_Ranged => {Int16N_Ranged}");
                }
                if (printMask?.Int16 ?? true)
                {
                    fg.AppendLine($"Int16 => {Int16}");
                }
                if (printMask?.Int16_Ranged ?? true)
                {
                    fg.AppendLine($"Int16_Ranged => {Int16_Ranged}");
                }
                if (printMask?.Int32N ?? true)
                {
                    fg.AppendLine($"Int32N => {Int32N}");
                }
                if (printMask?.Int32N_Ranged ?? true)
                {
                    fg.AppendLine($"Int32N_Ranged => {Int32N_Ranged}");
                }
                if (printMask?.Int32 ?? true)
                {
                    fg.AppendLine($"Int32 => {Int32}");
                }
                if (printMask?.Int32_Ranged ?? true)
                {
                    fg.AppendLine($"Int32_Ranged => {Int32_Ranged}");
                }
                if (printMask?.Int64N ?? true)
                {
                    fg.AppendLine($"Int64N => {Int64N}");
                }
                if (printMask?.Int64N_Ranged ?? true)
                {
                    fg.AppendLine($"Int64N_Ranged => {Int64N_Ranged}");
                }
                if (printMask?.Int64 ?? true)
                {
                    fg.AppendLine($"Int64 => {Int64}");
                }
                if (printMask?.Int64_Ranged ?? true)
                {
                    fg.AppendLine($"Int64_Ranged => {Int64_Ranged}");
                }
                if (printMask?.Int8N ?? true)
                {
                    fg.AppendLine($"Int8N => {Int8N}");
                }
                if (printMask?.Int8N_Ranged ?? true)
                {
                    fg.AppendLine($"Int8N_Ranged => {Int8N_Ranged}");
                }
                if (printMask?.Int8 ?? true)
                {
                    fg.AppendLine($"Int8 => {Int8}");
                }
                if (printMask?.Int8_Ranged ?? true)
                {
                    fg.AppendLine($"Int8_Ranged => {Int8_Ranged}");
                }
                if (printMask?.Unsafe ?? true)
                {
                    fg.AppendLine($"Unsafe => {Unsafe}");
                }
                if (printMask?.UnsafeLoqui ?? true)
                {
                    fg.AppendLine($"UnsafeLoqui => {UnsafeLoqui}");
                }
                if (printMask?.UnsafeNull ?? true)
                {
                    fg.AppendLine($"UnsafeNull => {UnsafeNull}");
                }
                if (printMask?.P2IntN ?? true)
                {
                    fg.AppendLine($"P2IntN => {P2IntN}");
                }
                if (printMask?.P2Int ?? true)
                {
                    fg.AppendLine($"P2Int => {P2Int}");
                }
                if (printMask?.P3DoubleN ?? true)
                {
                    fg.AppendLine($"P3DoubleN => {P3DoubleN}");
                }
                if (printMask?.P3Double ?? true)
                {
                    fg.AppendLine($"P3Double => {P3Double}");
                }
                if (printMask?.P3IntN ?? true)
                {
                    fg.AppendLine($"P3IntN => {P3IntN}");
                }
                if (printMask?.P3Int ?? true)
                {
                    fg.AppendLine($"P3Int => {P3Int}");
                }
                if (printMask?.PercentN ?? true)
                {
                    fg.AppendLine($"PercentN => {PercentN}");
                }
                if (printMask?.Percent ?? true)
                {
                    fg.AppendLine($"Percent => {Percent}");
                }
                if (printMask?.RangeInt8N ?? true)
                {
                    fg.AppendLine($"RangeInt8N => {RangeInt8N}");
                }
                if (printMask?.RangeInt8 ?? true)
                {
                    fg.AppendLine($"RangeInt8 => {RangeInt8}");
                }
                if (printMask?.RangeInt16N ?? true)
                {
                    fg.AppendLine($"RangeInt16N => {RangeInt16N}");
                }
                if (printMask?.RangeInt16 ?? true)
                {
                    fg.AppendLine($"RangeInt16 => {RangeInt16}");
                }
                if (printMask?.RangeInt32N ?? true)
                {
                    fg.AppendLine($"RangeInt32N => {RangeInt32N}");
                }
                if (printMask?.RangeInt32 ?? true)
                {
                    fg.AppendLine($"RangeInt32 => {RangeInt32}");
                }
                if (printMask?.RangeInt64N ?? true)
                {
                    fg.AppendLine($"RangeInt64N => {RangeInt64N}");
                }
                if (printMask?.RangeInt64 ?? true)
                {
                    fg.AppendLine($"RangeInt64 => {RangeInt64}");
                }
                if (printMask?.RangeUInt8N ?? true)
                {
                    fg.AppendLine($"RangeUInt8N => {RangeUInt8N}");
                }
                if (printMask?.RangeUInt8 ?? true)
                {
                    fg.AppendLine($"RangeUInt8 => {RangeUInt8}");
                }
                if (printMask?.RangeUInt16N ?? true)
                {
                    fg.AppendLine($"RangeUInt16N => {RangeUInt16N}");
                }
                if (printMask?.RangeUInt16 ?? true)
                {
                    fg.AppendLine($"RangeUInt16 => {RangeUInt16}");
                }
                if (printMask?.RangeUInt32N ?? true)
                {
                    fg.AppendLine($"RangeUInt32N => {RangeUInt32N}");
                }
                if (printMask?.RangeUInt32 ?? true)
                {
                    fg.AppendLine($"RangeUInt32 => {RangeUInt32}");
                }
                if (printMask?.RangeUInt64N ?? true)
                {
                    fg.AppendLine($"RangeUInt64N => {RangeUInt64N}");
                }
                if (printMask?.RangeUInt64 ?? true)
                {
                    fg.AppendLine($"RangeUInt64 => {RangeUInt64}");
                }
                if (printMask?.String ?? true)
                {
                    fg.AppendLine($"String => {String}");
                }
                if (printMask?.FilePath ?? true)
                {
                    fg.AppendLine($"FilePath => {FilePath}");
                }
                if (printMask?.FilePathNull ?? true)
                {
                    fg.AppendLine($"FilePathNull => {FilePathNull}");
                }
                if (printMask?.DirectoryPath ?? true)
                {
                    fg.AppendLine($"DirectoryPath => {DirectoryPath}");
                }
                if (printMask?.DirectoryPathNull ?? true)
                {
                    fg.AppendLine($"DirectoryPathNull => {DirectoryPathNull}");
                }
                if (printMask?.UDoubleN ?? true)
                {
                    fg.AppendLine($"UDoubleN => {UDoubleN}");
                }
                if (printMask?.UDoubleN_Ranged ?? true)
                {
                    fg.AppendLine($"UDoubleN_Ranged => {UDoubleN_Ranged}");
                }
                if (printMask?.UDouble ?? true)
                {
                    fg.AppendLine($"UDouble => {UDouble}");
                }
                if (printMask?.UDouble_Ranged ?? true)
                {
                    fg.AppendLine($"UDouble_Ranged => {UDouble_Ranged}");
                }
                if (printMask?.UInt16N ?? true)
                {
                    fg.AppendLine($"UInt16N => {UInt16N}");
                }
                if (printMask?.UInt16N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16N_Ranged => {UInt16N_Ranged}");
                }
                if (printMask?.UInt16 ?? true)
                {
                    fg.AppendLine($"UInt16 => {UInt16}");
                }
                if (printMask?.UInt16_Ranged ?? true)
                {
                    fg.AppendLine($"UInt16_Ranged => {UInt16_Ranged}");
                }
                if (printMask?.UInt32N ?? true)
                {
                    fg.AppendLine($"UInt32N => {UInt32N}");
                }
                if (printMask?.UInt32N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32N_Ranged => {UInt32N_Ranged}");
                }
                if (printMask?.UInt32 ?? true)
                {
                    fg.AppendLine($"UInt32 => {UInt32}");
                }
                if (printMask?.UInt32_Ranged ?? true)
                {
                    fg.AppendLine($"UInt32_Ranged => {UInt32_Ranged}");
                }
                if (printMask?.UInt64N ?? true)
                {
                    fg.AppendLine($"UInt64N => {UInt64N}");
                }
                if (printMask?.UInt64N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64N_Ranged => {UInt64N_Ranged}");
                }
                if (printMask?.UInt64 ?? true)
                {
                    fg.AppendLine($"UInt64 => {UInt64}");
                }
                if (printMask?.UInt64_Ranged ?? true)
                {
                    fg.AppendLine($"UInt64_Ranged => {UInt64_Ranged}");
                }
                if (printMask?.UInt8N ?? true)
                {
                    fg.AppendLine($"UInt8N => {UInt8N}");
                }
                if (printMask?.UInt8N_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8N_Ranged => {UInt8N_Ranged}");
                }
                if (printMask?.UInt8 ?? true)
                {
                    fg.AppendLine($"UInt8 => {UInt8}");
                }
                if (printMask?.UInt8_Ranged ?? true)
                {
                    fg.AppendLine($"UInt8_Ranged => {UInt8_Ranged}");
                }
                if (printMask?.Enum ?? true)
                {
                    fg.AppendLine($"Enum => {Enum}");
                }
                if (printMask?.EnumNull ?? true)
                {
                    fg.AppendLine($"EnumNull => {EnumNull}");
                }
                if (printMask?.WildCard ?? true)
                {
                    fg.AppendLine($"WildCard => {WildCard}");
                }
                if (printMask?.WildCardLoqui ?? true)
                {
                    fg.AppendLine($"WildCardLoqui => {WildCardLoqui}");
                }
                if (printMask?.WildCardNull ?? true)
                {
                    fg.AppendLine($"WildCardNull => {WildCardNull}");
                }
                if (printMask?.Ref?.Overall ?? true)
                {
                    Ref?.ToString(fg);
                }
                if (printMask?.Ref_NotNull?.Overall ?? true)
                {
                    Ref_NotNull?.ToString(fg);
                }
                if (printMask?.Ref_Singleton?.Overall ?? true)
                {
                    Ref_Singleton?.ToString(fg);
                }
                if (printMask?.RefGetter?.Overall ?? true)
                {
                    RefGetter?.ToString(fg);
                }
                if (printMask?.RefGetter_NotNull?.Overall ?? true)
                {
                    RefGetter_NotNull?.ToString(fg);
                }
                if (printMask?.RefGetter_Singleton?.Overall ?? true)
                {
                    RefGetter_Singleton?.ToString(fg);
                }
                if (printMask?.RefSetter?.Overall ?? true)
                {
                    RefSetter?.ToString(fg);
                }
                if (printMask?.RefSetter_NotNull?.Overall ?? true)
                {
                    RefSetter_NotNull?.ToString(fg);
                }
                if (printMask?.RefSetter_Singleton?.Overall ?? true)
                {
                    RefSetter_Singleton?.ToString(fg);
                }
                if (printMask?.List?.Overall ?? true)
                {
                    fg.AppendLine("List =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (List.Overall != null)
                        {
                            fg.AppendLine(List.Overall.ToString());
                        }
                        if (List.Specific != null)
                        {
                            foreach (var subItem in List.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($" => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefList?.Overall ?? true)
                {
                    fg.AppendLine("RefList =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefList.Overall != null)
                        {
                            fg.AppendLine(RefList.Overall.ToString());
                        }
                        if (RefList.Specific != null)
                        {
                            foreach (var subItem in RefList.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    subItem?.ToString(fg);
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.Dict?.Overall ?? true)
                {
                    fg.AppendLine("Dict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (Dict.Overall != null)
                        {
                            fg.AppendLine(Dict.Overall.ToString());
                        }
                        if (Dict.Specific != null)
                        {
                            foreach (var subItem in Dict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Key}");
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Value}");
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.RefDict?.Overall ?? true)
                {
                    fg.AppendLine("RefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (RefDict.Overall != null)
                        {
                            fg.AppendLine(RefDict.Overall.ToString());
                        }
                        if (RefDict.Specific != null)
                        {
                            foreach (var subItem in RefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Key?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Value?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.KeyRefDict?.Overall ?? true)
                {
                    fg.AppendLine("KeyRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (KeyRefDict.Overall != null)
                        {
                            fg.AppendLine(KeyRefDict.Overall.ToString());
                        }
                        if (KeyRefDict.Specific != null)
                        {
                            foreach (var subItem in KeyRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Key?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Value}");
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.ValRefDict?.Overall ?? true)
                {
                    fg.AppendLine("ValRefDict =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (ValRefDict.Overall != null)
                        {
                            fg.AppendLine(ValRefDict.Overall.ToString());
                        }
                        if (ValRefDict.Specific != null)
                        {
                            foreach (var subItem in ValRefDict.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine("Key => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        fg.AppendLine($" => {subItem.Key}");
                                    }
                                    fg.AppendLine("]");
                                    fg.AppendLine("Value => [");
                                    using (new DepthWrapper(fg))
                                    {
                                        subItem.Value?.ToString(fg);
                                    }
                                    fg.AppendLine("]");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
                if (printMask?.DictKeyedValue?.Overall ?? true)
                {
                    fg.AppendLine("DictKeyedValue =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        if (DictKeyedValue.Overall != null)
                        {
                            fg.AppendLine(DictKeyedValue.Overall.ToString());
                        }
                        if (DictKeyedValue.Specific != null)
                        {
                            foreach (var subItem in DictKeyedValue.Specific)
                            {
                                fg.AppendLine("[");
                                using (new DepthWrapper(fg))
                                {
                                    fg.AppendLine($"KeyField => {subItem}");
                                }
                                fg.AppendLine("]");
                            }
                        }
                    }
                    fg.AppendLine("]");
                }
            }
            fg.AppendLine("]");
        }
        #endregion

    }

    public class TestObject_ErrorMask : IErrorMask, IErrorMask<TestObject_ErrorMask>
    {
        #region Members
        public Exception Overall { get; set; }
        private List<string> _warnings;
        public List<string> Warnings
        {
            get
            {
                if (_warnings == null)
                {
                    _warnings = new List<string>();
                }
                return _warnings;
            }
        }
        public Exception ByteArray;
        public Exception ByteArrayNull;
        public Exception ByteArrayNotNull;
        public Exception ByteArraySingleton;
        public Exception BoolN;
        public Exception Bool;
        public Exception CharN;
        public Exception Char;
        public Exception DateTimeNull;
        public Exception DateTime;
        public Exception DoubleN;
        public Exception DoubleN_Ranged;
        public Exception Double;
        public Exception Double_Ranged;
        public Exception FloatN;
        public Exception FloatN_Ranged;
        public Exception Float;
        public Exception Float_Ranged;
        public Exception Int16N;
        public Exception Int16N_Ranged;
        public Exception Int16;
        public Exception Int16_Ranged;
        public Exception Int32N;
        public Exception Int32N_Ranged;
        public Exception Int32;
        public Exception Int32_Ranged;
        public Exception Int64N;
        public Exception Int64N_Ranged;
        public Exception Int64;
        public Exception Int64_Ranged;
        public Exception Int8N;
        public Exception Int8N_Ranged;
        public Exception Int8;
        public Exception Int8_Ranged;
        public object Unsafe;
        public object UnsafeLoqui;
        public object UnsafeNull;
        public Exception P2IntN;
        public Exception P2Int;
        public Exception P3DoubleN;
        public Exception P3Double;
        public Exception P3IntN;
        public Exception P3Int;
        public Exception PercentN;
        public Exception Percent;
        public Exception RangeInt8N;
        public Exception RangeInt8;
        public Exception RangeInt16N;
        public Exception RangeInt16;
        public Exception RangeInt32N;
        public Exception RangeInt32;
        public Exception RangeInt64N;
        public Exception RangeInt64;
        public Exception RangeUInt8N;
        public Exception RangeUInt8;
        public Exception RangeUInt16N;
        public Exception RangeUInt16;
        public Exception RangeUInt32N;
        public Exception RangeUInt32;
        public Exception RangeUInt64N;
        public Exception RangeUInt64;
        public Exception String;
        public Exception FilePath;
        public Exception FilePathNull;
        public Exception DirectoryPath;
        public Exception DirectoryPathNull;
        public Exception UDoubleN;
        public Exception UDoubleN_Ranged;
        public Exception UDouble;
        public Exception UDouble_Ranged;
        public Exception UInt16N;
        public Exception UInt16N_Ranged;
        public Exception UInt16;
        public Exception UInt16_Ranged;
        public Exception UInt32N;
        public Exception UInt32N_Ranged;
        public Exception UInt32;
        public Exception UInt32_Ranged;
        public Exception UInt64N;
        public Exception UInt64N_Ranged;
        public Exception UInt64;
        public Exception UInt64_Ranged;
        public Exception UInt8N;
        public Exception UInt8N_Ranged;
        public Exception UInt8;
        public Exception UInt8_Ranged;
        public Exception Enum;
        public Exception EnumNull;
        public object WildCard;
        public object WildCardLoqui;
        public object WildCardNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> Ref_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefGetter_Singleton;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_NotNull;
        public MaskItem<Exception, ObjectToRef_ErrorMask> RefSetter_Singleton;
        public MaskItem<Exception, IEnumerable<Exception>> List;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> RefList;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>> Dict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>> RefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>> KeyRefDict;
        public MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>> ValRefDict;
        public MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>> DictKeyedValue;
        #endregion

        #region IErrorMask
        public void SetNthException(int index, Exception ex)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                    this.ByteArray = ex;
                    break;
                case TestObject_FieldIndex.ByteArrayNull:
                    this.ByteArrayNull = ex;
                    break;
                case TestObject_FieldIndex.ByteArrayNotNull:
                    this.ByteArrayNotNull = ex;
                    break;
                case TestObject_FieldIndex.ByteArraySingleton:
                    this.ByteArraySingleton = ex;
                    break;
                case TestObject_FieldIndex.BoolN:
                    this.BoolN = ex;
                    break;
                case TestObject_FieldIndex.Bool:
                    this.Bool = ex;
                    break;
                case TestObject_FieldIndex.CharN:
                    this.CharN = ex;
                    break;
                case TestObject_FieldIndex.Char:
                    this.Char = ex;
                    break;
                case TestObject_FieldIndex.DateTimeNull:
                    this.DateTimeNull = ex;
                    break;
                case TestObject_FieldIndex.DateTime:
                    this.DateTime = ex;
                    break;
                case TestObject_FieldIndex.DoubleN:
                    this.DoubleN = ex;
                    break;
                case TestObject_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Double:
                    this.Double = ex;
                    break;
                case TestObject_FieldIndex.Double_Ranged:
                    this.Double_Ranged = ex;
                    break;
                case TestObject_FieldIndex.FloatN:
                    this.FloatN = ex;
                    break;
                case TestObject_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Float:
                    this.Float = ex;
                    break;
                case TestObject_FieldIndex.Float_Ranged:
                    this.Float_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Int16N:
                    this.Int16N = ex;
                    break;
                case TestObject_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Int16:
                    this.Int16 = ex;
                    break;
                case TestObject_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Int32N:
                    this.Int32N = ex;
                    break;
                case TestObject_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Int32:
                    this.Int32 = ex;
                    break;
                case TestObject_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Int64N:
                    this.Int64N = ex;
                    break;
                case TestObject_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Int64:
                    this.Int64 = ex;
                    break;
                case TestObject_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Int8N:
                    this.Int8N = ex;
                    break;
                case TestObject_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Int8:
                    this.Int8 = ex;
                    break;
                case TestObject_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Unsafe:
                    this.Unsafe = ex;
                    break;
                case TestObject_FieldIndex.UnsafeLoqui:
                    this.UnsafeLoqui = ex;
                    break;
                case TestObject_FieldIndex.UnsafeNull:
                    this.UnsafeNull = ex;
                    break;
                case TestObject_FieldIndex.P2IntN:
                    this.P2IntN = ex;
                    break;
                case TestObject_FieldIndex.P2Int:
                    this.P2Int = ex;
                    break;
                case TestObject_FieldIndex.P3DoubleN:
                    this.P3DoubleN = ex;
                    break;
                case TestObject_FieldIndex.P3Double:
                    this.P3Double = ex;
                    break;
                case TestObject_FieldIndex.P3IntN:
                    this.P3IntN = ex;
                    break;
                case TestObject_FieldIndex.P3Int:
                    this.P3Int = ex;
                    break;
                case TestObject_FieldIndex.PercentN:
                    this.PercentN = ex;
                    break;
                case TestObject_FieldIndex.Percent:
                    this.Percent = ex;
                    break;
                case TestObject_FieldIndex.RangeInt8N:
                    this.RangeInt8N = ex;
                    break;
                case TestObject_FieldIndex.RangeInt8:
                    this.RangeInt8 = ex;
                    break;
                case TestObject_FieldIndex.RangeInt16N:
                    this.RangeInt16N = ex;
                    break;
                case TestObject_FieldIndex.RangeInt16:
                    this.RangeInt16 = ex;
                    break;
                case TestObject_FieldIndex.RangeInt32N:
                    this.RangeInt32N = ex;
                    break;
                case TestObject_FieldIndex.RangeInt32:
                    this.RangeInt32 = ex;
                    break;
                case TestObject_FieldIndex.RangeInt64N:
                    this.RangeInt64N = ex;
                    break;
                case TestObject_FieldIndex.RangeInt64:
                    this.RangeInt64 = ex;
                    break;
                case TestObject_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = ex;
                    break;
                case TestObject_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = ex;
                    break;
                case TestObject_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = ex;
                    break;
                case TestObject_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = ex;
                    break;
                case TestObject_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = ex;
                    break;
                case TestObject_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = ex;
                    break;
                case TestObject_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = ex;
                    break;
                case TestObject_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = ex;
                    break;
                case TestObject_FieldIndex.String:
                    this.String = ex;
                    break;
                case TestObject_FieldIndex.FilePath:
                    this.FilePath = ex;
                    break;
                case TestObject_FieldIndex.FilePathNull:
                    this.FilePathNull = ex;
                    break;
                case TestObject_FieldIndex.DirectoryPath:
                    this.DirectoryPath = ex;
                    break;
                case TestObject_FieldIndex.DirectoryPathNull:
                    this.DirectoryPathNull = ex;
                    break;
                case TestObject_FieldIndex.UDoubleN:
                    this.UDoubleN = ex;
                    break;
                case TestObject_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = ex;
                    break;
                case TestObject_FieldIndex.UDouble:
                    this.UDouble = ex;
                    break;
                case TestObject_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = ex;
                    break;
                case TestObject_FieldIndex.UInt16N:
                    this.UInt16N = ex;
                    break;
                case TestObject_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = ex;
                    break;
                case TestObject_FieldIndex.UInt16:
                    this.UInt16 = ex;
                    break;
                case TestObject_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = ex;
                    break;
                case TestObject_FieldIndex.UInt32N:
                    this.UInt32N = ex;
                    break;
                case TestObject_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = ex;
                    break;
                case TestObject_FieldIndex.UInt32:
                    this.UInt32 = ex;
                    break;
                case TestObject_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = ex;
                    break;
                case TestObject_FieldIndex.UInt64N:
                    this.UInt64N = ex;
                    break;
                case TestObject_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = ex;
                    break;
                case TestObject_FieldIndex.UInt64:
                    this.UInt64 = ex;
                    break;
                case TestObject_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = ex;
                    break;
                case TestObject_FieldIndex.UInt8N:
                    this.UInt8N = ex;
                    break;
                case TestObject_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = ex;
                    break;
                case TestObject_FieldIndex.UInt8:
                    this.UInt8 = ex;
                    break;
                case TestObject_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = ex;
                    break;
                case TestObject_FieldIndex.Enum:
                    this.Enum = ex;
                    break;
                case TestObject_FieldIndex.EnumNull:
                    this.EnumNull = ex;
                    break;
                case TestObject_FieldIndex.WildCard:
                    this.WildCard = ex;
                    break;
                case TestObject_FieldIndex.WildCardLoqui:
                    this.WildCardLoqui = ex;
                    break;
                case TestObject_FieldIndex.WildCardNull:
                    this.WildCardNull = ex;
                    break;
                case TestObject_FieldIndex.Ref:
                    this.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_FieldIndex.RefGetter:
                    this.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_FieldIndex.RefSetter:
                    this.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(ex, null);
                    break;
                case TestObject_FieldIndex.List:
                    this.List = new MaskItem<Exception, IEnumerable<Exception>>(ex, null);
                    break;
                case TestObject_FieldIndex.RefList:
                    this.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                case TestObject_FieldIndex.Dict:
                    this.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(ex, null);
                    break;
                case TestObject_FieldIndex.RefDict:
                    this.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_FieldIndex.KeyRefDict:
                    this.KeyRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>(ex, null);
                    break;
                case TestObject_FieldIndex.ValRefDict:
                    this.ValRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(ex, null);
                    break;
                case TestObject_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(ex, null);
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }

        public void SetNthMask(int index, object obj)
        {
            TestObject_FieldIndex enu = (TestObject_FieldIndex)index;
            switch (enu)
            {
                case TestObject_FieldIndex.ByteArray:
                    this.ByteArray = (Exception)obj;
                    break;
                case TestObject_FieldIndex.ByteArrayNull:
                    this.ByteArrayNull = (Exception)obj;
                    break;
                case TestObject_FieldIndex.ByteArrayNotNull:
                    this.ByteArrayNotNull = (Exception)obj;
                    break;
                case TestObject_FieldIndex.ByteArraySingleton:
                    this.ByteArraySingleton = (Exception)obj;
                    break;
                case TestObject_FieldIndex.BoolN:
                    this.BoolN = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Bool:
                    this.Bool = (Exception)obj;
                    break;
                case TestObject_FieldIndex.CharN:
                    this.CharN = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Char:
                    this.Char = (Exception)obj;
                    break;
                case TestObject_FieldIndex.DateTimeNull:
                    this.DateTimeNull = (Exception)obj;
                    break;
                case TestObject_FieldIndex.DateTime:
                    this.DateTime = (Exception)obj;
                    break;
                case TestObject_FieldIndex.DoubleN:
                    this.DoubleN = (Exception)obj;
                    break;
                case TestObject_FieldIndex.DoubleN_Ranged:
                    this.DoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Double:
                    this.Double = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Double_Ranged:
                    this.Double_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.FloatN:
                    this.FloatN = (Exception)obj;
                    break;
                case TestObject_FieldIndex.FloatN_Ranged:
                    this.FloatN_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Float:
                    this.Float = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Float_Ranged:
                    this.Float_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int16N:
                    this.Int16N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int16N_Ranged:
                    this.Int16N_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int16:
                    this.Int16 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int16_Ranged:
                    this.Int16_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int32N:
                    this.Int32N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int32N_Ranged:
                    this.Int32N_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int32:
                    this.Int32 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int32_Ranged:
                    this.Int32_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int64N:
                    this.Int64N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int64N_Ranged:
                    this.Int64N_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int64:
                    this.Int64 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int64_Ranged:
                    this.Int64_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int8N:
                    this.Int8N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int8N_Ranged:
                    this.Int8N_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int8:
                    this.Int8 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Int8_Ranged:
                    this.Int8_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Unsafe:
                    this.Unsafe = obj;
                    break;
                case TestObject_FieldIndex.UnsafeLoqui:
                    this.UnsafeLoqui = obj;
                    break;
                case TestObject_FieldIndex.UnsafeNull:
                    this.UnsafeNull = obj;
                    break;
                case TestObject_FieldIndex.P2IntN:
                    this.P2IntN = (Exception)obj;
                    break;
                case TestObject_FieldIndex.P2Int:
                    this.P2Int = (Exception)obj;
                    break;
                case TestObject_FieldIndex.P3DoubleN:
                    this.P3DoubleN = (Exception)obj;
                    break;
                case TestObject_FieldIndex.P3Double:
                    this.P3Double = (Exception)obj;
                    break;
                case TestObject_FieldIndex.P3IntN:
                    this.P3IntN = (Exception)obj;
                    break;
                case TestObject_FieldIndex.P3Int:
                    this.P3Int = (Exception)obj;
                    break;
                case TestObject_FieldIndex.PercentN:
                    this.PercentN = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Percent:
                    this.Percent = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeInt8N:
                    this.RangeInt8N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeInt8:
                    this.RangeInt8 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeInt16N:
                    this.RangeInt16N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeInt16:
                    this.RangeInt16 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeInt32N:
                    this.RangeInt32N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeInt32:
                    this.RangeInt32 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeInt64N:
                    this.RangeInt64N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeInt64:
                    this.RangeInt64 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt8N:
                    this.RangeUInt8N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt8:
                    this.RangeUInt8 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt16N:
                    this.RangeUInt16N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt16:
                    this.RangeUInt16 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt32N:
                    this.RangeUInt32N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt32:
                    this.RangeUInt32 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt64N:
                    this.RangeUInt64N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.RangeUInt64:
                    this.RangeUInt64 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.String:
                    this.String = (Exception)obj;
                    break;
                case TestObject_FieldIndex.FilePath:
                    this.FilePath = (Exception)obj;
                    break;
                case TestObject_FieldIndex.FilePathNull:
                    this.FilePathNull = (Exception)obj;
                    break;
                case TestObject_FieldIndex.DirectoryPath:
                    this.DirectoryPath = (Exception)obj;
                    break;
                case TestObject_FieldIndex.DirectoryPathNull:
                    this.DirectoryPathNull = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UDoubleN:
                    this.UDoubleN = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UDoubleN_Ranged:
                    this.UDoubleN_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UDouble:
                    this.UDouble = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UDouble_Ranged:
                    this.UDouble_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt16N:
                    this.UInt16N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt16N_Ranged:
                    this.UInt16N_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt16:
                    this.UInt16 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt16_Ranged:
                    this.UInt16_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt32N:
                    this.UInt32N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt32N_Ranged:
                    this.UInt32N_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt32:
                    this.UInt32 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt32_Ranged:
                    this.UInt32_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt64N:
                    this.UInt64N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt64N_Ranged:
                    this.UInt64N_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt64:
                    this.UInt64 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt64_Ranged:
                    this.UInt64_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt8N:
                    this.UInt8N = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt8N_Ranged:
                    this.UInt8N_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt8:
                    this.UInt8 = (Exception)obj;
                    break;
                case TestObject_FieldIndex.UInt8_Ranged:
                    this.UInt8_Ranged = (Exception)obj;
                    break;
                case TestObject_FieldIndex.Enum:
                    this.Enum = (Exception)obj;
                    break;
                case TestObject_FieldIndex.EnumNull:
                    this.EnumNull = (Exception)obj;
                    break;
                case TestObject_FieldIndex.WildCard:
                    this.WildCard = obj;
                    break;
                case TestObject_FieldIndex.WildCardLoqui:
                    this.WildCardLoqui = obj;
                    break;
                case TestObject_FieldIndex.WildCardNull:
                    this.WildCardNull = obj;
                    break;
                case TestObject_FieldIndex.Ref:
                    this.Ref = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_FieldIndex.Ref_NotNull:
                    this.Ref_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_FieldIndex.Ref_Singleton:
                    this.Ref_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_FieldIndex.RefGetter:
                    this.RefGetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_FieldIndex.RefGetter_NotNull:
                    this.RefGetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_FieldIndex.RefGetter_Singleton:
                    this.RefGetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_FieldIndex.RefSetter:
                    this.RefSetter = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_FieldIndex.RefSetter_NotNull:
                    this.RefSetter_NotNull = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_FieldIndex.RefSetter_Singleton:
                    this.RefSetter_Singleton = (MaskItem<Exception, ObjectToRef_ErrorMask>)obj;
                    break;
                case TestObject_FieldIndex.List:
                    this.List = (MaskItem<Exception, IEnumerable<Exception>>)obj;
                    break;
                case TestObject_FieldIndex.RefList:
                    this.RefList = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                case TestObject_FieldIndex.Dict:
                    this.Dict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>)obj;
                    break;
                case TestObject_FieldIndex.RefDict:
                    this.RefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_FieldIndex.KeyRefDict:
                    this.KeyRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>)obj;
                    break;
                case TestObject_FieldIndex.ValRefDict:
                    this.ValRefDict = (MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>)obj;
                    break;
                case TestObject_FieldIndex.DictKeyedValue:
                    this.DictKeyedValue = (MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>)obj;
                    break;
                default:
                    throw new ArgumentException($"Index is out of range: {index}");
            }
        }
        #endregion

        #region To String
        public override string ToString()
        {
            var fg = new FileGeneration();
            ToString(fg);
            return fg.ToString();
        }

        public void ToString(FileGeneration fg)
        {
            fg.AppendLine("TestObject_ErrorMask =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (this.Overall != null)
                {
                    fg.AppendLine("Overall =>");
                    fg.AppendLine("[");
                    using (new DepthWrapper(fg))
                    {
                        fg.AppendLine($"{this.Overall}");
                    }
                    fg.AppendLine("]");
                }
                ToString_FillInternal(fg);
            }
            fg.AppendLine("]");
        }
        protected void ToString_FillInternal(FileGeneration fg)
        {
            fg.AppendLine($"ByteArray => {ByteArray}");
            fg.AppendLine($"ByteArrayNull => {ByteArrayNull}");
            fg.AppendLine($"ByteArrayNotNull => {ByteArrayNotNull}");
            fg.AppendLine($"ByteArraySingleton => {ByteArraySingleton}");
            fg.AppendLine($"BoolN => {BoolN}");
            fg.AppendLine($"Bool => {Bool}");
            fg.AppendLine($"CharN => {CharN}");
            fg.AppendLine($"Char => {Char}");
            fg.AppendLine($"DateTimeNull => {DateTimeNull}");
            fg.AppendLine($"DateTime => {DateTime}");
            fg.AppendLine($"DoubleN => {DoubleN}");
            fg.AppendLine($"DoubleN_Ranged => {DoubleN_Ranged}");
            fg.AppendLine($"Double => {Double}");
            fg.AppendLine($"Double_Ranged => {Double_Ranged}");
            fg.AppendLine($"FloatN => {FloatN}");
            fg.AppendLine($"FloatN_Ranged => {FloatN_Ranged}");
            fg.AppendLine($"Float => {Float}");
            fg.AppendLine($"Float_Ranged => {Float_Ranged}");
            fg.AppendLine($"Int16N => {Int16N}");
            fg.AppendLine($"Int16N_Ranged => {Int16N_Ranged}");
            fg.AppendLine($"Int16 => {Int16}");
            fg.AppendLine($"Int16_Ranged => {Int16_Ranged}");
            fg.AppendLine($"Int32N => {Int32N}");
            fg.AppendLine($"Int32N_Ranged => {Int32N_Ranged}");
            fg.AppendLine($"Int32 => {Int32}");
            fg.AppendLine($"Int32_Ranged => {Int32_Ranged}");
            fg.AppendLine($"Int64N => {Int64N}");
            fg.AppendLine($"Int64N_Ranged => {Int64N_Ranged}");
            fg.AppendLine($"Int64 => {Int64}");
            fg.AppendLine($"Int64_Ranged => {Int64_Ranged}");
            fg.AppendLine($"Int8N => {Int8N}");
            fg.AppendLine($"Int8N_Ranged => {Int8N_Ranged}");
            fg.AppendLine($"Int8 => {Int8}");
            fg.AppendLine($"Int8_Ranged => {Int8_Ranged}");
            fg.AppendLine($"Unsafe => {Unsafe}");
            fg.AppendLine($"UnsafeLoqui => {UnsafeLoqui}");
            fg.AppendLine($"UnsafeNull => {UnsafeNull}");
            fg.AppendLine($"P2IntN => {P2IntN}");
            fg.AppendLine($"P2Int => {P2Int}");
            fg.AppendLine($"P3DoubleN => {P3DoubleN}");
            fg.AppendLine($"P3Double => {P3Double}");
            fg.AppendLine($"P3IntN => {P3IntN}");
            fg.AppendLine($"P3Int => {P3Int}");
            fg.AppendLine($"PercentN => {PercentN}");
            fg.AppendLine($"Percent => {Percent}");
            fg.AppendLine($"RangeInt8N => {RangeInt8N}");
            fg.AppendLine($"RangeInt8 => {RangeInt8}");
            fg.AppendLine($"RangeInt16N => {RangeInt16N}");
            fg.AppendLine($"RangeInt16 => {RangeInt16}");
            fg.AppendLine($"RangeInt32N => {RangeInt32N}");
            fg.AppendLine($"RangeInt32 => {RangeInt32}");
            fg.AppendLine($"RangeInt64N => {RangeInt64N}");
            fg.AppendLine($"RangeInt64 => {RangeInt64}");
            fg.AppendLine($"RangeUInt8N => {RangeUInt8N}");
            fg.AppendLine($"RangeUInt8 => {RangeUInt8}");
            fg.AppendLine($"RangeUInt16N => {RangeUInt16N}");
            fg.AppendLine($"RangeUInt16 => {RangeUInt16}");
            fg.AppendLine($"RangeUInt32N => {RangeUInt32N}");
            fg.AppendLine($"RangeUInt32 => {RangeUInt32}");
            fg.AppendLine($"RangeUInt64N => {RangeUInt64N}");
            fg.AppendLine($"RangeUInt64 => {RangeUInt64}");
            fg.AppendLine($"String => {String}");
            fg.AppendLine($"FilePath => {FilePath}");
            fg.AppendLine($"FilePathNull => {FilePathNull}");
            fg.AppendLine($"DirectoryPath => {DirectoryPath}");
            fg.AppendLine($"DirectoryPathNull => {DirectoryPathNull}");
            fg.AppendLine($"UDoubleN => {UDoubleN}");
            fg.AppendLine($"UDoubleN_Ranged => {UDoubleN_Ranged}");
            fg.AppendLine($"UDouble => {UDouble}");
            fg.AppendLine($"UDouble_Ranged => {UDouble_Ranged}");
            fg.AppendLine($"UInt16N => {UInt16N}");
            fg.AppendLine($"UInt16N_Ranged => {UInt16N_Ranged}");
            fg.AppendLine($"UInt16 => {UInt16}");
            fg.AppendLine($"UInt16_Ranged => {UInt16_Ranged}");
            fg.AppendLine($"UInt32N => {UInt32N}");
            fg.AppendLine($"UInt32N_Ranged => {UInt32N_Ranged}");
            fg.AppendLine($"UInt32 => {UInt32}");
            fg.AppendLine($"UInt32_Ranged => {UInt32_Ranged}");
            fg.AppendLine($"UInt64N => {UInt64N}");
            fg.AppendLine($"UInt64N_Ranged => {UInt64N_Ranged}");
            fg.AppendLine($"UInt64 => {UInt64}");
            fg.AppendLine($"UInt64_Ranged => {UInt64_Ranged}");
            fg.AppendLine($"UInt8N => {UInt8N}");
            fg.AppendLine($"UInt8N_Ranged => {UInt8N_Ranged}");
            fg.AppendLine($"UInt8 => {UInt8}");
            fg.AppendLine($"UInt8_Ranged => {UInt8_Ranged}");
            fg.AppendLine($"Enum => {Enum}");
            fg.AppendLine($"EnumNull => {EnumNull}");
            fg.AppendLine($"WildCard => {WildCard}");
            fg.AppendLine($"WildCardLoqui => {WildCardLoqui}");
            fg.AppendLine($"WildCardNull => {WildCardNull}");
            Ref?.ToString(fg);
            Ref_NotNull?.ToString(fg);
            Ref_Singleton?.ToString(fg);
            RefGetter?.ToString(fg);
            RefGetter_NotNull?.ToString(fg);
            RefGetter_Singleton?.ToString(fg);
            RefSetter?.ToString(fg);
            RefSetter_NotNull?.ToString(fg);
            RefSetter_Singleton?.ToString(fg);
            fg.AppendLine("List =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (List.Overall != null)
                {
                    fg.AppendLine(List.Overall.ToString());
                }
                if (List.Specific != null)
                {
                    foreach (var subItem in List.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($" => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("RefList =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (RefList.Overall != null)
                {
                    fg.AppendLine(RefList.Overall.ToString());
                }
                if (RefList.Specific != null)
                {
                    foreach (var subItem in RefList.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            subItem?.ToString(fg);
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("Dict =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (Dict.Overall != null)
                {
                    fg.AppendLine(Dict.Overall.ToString());
                }
                if (Dict.Specific != null)
                {
                    foreach (var subItem in Dict.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("Key => [");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem.Key}");
                            }
                            fg.AppendLine("]");
                            fg.AppendLine("Value => [");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem.Value}");
                            }
                            fg.AppendLine("]");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("RefDict =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (RefDict.Overall != null)
                {
                    fg.AppendLine(RefDict.Overall.ToString());
                }
                if (RefDict.Specific != null)
                {
                    foreach (var subItem in RefDict.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("Key => [");
                            using (new DepthWrapper(fg))
                            {
                                subItem.Key?.ToString(fg);
                            }
                            fg.AppendLine("]");
                            fg.AppendLine("Value => [");
                            using (new DepthWrapper(fg))
                            {
                                subItem.Value?.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("KeyRefDict =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (KeyRefDict.Overall != null)
                {
                    fg.AppendLine(KeyRefDict.Overall.ToString());
                }
                if (KeyRefDict.Specific != null)
                {
                    foreach (var subItem in KeyRefDict.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("Key => [");
                            using (new DepthWrapper(fg))
                            {
                                subItem.Key?.ToString(fg);
                            }
                            fg.AppendLine("]");
                            fg.AppendLine("Value => [");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem.Value}");
                            }
                            fg.AppendLine("]");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("ValRefDict =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (ValRefDict.Overall != null)
                {
                    fg.AppendLine(ValRefDict.Overall.ToString());
                }
                if (ValRefDict.Specific != null)
                {
                    foreach (var subItem in ValRefDict.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine("Key => [");
                            using (new DepthWrapper(fg))
                            {
                                fg.AppendLine($" => {subItem.Key}");
                            }
                            fg.AppendLine("]");
                            fg.AppendLine("Value => [");
                            using (new DepthWrapper(fg))
                            {
                                subItem.Value?.ToString(fg);
                            }
                            fg.AppendLine("]");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
            fg.AppendLine("DictKeyedValue =>");
            fg.AppendLine("[");
            using (new DepthWrapper(fg))
            {
                if (DictKeyedValue.Overall != null)
                {
                    fg.AppendLine(DictKeyedValue.Overall.ToString());
                }
                if (DictKeyedValue.Specific != null)
                {
                    foreach (var subItem in DictKeyedValue.Specific)
                    {
                        fg.AppendLine("[");
                        using (new DepthWrapper(fg))
                        {
                            fg.AppendLine($"KeyField => {subItem}");
                        }
                        fg.AppendLine("]");
                    }
                }
            }
            fg.AppendLine("]");
        }
        #endregion

        #region Combine
        public TestObject_ErrorMask Combine(TestObject_ErrorMask rhs)
        {
            var ret = new TestObject_ErrorMask();
            ret.ByteArray = this.ByteArray.Combine(rhs.ByteArray);
            ret.ByteArrayNull = this.ByteArrayNull.Combine(rhs.ByteArrayNull);
            ret.ByteArrayNotNull = this.ByteArrayNotNull.Combine(rhs.ByteArrayNotNull);
            ret.ByteArraySingleton = this.ByteArraySingleton.Combine(rhs.ByteArraySingleton);
            ret.BoolN = this.BoolN.Combine(rhs.BoolN);
            ret.Bool = this.Bool.Combine(rhs.Bool);
            ret.CharN = this.CharN.Combine(rhs.CharN);
            ret.Char = this.Char.Combine(rhs.Char);
            ret.DateTimeNull = this.DateTimeNull.Combine(rhs.DateTimeNull);
            ret.DateTime = this.DateTime.Combine(rhs.DateTime);
            ret.DoubleN = this.DoubleN.Combine(rhs.DoubleN);
            ret.DoubleN_Ranged = this.DoubleN_Ranged.Combine(rhs.DoubleN_Ranged);
            ret.Double = this.Double.Combine(rhs.Double);
            ret.Double_Ranged = this.Double_Ranged.Combine(rhs.Double_Ranged);
            ret.FloatN = this.FloatN.Combine(rhs.FloatN);
            ret.FloatN_Ranged = this.FloatN_Ranged.Combine(rhs.FloatN_Ranged);
            ret.Float = this.Float.Combine(rhs.Float);
            ret.Float_Ranged = this.Float_Ranged.Combine(rhs.Float_Ranged);
            ret.Int16N = this.Int16N.Combine(rhs.Int16N);
            ret.Int16N_Ranged = this.Int16N_Ranged.Combine(rhs.Int16N_Ranged);
            ret.Int16 = this.Int16.Combine(rhs.Int16);
            ret.Int16_Ranged = this.Int16_Ranged.Combine(rhs.Int16_Ranged);
            ret.Int32N = this.Int32N.Combine(rhs.Int32N);
            ret.Int32N_Ranged = this.Int32N_Ranged.Combine(rhs.Int32N_Ranged);
            ret.Int32 = this.Int32.Combine(rhs.Int32);
            ret.Int32_Ranged = this.Int32_Ranged.Combine(rhs.Int32_Ranged);
            ret.Int64N = this.Int64N.Combine(rhs.Int64N);
            ret.Int64N_Ranged = this.Int64N_Ranged.Combine(rhs.Int64N_Ranged);
            ret.Int64 = this.Int64.Combine(rhs.Int64);
            ret.Int64_Ranged = this.Int64_Ranged.Combine(rhs.Int64_Ranged);
            ret.Int8N = this.Int8N.Combine(rhs.Int8N);
            ret.Int8N_Ranged = this.Int8N_Ranged.Combine(rhs.Int8N_Ranged);
            ret.Int8 = this.Int8.Combine(rhs.Int8);
            ret.Int8_Ranged = this.Int8_Ranged.Combine(rhs.Int8_Ranged);
            ret.Unsafe = this.Unsafe ?? rhs.Unsafe;
            ret.UnsafeLoqui = this.UnsafeLoqui ?? rhs.UnsafeLoqui;
            ret.UnsafeNull = this.UnsafeNull ?? rhs.UnsafeNull;
            ret.P2IntN = this.P2IntN.Combine(rhs.P2IntN);
            ret.P2Int = this.P2Int.Combine(rhs.P2Int);
            ret.P3DoubleN = this.P3DoubleN.Combine(rhs.P3DoubleN);
            ret.P3Double = this.P3Double.Combine(rhs.P3Double);
            ret.P3IntN = this.P3IntN.Combine(rhs.P3IntN);
            ret.P3Int = this.P3Int.Combine(rhs.P3Int);
            ret.PercentN = this.PercentN.Combine(rhs.PercentN);
            ret.Percent = this.Percent.Combine(rhs.Percent);
            ret.RangeInt8N = this.RangeInt8N.Combine(rhs.RangeInt8N);
            ret.RangeInt8 = this.RangeInt8.Combine(rhs.RangeInt8);
            ret.RangeInt16N = this.RangeInt16N.Combine(rhs.RangeInt16N);
            ret.RangeInt16 = this.RangeInt16.Combine(rhs.RangeInt16);
            ret.RangeInt32N = this.RangeInt32N.Combine(rhs.RangeInt32N);
            ret.RangeInt32 = this.RangeInt32.Combine(rhs.RangeInt32);
            ret.RangeInt64N = this.RangeInt64N.Combine(rhs.RangeInt64N);
            ret.RangeInt64 = this.RangeInt64.Combine(rhs.RangeInt64);
            ret.RangeUInt8N = this.RangeUInt8N.Combine(rhs.RangeUInt8N);
            ret.RangeUInt8 = this.RangeUInt8.Combine(rhs.RangeUInt8);
            ret.RangeUInt16N = this.RangeUInt16N.Combine(rhs.RangeUInt16N);
            ret.RangeUInt16 = this.RangeUInt16.Combine(rhs.RangeUInt16);
            ret.RangeUInt32N = this.RangeUInt32N.Combine(rhs.RangeUInt32N);
            ret.RangeUInt32 = this.RangeUInt32.Combine(rhs.RangeUInt32);
            ret.RangeUInt64N = this.RangeUInt64N.Combine(rhs.RangeUInt64N);
            ret.RangeUInt64 = this.RangeUInt64.Combine(rhs.RangeUInt64);
            ret.String = this.String.Combine(rhs.String);
            ret.FilePath = this.FilePath.Combine(rhs.FilePath);
            ret.FilePathNull = this.FilePathNull.Combine(rhs.FilePathNull);
            ret.DirectoryPath = this.DirectoryPath.Combine(rhs.DirectoryPath);
            ret.DirectoryPathNull = this.DirectoryPathNull.Combine(rhs.DirectoryPathNull);
            ret.UDoubleN = this.UDoubleN.Combine(rhs.UDoubleN);
            ret.UDoubleN_Ranged = this.UDoubleN_Ranged.Combine(rhs.UDoubleN_Ranged);
            ret.UDouble = this.UDouble.Combine(rhs.UDouble);
            ret.UDouble_Ranged = this.UDouble_Ranged.Combine(rhs.UDouble_Ranged);
            ret.UInt16N = this.UInt16N.Combine(rhs.UInt16N);
            ret.UInt16N_Ranged = this.UInt16N_Ranged.Combine(rhs.UInt16N_Ranged);
            ret.UInt16 = this.UInt16.Combine(rhs.UInt16);
            ret.UInt16_Ranged = this.UInt16_Ranged.Combine(rhs.UInt16_Ranged);
            ret.UInt32N = this.UInt32N.Combine(rhs.UInt32N);
            ret.UInt32N_Ranged = this.UInt32N_Ranged.Combine(rhs.UInt32N_Ranged);
            ret.UInt32 = this.UInt32.Combine(rhs.UInt32);
            ret.UInt32_Ranged = this.UInt32_Ranged.Combine(rhs.UInt32_Ranged);
            ret.UInt64N = this.UInt64N.Combine(rhs.UInt64N);
            ret.UInt64N_Ranged = this.UInt64N_Ranged.Combine(rhs.UInt64N_Ranged);
            ret.UInt64 = this.UInt64.Combine(rhs.UInt64);
            ret.UInt64_Ranged = this.UInt64_Ranged.Combine(rhs.UInt64_Ranged);
            ret.UInt8N = this.UInt8N.Combine(rhs.UInt8N);
            ret.UInt8N_Ranged = this.UInt8N_Ranged.Combine(rhs.UInt8N_Ranged);
            ret.UInt8 = this.UInt8.Combine(rhs.UInt8);
            ret.UInt8_Ranged = this.UInt8_Ranged.Combine(rhs.UInt8_Ranged);
            ret.Enum = this.Enum.Combine(rhs.Enum);
            ret.EnumNull = this.EnumNull.Combine(rhs.EnumNull);
            ret.WildCard = this.WildCard ?? rhs.WildCard;
            ret.WildCardLoqui = this.WildCardLoqui ?? rhs.WildCardLoqui;
            ret.WildCardNull = this.WildCardNull ?? rhs.WildCardNull;
            ret.Ref = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.Ref.Overall.Combine(rhs.Ref.Overall), ((IErrorMask<ObjectToRef_ErrorMask>)this.Ref.Specific).Combine(rhs.Ref.Specific));
            ret.Ref_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.Ref_NotNull.Overall.Combine(rhs.Ref_NotNull.Overall), ((IErrorMask<ObjectToRef_ErrorMask>)this.Ref_NotNull.Specific).Combine(rhs.Ref_NotNull.Specific));
            ret.Ref_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.Ref_Singleton.Overall.Combine(rhs.Ref_Singleton.Overall), ((IErrorMask<ObjectToRef_ErrorMask>)this.Ref_Singleton.Specific).Combine(rhs.Ref_Singleton.Specific));
            ret.RefGetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefGetter.Overall.Combine(rhs.RefGetter.Overall), ((IErrorMask<ObjectToRef_ErrorMask>)this.RefGetter.Specific).Combine(rhs.RefGetter.Specific));
            ret.RefGetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefGetter_NotNull.Overall.Combine(rhs.RefGetter_NotNull.Overall), ((IErrorMask<ObjectToRef_ErrorMask>)this.RefGetter_NotNull.Specific).Combine(rhs.RefGetter_NotNull.Specific));
            ret.RefGetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefGetter_Singleton.Overall.Combine(rhs.RefGetter_Singleton.Overall), ((IErrorMask<ObjectToRef_ErrorMask>)this.RefGetter_Singleton.Specific).Combine(rhs.RefGetter_Singleton.Specific));
            ret.RefSetter = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefSetter.Overall.Combine(rhs.RefSetter.Overall), ((IErrorMask<ObjectToRef_ErrorMask>)this.RefSetter.Specific).Combine(rhs.RefSetter.Specific));
            ret.RefSetter_NotNull = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefSetter_NotNull.Overall.Combine(rhs.RefSetter_NotNull.Overall), ((IErrorMask<ObjectToRef_ErrorMask>)this.RefSetter_NotNull.Specific).Combine(rhs.RefSetter_NotNull.Specific));
            ret.RefSetter_Singleton = new MaskItem<Exception, ObjectToRef_ErrorMask>(this.RefSetter_Singleton.Overall.Combine(rhs.RefSetter_Singleton.Overall), ((IErrorMask<ObjectToRef_ErrorMask>)this.RefSetter_Singleton.Specific).Combine(rhs.RefSetter_Singleton.Specific));
            ret.List = new MaskItem<Exception, IEnumerable<Exception>>(this.List.Overall.Combine(rhs.List.Overall), new List<Exception>(this.List.Specific.And(rhs.List.Specific)));
            ret.RefList = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.RefList.Overall.Combine(rhs.RefList.Overall), new List<MaskItem<Exception, ObjectToRef_ErrorMask>>(this.RefList.Specific.And(rhs.RefList.Specific)));
            ret.Dict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, Exception>>>(this.Dict.Overall.Combine(rhs.Dict.Overall), new List<KeyValuePair<Exception, Exception>>(this.Dict.Specific.And(rhs.Dict.Specific)));
            ret.RefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(this.RefDict.Overall.Combine(rhs.RefDict.Overall), new List<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.RefDict.Specific.And(rhs.RefDict.Specific)));
            ret.KeyRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>>(this.KeyRefDict.Overall.Combine(rhs.KeyRefDict.Overall), new List<KeyValuePair<MaskItem<Exception, ObjectToRef_ErrorMask>, Exception>>(this.KeyRefDict.Specific.And(rhs.KeyRefDict.Specific)));
            ret.ValRefDict = new MaskItem<Exception, IEnumerable<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>>(this.ValRefDict.Overall.Combine(rhs.ValRefDict.Overall), new List<KeyValuePair<Exception, MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.ValRefDict.Specific.And(rhs.ValRefDict.Specific)));
            ret.DictKeyedValue = new MaskItem<Exception, IEnumerable<MaskItem<Exception, ObjectToRef_ErrorMask>>>(this.DictKeyedValue.Overall.Combine(rhs.DictKeyedValue.Overall), new List<MaskItem<Exception, ObjectToRef_ErrorMask>>(this.DictKeyedValue.Specific.And(rhs.DictKeyedValue.Specific)));
            return ret;
        }
        public static TestObject_ErrorMask Combine(TestObject_ErrorMask lhs, TestObject_ErrorMask rhs)
        {
            if (lhs != null && rhs != null) return lhs.Combine(rhs);
            return lhs ?? rhs;
        }
        #endregion

    }
    public class TestObject_CopyMask
    {
        #region Members
        public bool ByteArray;
        public bool ByteArrayNull;
        public bool ByteArrayNotNull;
        public bool ByteArraySingleton;
        public bool BoolN;
        public bool Bool;
        public bool CharN;
        public bool Char;
        public bool DateTimeNull;
        public bool DateTime;
        public bool DoubleN;
        public bool DoubleN_Ranged;
        public bool Double;
        public bool Double_Ranged;
        public bool FloatN;
        public bool FloatN_Ranged;
        public bool Float;
        public bool Float_Ranged;
        public bool Int16N;
        public bool Int16N_Ranged;
        public bool Int16;
        public bool Int16_Ranged;
        public bool Int32N;
        public bool Int32N_Ranged;
        public bool Int32;
        public bool Int32_Ranged;
        public bool Int64N;
        public bool Int64N_Ranged;
        public bool Int64;
        public bool Int64_Ranged;
        public bool Int8N;
        public bool Int8N_Ranged;
        public bool Int8;
        public bool Int8_Ranged;
        public bool Unsafe;
        public bool UnsafeLoqui;
        public bool UnsafeNull;
        public bool P2IntN;
        public bool P2Int;
        public bool P3DoubleN;
        public bool P3Double;
        public bool P3IntN;
        public bool P3Int;
        public bool PercentN;
        public bool Percent;
        public bool RangeInt8N;
        public bool RangeInt8;
        public bool RangeInt16N;
        public bool RangeInt16;
        public bool RangeInt32N;
        public bool RangeInt32;
        public bool RangeInt64N;
        public bool RangeInt64;
        public bool RangeUInt8N;
        public bool RangeUInt8;
        public bool RangeUInt16N;
        public bool RangeUInt16;
        public bool RangeUInt32N;
        public bool RangeUInt32;
        public bool RangeUInt64N;
        public bool RangeUInt64;
        public bool String;
        public bool FilePath;
        public bool FilePathNull;
        public bool DirectoryPath;
        public bool DirectoryPathNull;
        public bool UDoubleN;
        public bool UDoubleN_Ranged;
        public bool UDouble;
        public bool UDouble_Ranged;
        public bool UInt16N;
        public bool UInt16N_Ranged;
        public bool UInt16;
        public bool UInt16_Ranged;
        public bool UInt32N;
        public bool UInt32N_Ranged;
        public bool UInt32;
        public bool UInt32_Ranged;
        public bool UInt64N;
        public bool UInt64N_Ranged;
        public bool UInt64;
        public bool UInt64_Ranged;
        public bool UInt8N;
        public bool UInt8N_Ranged;
        public bool UInt8;
        public bool UInt8_Ranged;
        public bool Enum;
        public bool EnumNull;
        public bool WildCard;
        public bool WildCardLoqui;
        public bool WildCardNull;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> Ref_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> Ref_Singleton;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefGetter_NotNull;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefSetter_NotNull;
        public MaskItem<bool, ObjectToRef_CopyMask> RefSetter_Singleton;
        public CopyOption List;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> RefList;
        public bool Dict;
        public MaskItem<bool, KeyValuePair<(RefCopyType Type, ObjectToRef_CopyMask Mask), (RefCopyType Type, ObjectToRef_CopyMask Mask)>> RefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> KeyRefDict;
        public MaskItem<bool, (RefCopyType Type, ObjectToRef_CopyMask Mask)> ValRefDict;
        public MaskItem<CopyOption, ObjectToRef_CopyMask> DictKeyedValue;
        #endregion

    }
    #endregion


    #endregion

}
